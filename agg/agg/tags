!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	e	enum:agg::order_abgr::abgr_e
A	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	e	enum:agg::order_argb::argb_e
A	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	e	enum:agg::order_bgra::bgra_e
A	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	e	enum:agg::order_rgba::rgba_e
ABOVE	gpc/gpc.c	60;"	d	file:
AFX_PURE_API_H__B17A1161_38FE_4F00_8284_B215A497C968__INCLUDED_	examples/win32_api/pure_api/pure_api.h	3;"	d
AFX_STDAFX_H__A9DB83DB_A9FD_11D0_BFD1_444553540000__INCLUDED_	examples/win32_api/pure_api/StdAfx.h	7;"	d
AGGApplication	src/platform/BeOS/agg_platform_support.cpp	/^                    AGGApplication()$/;"	f	class:AGGApplication
AGGApplication	src/platform/BeOS/agg_platform_support.cpp	/^class AGGApplication : public BApplication {$/;"	c	file:
AGGCXXFLAGS	examples/macosx_carbon/Makefile	/^AGGCXXFLAGS = -bind_at_load -O3 -I\/Developer\/Headers\/FlatCarbon$/;"	m
AGGLIBS	examples/macosx_carbon/Makefile	/^AGGLIBS= -lagg -framework Carbon -framework QuickTime$/;"	m
AGGView	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::AGGView(BRect frame,$/;"	f	class:AGGView
AGGView	src/platform/BeOS/agg_platform_support.cpp	/^class AGGView : public BView {$/;"	c	file:
AGGWindow	src/platform/BeOS/agg_platform_support.cpp	/^                    AGGWindow()$/;"	f	class:AGGWindow
AGGWindow	src/platform/BeOS/agg_platform_support.cpp	/^class AGGWindow : public BWindow {$/;"	c	file:
AGG_ACCURATE_TIME	examples/image_filters.cpp	40;"	d	file:
AGG_ALPHA_MASK_U8_INCLUDED	include/agg_alpha_mask_u8.h	26;"	d
AGG_ARC_INCLUDED	include/agg_arc.h	26;"	d
AGG_ARRAY_INCLUDED	include/agg_array.h	26;"	d
AGG_ARROWHEAD_INCLUDED	include/agg_arrowhead.h	26;"	d
AGG_BASICS_INCLUDED	include/agg_basics.h	26;"	d
AGG_BEZIER_ARC_INCLUDED	include/agg_bezier_arc.h	26;"	d
AGG_BEZIER_CTRL_INCLUDED	include/ctrl/agg_bezier_ctrl.h	26;"	d
AGG_BGR24	examples/blend_color.cpp	24;"	d	file:
AGG_BGR24	examples/bspline.cpp	14;"	d	file:
AGG_BGR24	examples/circles.cpp	15;"	d	file:
AGG_BGR24	examples/gamma_correction.cpp	12;"	d	file:
AGG_BGR24	examples/gamma_ctrl.cpp	13;"	d	file:
AGG_BGR24	examples/gouraud.cpp	18;"	d	file:
AGG_BGR24	examples/gradients.cpp	21;"	d	file:
AGG_BGR24	examples/idea.cpp	13;"	d	file:
AGG_BGR24	examples/image1.cpp	23;"	d	file:
AGG_BGR24	examples/lion_lens.cpp	18;"	d	file:
AGG_BGR24	examples/lion_outline.cpp	18;"	d	file:
AGG_BGR24	examples/mol_view.cpp	17;"	d	file:
AGG_BGR24	examples/multi_clip.cpp	27;"	d	file:
AGG_BGR24	examples/perspective.cpp	20;"	d	file:
AGG_BGR24	examples/rasterizers.cpp	16;"	d	file:
AGG_BGR24	examples/rasterizers2.cpp	22;"	d	file:
AGG_BGR24	examples/scanline_boolean.cpp	24;"	d	file:
AGG_BGR24	examples/trans_curve1.cpp	17;"	d	file:
AGG_BGR24	examples/trans_curve1_ft.cpp	17;"	d	file:
AGG_BGR24	examples/trans_curve2.cpp	17;"	d	file:
AGG_BGR24	examples/trans_curve2_ft.cpp	17;"	d	file:
AGG_BGRA32	examples/alpha_mask2.cpp	33;"	d	file:
AGG_BGRA32	examples/lion.cpp	19;"	d	file:
AGG_BGRA32	examples/pattern_fill.cpp	27;"	d	file:
AGG_BITSET_ITERATOR_INCLUDED	include/agg_bitset_iterator.h	26;"	d
AGG_BLUR_INCLUDED	include/agg_blur.h	37;"	d
AGG_BOUNDING_RECT_INCLUDED	include/agg_bounding_rect.h	26;"	d
AGG_BSPLINE_INCLUDED	include/agg_bspline.h	26;"	d
AGG_CBOX_CTRL_INCLUDED	include/ctrl/agg_cbox_ctrl.h	26;"	d
AGG_CLIP_LIANG_BARSKY_INCLUDED	include/agg_clip_liang_barsky.h	26;"	d
AGG_COLOR_CONV_INCLUDED	include/util/agg_color_conv.h	26;"	d
AGG_COLOR_CONV_RGB16_INCLUDED	include/util/agg_color_conv_rgb16.h	41;"	d
AGG_COLOR_CONV_RGB8_INCLUDED	include/util/agg_color_conv_rgb8.h	42;"	d
AGG_COLOR_GRAY_INCLUDED	include/agg_color_gray.h	38;"	d
AGG_COLOR_RGBA_INCLUDED	include/agg_color_rgba.h	38;"	d
AGG_CONFIG_INCLUDED	include/agg_config.h	2;"	d
AGG_CONV_ADAPTOR_VCGEN_INCLUDED	include/agg_conv_adaptor_vcgen.h	26;"	d
AGG_CONV_ADAPTOR_VPGEN_INCLUDED	include/agg_conv_adaptor_vpgen.h	26;"	d
AGG_CONV_BSPLINE_INCLUDED	include/agg_conv_bspline.h	26;"	d
AGG_CONV_CLIP_POLYGON_INCLUDED	include/agg_conv_clip_polygon.h	36;"	d
AGG_CONV_CLIP_polyline_INCLUDED	include/agg_conv_clip_polyline.h	36;"	d
AGG_CONV_CLOSE_POLYGON_INCLUDED	include/agg_conv_close_polygon.h	26;"	d
AGG_CONV_CONCAT_INCLUDED	include/agg_conv_concat.h	26;"	d
AGG_CONV_CONTOUR_INCLUDED	include/agg_conv_contour.h	26;"	d
AGG_CONV_CURVE_INCLUDED	include/agg_conv_curve.h	26;"	d
AGG_CONV_DASH_INCLUDED	include/agg_conv_dash.h	26;"	d
AGG_CONV_GPC_INCLUDED	include/agg_conv_gpc.h	34;"	d
AGG_CONV_MARKER_ADAPTOR_INCLUDED	include/agg_conv_marker_adaptor.h	26;"	d
AGG_CONV_MARKER_INCLUDED	include/agg_conv_marker.h	26;"	d
AGG_CONV_SEGMENTATOR_INCLUDED	include/agg_conv_segmentator.h	26;"	d
AGG_CONV_SHORTEN_PATH_INCLUDED	include/agg_conv_shorten_path.h	26;"	d
AGG_CONV_SMOOTH_POLY1_INCLUDED	include/agg_conv_smooth_poly1.h	26;"	d
AGG_CONV_STROKE_INCLUDED	include/agg_conv_stroke.h	26;"	d
AGG_CONV_TRANSFORM_INCLUDED	include/agg_conv_transform.h	26;"	d
AGG_CONV_UNCLOSE_POLYGON_INCLUDED	include/agg_conv_unclose_polygon.h	26;"	d
AGG_CTRL_INCLUDED	include/ctrl/agg_ctrl.h	26;"	d
AGG_CURVES_INCLUDED	include/agg_curves.h	26;"	d
AGG_DDA_LINE_INCLUDED	include/agg_dda_line.h	26;"	d
AGG_ELLIPSE_BRESENHAM_INCLUDED	include/agg_ellipse_bresenham.h	26;"	d
AGG_ELLIPSE_INCLUDED	include/agg_ellipse.h	26;"	d
AGG_EMBEDDED_RASTER_FONTS_INCLUDED	include/agg_embedded_raster_fonts.h	26;"	d
AGG_FONT_CACHE_MANAGER_INCLUDED	include/agg_font_cache_manager.h	26;"	d
AGG_FONT_FREETYPE_INCLUDED	font_freetype/agg_font_freetype.h	26;"	d
AGG_FONT_WIN32_TT_INCLUDED	font_win32_tt/agg_font_win32_tt.h	26;"	d
AGG_GAMMA_CTRL_INCLUDED	include/ctrl/agg_gamma_ctrl.h	26;"	d
AGG_GAMMA_FUNCTIONS_INCLUDED	include/agg_gamma_functions.h	26;"	d
AGG_GAMMA_LUT_INCLUDED	include/agg_gamma_lut.h	26;"	d
AGG_GAMMA_SPLINE_INCLUDED	include/ctrl/agg_gamma_spline.h	26;"	d
AGG_GLYPH_RASTER_BIN_INCLUDED	include/agg_glyph_raster_bin.h	26;"	d
AGG_GRADIENT_LUT_INCLUDED	include/agg_gradient_lut.h	26;"	d
AGG_GSV_TEXT_INCLUDED	include/agg_gsv_text.h	26;"	d
AGG_IMAGE_ACCESSORS_INCLUDED	include/agg_image_accessors.h	26;"	d
AGG_IMAGE_FILTERS_INCLUDED	include/agg_image_filters.h	26;"	d
AGG_INLINE	include/agg_basics.h	120;"	d
AGG_INT16	include/agg_basics.h	83;"	d
AGG_INT16U	include/agg_basics.h	87;"	d
AGG_INT32	include/agg_basics.h	91;"	d
AGG_INT32U	include/agg_basics.h	95;"	d
AGG_INT64	include/agg_basics.h	100;"	d
AGG_INT64U	include/agg_basics.h	108;"	d
AGG_INT8	include/agg_basics.h	75;"	d
AGG_INT8U	include/agg_basics.h	79;"	d
AGG_LINE_AA_BASICS_INCLUDED	include/agg_line_aa_basics.h	26;"	d
AGG_MAC_PMAP_INCLUDED	include/platform/mac/agg_mac_pmap.h	27;"	d
AGG_MATH_INCLUDED	include/agg_math.h	29;"	d
AGG_PATH_LENGTH_INCLUDED	include/agg_path_length.h	26;"	d
AGG_PATH_STORAGE_INCLUDED	include/agg_path_storage.h	26;"	d
AGG_PATH_STORAGE_INTEGER_INCLUDED	include/agg_path_storage_integer.h	26;"	d
AGG_PATTERN_FILTERS_RGBA8_INCLUDED	include/agg_pattern_filters_rgba.h	26;"	d
AGG_PIXFMT_AMASK_ADAPTOR_INCLUDED	include/agg_pixfmt_amask_adaptor.h	26;"	d
AGG_PIXFMT_GRAY_INCLUDED	include/agg_pixfmt_gray.h	34;"	d
AGG_PIXFMT_RGBA_INCLUDED	include/agg_pixfmt_rgba.h	34;"	d
AGG_PIXFMT_RGB_INCLUDED	include/agg_pixfmt_rgb.h	34;"	d
AGG_PIXFMT_RGB_PACKED_INCLUDED	include/agg_pixfmt_rgb_packed.h	34;"	d
AGG_PIXFMT_TRANSPOSER_INCLUDED	include/agg_pixfmt_transposer.h	26;"	d
AGG_PLATFORM_SUPPORT_INCLUDED	include/platform/agg_platform_support.h	65;"	d
AGG_POLY_SIZE	examples/idea.cpp	140;"	d	file:
AGG_RASTERIZER_CELLS_AA_INCLUDED	include/agg_rasterizer_cells_aa.h	40;"	d
AGG_RASTERIZER_COMPOUND_AA_INCLUDED	include/agg_rasterizer_compound_aa.h	30;"	d
AGG_RASTERIZER_OUTLINE_AA_INCLUDED	include/agg_rasterizer_outline_aa.h	26;"	d
AGG_RASTERIZER_OUTLINE_INCLUDED	include/agg_rasterizer_outline.h	26;"	d
AGG_RASTERIZER_SCANLINE_AA_INCLUDED	include/agg_rasterizer_scanline_aa.h	40;"	d
AGG_RASTERIZER_SL_CLIP_INCLUDED	include/agg_rasterizer_sl_clip.h	26;"	d
AGG_RBOX_CTRL_INCLUDED	include/ctrl/agg_rbox_ctrl.h	26;"	d
AGG_RENDERER_BASE_INCLUDED	include/agg_renderer_base.h	26;"	d
AGG_RENDERER_MARKERS_INCLUDED	include/agg_renderer_markers.h	26;"	d
AGG_RENDERER_MCLIP_INCLUDED	include/agg_renderer_mclip.h	26;"	d
AGG_RENDERER_OUTLINE_AA_INCLUDED	include/agg_renderer_outline_aa.h	26;"	d
AGG_RENDERER_OUTLINE_IMAGE_INCLUDED	include/agg_renderer_outline_image.h	26;"	d
AGG_RENDERER_PRIMITIVES_INCLUDED	include/agg_renderer_primitives.h	26;"	d
AGG_RENDERER_RASTER_TEXT_INCLUDED	include/agg_renderer_raster_text.h	26;"	d
AGG_RENDERER_SCANLINE_INCLUDED	include/agg_renderer_scanline.h	26;"	d
AGG_RENDERING_BUFFER_DYNAROW_INCLUDED	include/agg_rendering_buffer_dynarow.h	26;"	d
AGG_RENDERING_BUFFER_INCLUDED	include/agg_rendering_buffer.h	26;"	d
AGG_ROUNDED_RECT_INCLUDED	include/agg_rounded_rect.h	26;"	d
AGG_SCALE_CTRL_INCLUDED	include/ctrl/agg_scale_ctrl.h	26;"	d
AGG_SCANLINE_BIN_INCLUDED	include/agg_scanline_bin.h	34;"	d
AGG_SCANLINE_BOOLEAN_ALGEBRA_INCLUDED	include/agg_scanline_boolean_algebra.h	26;"	d
AGG_SCANLINE_P_INCLUDED	include/agg_scanline_p.h	33;"	d
AGG_SCANLINE_STORAGE_AA_INCLUDED	include/agg_scanline_storage_aa.h	34;"	d
AGG_SCANLINE_STORAGE_BIN_INCLUDED	include/agg_scanline_storage_bin.h	35;"	d
AGG_SCANLINE_U_INCLUDED	include/agg_scanline_u.h	34;"	d
AGG_SHORTEN_PATH_INCLUDED	include/agg_shorten_path.h	26;"	d
AGG_SIMUL_EQ_INCLUDED	include/agg_simul_eq.h	26;"	d
AGG_SLIDER_CTRL_INCLUDED	include/ctrl/agg_slider_ctrl.h	26;"	d
AGG_SPAN_ALLOCATOR_INCLUDED	include/agg_span_allocator.h	26;"	d
AGG_SPAN_CONVERTER_INCLUDED	include/agg_span_converter.h	26;"	d
AGG_SPAN_GOURAUD_GRAY_INCLUDED	include/agg_span_gouraud_gray.h	34;"	d
AGG_SPAN_GOURAUD_INCLUDED	include/agg_span_gouraud.h	26;"	d
AGG_SPAN_GOURAUD_RGBA_INCLUDED	include/agg_span_gouraud_rgba.h	34;"	d
AGG_SPAN_GRADIENT_ALPHA_INCLUDED	include/agg_span_gradient_alpha.h	26;"	d
AGG_SPAN_GRADIENT_INCLUDED	include/agg_span_gradient.h	26;"	d
AGG_SPAN_IMAGE_FILTER_GRAY_INCLUDED	include/agg_span_image_filter_gray.h	33;"	d
AGG_SPAN_IMAGE_FILTER_INCLUDED	include/agg_span_image_filter.h	26;"	d
AGG_SPAN_IMAGE_FILTER_RGBA_INCLUDED	include/agg_span_image_filter_rgba.h	33;"	d
AGG_SPAN_IMAGE_FILTER_RGB_INCLUDED	include/agg_span_image_filter_rgb.h	33;"	d
AGG_SPAN_INTERPOLATOR_ADAPTOR_INCLUDED	include/agg_span_interpolator_adaptor.h	26;"	d
AGG_SPAN_INTERPOLATOR_LINEAR_INCLUDED	include/agg_span_interpolator_linear.h	26;"	d
AGG_SPAN_INTERPOLATOR_PERSP_INCLUDED	include/agg_span_interpolator_persp.h	26;"	d
AGG_SPAN_INTERPOLATOR_TRANS_INCLUDED	include/agg_span_interpolator_trans.h	31;"	d
AGG_SPAN_PATTERN_GRAY_INCLUDED	include/agg_span_pattern_gray.h	35;"	d
AGG_SPAN_PATTERN_RGBA_INCLUDED	include/agg_span_pattern_rgba.h	35;"	d
AGG_SPAN_PATTERN_RGB_INCLUDED	include/agg_span_pattern_rgb.h	35;"	d
AGG_SPAN_SOLID_INCLUDED	include/agg_span_solid.h	26;"	d
AGG_SPAN_SUBDIV_ADAPTOR_INCLUDED	include/agg_span_subdiv_adaptor.h	26;"	d
AGG_SPLINE_CTRL_INCLUDED	include/ctrl/agg_spline_ctrl.h	26;"	d
AGG_STROKE_MATH_INCLUDED	include/agg_math_stroke.h	26;"	d
AGG_SVG_EXCEPTION_INCLUDED	examples/svg_viewer/agg_svg_exception.h	21;"	d
AGG_SVG_PARSER_INCLUDED	examples/svg_viewer/agg_svg_parser.h	21;"	d
AGG_SVG_PATH_RENDERER_INCLUDED	examples/svg_viewer/agg_svg_path_renderer.h	20;"	d
AGG_SVG_PATH_TOKENIZER_INCLUDED	examples/svg_viewer/agg_svg_path_tokenizer.h	20;"	d
AGG_TRANS_AFFINE_INCLUDED	include/agg_trans_affine.h	26;"	d
AGG_TRANS_BILINEAR_INCLUDED	include/agg_trans_bilinear.h	26;"	d
AGG_TRANS_DOUBLE_PATH_INCLUDED	include/agg_trans_double_path.h	26;"	d
AGG_TRANS_PERSPECTIVE_INCLUDED	include/agg_trans_perspective.h	26;"	d
AGG_TRANS_SINGLE_PATH_INCLUDED	include/agg_trans_single_path.h	26;"	d
AGG_TRANS_VIEWPORT_INCLUDED	include/agg_trans_viewport.h	31;"	d
AGG_VCGEN_BSPLINE_INCLUDED	include/agg_vcgen_bspline.h	26;"	d
AGG_VCGEN_CONTOUR_INCLUDED	include/agg_vcgen_contour.h	26;"	d
AGG_VCGEN_DASH_INCLUDED	include/agg_vcgen_dash.h	26;"	d
AGG_VCGEN_MARKERS_TERM_INCLUDED	include/agg_vcgen_markers_term.h	26;"	d
AGG_VCGEN_SMOOTH_POLY1_INCLUDED	include/agg_vcgen_smooth_poly1.h	26;"	d
AGG_VCGEN_STROKE_INCLUDED	include/agg_vcgen_stroke.h	26;"	d
AGG_VCGEN_VERTEX_SEQUENCE_INCLUDED	include/agg_vcgen_vertex_sequence.h	26;"	d
AGG_VERTEX_SEQUENCE_INCLUDED	include/agg_vertex_sequence.h	26;"	d
AGG_VPGEN_CLIP_POLYGON_INCLUDED	include/agg_vpgen_clip_polygon.h	26;"	d
AGG_VPGEN_CLIP_POLYLINE_INCLUDED	include/agg_vpgen_clip_polyline.h	26;"	d
AGG_VPGEN_SEGMENTATOR_INCLUDED	include/agg_vpgen_segmentator.h	26;"	d
AGG_WARP_MAGNIFIER_INCLUDED	include/agg_trans_warp_magnifier.h	26;"	d
AGG_WIN32_BMP_INCLUDED	include/platform/win32/agg_win32_bmp.h	26;"	d
About	examples/win32_api/pure_api/pure_api.cpp	/^LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
AttachedToWindow	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::AttachedToWindow()$/;"	f	class:AGGView
B	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	e	enum:agg::order_abgr::abgr_e
B	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	e	enum:agg::order_argb::argb_e
B	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	e	enum:agg::order_bgr::bgr_e
B	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	e	enum:agg::order_bgra::bgra_e
B	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	e	enum:agg::order_rgb::rgb_e
B	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	e	enum:agg::order_rgba::rgba_e
BED	gpc/gpc.c	/^  BED,                              \/* Bottom edge                       *\/$/;"	e	enum:__anon9	file:
BELOW	gpc/gpc.c	61;"	d	file:
BH	gpc/gpc.c	/^  BH,                               \/* Bottom horizontal edge            *\/$/;"	e	enum:__anon10	file:
BUNDLE_HEAD	gpc/gpc.c	/^  BUNDLE_HEAD,                      \/* Bundle head node                  *\/$/;"	e	enum:__anon11	file:
BUNDLE_TAIL	gpc/gpc.c	/^  BUNDLE_TAIL                       \/* Passive bundle tail node          *\/$/;"	e	enum:__anon11	file:
Bitmap	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::Bitmap() const$/;"	f	class:AGGView
C	examples/macosx_carbon/Makefile	/^C = gcc$/;"	m
C	examples/win32_api_dmc/Makefile	/^C    = $(DM)\\dmc.exe -c -o+speed -I..\\..\\gpc $/;"	m
CLIP	gpc/gpc.c	63;"	d	file:
CXX	examples/macosx_carbon/Makefile	/^CXX = g++$/;"	m
CXX	examples/win32_api_dmc/Makefile	/^CXX  = $(DM)\\dmc.exe -c -I..\\..\\include -I..\\..\\gpc -I..\\..\\font_win32_tt $/;"	m
CXXFLAGS	examples/BeOS/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/include \\$/;"	m
CXXFLAGS	examples/X11/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/include \\$/;"	m
CXXFLAGS	examples/macosx_carbon/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/include \\$/;"	m
CXXFLAGS	examples/macosx_sdl/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/aa_demo/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/aa_test/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/alpha_gradient/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/alpha_mask/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/alpha_mask2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/alpha_mask3/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/bezier_div/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/blend_color/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/blur/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/bspline/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/circles/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/component_rendering/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/compositing/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/compositing2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/conv_contour/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/conv_dash_marker/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/conv_stroke/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/distortions/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/flash_rasterizer/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/flash_rasterizer2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/freetype_test/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gamma_correction/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gamma_ctrl/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gamma_tuner/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gouraud/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gouraud_mesh/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gpc_test/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include -I..\/..\/..\/gpc \\$/;"	m
CXXFLAGS	examples/win32_api/gradient_focal/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/gradients/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/graph_test/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/idea/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image1/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_alpha/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_filters/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_filters2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_fltr_graph/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_perspective/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_resample/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/image_transforms/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/line_patterns/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/line_patterns_clip/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/lion/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/lion_lens/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/lion_outline/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/mol_view/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/multi_clip/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/pattern_fill/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/pattern_resample/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/perspective/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/polymorphic_renderer/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/raster_text/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/rasterizer_compound/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/rasterizers/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/rasterizers2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/rounded_rect/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/scanline_boolean/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/scanline_boolean2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/simple_blur/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/trans_curve1/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) \\$/;"	m
CXXFLAGS	examples/win32_api/trans_curve2/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) \\$/;"	m
CXXFLAGS	examples/win32_api/trans_polar/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/..\/..\/include \\$/;"	m
CXXFLAGS	examples/win32_api/truetype_test/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) \\$/;"	m
CXXFLAGS	src/Makefile	/^CXXFLAGS= $(AGGCXXFLAGS) -I..\/include -L.\/$/;"	m
CXXFREETYPEFLAGS	examples/BeOS/Makefile	/^CXXFREETYPEFLAGS= $(AGGCXXFLAGS) -Wall \\$/;"	m
CXXFREETYPEFLAGS	examples/X11/Makefile	/^CXXFREETYPEFLAGS= $(AGGCXXFLAGS) -Wall \\$/;"	m
CXXFREETYPEFLAGS	examples/macosx_sdl/Makefile	/^CXXFREETYPEFLAGS= $(AGGCXXFLAGS) -Wall \\$/;"	m
DM	examples/win32_api_dmc/Makefile	/^DM   = \\dm\\bin$/;"	m
DataTypesBase	src/platform/AmigaOS/agg_platform_support.cpp	/^Library* DataTypesBase = 0;$/;"	v
DetachedFromWindow	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::DetachedFromWindow()$/;"	f	class:AGGView
DoAppQuit	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoAppQuit (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoKeyDown	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoKeyDown (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoKeyUp	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoKeyUp (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoMouseDown	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoMouseDown (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoMouseDragged	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoMouseDragged (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoMouseUp	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoMouseUp (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoPeriodicTask	src/platform/mac/agg_platform_support.cpp	/^pascal void DoPeriodicTask (EventLoopTimerRef theTimer, void* userData)$/;"	f	namespace:agg
DoWindowClose	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoWindowClose (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
DoWindowDrawContent	src/platform/mac/agg_platform_support.cpp	/^pascal OSStatus DoWindowDrawContent (EventHandlerCallRef nextHandler, EventRef theEvent, void* userData)$/;"	f	namespace:agg
Draw	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::Draw(BRect updateRect)$/;"	f	class:AGGView
ELI	gpc/gpc.c	/^  ELI,                              \/* External left intermediate        *\/$/;"	e	enum:__anon9	file:
EMM	gpc/gpc.c	/^  EMM,                              \/* External maximum and minimum      *\/$/;"	e	enum:__anon9	file:
EMN	gpc/gpc.c	/^  EMN,                              \/* External minimum                  *\/$/;"	e	enum:__anon9	file:
EMX	gpc/gpc.c	/^  EMX,                              \/* External maximum                  *\/$/;"	e	enum:__anon9	file:
EQ	gpc/gpc.c	75;"	d	file:
ERI	gpc/gpc.c	/^  ERI,                              \/* External right intermediate       *\/$/;"	e	enum:__anon9	file:
ElapsedTime	src/platform/BeOS/agg_platform_support.cpp	/^    double          ElapsedTime() const$/;"	f	class:agg::platform_specific
FALSE	gpc/gpc.c	53;"	d	file:
FREE	gpc/gpc.c	109;"	d	file:
FUL	gpc/gpc.c	/^  FUL                               \/* Full non-intersection             *\/$/;"	e	enum:__anon9	file:
FWD_MIN	gpc/gpc.c	83;"	d	file:
ForceRedraw	src/platform/BeOS/agg_platform_support.cpp	/^    void            ForceRedraw()$/;"	f	class:agg::platform_specific
ForceRedraw	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::ForceRedraw()$/;"	f	class:AGGView
FrameResized	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::FrameResized(float width, float height)$/;"	f	class:AGGView
G	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	e	enum:agg::order_abgr::abgr_e
G	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	e	enum:agg::order_argb::argb_e
G	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	e	enum:agg::order_bgr::bgr_e
G	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	e	enum:agg::order_bgra::bgra_e
G	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	e	enum:agg::order_rgb::rgb_e
G	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	e	enum:agg::order_rgba::rgba_e
GGO_UNHINTED	font_win32_tt/agg_font_win32_tt.cpp	629;"	d	file:
GPC_DIFF	gpc/gpc.h	/^  GPC_DIFF,                         \/* Difference                        *\/$/;"	e	enum:__anon4
GPC_EPSILON	gpc/gpc.h	47;"	d
GPC_INT	gpc/gpc.h	/^  GPC_INT,                          \/* Intersection                      *\/$/;"	e	enum:__anon4
GPC_UNION	gpc/gpc.h	/^  GPC_UNION                         \/* Union                             *\/$/;"	e	enum:__anon4
GPC_VERSION	gpc/gpc.h	49;"	d
GPC_XOR	gpc/gpc.h	/^  GPC_XOR,                          \/* Exclusive or                      *\/$/;"	e	enum:__anon4
GetGlyphOutlineX	font_win32_tt/agg_font_win32_tt.cpp	31;"	d	file:
GetGlyphOutlineX	font_win32_tt/agg_font_win32_tt.cpp	33;"	d	file:
GetKeyFlags	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::GetKeyFlags()$/;"	f	class:AGGView
GraphicsBase	src/platform/AmigaOS/agg_platform_support.cpp	/^Library* GraphicsBase = 0;$/;"	v
IDC_MYICON	examples/win32_api/pure_api/resource.h	15;"	d
IDC_PURE_API	examples/win32_api/pure_api/resource.h	14;"	d
IDC_STATIC	examples/win32_api/pure_api/resource.h	16;"	d
IDD_ABOUTBOX	examples/win32_api/pure_api/resource.h	7;"	d
IDD_PURE_API_DIALOG	examples/win32_api/pure_api/resource.h	6;"	d
IDI_PURE_API	examples/win32_api/pure_api/resource.h	12;"	d
IDI_SMALL	examples/win32_api/pure_api/resource.h	13;"	d
IDM_ABOUT	examples/win32_api/pure_api/resource.h	9;"	d
IDM_EXIT	examples/win32_api/pure_api/resource.h	10;"	d
IDR_MAINFRAME	examples/win32_api/pure_api/resource.h	5;"	d
IDS_APP_TITLE	examples/win32_api/pure_api/resource.h	8;"	d
IDS_HELLO	examples/win32_api/pure_api/resource.h	11;"	d
IDataTypes	src/platform/AmigaOS/agg_platform_support.cpp	/^DataTypesIFace* IDataTypes = 0;$/;"	v
IGraphics	src/platform/AmigaOS/agg_platform_support.cpp	/^GraphicsIFace* IGraphics = 0;$/;"	v
IIntuition	src/platform/AmigaOS/agg_platform_support.cpp	/^IntuitionIFace* IIntuition = 0;$/;"	v
IKeymap	src/platform/AmigaOS/agg_platform_support.cpp	/^KeymapIFace* IKeymap = 0;$/;"	v
ILI	gpc/gpc.c	/^  ILI,                              \/* Internal left intermediate        *\/$/;"	e	enum:__anon9	file:
IMM	gpc/gpc.c	/^  IMM,                              \/* Internal maximum and minimum      *\/$/;"	e	enum:__anon9	file:
IMN	gpc/gpc.c	/^  IMN,                              \/* Internal minimum                  *\/$/;"	e	enum:__anon9	file:
IMX	gpc/gpc.c	/^  IMX,                              \/* Internal maximum                  *\/$/;"	e	enum:__anon9	file:
INTERACTIVE_POLYGON_INCLUDED	examples/interactive_polygon.h	2;"	d
INVERT_TRISTRIPS	gpc/gpc.c	66;"	d	file:
IP96	src/platform/AmigaOS/agg_platform_support.cpp	/^P96IFace* IP96 = 0;$/;"	v
IRI	gpc/gpc.c	/^  IRI,                              \/* Internal right intermediate       *\/$/;"	e	enum:__anon9	file:
Init	src/platform/BeOS/agg_platform_support.cpp	/^            bool    Init(BRect frame, agg::platform_support* agg, agg::pix_format_e format,$/;"	f	class:AGGWindow
Init	src/platform/BeOS/agg_platform_support.cpp	/^    bool            Init(int width, int height, unsigned flags)$/;"	f	class:agg::platform_specific
Init	src/platform/BeOS/agg_platform_support.cpp	/^    virtual bool    Init(agg::platform_support* agg, int width, int height,$/;"	f	class:AGGApplication
InitInstance	examples/win32_api/pure_api/pure_api.cpp	/^BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)$/;"	f
IntuitionBase	src/platform/AmigaOS/agg_platform_support.cpp	/^Library* IntuitionBase = 0;$/;"	v
KeyDown	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::KeyDown(const char* bytes, int32 numBytes)$/;"	f	class:AGGView
KeymapBase	src/platform/AmigaOS/agg_platform_support.cpp	/^Library* KeymapBase = 0;$/;"	v
LED	gpc/gpc.c	/^  LED,                              \/* Left edge                         *\/$/;"	e	enum:__anon9	file:
LEFT	gpc/gpc.c	57;"	d	file:
LIB	examples/macosx_carbon/Makefile	/^LIB = ar cr -s$/;"	m
LIB	examples/win32_api_dmc/Makefile	/^LIB  = $(DM)\\lib.exe$/;"	m
LIBS	examples/BeOS/Makefile	/^LIBS = $(AGGLIBS) -lroot -lbe -ltranslation$/;"	m
LIBS	examples/X11/Makefile	/^LIBS = $(AGGLIBS) -lm -lX11$/;"	m
LIBS	examples/macosx_carbon/Makefile	/^LIBS = $(AGGLIBS) -lm$/;"	m
LIBS	examples/macosx_sdl/Makefile	/^LIBS = $(AGGLIBS) -lm$/;"	m
LIBS	examples/win32_api/aa_demo/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/aa_test/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/alpha_gradient/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/alpha_mask/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/alpha_mask2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/alpha_mask3/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/bezier_div/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/blend_color/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/blur/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/bspline/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/circles/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/component_rendering/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/compositing/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/compositing2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/conv_contour/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/conv_dash_marker/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/conv_stroke/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/distortions/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/flash_rasterizer/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/flash_rasterizer2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/freetype_test/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gamma_correction/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gamma_ctrl/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gamma_tuner/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gouraud/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gouraud_mesh/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gpc_test/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gradient_focal/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/gradients/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/graph_test/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/idea/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image1/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_alpha/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_filters/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_filters2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_fltr_graph/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_perspective/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_resample/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/image_transforms/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/line_patterns/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/line_patterns_clip/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/lion/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/lion_lens/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/lion_outline/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/mol_view/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/multi_clip/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/pattern_fill/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/pattern_resample/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/perspective/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/polymorphic_renderer/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/raster_text/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/rasterizer_compound/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/rasterizers/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/rasterizers2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/rounded_rect/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/scanline_boolean/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/scanline_boolean2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/simple_blur/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/trans_curve1/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/trans_curve2/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/trans_polar/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LIBS	examples/win32_api/truetype_test/Makefile	/^LIBS = $(AGGLIBS) -lm -lgdi32$/;"	m
LINK	examples/win32_api_dmc/Makefile	/^LINK = $(DM)\\dmc.exe -L$(DM)\\link.exe -L\/SU:WINDOWS gdi32.lib$/;"	m
LastKeyDown	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::LastKeyDown() const$/;"	f	class:AGGView
MALLOC	gpc/gpc.c	104;"	d	file:
MAX_LOADSTRING	examples/win32_api/pure_api/pure_api.cpp	12;"	d	file:
MSC60_fix_ICE	src/agg_curves.cpp	/^    static double MSC60_fix_ICE(double v) { return v; }$/;"	f	namespace:agg
MessageReceived	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::MessageReceived(BMessage* message)$/;"	f	class:AGGView
MouseButtons	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::MouseButtons()$/;"	f	class:AGGView
MouseDown	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::MouseDown(BPoint where)$/;"	f	class:AGGView
MouseMoved	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::MouseMoved(BPoint where, uint32 transit, const BMessage* dragMesage)$/;"	f	class:AGGView
MouseUp	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::MouseUp(BPoint where)$/;"	f	class:AGGView
MyRegisterClass	examples/win32_api/pure_api/pure_api.cpp	/^ATOM MyRegisterClass(HINSTANCE hInstance)$/;"	f
NEXT_INDEX	gpc/gpc.c	78;"	d	file:
NH	gpc/gpc.c	/^  NH,                               \/* No horizontal edge                *\/$/;"	e	enum:__anon10	file:
NOT_FMAX	gpc/gpc.c	86;"	d	file:
NOT_RMAX	gpc/gpc.c	91;"	d	file:
NUL	gpc/gpc.c	/^  NUL,                              \/* Empty non-intersection            *\/$/;"	e	enum:__anon9	file:
N_EDGE	gpc/gpc.c	100;"	d	file:
OBJ	examples/win32_api/aa_demo/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/aa_test/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/alpha_gradient/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/alpha_mask/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/alpha_mask2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/alpha_mask3/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/bezier_div/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/blend_color/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/blur/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/bspline/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/circles/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/component_rendering/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/compositing/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/compositing2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/conv_contour/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/conv_dash_marker/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/conv_stroke/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/distortions/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/flash_rasterizer/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/flash_rasterizer2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/freetype_test/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gamma_correction/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gamma_ctrl/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gamma_tuner/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gouraud/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gouraud_mesh/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gpc_test/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gradient_focal/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/gradients/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/graph_test/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/idea/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image1/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_alpha/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_filters/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_filters2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_fltr_graph/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_perspective/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_resample/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/image_transforms/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/line_patterns/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/line_patterns_clip/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/lion/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/lion_lens/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/lion_outline/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/mol_view/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/multi_clip/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/pattern_fill/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/pattern_resample/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/perspective/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/polymorphic_renderer/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/raster_text/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/rasterizer_compound/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/rasterizers/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/rasterizers2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/rounded_rect/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/scanline_boolean/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/scanline_boolean2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/simple_blur/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/trans_curve1/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/trans_curve2/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/trans_polar/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	examples/win32_api/truetype_test/Makefile	/^OBJ= $(SRC:.cpp=.o)$/;"	m
OBJ	src/Makefile	/^OBJ=$(SRC_CXX:.cpp=.o) $(SRC_C:.c=.o)$/;"	m
OPTIMAL	gpc/gpc.c	80;"	d	file:
OUTNAME	examples/win32_api/aa_demo/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/aa_test/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/alpha_gradient/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/alpha_mask/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/alpha_mask2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/alpha_mask3/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/bezier_div/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/blend_color/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/blur/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/bspline/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/circles/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/component_rendering/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/compositing/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/compositing2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/conv_contour/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/conv_dash_marker/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/conv_stroke/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/distortions/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/flash_rasterizer/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/flash_rasterizer2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/freetype_test/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gamma_correction/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gamma_ctrl/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gamma_tuner/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gouraud/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gouraud_mesh/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gpc_test/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gradient_focal/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/gradients/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/graph_test/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/idea/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image1/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_alpha/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_filters/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_filters2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_fltr_graph/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_perspective/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_resample/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/image_transforms/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/line_patterns/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/line_patterns_clip/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/lion/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/lion_lens/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/lion_outline/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/mol_view/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/multi_clip/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/pattern_fill/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/pattern_resample/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/perspective/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/polymorphic_renderer/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/raster_text/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/rasterizer_compound/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/rasterizers/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/rasterizers2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/rounded_rect/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/scanline_boolean/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/scanline_boolean2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/simple_blur/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/trans_curve1/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/trans_curve2/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/trans_polar/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
OUTNAME	examples/win32_api/truetype_test/Makefile	/^OUTNAME=$(PROGNAME)$/;"	m
P96Base	src/platform/AmigaOS/agg_platform_support.cpp	/^Library* P96Base = 0;$/;"	v
PIXEL_FORMATS_INCLUDED	examples/pixel_formats.h	2;"	d
PLATFORM	examples/BeOS/Makefile	/^PLATFORM=BeOS$/;"	m
PLATFORM	examples/X11/Makefile	/^PLATFORM=X11$/;"	m
PLATFORM	examples/macosx_carbon/Makefile	/^PLATFORM=mac$/;"	m
PLATFORM	examples/macosx_sdl/Makefile	/^PLATFORM=sdl$/;"	m
PLATFORM	examples/win32_api/aa_demo/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/aa_test/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/alpha_gradient/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/alpha_mask/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/alpha_mask2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/alpha_mask3/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/bezier_div/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/blend_color/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/blur/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/bspline/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/circles/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/component_rendering/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/compositing/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/compositing2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/conv_contour/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/conv_dash_marker/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/conv_stroke/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/distortions/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/flash_rasterizer/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/flash_rasterizer2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/freetype_test/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gamma_correction/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gamma_ctrl/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gamma_tuner/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gouraud/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gouraud_mesh/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gpc_test/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gradient_focal/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/gradients/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/graph_test/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/idea/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image1/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_alpha/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_filters/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_filters2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_fltr_graph/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_perspective/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_resample/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/image_transforms/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/line_patterns/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/line_patterns_clip/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/lion/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/lion_lens/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/lion_outline/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/mol_view/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/multi_clip/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/pattern_fill/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/pattern_resample/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/perspective/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/polymorphic_renderer/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/raster_text/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/rasterizer_compound/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/rasterizers/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/rasterizers2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/rounded_rect/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/scanline_boolean/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/scanline_boolean2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/simple_blur/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/trans_curve1/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/trans_curve2/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/trans_polar/Makefile	/^PLATFORM=win32$/;"	m
PLATFORM	examples/win32_api/truetype_test/Makefile	/^PLATFORM=win32$/;"	m
PLATFORMSOURCES	examples/BeOS/Makefile	/^PLATFORMSOURCES=..\/..\/src\/platform\/$(PLATFORM)\/agg_platform_support.o$/;"	m
PLATFORMSOURCES	examples/X11/Makefile	/^PLATFORMSOURCES=..\/..\/src\/platform\/$(PLATFORM)\/agg_platform_support.o$/;"	m
PLATFORMSOURCES	examples/macosx_carbon/Makefile	/^PLATFORMSOURCES=..\/..\/src\/platform\/$(PLATFORM)\/agg_platform_support.o ..\/..\/src\/platform\/$(PLATFORM)\/agg_mac_pmap.o$/;"	m
PLATFORMSOURCES	examples/macosx_sdl/Makefile	/^PLATFORMSOURCES=..\/..\/src\/platform\/$(PLATFORM)\/agg_platform_support.o$/;"	m
POLYGON_CTRL_INCLUDED	include/ctrl/agg_polygon_ctrl.h	26;"	d
PREV_INDEX	gpc/gpc.c	77;"	d	file:
PROGNAME	examples/win32_api/aa_demo/Makefile	/^PROGNAME=aa_demo$/;"	m
PROGNAME	examples/win32_api/aa_test/Makefile	/^PROGNAME=aa_test$/;"	m
PROGNAME	examples/win32_api/alpha_gradient/Makefile	/^PROGNAME=alpha_gradient$/;"	m
PROGNAME	examples/win32_api/alpha_mask/Makefile	/^PROGNAME=alpha_mask$/;"	m
PROGNAME	examples/win32_api/alpha_mask2/Makefile	/^PROGNAME=alpha_mask2$/;"	m
PROGNAME	examples/win32_api/alpha_mask3/Makefile	/^PROGNAME=alpha_mask3$/;"	m
PROGNAME	examples/win32_api/bezier_div/Makefile	/^PROGNAME=bezier_div$/;"	m
PROGNAME	examples/win32_api/blend_color/Makefile	/^PROGNAME=blend_color$/;"	m
PROGNAME	examples/win32_api/blur/Makefile	/^PROGNAME=blur$/;"	m
PROGNAME	examples/win32_api/bspline/Makefile	/^PROGNAME=bspline$/;"	m
PROGNAME	examples/win32_api/circles/Makefile	/^PROGNAME=circles$/;"	m
PROGNAME	examples/win32_api/component_rendering/Makefile	/^PROGNAME=component_rendering$/;"	m
PROGNAME	examples/win32_api/compositing/Makefile	/^PROGNAME=compositing$/;"	m
PROGNAME	examples/win32_api/compositing2/Makefile	/^PROGNAME=compositing$/;"	m
PROGNAME	examples/win32_api/conv_contour/Makefile	/^PROGNAME=conv_contour$/;"	m
PROGNAME	examples/win32_api/conv_dash_marker/Makefile	/^PROGNAME=conv_dash_marker$/;"	m
PROGNAME	examples/win32_api/conv_stroke/Makefile	/^PROGNAME=conv_stroke$/;"	m
PROGNAME	examples/win32_api/distortions/Makefile	/^PROGNAME=distortions$/;"	m
PROGNAME	examples/win32_api/flash_rasterizer/Makefile	/^PROGNAME=flash_rasterizer$/;"	m
PROGNAME	examples/win32_api/flash_rasterizer2/Makefile	/^PROGNAME=flash_rasterizer2$/;"	m
PROGNAME	examples/win32_api/freetype_test/Makefile	/^PROGNAME=scanline_boolean2$/;"	m
PROGNAME	examples/win32_api/gamma_correction/Makefile	/^PROGNAME=gamma_correction$/;"	m
PROGNAME	examples/win32_api/gamma_ctrl/Makefile	/^PROGNAME=gamma_ctrl$/;"	m
PROGNAME	examples/win32_api/gamma_tuner/Makefile	/^PROGNAME=gamma_tuner$/;"	m
PROGNAME	examples/win32_api/gouraud/Makefile	/^PROGNAME=gouraud$/;"	m
PROGNAME	examples/win32_api/gouraud_mesh/Makefile	/^PROGNAME=gouraud_mesh$/;"	m
PROGNAME	examples/win32_api/gpc_test/Makefile	/^PROGNAME=gpc_test$/;"	m
PROGNAME	examples/win32_api/gradient_focal/Makefile	/^PROGNAME=gradient_focal$/;"	m
PROGNAME	examples/win32_api/gradients/Makefile	/^PROGNAME=gradients$/;"	m
PROGNAME	examples/win32_api/graph_test/Makefile	/^PROGNAME=graph_test$/;"	m
PROGNAME	examples/win32_api/idea/Makefile	/^PROGNAME=idea$/;"	m
PROGNAME	examples/win32_api/image1/Makefile	/^PROGNAME=image1$/;"	m
PROGNAME	examples/win32_api/image_alpha/Makefile	/^PROGNAME=image_alpha$/;"	m
PROGNAME	examples/win32_api/image_filters/Makefile	/^PROGNAME=image_filters$/;"	m
PROGNAME	examples/win32_api/image_filters2/Makefile	/^PROGNAME=image_filters2$/;"	m
PROGNAME	examples/win32_api/image_fltr_graph/Makefile	/^PROGNAME=image_fltr_graph$/;"	m
PROGNAME	examples/win32_api/image_perspective/Makefile	/^PROGNAME=image_perspective$/;"	m
PROGNAME	examples/win32_api/image_resample/Makefile	/^PROGNAME=image_resample$/;"	m
PROGNAME	examples/win32_api/image_transforms/Makefile	/^PROGNAME=image_transforms$/;"	m
PROGNAME	examples/win32_api/line_patterns/Makefile	/^PROGNAME=line_patterns$/;"	m
PROGNAME	examples/win32_api/line_patterns_clip/Makefile	/^PROGNAME=line_patterns_clip$/;"	m
PROGNAME	examples/win32_api/lion/Makefile	/^PROGNAME=lion$/;"	m
PROGNAME	examples/win32_api/lion_lens/Makefile	/^PROGNAME=lion_lens$/;"	m
PROGNAME	examples/win32_api/lion_outline/Makefile	/^PROGNAME=lion_outline$/;"	m
PROGNAME	examples/win32_api/mol_view/Makefile	/^PROGNAME=mol_view$/;"	m
PROGNAME	examples/win32_api/multi_clip/Makefile	/^PROGNAME=multi_clip$/;"	m
PROGNAME	examples/win32_api/pattern_fill/Makefile	/^PROGNAME=pattern_fill$/;"	m
PROGNAME	examples/win32_api/pattern_resample/Makefile	/^PROGNAME=pattern_resample$/;"	m
PROGNAME	examples/win32_api/perspective/Makefile	/^PROGNAME=perspective$/;"	m
PROGNAME	examples/win32_api/polymorphic_renderer/Makefile	/^PROGNAME=polymorphic_renderer$/;"	m
PROGNAME	examples/win32_api/raster_text/Makefile	/^PROGNAME=raster_text$/;"	m
PROGNAME	examples/win32_api/rasterizer_compound/Makefile	/^PROGNAME=rasterizer_compound$/;"	m
PROGNAME	examples/win32_api/rasterizers/Makefile	/^PROGNAME=rasterizers$/;"	m
PROGNAME	examples/win32_api/rasterizers2/Makefile	/^PROGNAME=rasterizers2$/;"	m
PROGNAME	examples/win32_api/rounded_rect/Makefile	/^PROGNAME=rounded_rect$/;"	m
PROGNAME	examples/win32_api/scanline_boolean/Makefile	/^PROGNAME=scanline_boolean$/;"	m
PROGNAME	examples/win32_api/scanline_boolean2/Makefile	/^PROGNAME=scanline_boolean2$/;"	m
PROGNAME	examples/win32_api/simple_blur/Makefile	/^PROGNAME=simple_blur$/;"	m
PROGNAME	examples/win32_api/trans_curve1/Makefile	/^PROGNAME=trans_curve1$/;"	m
PROGNAME	examples/win32_api/trans_curve2/Makefile	/^PROGNAME=trans_curve2$/;"	m
PROGNAME	examples/win32_api/trans_polar/Makefile	/^PROGNAME=trans_polar$/;"	m
PROGNAME	examples/win32_api/truetype_test/Makefile	/^PROGNAME=truetype_test$/;"	m
P_EDGE	gpc/gpc.c	96;"	d	file:
QuitRequested	src/platform/BeOS/agg_platform_support.cpp	/^    virtual bool    QuitRequested()$/;"	f	class:AGGWindow
R	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	e	enum:agg::order_abgr::abgr_e
R	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	e	enum:agg::order_argb::argb_e
R	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	e	enum:agg::order_bgr::bgr_e
R	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	e	enum:agg::order_bgra::bgra_e
R	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	e	enum:agg::order_rgb::rgb_e
R	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	e	enum:agg::order_rgba::rgba_e
RED	gpc/gpc.c	/^  RED,                              \/* Right edge                        *\/$/;"	e	enum:__anon9	file:
REV_MIN	gpc/gpc.c	88;"	d	file:
RIGHT	gpc/gpc.c	58;"	d	file:
ReadyToRun	src/platform/BeOS/agg_platform_support.cpp	/^    virtual void    ReadyToRun()$/;"	f	class:AGGApplication
RequesterClass	src/platform/AmigaOS/agg_platform_support.cpp	/^Class* RequesterClass = 0;$/;"	v
Run	src/platform/BeOS/agg_platform_support.cpp	/^    int             Run()$/;"	f	class:agg::platform_specific
SRC	examples/win32_api/aa_demo/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/aa_test/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/alpha_gradient/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/alpha_mask/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/alpha_mask2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/alpha_mask3/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/bezier_div/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/blend_color/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/blur/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/bspline/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/circles/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/component_rendering/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/compositing/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/compositing2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/conv_contour/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/conv_dash_marker/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/conv_stroke/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/distortions/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/flash_rasterizer/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/flash_rasterizer2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/freetype_test/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gamma_correction/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gamma_ctrl/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gamma_tuner/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gouraud/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gouraud_mesh/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gpc_test/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gradient_focal/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/gradients/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/graph_test/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/idea/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image1/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_alpha/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_filters/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_filters2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_fltr_graph/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_perspective/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_resample/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/image_transforms/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/line_patterns/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/line_patterns_clip/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/lion/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/lion_lens/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/lion_outline/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/mol_view/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/multi_clip/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/pattern_fill/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/pattern_resample/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/perspective/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/polymorphic_renderer/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/raster_text/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/rasterizer_compound/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/rasterizers/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/rasterizers2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/rounded_rect/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/scanline_boolean/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/scanline_boolean2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/simple_blur/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/trans_curve1/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/trans_curve2/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/trans_polar/Makefile	/^SRC=\\$/;"	m
SRC	examples/win32_api/truetype_test/Makefile	/^SRC=\\$/;"	m
SRC_C	src/Makefile	/^SRC_C=\\$/;"	m
SRC_CXX	src/Makefile	/^SRC_CXX=\\$/;"	m
SUBJ	gpc/gpc.c	64;"	d	file:
SetTitle	src/platform/BeOS/agg_platform_support.cpp	/^    void            SetTitle(const char* title)$/;"	f	class:agg::platform_specific
StartTimer	src/platform/BeOS/agg_platform_support.cpp	/^    void            StartTimer()$/;"	f	class:agg::platform_specific
TED	gpc/gpc.c	/^  TED,                              \/* Top edge                          *\/$/;"	e	enum:__anon9	file:
TH	gpc/gpc.c	/^  TH                                \/* Top horizontal edge               *\/$/;"	e	enum:__anon10	file:
TRUE	gpc/gpc.c	54;"	d	file:
UNBUNDLED	gpc/gpc.c	/^  UNBUNDLED,                        \/* Isolated edge not within a bundle *\/$/;"	e	enum:__anon11	file:
Update	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::Update()$/;"	f	class:AGGView
UpdateWindow	src/platform/BeOS/agg_platform_support.cpp	/^    void            UpdateWindow()$/;"	f	class:agg::platform_specific
VERTEX	gpc/gpc.c	93;"	d	file:
View	src/platform/BeOS/agg_platform_support.cpp	/^        AGGView*    View() const$/;"	f	class:AGGWindow
WIN32_LEAN_AND_MEAN	examples/win32_api/pure_api/StdAfx.h	13;"	d
WinMain	examples/win32_api/pure_api/pure_api.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance,$/;"	f
WinMain	src/platform/win32/agg_platform_support.cpp	/^int PASCAL WinMain(HINSTANCE hInstance,$/;"	f
Window	src/platform/BeOS/agg_platform_support.cpp	/^        AGGWindow*  Window() const$/;"	f	class:AGGApplication
WindowClass	src/platform/AmigaOS/agg_platform_support.cpp	/^Class* WindowClass = 0;$/;"	v
WndProc	examples/win32_api/pure_api/pure_api.cpp	/^LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
_APS_NEXT_COMMAND_VALUE	examples/win32_api/pure_api/resource.h	23;"	d
_APS_NEXT_CONTROL_VALUE	examples/win32_api/pure_api/resource.h	24;"	d
_APS_NEXT_RESOURCE_VALUE	examples/win32_api/pure_api/resource.h	22;"	d
_APS_NEXT_SYMED_VALUE	examples/win32_api/pure_api/resource.h	25;"	d
__gpc_h	gpc/gpc.h	34;"	d
a	examples/svg_viewer/agg_svg_parser.cpp	/^        int8u r, g, b, a;$/;"	m	struct:agg::svg::named_color	file:
a	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::recursive_blur_calc_rgba
a	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::stack_blur_calc_rgba
a	include/agg_color_gray.h	/^        value_type a;$/;"	m	struct:agg::gray16
a	include/agg_color_gray.h	/^        value_type a;$/;"	m	struct:agg::gray8
a	include/agg_color_rgba.h	/^        double a;$/;"	m	struct:agg::rgba
a	include/agg_color_rgba.h	/^        value_type a;$/;"	m	struct:agg::rgba16
a	include/agg_color_rgba.h	/^        value_type a;$/;"	m	struct:agg::rgba8
a	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> r, g, b, a;$/;"	m	struct:agg::color_interpolator
a	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> v,a;$/;"	m	struct:agg::color_interpolator
a	include/agg_image_filters.h	/^        double a;$/;"	m	class:agg::image_filter_kaiser
aa_mask	include/agg_rasterizer_compound_aa.h	/^            aa_mask   = aa_scale - 1,$/;"	e	enum:agg::rasterizer_compound_aa::aa_scale_e
aa_mask	include/agg_rasterizer_scanline_aa.h	/^            aa_mask   = aa_scale - 1,$/;"	e	enum:agg::rasterizer_scanline_aa::aa_scale_e
aa_mask	include/agg_renderer_outline_aa.h	/^            aa_mask  = aa_scale - 1$/;"	e	enum:agg::line_profile_aa::aa_scale_e
aa_mask2	include/agg_rasterizer_compound_aa.h	/^            aa_mask2  = aa_scale2 - 1$/;"	e	enum:agg::rasterizer_compound_aa::aa_scale_e
aa_mask2	include/agg_rasterizer_scanline_aa.h	/^            aa_mask2  = aa_scale2 - 1$/;"	e	enum:agg::rasterizer_scanline_aa::aa_scale_e
aa_scale	include/agg_rasterizer_compound_aa.h	/^            aa_scale  = 1 << aa_shift,$/;"	e	enum:agg::rasterizer_compound_aa::aa_scale_e
aa_scale	include/agg_rasterizer_scanline_aa.h	/^            aa_scale  = 1 << aa_shift,$/;"	e	enum:agg::rasterizer_scanline_aa::aa_scale_e
aa_scale	include/agg_renderer_outline_aa.h	/^            aa_scale = 1 << aa_shift,$/;"	e	enum:agg::line_profile_aa::aa_scale_e
aa_scale2	include/agg_rasterizer_compound_aa.h	/^            aa_scale2 = aa_scale * 2,$/;"	e	enum:agg::rasterizer_compound_aa::aa_scale_e
aa_scale2	include/agg_rasterizer_scanline_aa.h	/^            aa_scale2 = aa_scale * 2,$/;"	e	enum:agg::rasterizer_scanline_aa::aa_scale_e
aa_scale_e	include/agg_rasterizer_compound_aa.h	/^        enum aa_scale_e$/;"	g	class:agg::rasterizer_compound_aa
aa_scale_e	include/agg_rasterizer_scanline_aa.h	/^        enum aa_scale_e$/;"	g	class:agg::rasterizer_scanline_aa
aa_scale_e	include/agg_renderer_outline_aa.h	/^        enum aa_scale_e$/;"	g	class:agg::line_profile_aa
aa_shift	include/agg_rasterizer_compound_aa.h	/^            aa_shift  = 8,$/;"	e	enum:agg::rasterizer_compound_aa::aa_scale_e
aa_shift	include/agg_rasterizer_scanline_aa.h	/^            aa_shift  = 8,$/;"	e	enum:agg::rasterizer_scanline_aa::aa_scale_e
aa_shift	include/agg_renderer_outline_aa.h	/^            aa_shift = 8,$/;"	e	enum:agg::line_profile_aa::aa_scale_e
abgr_e	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	g	struct:agg::order_abgr
accumulate	include/agg_conv_adaptor_vcgen.h	/^            accumulate,$/;"	e	enum:agg::conv_adaptor_vcgen::status
accurate_join_only	include/agg_renderer_outline_aa.h	/^        static bool accurate_join_only() { return false; }$/;"	f	class:agg::renderer_outline_aa
accurate_join_only	include/agg_renderer_outline_image.h	/^        static bool accurate_join_only() { return true; }$/;"	f	class:agg::renderer_outline_image
active	gpc/gpc.c	/^  int                 active;       \/* Active flag \/ vertex count        *\/$/;"	m	struct:p_shape	file:
active_color	include/ctrl/agg_cbox_ctrl.h	/^        void active_color(const ColorT& c) { m_active_color = c; }$/;"	f	class:agg::cbox_ctrl
active_color	include/ctrl/agg_rbox_ctrl.h	/^        void active_color(const ColorT& c) { m_active_color = c; }$/;"	f	class:agg::rbox_ctrl
active_pnt_color	include/ctrl/agg_gamma_ctrl.h	/^        void active_pnt_color(const ColorT& c)   { m_active_pnt_color = c; }$/;"	f	class:agg::gamma_ctrl
active_pnt_color	include/ctrl/agg_spline_ctrl.h	/^        void active_pnt_color(const ColorT& c)   { m_active_pnt_color = c; }$/;"	f	class:agg::spline_ctrl
active_point	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::active_point(int i)$/;"	f	class:agg::spline_ctrl_impl
add	include/agg_array.h	/^        void add(const T& v)         { m_array[m_size++] = v; }$/;"	f	class:agg::pod_auto_vector
add	include/agg_array.h	/^        void add(const T& v)         { m_array[m_size++] = v; }$/;"	f	class:agg::pod_vector
add	include/agg_array.h	/^    inline void pod_bvector<T, S>::add(const T& val)$/;"	f	class:agg::pod_bvector
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& a)$/;"	f	struct:agg::stack_blur_calc_gray
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& a, unsigned k)$/;"	f	struct:agg::stack_blur_calc_gray
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& v)$/;"	f	struct:agg::stack_blur_calc_rgb
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& v)$/;"	f	struct:agg::stack_blur_calc_rgba
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& v, unsigned k)$/;"	f	struct:agg::stack_blur_calc_rgb
add	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void add(const ArgT& v, unsigned k)$/;"	f	struct:agg::stack_blur_calc_rgba
add	include/agg_color_gray.h	/^        AGG_INLINE void add(const self_type& c, unsigned cover)$/;"	f	struct:agg::gray16
add	include/agg_color_gray.h	/^        AGG_INLINE void add(const self_type& c, unsigned cover)$/;"	f	struct:agg::gray8
add	include/agg_color_rgba.h	/^        AGG_INLINE void add(const self_type& c, unsigned cover)$/;"	f	struct:agg::rgba16
add	include/agg_color_rgba.h	/^        AGG_INLINE void add(const self_type& c, unsigned cover)$/;"	f	struct:agg::rgba8
add	include/agg_conv_gpc.h	/^        template<class VS> void add(VS& src, gpc_polygon& p)$/;"	f	class:agg::conv_gpc
add	include/agg_vertex_sequence.h	/^    void vertex_sequence<T, S>::add(const T& val)$/;"	f	class:agg::vertex_sequence
add	include/platform/agg_platform_support.h	/^        void add(ctrl& c)$/;"	f	class:agg::ctrl_container
add_array	include/agg_array.h	/^        void add_array(const T* ptr, unsigned num_elem)$/;"	f	class:agg::pod_bvector
add_cell	include/agg_rasterizer_cells_aa.h	/^        void add_cell(int x, int)$/;"	f	class:agg::scanline_hit_test
add_cell	include/agg_scanline_bin.h	/^        void add_cell(int x, unsigned)$/;"	f	class:agg::scanline32_bin
add_cell	include/agg_scanline_bin.h	/^        void add_cell(int x, unsigned)$/;"	f	class:agg::scanline_bin
add_cell	include/agg_scanline_p.h	/^        void add_cell(int x, unsigned cover)$/;"	f	class:agg::scanline32_p8
add_cell	include/agg_scanline_p.h	/^        void add_cell(int x, unsigned cover)$/;"	f	class:agg::scanline_p8
add_cell	include/agg_scanline_u.h	/^        void add_cell(int x, unsigned cover)$/;"	f	class:agg::scanline32_u8
add_cell	include/agg_scanline_u.h	/^        void add_cell(int x, unsigned cover)$/;"	f	class:agg::scanline_u8
add_cells	include/agg_scanline_bin.h	/^        void add_cells(int x, unsigned len, const void*)$/;"	f	class:agg::scanline32_bin
add_cells	include/agg_scanline_bin.h	/^        void add_cells(int x, unsigned len, const void*)$/;"	f	class:agg::scanline_bin
add_cells	include/agg_scanline_p.h	/^        void add_cells(int x, unsigned len, const cover_type* covers)$/;"	f	class:agg::scanline32_p8
add_cells	include/agg_scanline_p.h	/^        void add_cells(int x, unsigned len, const cover_type* covers)$/;"	f	class:agg::scanline_p8
add_cells	include/agg_scanline_storage_aa.h	/^        int add_cells(const T* cells, unsigned num_cells)$/;"	f	class:agg::scanline_cell_storage
add_cells	include/agg_scanline_u.h	/^        void add_cells(int x, unsigned len, const cover_type* covers)$/;"	f	class:agg::scanline32_u8
add_cells	include/agg_scanline_u.h	/^        void add_cells(int x, unsigned len, const cover_type* covers)$/;"	f	class:agg::scanline_u8
add_clip_box	include/agg_renderer_mclip.h	/^        void add_clip_box(int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_mclip
add_color	include/agg_gradient_lut.h	/^    void gradient_lut<T,S>::add_color(double offset, const color_type& color)$/;"	f	class:agg::gradient_lut
add_ctrl	include/platform/agg_platform_support.h	/^        void add_ctrl(ctrl& c) { m_ctrls.add(c); c.transform(m_resize_mtx); }$/;"	f	class:agg::platform_support
add_curr_cell	include/agg_rasterizer_cells_aa.h	/^    AGG_INLINE void rasterizer_cells_aa<Cell>::add_curr_cell()$/;"	f	class:agg::rasterizer_cells_aa
add_dash	include/agg_conv_dash.h	/^        void add_dash(double dash_len, double gap_len) $/;"	f	struct:agg::conv_dash
add_dash	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::add_dash(double dash_len, double gap_len)$/;"	f	class:agg::vcgen_dash
add_data	include/agg_array.h	/^        template<class DataAccessor> void add_data(DataAccessor& data)$/;"	f	class:agg::pod_bvector
add_edge_to_aet	gpc/gpc.c	/^static void add_edge_to_aet(edge_node **aet, edge_node *edge, edge_node *prev)$/;"	f	file:
add_intersection	gpc/gpc.c	/^static void add_intersection(it_node **it, edge_node *edge0, edge_node *edge1,$/;"	f	file:
add_item	src/ctrl/agg_rbox_ctrl.cpp	/^    void rbox_ctrl_impl::add_item(const char* text)$/;"	f	class:agg::rbox_ctrl_impl
add_kerning	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::add_kerning(unsigned first, unsigned second,$/;"	f	class:agg::font_engine_freetype_base
add_kerning	font_win32_tt/agg_font_win32_tt.cpp	/^    bool font_engine_win32_tt_base::add_kerning(unsigned first, unsigned second,$/;"	f	class:agg::font_engine_win32_tt_base
add_kerning	include/agg_font_cache_manager.h	/^        bool add_kerning(double* x, double* y)$/;"	f	class:agg::font_cache_manager
add_left	gpc/gpc.c	/^static void add_left(polygon_node *p, double x, double y)$/;"	f	file:
add_local_min	gpc/gpc.c	/^static void add_local_min(polygon_node **p, edge_node *edge,$/;"	f	file:
add_path	include/agg_rasterizer_compound_aa.h	/^        void add_path(VertexSource& vs, unsigned path_id=0)$/;"	f	class:agg::rasterizer_compound_aa
add_path	include/agg_rasterizer_outline.h	/^        void add_path(VertexSource& vs, unsigned path_id=0)$/;"	f	class:agg::rasterizer_outline
add_path	include/agg_rasterizer_outline_aa.h	/^        void add_path(VertexSource& vs, unsigned path_id=0)$/;"	f	class:agg::rasterizer_outline_aa
add_path	include/agg_rasterizer_scanline_aa.h	/^        void add_path(VertexSource& vs, unsigned path_id=0)$/;"	f	class:agg::rasterizer_scanline_aa
add_path	include/agg_trans_single_path.h	/^        void add_path(VertexSource& vs, unsigned path_id=0)$/;"	f	class:agg::trans_single_path
add_paths	include/agg_trans_double_path.h	/^        void add_paths(VertexSource1& vs1, VertexSource2& vs2, $/;"	f	class:agg::trans_double_path
add_point	src/agg_bspline.cpp	/^    void bspline::add_point(double x, double y)$/;"	f	class:agg::bspline
add_right	gpc/gpc.c	/^static void add_right(polygon_node *p, double x, double y)$/;"	f	file:
add_span	include/agg_rasterizer_cells_aa.h	/^        void add_span(int x, int len, int)$/;"	f	class:agg::scanline_hit_test
add_span	include/agg_scanline_bin.h	/^        void add_span(int x, unsigned len, unsigned)$/;"	f	class:agg::scanline32_bin
add_span	include/agg_scanline_bin.h	/^        void add_span(int x, unsigned len, unsigned)$/;"	f	class:agg::scanline_bin
add_span	include/agg_scanline_p.h	/^        void add_span(int x, unsigned len, unsigned cover)$/;"	f	class:agg::scanline32_p8
add_span	include/agg_scanline_p.h	/^        void add_span(int x, unsigned len, unsigned cover)$/;"	f	class:agg::scanline_p8
add_span	include/agg_scanline_u.h	/^        void add_span(int x, unsigned len, unsigned cover)$/;"	f	class:agg::scanline32_u8
add_span	include/agg_scanline_u.h	/^        void add_span(int x, unsigned len, unsigned cover)$/;"	f	class:agg::scanline_u8
add_st_edge	gpc/gpc.c	/^static void add_st_edge(st_node **st, it_node **it, edge_node *edge,$/;"	f	file:
add_style	include/agg_rasterizer_compound_aa.h	/^    AGG_INLINE void rasterizer_compound_aa<Clip>::add_style(int style_id)$/;"	f	class:agg::rasterizer_compound_aa
add_to_sbtree	gpc/gpc.c	/^static void add_to_sbtree(int *entries, sb_tree **sbtree, double y)$/;"	f	file:
add_vertex	gpc/gpc.c	/^static void add_vertex(vertex_node **t, double x, double y)$/;"	f	file:
add_vertex	include/agg_conv_adaptor_vcgen.h	/^        void add_vertex(double, double, unsigned) {}$/;"	f	struct:agg::null_markers
add_vertex	include/agg_conv_gpc.h	/^    inline void conv_gpc<VSA, VSB>::add_vertex(double x, double y)$/;"	f	class:agg::conv_gpc
add_vertex	include/agg_math_stroke.h	/^        AGG_INLINE void add_vertex(VertexConsumer& vc, double x, double y)$/;"	f	class:agg::math_stroke
add_vertex	include/agg_path_storage.h	/^        void add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vertex_stl_storage
add_vertex	include/agg_path_storage.h	/^    inline void vertex_block_storage<T,S,P>::add_vertex(double x, double y, $/;"	f	class:agg::vertex_block_storage
add_vertex	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::rasterizer_compound_aa
add_vertex	include/agg_rasterizer_outline.h	/^        void add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::rasterizer_outline
add_vertex	include/agg_rasterizer_outline_aa.h	/^        void add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::rasterizer_outline_aa
add_vertex	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::rasterizer_scanline_aa
add_vertex	include/agg_vcgen_vertex_sequence.h	/^    inline void vcgen_vertex_sequence::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_vertex_sequence
add_vertex	src/agg_vcgen_bspline.cpp	/^    void vcgen_bspline::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_bspline
add_vertex	src/agg_vcgen_contour.cpp	/^    void vcgen_contour::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_contour
add_vertex	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_dash
add_vertex	src/agg_vcgen_markers_term.cpp	/^    void vcgen_markers_term::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_markers_term
add_vertex	src/agg_vcgen_smooth_poly1.cpp	/^    void vcgen_smooth_poly1::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_smooth_poly1
add_vertex	src/agg_vcgen_stroke.cpp	/^    void vcgen_stroke::add_vertex(double x, double y, unsigned cmd)$/;"	f	class:agg::vcgen_stroke
adjust_backward	include/agg_dda_line.h	/^        void adjust_backward()$/;"	f	class:agg::dda2_line_interpolator
adjust_forward	include/agg_dda_line.h	/^        void adjust_forward()$/;"	f	class:agg::dda2_line_interpolator
adjust_scale	include/agg_span_image_filter.h	/^        AGG_INLINE void adjust_scale(int* rx, int* ry)$/;"	f	class:agg::span_image_resample
advance_x	font_freetype/agg_font_freetype.h	/^        double          advance_x()   const { return m_advance_x;   }$/;"	f	class:agg::font_engine_freetype_base
advance_x	font_win32_tt/agg_font_win32_tt.h	/^        double          advance_x()   const { return m_advance_x;   }$/;"	f	class:agg::font_engine_win32_tt_base
advance_x	include/agg_font_cache_manager.h	/^        double          advance_x;$/;"	m	struct:agg::glyph_cache
advance_y	font_freetype/agg_font_freetype.h	/^        double          advance_y()   const { return m_advance_y;   }$/;"	f	class:agg::font_engine_freetype_base
advance_y	font_win32_tt/agg_font_win32_tt.h	/^        double          advance_y()   const { return m_advance_y;   }$/;"	f	class:agg::font_engine_win32_tt_base
advance_y	include/agg_font_cache_manager.h	/^        double          advance_y;$/;"	m	struct:agg::glyph_cache
affine_epsilon	include/agg_trans_affine.h	/^    const double affine_epsilon = 1e-14; $/;"	m	namespace:agg
agg	examples/aa_demo.cpp	/^namespace agg$/;"	n	file:
agg	examples/alpha_mask2.cpp	/^namespace agg$/;"	n	file:
agg	examples/compositing.cpp	/^namespace agg$/;"	n	file:
agg	examples/flash_rasterizer.cpp	/^namespace agg$/;"	n	file:
agg	examples/flash_rasterizer2.cpp	/^namespace agg$/;"	n	file:
agg	examples/gouraud_mesh.cpp	/^namespace agg$/;"	n	file:
agg	examples/gpc_test.cpp	/^namespace agg$/;"	n	file:
agg	examples/image_alpha.cpp	/^namespace agg$/;"	n	file:
agg	examples/interactive_polygon.cpp	/^namespace agg$/;"	n	file:
agg	examples/interactive_polygon.h	/^namespace agg$/;"	n
agg	examples/mol_view.cpp	/^namespace agg$/;"	n	file:
agg	examples/multi_clip.cpp	/^namespace agg$/;"	n	file:
agg	examples/perspective.cpp	/^namespace agg$/;"	n	file:
agg	examples/polymorphic_renderer.cpp	/^namespace agg$/;"	n	file:
agg	examples/rasterizers2.cpp	/^namespace agg$/;"	n	file:
agg	examples/simple_blur.cpp	/^namespace agg$/;"	n	file:
agg	examples/svg_viewer/agg_svg_exception.h	/^namespace agg $/;"	n
agg	examples/svg_viewer/agg_svg_parser.cpp	/^namespace agg$/;"	n	file:
agg	examples/svg_viewer/agg_svg_parser.h	/^namespace agg$/;"	n
agg	examples/svg_viewer/agg_svg_path_renderer.cpp	/^namespace agg$/;"	n	file:
agg	examples/svg_viewer/agg_svg_path_renderer.h	/^namespace agg$/;"	n
agg	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^namespace agg $/;"	n	file:
agg	examples/svg_viewer/agg_svg_path_tokenizer.h	/^namespace agg $/;"	n
agg	examples/trans_polar.cpp	/^namespace agg$/;"	n	file:
agg	font_freetype/agg_font_freetype.cpp	/^namespace agg$/;"	n	file:
agg	font_freetype/agg_font_freetype.h	/^namespace agg$/;"	n
agg	font_win32_tt/agg_font_win32_tt.cpp	/^namespace agg$/;"	n	file:
agg	font_win32_tt/agg_font_win32_tt.h	/^namespace agg$/;"	n
agg	include/agg_alpha_mask_u8.h	/^namespace agg$/;"	n
agg	include/agg_arc.h	/^namespace agg$/;"	n
agg	include/agg_array.h	/^namespace agg$/;"	n
agg	include/agg_arrowhead.h	/^namespace agg$/;"	n
agg	include/agg_basics.h	/^namespace agg$/;"	n
agg	include/agg_bezier_arc.h	/^namespace agg$/;"	n
agg	include/agg_bitset_iterator.h	/^namespace agg$/;"	n
agg	include/agg_blur.h	/^namespace agg$/;"	n
agg	include/agg_bounding_rect.h	/^namespace agg$/;"	n
agg	include/agg_bspline.h	/^namespace agg$/;"	n
agg	include/agg_clip_liang_barsky.h	/^namespace agg$/;"	n
agg	include/agg_color_gray.h	/^namespace agg$/;"	n
agg	include/agg_color_rgba.h	/^namespace agg$/;"	n
agg	include/agg_conv_adaptor_vcgen.h	/^namespace agg$/;"	n
agg	include/agg_conv_adaptor_vpgen.h	/^namespace agg$/;"	n
agg	include/agg_conv_bspline.h	/^namespace agg$/;"	n
agg	include/agg_conv_clip_polygon.h	/^namespace agg$/;"	n
agg	include/agg_conv_clip_polyline.h	/^namespace agg$/;"	n
agg	include/agg_conv_close_polygon.h	/^namespace agg$/;"	n
agg	include/agg_conv_concat.h	/^namespace agg$/;"	n
agg	include/agg_conv_contour.h	/^namespace agg$/;"	n
agg	include/agg_conv_curve.h	/^namespace agg$/;"	n
agg	include/agg_conv_dash.h	/^namespace agg$/;"	n
agg	include/agg_conv_gpc.h	/^namespace agg$/;"	n
agg	include/agg_conv_marker.h	/^namespace agg$/;"	n
agg	include/agg_conv_marker_adaptor.h	/^namespace agg$/;"	n
agg	include/agg_conv_segmentator.h	/^namespace agg$/;"	n
agg	include/agg_conv_shorten_path.h	/^namespace agg$/;"	n
agg	include/agg_conv_smooth_poly1.h	/^namespace agg$/;"	n
agg	include/agg_conv_stroke.h	/^namespace agg$/;"	n
agg	include/agg_conv_transform.h	/^namespace agg$/;"	n
agg	include/agg_conv_unclose_polygon.h	/^namespace agg$/;"	n
agg	include/agg_curves.h	/^namespace agg$/;"	n
agg	include/agg_dda_line.h	/^namespace agg$/;"	n
agg	include/agg_ellipse.h	/^namespace agg$/;"	n
agg	include/agg_ellipse_bresenham.h	/^namespace agg$/;"	n
agg	include/agg_embedded_raster_fonts.h	/^namespace agg$/;"	n
agg	include/agg_font_cache_manager.h	/^namespace agg$/;"	n
agg	include/agg_gamma_functions.h	/^namespace agg$/;"	n
agg	include/agg_gamma_lut.h	/^namespace agg$/;"	n
agg	include/agg_glyph_raster_bin.h	/^namespace agg$/;"	n
agg	include/agg_gradient_lut.h	/^namespace agg$/;"	n
agg	include/agg_gsv_text.h	/^namespace agg$/;"	n
agg	include/agg_image_accessors.h	/^namespace agg$/;"	n
agg	include/agg_image_filters.h	/^namespace agg$/;"	n
agg	include/agg_line_aa_basics.h	/^namespace agg$/;"	n
agg	include/agg_math.h	/^namespace agg$/;"	n
agg	include/agg_math_stroke.h	/^namespace agg$/;"	n
agg	include/agg_path_length.h	/^namespace agg$/;"	n
agg	include/agg_path_storage.h	/^namespace agg$/;"	n
agg	include/agg_path_storage_integer.h	/^namespace agg$/;"	n
agg	include/agg_pattern_filters_rgba.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_amask_adaptor.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_gray.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_rgb.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_rgb_packed.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_rgba.h	/^namespace agg$/;"	n
agg	include/agg_pixfmt_transposer.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_cells_aa.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_compound_aa.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_outline.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_outline_aa.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_scanline_aa.h	/^namespace agg$/;"	n
agg	include/agg_rasterizer_sl_clip.h	/^namespace agg$/;"	n
agg	include/agg_renderer_base.h	/^namespace agg$/;"	n
agg	include/agg_renderer_markers.h	/^namespace agg$/;"	n
agg	include/agg_renderer_mclip.h	/^namespace agg$/;"	n
agg	include/agg_renderer_outline_aa.h	/^namespace agg$/;"	n
agg	include/agg_renderer_outline_image.h	/^namespace agg$/;"	n
agg	include/agg_renderer_primitives.h	/^namespace agg$/;"	n
agg	include/agg_renderer_raster_text.h	/^namespace agg$/;"	n
agg	include/agg_renderer_scanline.h	/^namespace agg$/;"	n
agg	include/agg_rendering_buffer.h	/^namespace agg$/;"	n
agg	include/agg_rendering_buffer_dynarow.h	/^namespace agg$/;"	n
agg	include/agg_rounded_rect.h	/^namespace agg$/;"	n
agg	include/agg_scanline_bin.h	/^namespace agg$/;"	n
agg	include/agg_scanline_boolean_algebra.h	/^namespace agg$/;"	n
agg	include/agg_scanline_p.h	/^namespace agg$/;"	n
agg	include/agg_scanline_storage_aa.h	/^namespace agg$/;"	n
agg	include/agg_scanline_storage_bin.h	/^namespace agg$/;"	n
agg	include/agg_scanline_u.h	/^namespace agg$/;"	n
agg	include/agg_shorten_path.h	/^namespace agg$/;"	n
agg	include/agg_simul_eq.h	/^namespace agg$/;"	n
agg	include/agg_span_allocator.h	/^namespace agg$/;"	n
agg	include/agg_span_converter.h	/^namespace agg$/;"	n
agg	include/agg_span_gouraud.h	/^namespace agg$/;"	n
agg	include/agg_span_gouraud_gray.h	/^namespace agg$/;"	n
agg	include/agg_span_gouraud_rgba.h	/^namespace agg$/;"	n
agg	include/agg_span_gradient.h	/^namespace agg$/;"	n
agg	include/agg_span_gradient_alpha.h	/^namespace agg$/;"	n
agg	include/agg_span_image_filter.h	/^namespace agg$/;"	n
agg	include/agg_span_image_filter_gray.h	/^namespace agg$/;"	n
agg	include/agg_span_image_filter_rgb.h	/^namespace agg$/;"	n
agg	include/agg_span_image_filter_rgba.h	/^namespace agg$/;"	n
agg	include/agg_span_interpolator_adaptor.h	/^namespace agg$/;"	n
agg	include/agg_span_interpolator_linear.h	/^namespace agg$/;"	n
agg	include/agg_span_interpolator_persp.h	/^namespace agg$/;"	n
agg	include/agg_span_interpolator_trans.h	/^namespace agg$/;"	n
agg	include/agg_span_pattern_gray.h	/^namespace agg$/;"	n
agg	include/agg_span_pattern_rgb.h	/^namespace agg$/;"	n
agg	include/agg_span_pattern_rgba.h	/^namespace agg$/;"	n
agg	include/agg_span_solid.h	/^namespace agg$/;"	n
agg	include/agg_span_subdiv_adaptor.h	/^namespace agg$/;"	n
agg	include/agg_trans_affine.h	/^namespace agg$/;"	n
agg	include/agg_trans_bilinear.h	/^namespace agg$/;"	n
agg	include/agg_trans_double_path.h	/^namespace agg$/;"	n
agg	include/agg_trans_perspective.h	/^namespace agg$/;"	n
agg	include/agg_trans_single_path.h	/^namespace agg$/;"	n
agg	include/agg_trans_viewport.h	/^namespace agg$/;"	n
agg	include/agg_trans_warp_magnifier.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_bspline.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_contour.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_dash.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_markers_term.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_smooth_poly1.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_stroke.h	/^namespace agg$/;"	n
agg	include/agg_vcgen_vertex_sequence.h	/^namespace agg$/;"	n
agg	include/agg_vertex_sequence.h	/^namespace agg$/;"	n
agg	include/agg_vpgen_clip_polygon.h	/^namespace agg$/;"	n
agg	include/agg_vpgen_clip_polyline.h	/^namespace agg$/;"	n
agg	include/agg_vpgen_segmentator.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_bezier_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_cbox_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_gamma_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_gamma_spline.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_polygon_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_rbox_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_scale_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_slider_ctrl.h	/^namespace agg$/;"	n
agg	include/ctrl/agg_spline_ctrl.h	/^namespace agg$/;"	n
agg	include/platform/agg_platform_support.h	/^namespace agg$/;"	n
agg	include/platform/mac/agg_mac_pmap.h	/^namespace agg$/;"	n
agg	include/platform/win32/agg_win32_bmp.h	/^namespace agg$/;"	n
agg	include/util/agg_color_conv.h	/^namespace agg$/;"	n
agg	include/util/agg_color_conv_rgb16.h	/^namespace agg$/;"	n
agg	include/util/agg_color_conv_rgb8.h	/^namespace agg$/;"	n
agg	src/agg_arc.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_arrowhead.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_bezier_arc.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_bspline.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_curves.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_embedded_raster_fonts.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_gsv_text.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_image_filters.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_line_aa_basics.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_line_profile_aa.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_rounded_rect.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_sqrt_tables.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_trans_affine.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_trans_double_path.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_trans_single_path.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_trans_warp_magnifier.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_bspline.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_contour.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_dash.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_markers_term.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_smooth_poly1.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vcgen_stroke.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vpgen_clip_polygon.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vpgen_clip_polyline.cpp	/^namespace agg$/;"	n	file:
agg	src/agg_vpgen_segmentator.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_bezier_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_cbox_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_gamma_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_gamma_spline.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_polygon_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_rbox_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_scale_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_slider_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/ctrl/agg_spline_ctrl.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/AmigaOS/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/BeOS/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/X11/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/mac/agg_mac_pmap.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/mac/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/sdl/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/win32/agg_platform_support.cpp	/^namespace agg$/;"	n	file:
agg	src/platform/win32/agg_win32_bmp.cpp	/^namespace agg$/;"	n	file:
agg_main	examples/aa_demo.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/aa_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/alpha_gradient.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/alpha_mask.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/alpha_mask2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/alpha_mask3.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/bezier_div.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/blend_color.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/blur.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/bspline.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/circles.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/component_rendering.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/compositing.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/compositing2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/conv_contour.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/conv_dash_marker.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/conv_stroke.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/distortions.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/flash_rasterizer.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/flash_rasterizer2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/freetype_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gamma_correction.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gamma_ctrl.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gamma_tuner.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gouraud.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gouraud_mesh.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gpc_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gradient_focal.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/gradients.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/graph_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/idea.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image1.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_alpha.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_filters.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_filters2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_fltr_graph.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_perspective.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_resample.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/image_transforms.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/line_patterns.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/line_patterns_clip.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/lion.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/lion_lens.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/lion_outline.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/mol_view.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/multi_clip.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/pattern_fill.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/pattern_perspective.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/pattern_resample.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/perspective.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/polymorphic_renderer.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/raster_text.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/rasterizer_compound.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/rasterizers.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/rasterizers2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/rounded_rect.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/scanline_boolean.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/scanline_boolean2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/simple_blur.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/svg_viewer/svg_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/trans_curve1.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/trans_curve1_ft.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/trans_curve2.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/trans_curve2_ft.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/trans_polar.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
agg_main	examples/truetype_test.cpp	/^int agg_main(int argc, char* argv[])$/;"	f
ah	examples/graph_test.cpp	/^    agg::arrowhead ah;$/;"	m	struct:dash_stroke_draft_arrow	file:
ah	examples/graph_test.cpp	/^    agg::arrowhead ah;$/;"	m	struct:dash_stroke_fine_arrow	file:
ah	examples/graph_test.cpp	/^    agg::arrowhead ah;$/;"	m	struct:stroke_draft_arrow	file:
ah	examples/graph_test.cpp	/^    agg::arrowhead ah;$/;"	m	struct:stroke_fine_arrow	file:
align_x	include/agg_trans_viewport.h	/^        double align_x()              const { return m_align_x; }$/;"	f	class:agg::trans_viewport
align_y	include/agg_trans_viewport.h	/^        double align_y()              const { return m_align_y; }$/;"	f	class:agg::trans_viewport
alloc_type	include/agg_renderer_scanline.h	/^        typedef SpanAllocator alloc_type;$/;"	t	class:agg::renderer_scanline_aa
alloc_type	include/agg_renderer_scanline.h	/^        typedef SpanAllocator alloc_type;$/;"	t	class:agg::renderer_scanline_bin
allocate	include/agg_array.h	/^        int8u* allocate(unsigned size, unsigned alignment=1)$/;"	f	class:agg::block_allocator
allocate	include/agg_array.h	/^    void pod_vector<T>::allocate(unsigned size, unsigned extra_tail)$/;"	f	class:agg::pod_vector
allocate	include/agg_basics.h	/^        static T*   allocate()         { return new T; }$/;"	f	struct:agg::obj_allocator
allocate	include/agg_basics.h	/^        static T*   allocate(unsigned num)       { return new T [num]; }$/;"	f	struct:agg::pod_allocator
allocate	include/agg_span_allocator.h	/^        AGG_INLINE color_type* allocate(unsigned span_len)$/;"	f	class:agg::span_allocator
allocate_block	include/agg_array.h	/^        void allocate_block(unsigned size)$/;"	f	class:agg::block_allocator
allocate_block	include/agg_array.h	/^    void pod_bvector<T, S>::allocate_block(unsigned nb)$/;"	f	class:agg::pod_bvector
allocate_block	include/agg_path_storage.h	/^    void vertex_block_storage<T,S,P>::allocate_block(unsigned nb)$/;"	f	class:agg::vertex_block_storage
allocate_block	include/agg_rasterizer_cells_aa.h	/^    void rasterizer_cells_aa<Cell>::allocate_block()$/;"	f	class:agg::rasterizer_cells_aa
allocate_continuous_block	include/agg_array.h	/^    int pod_bvector<T, S>::allocate_continuous_block(unsigned num_elements)$/;"	f	class:agg::pod_bvector
allocate_cover_buffer	include/agg_rasterizer_compound_aa.h	/^    cover_type* rasterizer_compound_aa<Clip>::allocate_cover_buffer(unsigned len)$/;"	f	class:agg::rasterizer_compound_aa
allocate_master_alpha	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::allocate_master_alpha()$/;"	f	class:agg::rasterizer_compound_aa
alpha	include/agg_span_pattern_gray.h	/^        value_type alpha() const { return m_alpha; }$/;"	f	class:agg::span_pattern_gray
alpha	include/agg_span_pattern_gray.h	/^        void       alpha(value_type v) { m_alpha = v; }$/;"	f	class:agg::span_pattern_gray
alpha	include/agg_span_pattern_rgb.h	/^        value_type alpha() const { return m_alpha; }$/;"	f	class:agg::span_pattern_rgb
alpha	include/agg_span_pattern_rgb.h	/^        void       alpha(value_type v) { m_alpha = v; }$/;"	f	class:agg::span_pattern_rgb
alpha	include/agg_span_pattern_rgba.h	/^        value_type alpha() const { return 0; }$/;"	f	class:agg::span_pattern_rgba
alpha	include/agg_span_pattern_rgba.h	/^        void       alpha(value_type) {}$/;"	f	class:agg::span_pattern_rgba
alpha_function	include/agg_span_gradient_alpha.h	/^        const AlphaF& alpha_function() const { return *m_alpha_function; }$/;"	f	class:agg::span_gradient_alpha
alpha_function	include/agg_span_gradient_alpha.h	/^        void alpha_function(const AlphaF& af) { m_alpha_function = &af; }$/;"	f	class:agg::span_gradient_alpha
alpha_mask_abgr32a	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0> alpha_mask_abgr32a; \/\/----alpha_mask_abgr32a$/;"	t	namespace:agg
alpha_mask_abgr32b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1> alpha_mask_abgr32b; \/\/----alpha_mask_abgr32b$/;"	t	namespace:agg
alpha_mask_abgr32g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 2> alpha_mask_abgr32g; \/\/----alpha_mask_abgr32g$/;"	t	namespace:agg
alpha_mask_abgr32gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1, rgb_to_gray_mask_u8<2, 1, 0> > alpha_mask_abgr32gray; \/\/----alpha_mask_abgr32gray$/;"	t	namespace:agg
alpha_mask_abgr32r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 3> alpha_mask_abgr32r; \/\/----alpha_mask_abgr32r$/;"	t	namespace:agg
alpha_mask_argb32a	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0> alpha_mask_argb32a; \/\/----alpha_mask_argb32a$/;"	t	namespace:agg
alpha_mask_argb32b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 3> alpha_mask_argb32b; \/\/----alpha_mask_argb32b$/;"	t	namespace:agg
alpha_mask_argb32g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 2> alpha_mask_argb32g; \/\/----alpha_mask_argb32g$/;"	t	namespace:agg
alpha_mask_argb32gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1, rgb_to_gray_mask_u8<0, 1, 2> > alpha_mask_argb32gray; \/\/----alpha_mask_argb32gray$/;"	t	namespace:agg
alpha_mask_argb32r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1> alpha_mask_argb32r; \/\/----alpha_mask_argb32r$/;"	t	namespace:agg
alpha_mask_bgr24b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 0> alpha_mask_bgr24b;  \/\/----alpha_mask_bgr24b$/;"	t	namespace:agg
alpha_mask_bgr24g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 1> alpha_mask_bgr24g;  \/\/----alpha_mask_bgr24g$/;"	t	namespace:agg
alpha_mask_bgr24gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 0, rgb_to_gray_mask_u8<2, 1, 0> > alpha_mask_bgr24gray;  \/\/----alpha_mask_bgr24gray$/;"	t	namespace:agg
alpha_mask_bgr24r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 2> alpha_mask_bgr24r;  \/\/----alpha_mask_bgr24r$/;"	t	namespace:agg
alpha_mask_bgra32a	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 3> alpha_mask_bgra32a; \/\/----alpha_mask_bgra32a$/;"	t	namespace:agg
alpha_mask_bgra32b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0> alpha_mask_bgra32b; \/\/----alpha_mask_bgra32b$/;"	t	namespace:agg
alpha_mask_bgra32g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1> alpha_mask_bgra32g; \/\/----alpha_mask_bgra32g$/;"	t	namespace:agg
alpha_mask_bgra32gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0, rgb_to_gray_mask_u8<2, 1, 0> > alpha_mask_bgra32gray; \/\/----alpha_mask_bgra32gray$/;"	t	namespace:agg
alpha_mask_bgra32r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 2> alpha_mask_bgra32r; \/\/----alpha_mask_bgra32r$/;"	t	namespace:agg
alpha_mask_gray8	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<1, 0> alpha_mask_gray8;   \/\/----alpha_mask_gray8$/;"	t	namespace:agg
alpha_mask_rgb24b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 2> alpha_mask_rgb24b;  \/\/----alpha_mask_rgb24b$/;"	t	namespace:agg
alpha_mask_rgb24g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 1> alpha_mask_rgb24g;  \/\/----alpha_mask_rgb24g$/;"	t	namespace:agg
alpha_mask_rgb24gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 0, rgb_to_gray_mask_u8<0, 1, 2> > alpha_mask_rgb24gray;  \/\/----alpha_mask_rgb24gray$/;"	t	namespace:agg
alpha_mask_rgb24r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<3, 0> alpha_mask_rgb24r;  \/\/----alpha_mask_rgb24r$/;"	t	namespace:agg
alpha_mask_rgba32a	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 3> alpha_mask_rgba32a; \/\/----alpha_mask_rgba32a$/;"	t	namespace:agg
alpha_mask_rgba32b	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 2> alpha_mask_rgba32b; \/\/----alpha_mask_rgba32b$/;"	t	namespace:agg
alpha_mask_rgba32g	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 1> alpha_mask_rgba32g; \/\/----alpha_mask_rgba32g$/;"	t	namespace:agg
alpha_mask_rgba32gray	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0, rgb_to_gray_mask_u8<0, 1, 2> > alpha_mask_rgba32gray; \/\/----alpha_mask_rgba32gray$/;"	t	namespace:agg
alpha_mask_rgba32r	include/agg_alpha_mask_u8.h	/^    typedef alpha_mask_u8<4, 0> alpha_mask_rgba32r; \/\/----alpha_mask_rgba32r$/;"	t	namespace:agg
alpha_mask_type	examples/alpha_mask2.cpp	/^    typedef agg::amask_no_clip_gray8 alpha_mask_type;$/;"	t	class:the_application	file:
alpha_mask_type	examples/alpha_mask3.cpp	/^    typedef agg::amask_no_clip_gray8 alpha_mask_type;$/;"	t	class:the_application	file:
alpha_mask_type	include/agg_scanline_u.h	/^        typedef AlphaMask             alpha_mask_type;$/;"	t	class:agg::scanline32_u8_am
alpha_mask_type	include/agg_scanline_u.h	/^        typedef AlphaMask             alpha_mask_type;$/;"	t	class:agg::scanline_u8_am
alpha_mask_u8	include/agg_alpha_mask_u8.h	/^        alpha_mask_u8() : m_rbuf(0) {}$/;"	f	class:agg::alpha_mask_u8
alpha_mask_u8	include/agg_alpha_mask_u8.h	/^        explicit alpha_mask_u8(rendering_buffer& rbuf) : m_rbuf(&rbuf) {}$/;"	f	class:agg::alpha_mask_u8
alpha_mask_u8	include/agg_alpha_mask_u8.h	/^    class alpha_mask_u8$/;"	c	namespace:agg
alpha_type	examples/image_alpha.cpp	/^        typedef int8u alpha_type;$/;"	t	class:agg::span_conv_brightness_alpha_rgb8	file:
alpha_type	include/agg_span_gradient_alpha.h	/^        typedef int8u alpha_type;$/;"	t	struct:agg::gradient_alpha_one_munus_x_u8
alpha_type	include/agg_span_gradient_alpha.h	/^        typedef int8u alpha_type;$/;"	t	struct:agg::gradient_alpha_x_u8
alpha_type	include/agg_span_gradient_alpha.h	/^        typedef typename ColorT::value_type alpha_type;$/;"	t	struct:agg::gradient_alpha_x
alpha_type	include/agg_span_gradient_alpha.h	/^        typedef typename color_type::value_type alpha_type;$/;"	t	class:agg::span_gradient_alpha
amask_no_clip_abgr32a	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0> amask_no_clip_abgr32a; \/\/----amask_no_clip_abgr32a$/;"	t	namespace:agg
amask_no_clip_abgr32b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1> amask_no_clip_abgr32b; \/\/----amask_no_clip_abgr32b$/;"	t	namespace:agg
amask_no_clip_abgr32g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 2> amask_no_clip_abgr32g; \/\/----amask_no_clip_abgr32g$/;"	t	namespace:agg
amask_no_clip_abgr32gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1, rgb_to_gray_mask_u8<2, 1, 0> > amask_no_clip_abgr32gray; \/\/----amask_no_clip_abgr32gray$/;"	t	namespace:agg
amask_no_clip_abgr32r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 3> amask_no_clip_abgr32r; \/\/----amask_no_clip_abgr32r$/;"	t	namespace:agg
amask_no_clip_argb32a	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0> amask_no_clip_argb32a; \/\/----amask_no_clip_argb32a$/;"	t	namespace:agg
amask_no_clip_argb32b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 3> amask_no_clip_argb32b; \/\/----amask_no_clip_argb32b$/;"	t	namespace:agg
amask_no_clip_argb32g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 2> amask_no_clip_argb32g; \/\/----amask_no_clip_argb32g$/;"	t	namespace:agg
amask_no_clip_argb32gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1, rgb_to_gray_mask_u8<0, 1, 2> > amask_no_clip_argb32gray; \/\/----amask_no_clip_argb32gray$/;"	t	namespace:agg
amask_no_clip_argb32r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1> amask_no_clip_argb32r; \/\/----amask_no_clip_argb32r$/;"	t	namespace:agg
amask_no_clip_bgr24b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 0> amask_no_clip_bgr24b;  \/\/----amask_no_clip_bgr24b$/;"	t	namespace:agg
amask_no_clip_bgr24g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 1> amask_no_clip_bgr24g;  \/\/----amask_no_clip_bgr24g$/;"	t	namespace:agg
amask_no_clip_bgr24gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 0, rgb_to_gray_mask_u8<2, 1, 0> > amask_no_clip_bgr24gray;  \/\/----amask_no_clip_bgr24gray$/;"	t	namespace:agg
amask_no_clip_bgr24r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 2> amask_no_clip_bgr24r;  \/\/----amask_no_clip_bgr24r$/;"	t	namespace:agg
amask_no_clip_bgra32a	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 3> amask_no_clip_bgra32a; \/\/----amask_no_clip_bgra32a$/;"	t	namespace:agg
amask_no_clip_bgra32b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0> amask_no_clip_bgra32b; \/\/----amask_no_clip_bgra32b$/;"	t	namespace:agg
amask_no_clip_bgra32g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1> amask_no_clip_bgra32g; \/\/----amask_no_clip_bgra32g$/;"	t	namespace:agg
amask_no_clip_bgra32gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0, rgb_to_gray_mask_u8<2, 1, 0> > amask_no_clip_bgra32gray; \/\/----amask_no_clip_bgra32gray$/;"	t	namespace:agg
amask_no_clip_bgra32r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 2> amask_no_clip_bgra32r; \/\/----amask_no_clip_bgra32r$/;"	t	namespace:agg
amask_no_clip_gray8	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<1, 0> amask_no_clip_gray8;   \/\/----amask_no_clip_gray8$/;"	t	namespace:agg
amask_no_clip_rgb24b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 2> amask_no_clip_rgb24b;  \/\/----amask_no_clip_rgb24b$/;"	t	namespace:agg
amask_no_clip_rgb24g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 1> amask_no_clip_rgb24g;  \/\/----amask_no_clip_rgb24g$/;"	t	namespace:agg
amask_no_clip_rgb24gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 0, rgb_to_gray_mask_u8<0, 1, 2> > amask_no_clip_rgb24gray;  \/\/----amask_no_clip_rgb24gray$/;"	t	namespace:agg
amask_no_clip_rgb24r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<3, 0> amask_no_clip_rgb24r;  \/\/----amask_no_clip_rgb24r$/;"	t	namespace:agg
amask_no_clip_rgba32a	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 3> amask_no_clip_rgba32a; \/\/----amask_no_clip_rgba32a$/;"	t	namespace:agg
amask_no_clip_rgba32b	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 2> amask_no_clip_rgba32b; \/\/----amask_no_clip_rgba32b$/;"	t	namespace:agg
amask_no_clip_rgba32g	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 1> amask_no_clip_rgba32g; \/\/----amask_no_clip_rgba32g$/;"	t	namespace:agg
amask_no_clip_rgba32gray	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0, rgb_to_gray_mask_u8<0, 1, 2> > amask_no_clip_rgba32gray; \/\/----amask_no_clip_rgba32gray$/;"	t	namespace:agg
amask_no_clip_rgba32r	include/agg_alpha_mask_u8.h	/^    typedef amask_no_clip_u8<4, 0> amask_no_clip_rgba32r; \/\/----amask_no_clip_rgba32r$/;"	t	namespace:agg
amask_no_clip_u8	include/agg_alpha_mask_u8.h	/^        amask_no_clip_u8() : m_rbuf(0) {}$/;"	f	class:agg::amask_no_clip_u8
amask_no_clip_u8	include/agg_alpha_mask_u8.h	/^        explicit amask_no_clip_u8(rendering_buffer& rbuf) : m_rbuf(&rbuf) {}$/;"	f	class:agg::amask_no_clip_u8
amask_no_clip_u8	include/agg_alpha_mask_u8.h	/^    class amask_no_clip_u8$/;"	c	namespace:agg
amask_type	include/agg_pixfmt_amask_adaptor.h	/^        typedef AlphaMask amask_type;$/;"	t	class:agg::pixfmt_amask_adaptor
amplitude	examples/distortions.cpp	/^    void amplitude(double v)        { m_amplitude = 1.0 \/ v; }$/;"	f	class:periodic_distortion
angle_tolerance	include/agg_conv_curve.h	/^        double angle_tolerance() const $/;"	f	class:agg::conv_curve
angle_tolerance	include/agg_conv_curve.h	/^        void angle_tolerance(double v) $/;"	f	class:agg::conv_curve
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const $/;"	f	class:agg::curve3
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const $/;"	f	class:agg::curve4
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const { return 0.0; }$/;"	f	class:agg::curve3_inc
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const { return 0.0; }$/;"	f	class:agg::curve4_inc
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const { return m_angle_tolerance;  }$/;"	f	class:agg::curve3_div
angle_tolerance	include/agg_curves.h	/^        double angle_tolerance() const { return m_angle_tolerance;  }$/;"	f	class:agg::curve4_div
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double a) $/;"	f	class:agg::curve3
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double a) { m_angle_tolerance = a; }$/;"	f	class:agg::curve3_div
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double a) { m_angle_tolerance = a; }$/;"	f	class:agg::curve4_div
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double v) $/;"	f	class:agg::curve4
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double) {}$/;"	f	class:agg::curve3_inc
angle_tolerance	include/agg_curves.h	/^        void angle_tolerance(double) {}$/;"	f	class:agg::curve4_inc
apply_gamma	include/agg_rasterizer_scanline_aa.h	/^        unsigned apply_gamma(unsigned cover) const $/;"	f	class:agg::rasterizer_scanline_aa
apply_gamma_dir	include/agg_color_rgba.h	/^        AGG_INLINE void apply_gamma_dir(const GammaLUT& gamma)$/;"	f	struct:agg::rgba16
apply_gamma_dir	include/agg_color_rgba.h	/^        AGG_INLINE void apply_gamma_dir(const GammaLUT& gamma)$/;"	f	struct:agg::rgba8
apply_gamma_dir	include/agg_pixfmt_gray.h	/^        template<class GammaLut> void apply_gamma_dir(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_gray
apply_gamma_dir	include/agg_pixfmt_rgb.h	/^        template<class GammaLut> void apply_gamma_dir(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
apply_gamma_dir	include/agg_pixfmt_rgba.h	/^        template<class GammaLut> void apply_gamma_dir(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
apply_gamma_dir	include/agg_pixfmt_rgba.h	/^        template<class GammaLut> void apply_gamma_dir(const GammaLut& g)$/;"	f	class:agg::pixfmt_custom_blend_rgba
apply_gamma_dir_gray	include/agg_pixfmt_gray.h	/^        apply_gamma_dir_gray(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_dir_gray
apply_gamma_dir_gray	include/agg_pixfmt_gray.h	/^    template<class ColorT, class GammaLut> class apply_gamma_dir_gray$/;"	c	namespace:agg
apply_gamma_dir_rgb	include/agg_pixfmt_rgb.h	/^        apply_gamma_dir_rgb(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_dir_rgb
apply_gamma_dir_rgb	include/agg_pixfmt_rgb.h	/^    template<class ColorT, class Order, class GammaLut> class apply_gamma_dir_rgb$/;"	c	namespace:agg
apply_gamma_dir_rgba	include/agg_pixfmt_rgba.h	/^        apply_gamma_dir_rgba(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_dir_rgba
apply_gamma_dir_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order, class GammaLut> class apply_gamma_dir_rgba$/;"	c	namespace:agg
apply_gamma_inv	include/agg_color_rgba.h	/^        AGG_INLINE void apply_gamma_inv(const GammaLUT& gamma)$/;"	f	struct:agg::rgba16
apply_gamma_inv	include/agg_color_rgba.h	/^        AGG_INLINE void apply_gamma_inv(const GammaLUT& gamma)$/;"	f	struct:agg::rgba8
apply_gamma_inv	include/agg_pixfmt_gray.h	/^        template<class GammaLut> void apply_gamma_inv(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_gray
apply_gamma_inv	include/agg_pixfmt_rgb.h	/^        template<class GammaLut> void apply_gamma_inv(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
apply_gamma_inv	include/agg_pixfmt_rgba.h	/^        template<class GammaLut> void apply_gamma_inv(const GammaLut& g)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
apply_gamma_inv	include/agg_pixfmt_rgba.h	/^        template<class GammaLut> void apply_gamma_inv(const GammaLut& g)$/;"	f	class:agg::pixfmt_custom_blend_rgba
apply_gamma_inv_gray	include/agg_pixfmt_gray.h	/^        apply_gamma_inv_gray(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_inv_gray
apply_gamma_inv_gray	include/agg_pixfmt_gray.h	/^    template<class ColorT, class GammaLut> class apply_gamma_inv_gray$/;"	c	namespace:agg
apply_gamma_inv_rgb	include/agg_pixfmt_rgb.h	/^        apply_gamma_inv_rgb(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_inv_rgb
apply_gamma_inv_rgb	include/agg_pixfmt_rgb.h	/^    template<class ColorT, class Order, class GammaLut> class apply_gamma_inv_rgb$/;"	c	namespace:agg
apply_gamma_inv_rgba	include/agg_pixfmt_rgba.h	/^        apply_gamma_inv_rgba(const GammaLut& gamma) : m_gamma(gamma) {}$/;"	f	class:agg::apply_gamma_inv_rgba
apply_gamma_inv_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order, class GammaLut> class apply_gamma_inv_rgba$/;"	c	namespace:agg
approximation_method	include/agg_conv_curve.h	/^        curve_approximation_method_e approximation_method() const $/;"	f	class:agg::conv_curve
approximation_method	include/agg_conv_curve.h	/^        void approximation_method(curve_approximation_method_e v) $/;"	f	class:agg::conv_curve
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const $/;"	f	class:agg::curve3
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const $/;"	f	class:agg::curve4
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const $/;"	f	class:agg::curve4_div
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const { return curve_div; }$/;"	f	class:agg::curve3_div
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const { return curve_inc; }$/;"	f	class:agg::curve3_inc
approximation_method	include/agg_curves.h	/^        curve_approximation_method_e approximation_method() const { return curve_inc; }$/;"	f	class:agg::curve4_inc
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e v) $/;"	f	class:agg::curve3
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e v) $/;"	f	class:agg::curve4
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e) {}$/;"	f	class:agg::curve3_div
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e) {}$/;"	f	class:agg::curve3_inc
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e) {}$/;"	f	class:agg::curve4_div
approximation_method	include/agg_curves.h	/^        void approximation_method(curve_approximation_method_e) {}$/;"	f	class:agg::curve4_inc
approximation_scale	examples/flash_rasterizer.cpp	/^        void approximation_scale(double s)$/;"	f	class:agg::compound_shape
approximation_scale	examples/flash_rasterizer2.cpp	/^        void approximation_scale(double s)$/;"	f	class:agg::compound_shape
approximation_scale	include/agg_arc.h	/^        double approximation_scale() const { return m_scale;  }$/;"	f	class:agg::arc
approximation_scale	include/agg_conv_contour.h	/^        double approximation_scale() const { return base_type::generator().approximation_scale(); }$/;"	f	struct:agg::conv_contour
approximation_scale	include/agg_conv_contour.h	/^        void approximation_scale(double as) { base_type::generator().approximation_scale(as); }$/;"	f	struct:agg::conv_contour
approximation_scale	include/agg_conv_curve.h	/^        double approximation_scale() const $/;"	f	class:agg::conv_curve
approximation_scale	include/agg_conv_curve.h	/^        void approximation_scale(double s) $/;"	f	class:agg::conv_curve
approximation_scale	include/agg_conv_segmentator.h	/^        double approximation_scale() const { return base_type::vpgen().approximation_scale();  }$/;"	f	struct:agg::conv_segmentator
approximation_scale	include/agg_conv_segmentator.h	/^        void approximation_scale(double s) { base_type::vpgen().approximation_scale(s);        }$/;"	f	struct:agg::conv_segmentator
approximation_scale	include/agg_conv_stroke.h	/^        double approximation_scale() const { return base_type::generator().approximation_scale(); }$/;"	f	struct:agg::conv_stroke
approximation_scale	include/agg_conv_stroke.h	/^        void approximation_scale(double as) { base_type::generator().approximation_scale(as); }$/;"	f	struct:agg::conv_stroke
approximation_scale	include/agg_curves.h	/^        double approximation_scale() const $/;"	f	class:agg::curve3
approximation_scale	include/agg_curves.h	/^        double approximation_scale() const { return m_approximation_scale;  }$/;"	f	class:agg::curve3_div
approximation_scale	include/agg_curves.h	/^        double approximation_scale() const { return m_approximation_scale;  }$/;"	f	class:agg::curve4_div
approximation_scale	include/agg_curves.h	/^        double approximation_scale() const { return m_curve_inc.approximation_scale(); }$/;"	f	class:agg::curve4
approximation_scale	include/agg_curves.h	/^        void approximation_scale(double s) $/;"	f	class:agg::curve3
approximation_scale	include/agg_curves.h	/^        void approximation_scale(double s) $/;"	f	class:agg::curve4
approximation_scale	include/agg_curves.h	/^        void approximation_scale(double s) { m_approximation_scale = s; }$/;"	f	class:agg::curve3_div
approximation_scale	include/agg_curves.h	/^        void approximation_scale(double s) { m_approximation_scale = s; }$/;"	f	class:agg::curve4_div
approximation_scale	include/agg_ellipse.h	/^    inline void ellipse::approximation_scale(double scale)$/;"	f	class:agg::ellipse
approximation_scale	include/agg_math_stroke.h	/^        double approximation_scale() const { return m_approx_scale; }$/;"	f	class:agg::math_stroke
approximation_scale	include/agg_math_stroke.h	/^        void approximation_scale(double as) { m_approx_scale = as; }$/;"	f	class:agg::math_stroke
approximation_scale	include/agg_rounded_rect.h	/^        double approximation_scale() const { return m_arc.approximation_scale(); }$/;"	f	class:agg::rounded_rect
approximation_scale	include/agg_rounded_rect.h	/^        void approximation_scale(double s) { m_arc.approximation_scale(s); }$/;"	f	class:agg::rounded_rect
approximation_scale	include/agg_vcgen_contour.h	/^        double approximation_scale() const { return m_stroker.approximation_scale(); }$/;"	f	class:agg::vcgen_contour
approximation_scale	include/agg_vcgen_contour.h	/^        void approximation_scale(double as) { m_stroker.approximation_scale(as); }$/;"	f	class:agg::vcgen_contour
approximation_scale	include/agg_vcgen_stroke.h	/^        double approximation_scale() const { return m_stroker.approximation_scale(); }$/;"	f	class:agg::vcgen_stroke
approximation_scale	include/agg_vcgen_stroke.h	/^        void approximation_scale(double as) { m_stroker.approximation_scale(as); }$/;"	f	class:agg::vcgen_stroke
approximation_scale	include/agg_vpgen_segmentator.h	/^        double approximation_scale() const { return m_approximation_scale;  }$/;"	f	class:agg::vpgen_segmentator
approximation_scale	include/agg_vpgen_segmentator.h	/^        void approximation_scale(double s) { m_approximation_scale = s;     }$/;"	f	class:agg::vpgen_segmentator
approximation_scale	src/agg_arc.cpp	/^    void arc::approximation_scale(double s)$/;"	f	class:agg::arc
approximation_scale	src/agg_curves.cpp	/^    double curve3_inc::approximation_scale() const $/;"	f	class:agg::curve3_inc
approximation_scale	src/agg_curves.cpp	/^    double curve4_inc::approximation_scale() const $/;"	f	class:agg::curve4_inc
approximation_scale	src/agg_curves.cpp	/^    void curve3_inc::approximation_scale(double s) $/;"	f	class:agg::curve3_inc
approximation_scale	src/agg_curves.cpp	/^    void curve4_inc::approximation_scale(double s) $/;"	f	class:agg::curve4_inc
arc	include/agg_arc.h	/^        arc() : m_scale(1.0), m_initialized(false) {}$/;"	f	class:agg::arc
arc	include/agg_arc.h	/^    class arc$/;"	c	namespace:agg
arc	src/agg_arc.cpp	/^    arc::arc(double x,  double y, $/;"	f	class:agg::arc
arc_rel	include/agg_path_storage.h	/^    void path_base<VC>::arc_rel(double rx, double ry,$/;"	f	class:agg::path_base
arc_to	include/agg_path_storage.h	/^    void path_base<VC>::arc_to(double rx, double ry,$/;"	f	class:agg::path_base
arc_to_bezier	src/agg_bezier_arc.cpp	/^    void arc_to_bezier(double cx, double cy, double rx, double ry, $/;"	f	namespace:agg
area	include/agg_rasterizer_compound_aa.h	/^            int x, area, cover; $/;"	m	struct:agg::rasterizer_compound_aa::cell_info
area	include/agg_rasterizer_compound_aa.h	/^        int   area;$/;"	m	struct:agg::cell_style_aa
area	include/agg_rasterizer_scanline_aa.h	/^        int area;$/;"	m	struct:agg::cell_aa
argb8_packed	include/agg_color_rgba.h	/^    inline rgba8 argb8_packed(unsigned v)$/;"	f	namespace:agg
argb_e	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	g	struct:agg::order_argb
arrange_orientations	examples/svg_viewer/agg_svg_path_renderer.h	/^        void arrange_orientations()$/;"	f	class:agg::svg::path_renderer
arrange_orientations	include/agg_path_storage.h	/^    unsigned path_base<VC>::arrange_orientations(unsigned start, $/;"	f	class:agg::path_base
arrange_orientations_all_paths	include/agg_path_storage.h	/^    void path_base<VC>::arrange_orientations_all_paths(path_flags_e orientation)$/;"	f	class:agg::path_base
arrange_polygon_orientation	include/agg_path_storage.h	/^    unsigned path_base<VC>::arrange_polygon_orientation(unsigned start, $/;"	f	class:agg::path_base
arrange_vertices	include/agg_span_gouraud.h	/^        void arrange_vertices(coord_type* coord) const$/;"	f	class:agg::span_gouraud
array_size	examples/image_alpha.cpp	/^            array_size = 256 * 3$/;"	e	enum:agg::span_conv_brightness_alpha_rgb8::array_size_e	file:
array_size_e	examples/image_alpha.cpp	/^        enum array_size_e$/;"	g	class:agg::span_conv_brightness_alpha_rgb8	file:
arrowhead	include/agg_arrowhead.h	/^    class arrowhead$/;"	c	namespace:agg
arrowhead	src/agg_arrowhead.cpp	/^    arrowhead::arrowhead() :$/;"	f	class:agg::arrowhead
ascender	font_freetype/agg_font_freetype.cpp	/^    double font_engine_freetype_base::ascender() const$/;"	f	class:agg::font_engine_freetype_base
aspect_ratio	include/agg_trans_viewport.h	/^        aspect_ratio_e aspect_ratio() const { return m_aspect; }$/;"	f	class:agg::trans_viewport
aspect_ratio_e	include/agg_trans_viewport.h	/^    enum aspect_ratio_e$/;"	g	namespace:agg
aspect_ratio_meet	include/agg_trans_viewport.h	/^        aspect_ratio_meet,$/;"	e	enum:agg::aspect_ratio_e
aspect_ratio_slice	include/agg_trans_viewport.h	/^        aspect_ratio_slice$/;"	e	enum:agg::aspect_ratio_e
aspect_ratio_stretch	include/agg_trans_viewport.h	/^        aspect_ratio_stretch,$/;"	e	enum:agg::aspect_ratio_e
at	include/agg_array.h	/^              T& at(unsigned i)                 { return m_array[i]; }$/;"	f	class:agg::pod_array
at	include/agg_array.h	/^              T& at(unsigned i)                 { return m_array[i]; }$/;"	f	class:agg::pod_array_adaptor
at	include/agg_array.h	/^              T& at(unsigned i)                 { return m_array[i]; }$/;"	f	class:agg::pod_auto_array
at	include/agg_array.h	/^              T& at(unsigned i)                 { return m_array[i]; }$/;"	f	class:agg::pod_auto_vector
at	include/agg_array.h	/^              T& at(unsigned i)                 { return m_array[i]; }$/;"	f	class:agg::pod_vector
at	include/agg_array.h	/^              value_type& at(unsigned i)                 { return m_array[m_start + i]; }$/;"	f	class:agg::range_adaptor
at	include/agg_array.h	/^        T& at(unsigned i) $/;"	f	class:agg::pod_bvector
at	include/agg_array.h	/^        const T& at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_array
at	include/agg_array.h	/^        const T& at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_array_adaptor
at	include/agg_array.h	/^        const T& at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_auto_array
at	include/agg_array.h	/^        const T& at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_auto_vector
at	include/agg_array.h	/^        const T& at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_vector
at	include/agg_array.h	/^        const T& at(unsigned i) const$/;"	f	class:agg::pod_bvector
at	include/agg_array.h	/^        const value_type& at(unsigned i) const           { return m_array[m_start + i]; }$/;"	f	class:agg::range_adaptor
atom	examples/mol_view.cpp	/^    const atom_type& atom(unsigned idx) const { return m_atoms[idx]; }$/;"	f	class:molecule
atom_color_N	examples/mol_view.cpp	/^    atom_color_N       = 1,$/;"	e	enum:atom_color_e	file:
atom_color_O	examples/mol_view.cpp	/^    atom_color_O       = 2,$/;"	e	enum:atom_color_e	file:
atom_color_P	examples/mol_view.cpp	/^    atom_color_P       = 4,$/;"	e	enum:atom_color_e	file:
atom_color_S	examples/mol_view.cpp	/^    atom_color_S       = 3,$/;"	e	enum:atom_color_e	file:
atom_color_e	examples/mol_view.cpp	/^enum atom_color_e$/;"	g	file:
atom_color_general	examples/mol_view.cpp	/^    atom_color_general = 0,$/;"	e	enum:atom_color_e	file:
atom_color_halogen	examples/mol_view.cpp	/^    atom_color_halogen = 5,$/;"	e	enum:atom_color_e	file:
atom_type	examples/mol_view.cpp	/^struct atom_type$/;"	s	file:
attach	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::attach(const char* file_name)$/;"	f	class:agg::font_engine_freetype_base
attach	include/agg_alpha_mask_u8.h	/^        void attach(rendering_buffer& rbuf) { m_rbuf = &rbuf; }$/;"	f	class:agg::alpha_mask_u8
attach	include/agg_alpha_mask_u8.h	/^        void attach(rendering_buffer& rbuf) { m_rbuf = &rbuf; }$/;"	f	class:agg::amask_no_clip_u8
attach	include/agg_conv_adaptor_vcgen.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_adaptor_vcgen
attach	include/agg_conv_adaptor_vpgen.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_adaptor_vpgen
attach	include/agg_conv_close_polygon.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_close_polygon
attach	include/agg_conv_curve.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_curve
attach	include/agg_conv_transform.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_transform
attach	include/agg_conv_unclose_polygon.h	/^        void attach(VertexSource& source) { m_source = &source; }$/;"	f	class:agg::conv_unclose_polygon
attach	include/agg_image_accessors.h	/^        void attach(const pixfmt_type& pixf)$/;"	f	class:agg::image_accessor_clip
attach	include/agg_image_accessors.h	/^        void attach(const pixfmt_type& pixf)$/;"	f	class:agg::image_accessor_clone
attach	include/agg_image_accessors.h	/^        void attach(const pixfmt_type& pixf)$/;"	f	class:agg::image_accessor_no_clip
attach	include/agg_image_accessors.h	/^        void attach(const pixfmt_type& pixf)$/;"	f	class:agg::image_accessor_wrap
attach	include/agg_pixfmt_gray.h	/^        bool attach(PixFmt& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_alpha_blend_gray
attach	include/agg_pixfmt_gray.h	/^        void attach(rbuf_type& rb) { m_rbuf = &rb; }$/;"	f	class:agg::pixfmt_alpha_blend_gray
attach	include/agg_pixfmt_rgb.h	/^        bool attach(PixFmt& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
attach	include/agg_pixfmt_rgb.h	/^        void attach(rbuf_type& rb) { m_rbuf = &rb; }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
attach	include/agg_pixfmt_rgb_packed.h	/^        bool attach(PixFmt& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
attach	include/agg_pixfmt_rgb_packed.h	/^        void attach(rbuf_type& rb) { m_rbuf = &rb; }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
attach	include/agg_pixfmt_rgba.h	/^        bool attach(PixFmt& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
attach	include/agg_pixfmt_rgba.h	/^        bool attach(PixFmt& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_custom_blend_rgba
attach	include/agg_pixfmt_rgba.h	/^        void attach(rbuf_type& rb) { m_rbuf = &rb; }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
attach	include/agg_pixfmt_rgba.h	/^        void attach(rbuf_type& rb) { m_rbuf = &rb; }$/;"	f	class:agg::pixfmt_custom_blend_rgba
attach	include/agg_pixfmt_transposer.h	/^        void attach(pixfmt_type& pixf) { m_pixf = &pixf; }$/;"	f	class:agg::pixfmt_transposer
attach	include/agg_rasterizer_outline.h	/^        void attach(Renderer& ren) { m_ren = &ren; }$/;"	f	class:agg::rasterizer_outline
attach	include/agg_rasterizer_outline_aa.h	/^        void attach(Renderer& ren) { m_ren = &ren; }$/;"	f	class:agg::rasterizer_outline_aa
attach	include/agg_renderer_base.h	/^        void attach(pixfmt_type& ren)$/;"	f	class:agg::renderer_base
attach	include/agg_renderer_mclip.h	/^        void attach(pixfmt_type& pixf)$/;"	f	class:agg::renderer_mclip
attach	include/agg_renderer_outline_aa.h	/^        void attach(base_ren_type& ren) { m_ren = &ren; }$/;"	f	class:agg::renderer_outline_aa
attach	include/agg_renderer_outline_image.h	/^        void attach(base_ren_type& ren) { m_ren = &ren; }$/;"	f	class:agg::renderer_outline_image
attach	include/agg_renderer_primitives.h	/^        void attach(base_ren_type& ren) { m_ren = &ren; }$/;"	f	class:agg::renderer_primitives
attach	include/agg_renderer_raster_text.h	/^        void attach(ren_type& ren) { m_ren = &ren; }$/;"	f	class:agg::renderer_raster_htext_solid
attach	include/agg_renderer_scanline.h	/^        void attach(base_ren_type& ren)$/;"	f	class:agg::renderer_scanline_aa_solid
attach	include/agg_renderer_scanline.h	/^        void attach(base_ren_type& ren)$/;"	f	class:agg::renderer_scanline_bin_solid
attach	include/agg_renderer_scanline.h	/^        void attach(base_ren_type& ren, $/;"	f	class:agg::renderer_scanline_aa
attach	include/agg_renderer_scanline.h	/^        void attach(base_ren_type& ren, $/;"	f	class:agg::renderer_scanline_bin
attach	include/agg_rendering_buffer.h	/^        void attach(T* buf, unsigned width, unsigned height, int stride)$/;"	f	class:agg::row_accessor
attach	include/agg_rendering_buffer.h	/^        void attach(T* buf, unsigned width, unsigned height, int stride)$/;"	f	class:agg::row_ptr_cache
attach	include/agg_span_image_filter.h	/^        void attach(source_type& v) { m_src = &v; }$/;"	f	class:agg::span_image_filter
attach	include/agg_span_pattern_gray.h	/^        void   attach(source_type& v)      { m_src = &v; }$/;"	f	class:agg::span_pattern_gray
attach	include/agg_span_pattern_rgb.h	/^        void   attach(source_type& v)      { m_src = &v; }$/;"	f	class:agg::span_pattern_rgb
attach	include/agg_span_pattern_rgba.h	/^        void   attach(source_type& v)      { m_src = &v; }$/;"	f	class:agg::span_pattern_rgba
attach1	include/agg_conv_concat.h	/^        void attach1(VS1& source) { m_source1 = &source; }$/;"	f	class:agg::conv_concat
attach1	include/agg_conv_gpc.h	/^        void attach1(VSA& source) { m_src_a = &source; }$/;"	f	class:agg::conv_gpc
attach2	include/agg_conv_concat.h	/^        void attach2(VS2& source) { m_source2 = &source; }$/;"	f	class:agg::conv_concat
attach2	include/agg_conv_gpc.h	/^        void attach2(VSB& source) { m_src_b = &source; }$/;"	f	class:agg::conv_gpc
attach_alpha_mask	include/agg_pixfmt_amask_adaptor.h	/^        void attach_alpha_mask(const amask_type& mask) { m_mask = &mask; }$/;"	f	class:agg::pixfmt_amask_adaptor
attach_buffer_to_BBitmap	src/platform/BeOS/agg_platform_support.cpp	/^attach_buffer_to_BBitmap(agg::rendering_buffer& buffer, BBitmap* bitmap, bool flipY)$/;"	f	file:
attach_converter	include/agg_span_converter.h	/^        void attach_converter(SpanConverter& span_cnv) { m_span_cnv = &span_cnv; }$/;"	f	class:agg::span_converter
attach_generator	include/agg_span_converter.h	/^        void attach_generator(SpanGenerator& span_gen) { m_span_gen = &span_gen; }$/;"	f	class:agg::span_converter
attach_pixfmt	include/agg_pixfmt_amask_adaptor.h	/^        bool attach_pixfmt(PixFmt2& pixf, int x1, int y1, int x2, int y2)$/;"	f	class:agg::pixfmt_amask_adaptor
attach_pixfmt	include/agg_pixfmt_amask_adaptor.h	/^        void attach_pixfmt(pixfmt_type& pixf)          { m_pixf = &pixf; }$/;"	f	class:agg::pixfmt_amask_adaptor
attach_to_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::attach_to_bmp(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
attr_storage	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef pod_bvector<path_attributes>   attr_storage;$/;"	t	class:agg::svg::path_renderer
auto_close	include/agg_rasterizer_scanline_aa.h	/^        void auto_close(bool flag) { m_auto_close = flag; }$/;"	f	class:agg::rasterizer_scanline_aa
auto_close	include/agg_vpgen_clip_polygon.h	/^        static bool auto_close()   { return true;  }$/;"	f	class:agg::vpgen_clip_polygon
auto_close	include/agg_vpgen_clip_polyline.h	/^        static bool auto_close()   { return false; }$/;"	f	class:agg::vpgen_clip_polyline
auto_close	include/agg_vpgen_segmentator.h	/^        static bool auto_close()   { return false; }$/;"	f	class:agg::vpgen_segmentator
auto_detect_orientation	include/agg_conv_contour.h	/^        bool auto_detect_orientation() const { return base_type::generator().auto_detect_orientation(); }$/;"	f	struct:agg::conv_contour
auto_detect_orientation	include/agg_conv_contour.h	/^        void auto_detect_orientation(bool v) { base_type::generator().auto_detect_orientation(v); }$/;"	f	struct:agg::conv_contour
auto_detect_orientation	include/agg_vcgen_contour.h	/^        bool auto_detect_orientation() const { return m_auto_detect; }$/;"	f	class:agg::vcgen_contour
auto_detect_orientation	include/agg_vcgen_contour.h	/^        void auto_detect_orientation(bool v) { m_auto_detect = v; }$/;"	f	class:agg::vcgen_contour
auto_unclose	include/agg_vpgen_clip_polygon.h	/^        static bool auto_unclose() { return false; }$/;"	f	class:agg::vpgen_clip_polygon
auto_unclose	include/agg_vpgen_clip_polyline.h	/^        static bool auto_unclose() { return true; }$/;"	f	class:agg::vpgen_clip_polyline
auto_unclose	include/agg_vpgen_segmentator.h	/^        static bool auto_unclose() { return false; }$/;"	f	class:agg::vpgen_segmentator
average_bond_len	examples/mol_view.cpp	/^    double average_bond_len() const { return m_avr_len; }$/;"	f	class:molecule
b	examples/svg_viewer/agg_svg_parser.cpp	/^        int8u r, g, b, a;$/;"	m	struct:agg::svg::named_color	file:
b	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::recursive_blur_calc_rgba
b	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::stack_blur_calc_rgba
b	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::recursive_blur_calc_rgb
b	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::stack_blur_calc_rgb
b	include/agg_color_rgba.h	/^        double b;$/;"	m	struct:agg::rgba
b	include/agg_color_rgba.h	/^        value_type b;$/;"	m	struct:agg::rgba16
b	include/agg_color_rgba.h	/^        value_type b;$/;"	m	struct:agg::rgba8
b	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> r, g, b, a;$/;"	m	struct:agg::color_interpolator
background_color	include/agg_image_accessors.h	/^        void background_color(const color_type& bk)$/;"	f	class:agg::image_accessor_clip
background_color	include/agg_span_image_filter_gray.h	/^        const color_type& background_color() const { return m_back_color; }$/;"	f	class:agg::span_image_filter_gray_bilinear_clip
background_color	include/agg_span_image_filter_gray.h	/^        void background_color(const color_type& v)   { m_back_color = v; }$/;"	f	class:agg::span_image_filter_gray_bilinear_clip
background_color	include/agg_span_image_filter_rgb.h	/^        const color_type& background_color() const { return m_back_color; }$/;"	f	class:agg::span_image_filter_rgb_bilinear_clip
background_color	include/agg_span_image_filter_rgb.h	/^        void background_color(const color_type& v)   { m_back_color = v; }$/;"	f	class:agg::span_image_filter_rgb_bilinear_clip
background_color	include/agg_span_image_filter_rgba.h	/^        const color_type& background_color() const { return m_back_color; }$/;"	f	class:agg::span_image_filter_rgba_bilinear_clip
background_color	include/agg_span_image_filter_rgba.h	/^        void background_color(const color_type& v)   { m_back_color = v; }$/;"	f	class:agg::span_image_filter_rgba_bilinear_clip
background_color	include/ctrl/agg_gamma_ctrl.h	/^        void background_color(const ColorT& c)   { m_background_color = c; }$/;"	f	class:agg::gamma_ctrl
background_color	include/ctrl/agg_rbox_ctrl.h	/^        void background_color(const ColorT& c) { m_background_color = c; }$/;"	f	class:agg::rbox_ctrl
background_color	include/ctrl/agg_scale_ctrl.h	/^        void background_color(const ColorT& c) { m_background_color = c; }$/;"	f	class:agg::scale_ctrl
background_color	include/ctrl/agg_slider_ctrl.h	/^        void background_color(const ColorT& c) { m_background_color = c; }$/;"	f	class:agg::slider_ctrl
background_color	include/ctrl/agg_spline_ctrl.h	/^        void background_color(const ColorT& c)   { m_background_color = c; }$/;"	f	class:agg::spline_ctrl
base_height	include/agg_trans_double_path.h	/^        double base_height() const { return m_base_height; }$/;"	f	class:agg::trans_double_path
base_height	include/agg_trans_double_path.h	/^        void   base_height(double v)  { m_base_height = v; }$/;"	f	class:agg::trans_double_path
base_length	include/agg_trans_double_path.h	/^        double base_length() const { return m_base_length; }$/;"	f	class:agg::trans_double_path
base_length	include/agg_trans_double_path.h	/^        void   base_length(double v)  { m_base_length = v; }$/;"	f	class:agg::trans_double_path
base_length	include/agg_trans_single_path.h	/^        double base_length() const { return m_base_length; }$/;"	f	class:agg::trans_single_path
base_length	include/agg_trans_single_path.h	/^        void   base_length(double v)  { m_base_length = v; }$/;"	f	class:agg::trans_single_path
base_line	include/agg_glyph_raster_bin.h	/^        double base_line() const { return m_font[1]; }$/;"	f	class:agg::glyph_raster_bin
base_mask	include/agg_color_gray.h	/^            base_mask  = base_scale - 1$/;"	e	enum:agg::gray16::base_scale_e
base_mask	include/agg_color_gray.h	/^            base_mask  = base_scale - 1$/;"	e	enum:agg::gray8::base_scale_e
base_mask	include/agg_color_rgba.h	/^            base_mask  = base_scale - 1$/;"	e	enum:agg::rgba16::base_scale_e
base_mask	include/agg_color_rgba.h	/^            base_mask  = base_scale - 1$/;"	e	enum:agg::rgba8::base_scale_e
base_mask	include/agg_pixfmt_gray.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
base_mask	include/agg_pixfmt_rgb.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb::base_scale_e
base_mask	include/agg_pixfmt_rgb_packed.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb_packed::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_adaptor_clip_to_dst_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_adaptor_clip_to_dst_rgba_pre::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_adaptor_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_op_adaptor_clip_to_dst_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_op_adaptor_clip_to_dst_rgba_pre::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_op_adaptor_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask $/;"	e	enum:agg::comp_op_adaptor_rgba_pre::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::blender_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::blender_rgba_pre::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_clear::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_color_burn::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_color_dodge::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_contrast::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_darken::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_difference::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_dst_atop::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_dst_in::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_dst_out::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_dst_over::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_exclusion::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_hard_light::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_invert::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_invert_rgb::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_lighten::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_minus::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_multiply::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_overlay::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_plus::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_screen::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_soft_light::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_src_atop::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_src_in::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_src_out::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_src_over::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::comp_op_rgba_xor::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::copy_or_blend_rgba_wrapper::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::pixfmt_alpha_blend_rgba::base_scale_e
base_mask	include/agg_pixfmt_rgba.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::pixfmt_custom_blend_rgba::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask       = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_gray_affine::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_gray::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_gray_2x2::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_gray_bilinear::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_gray_bilinear_clip::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_gray_nn::base_scale_e
base_mask	include/agg_span_image_filter_gray.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_gray::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask       = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_rgb_affine::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgb::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgb_2x2::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgb_bilinear::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgb_bilinear_clip::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgb_nn::base_scale_e
base_mask	include/agg_span_image_filter_rgb.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_rgb::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask       = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_rgba_affine::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgba::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgba_2x2::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgba_bilinear::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgba_bilinear_clip::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask$/;"	e	enum:agg::span_image_filter_rgba_nn::base_scale_e
base_mask	include/agg_span_image_filter_rgba.h	/^            base_mask  = color_type::base_mask,$/;"	e	enum:agg::span_image_resample_rgba::base_scale_e
base_offset	examples/trans_polar.cpp	/^        void base_offset(double dx, double dy) { m_base_x = dx; m_base_y = dy; }$/;"	f	class:agg::trans_polar
base_ren_type	examples/freetype_test.cpp	/^    typedef agg::renderer_base<pixfmt_type> base_ren_type;$/;"	t	class:the_application	file:
base_ren_type	examples/truetype_test.cpp	/^    typedef agg::renderer_base<pixfmt_type> base_ren_type;$/;"	t	class:the_application	file:
base_ren_type	include/agg_renderer_markers.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_markers
base_ren_type	include/agg_renderer_mclip.h	/^        typedef renderer_base<pixfmt_type> base_ren_type;$/;"	t	class:agg::renderer_mclip
base_ren_type	include/agg_renderer_outline_aa.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_outline_aa
base_ren_type	include/agg_renderer_outline_image.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_outline_image
base_ren_type	include/agg_renderer_primitives.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_primitives
base_ren_type	include/agg_renderer_scanline.h	/^        typedef BaseRenderer  base_ren_type;$/;"	t	class:agg::renderer_scanline_aa
base_ren_type	include/agg_renderer_scanline.h	/^        typedef BaseRenderer  base_ren_type;$/;"	t	class:agg::renderer_scanline_bin
base_ren_type	include/agg_renderer_scanline.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_scanline_aa_solid
base_ren_type	include/agg_renderer_scanline.h	/^        typedef BaseRenderer base_ren_type;$/;"	t	class:agg::renderer_scanline_bin_solid
base_renderer	examples/graph_test.cpp	/^typedef agg::renderer_base<pixfmt> base_renderer;$/;"	t	file:
base_scale	examples/trans_polar.cpp	/^        void base_scale(double v)  { m_base_scale = v; }$/;"	f	class:agg::trans_polar
base_scale	include/agg_color_gray.h	/^            base_scale = 1 << base_shift,$/;"	e	enum:agg::gray16::base_scale_e
base_scale	include/agg_color_gray.h	/^            base_scale = 1 << base_shift,$/;"	e	enum:agg::gray8::base_scale_e
base_scale	include/agg_color_rgba.h	/^            base_scale = 1 << base_shift,$/;"	e	enum:agg::rgba16::base_scale_e
base_scale	include/agg_color_rgba.h	/^            base_scale = 1 << base_shift,$/;"	e	enum:agg::rgba8::base_scale_e
base_scale	include/agg_pixfmt_gray.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
base_scale	include/agg_pixfmt_rgb.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb::base_scale_e
base_scale	include/agg_pixfmt_rgb_packed.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb_packed::base_scale_e
base_scale	include/agg_pixfmt_rgba.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::comp_op_rgba_difference::base_scale_e
base_scale	include/agg_pixfmt_rgba.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::copy_or_blend_rgba_wrapper::base_scale_e
base_scale	include/agg_pixfmt_rgba.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::pixfmt_alpha_blend_rgba::base_scale_e
base_scale	include/agg_pixfmt_rgba.h	/^            base_scale = color_type::base_scale,$/;"	e	enum:agg::pixfmt_custom_blend_rgba::base_scale_e
base_scale_e	examples/compositing.cpp	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::gradient_linear_color	file:
base_scale_e	examples/image_resample.cpp	/^enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	file:
base_scale_e	examples/pattern_resample.cpp	/^enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	file:
base_scale_e	include/agg_color_gray.h	/^        enum base_scale_e$/;"	g	struct:agg::gray16
base_scale_e	include/agg_color_gray.h	/^        enum base_scale_e$/;"	g	struct:agg::gray8
base_scale_e	include/agg_color_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::rgba16
base_scale_e	include/agg_color_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::rgba8
base_scale_e	include/agg_pixfmt_gray.h	/^        enum base_scale_e $/;"	g	class:agg::pixfmt_alpha_blend_gray
base_scale_e	include/agg_pixfmt_gray.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::blender_gray
base_scale_e	include/agg_pixfmt_gray.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::blender_gray_pre
base_scale_e	include/agg_pixfmt_rgb.h	/^        enum base_scale_e $/;"	g	class:agg::pixfmt_alpha_blend_rgb
base_scale_e	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	class:agg::blender_rgb_gamma
base_scale_e	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::blender_rgb
base_scale_e	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::blender_rgb_pre
base_scale_e	include/agg_pixfmt_rgb_packed.h	/^        enum base_scale_e $/;"	g	class:agg::pixfmt_alpha_blend_rgb_packed
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e $/;"	g	struct:agg::blender_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	g	struct:agg::blender_rgba_plain
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::pixfmt_alpha_blend_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::pixfmt_custom_blend_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::blender_rgba_pre
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_adaptor_clip_to_dst_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_adaptor_clip_to_dst_rgba_pre
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_adaptor_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_adaptor_clip_to_dst_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_adaptor_clip_to_dst_rgba_pre
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_adaptor_rgba
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_adaptor_rgba_pre
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_clear
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_color_burn
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_color_dodge
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_contrast
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_darken
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_difference
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_dst_atop
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_dst_in
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_dst_out
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_dst_over
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_exclusion
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_hard_light
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_invert
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_invert_rgb
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_lighten
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_minus
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_multiply
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_overlay
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_plus
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_screen
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_soft_light
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_src_atop
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_src_in
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_src_out
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_src_over
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::comp_op_rgba_xor
base_scale_e	include/agg_pixfmt_rgba.h	/^        enum base_scale_e$/;"	g	struct:agg::copy_or_blend_rgba_wrapper
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_gray
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_gray_2x2
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_gray_bilinear
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_gray_bilinear_clip
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_gray_nn
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_gray
base_scale_e	include/agg_span_image_filter_gray.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_gray_affine
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgb
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgb_2x2
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgb_bilinear
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgb_bilinear_clip
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgb_nn
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_rgb
base_scale_e	include/agg_span_image_filter_rgb.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_rgb_affine
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgba
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgba_2x2
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgba_bilinear
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgba_bilinear_clip
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_filter_rgba_nn
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_rgba
base_scale_e	include/agg_span_image_filter_rgba.h	/^        enum base_scale_e$/;"	g	class:agg::span_image_resample_rgba_affine
base_shift	examples/compositing.cpp	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::gradient_linear_color::base_scale_e	file:
base_shift	examples/image_resample.cpp	/^enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:base_scale_e	file:
base_shift	examples/pattern_resample.cpp	/^enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:base_scale_e	file:
base_shift	include/agg_color_gray.h	/^            base_shift = 16,$/;"	e	enum:agg::gray16::base_scale_e
base_shift	include/agg_color_gray.h	/^            base_shift = 8,$/;"	e	enum:agg::gray8::base_scale_e
base_shift	include/agg_color_rgba.h	/^            base_shift = 16,$/;"	e	enum:agg::rgba16::base_scale_e
base_shift	include/agg_color_rgba.h	/^            base_shift = 8,$/;"	e	enum:agg::rgba8::base_scale_e
base_shift	include/agg_pixfmt_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
base_shift	include/agg_pixfmt_gray.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_gray::base_scale_e
base_shift	include/agg_pixfmt_gray.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_gray_pre::base_scale_e
base_shift	include/agg_pixfmt_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb::base_scale_e
base_shift	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_rgb::base_scale_e
base_shift	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_rgb_gamma::base_scale_e
base_shift	include/agg_pixfmt_rgb.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_rgb_pre::base_scale_e
base_shift	include/agg_pixfmt_rgb_packed.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::pixfmt_alpha_blend_rgb_packed::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::blender_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::blender_rgba_pre::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_adaptor_clip_to_dst_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_adaptor_clip_to_dst_rgba_pre::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_adaptor_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_adaptor_clip_to_dst_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_adaptor_clip_to_dst_rgba_pre::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_adaptor_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_adaptor_rgba_pre::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_clear::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_color_burn::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_color_dodge::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_contrast::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_darken::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_difference::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_dst_atop::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_dst_in::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_dst_out::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_dst_over::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_exclusion::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_hard_light::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_invert::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_invert_rgb::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_lighten::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_minus::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_multiply::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_overlay::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_plus::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_screen::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_soft_light::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_src_atop::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_src_in::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_src_out::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_src_over::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::comp_op_rgba_xor::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::copy_or_blend_rgba_wrapper::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::pixfmt_alpha_blend_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::pixfmt_custom_blend_rgba::base_scale_e
base_shift	include/agg_pixfmt_rgba.h	/^        enum base_scale_e { base_shift = color_type::base_shift };$/;"	e	enum:agg::blender_rgba_plain::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift      = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_gray_affine::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_gray::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_gray_2x2::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_gray_bilinear::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_gray_bilinear_clip::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_gray_nn::base_scale_e
base_shift	include/agg_span_image_filter_gray.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_gray::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift      = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_rgb_affine::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgb::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgb_2x2::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgb_bilinear::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgb_bilinear_clip::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgb_nn::base_scale_e
base_shift	include/agg_span_image_filter_rgb.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_rgb::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift      = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_rgba_affine::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgba::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgba_2x2::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgba_bilinear::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgba_bilinear_clip::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_filter_rgba_nn::base_scale_e
base_shift	include/agg_span_image_filter_rgba.h	/^            base_shift = color_type::base_shift,$/;"	e	enum:agg::span_image_resample_rgba::base_scale_e
base_type	include/agg_conv_bspline.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_bspline> base_type;$/;"	t	struct:agg::conv_bspline
base_type	include/agg_conv_clip_polygon.h	/^        typedef conv_adaptor_vpgen<VertexSource, vpgen_clip_polygon> base_type;$/;"	t	struct:agg::conv_clip_polygon
base_type	include/agg_conv_clip_polyline.h	/^        typedef conv_adaptor_vpgen<VertexSource, vpgen_clip_polyline> base_type;$/;"	t	struct:agg::conv_clip_polyline
base_type	include/agg_conv_contour.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_contour> base_type;$/;"	t	struct:agg::conv_contour
base_type	include/agg_conv_dash.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_dash, Markers> base_type;$/;"	t	struct:agg::conv_dash
base_type	include/agg_conv_marker_adaptor.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_vertex_sequence, Markers> base_type;$/;"	t	struct:agg::conv_marker_adaptor
base_type	include/agg_conv_segmentator.h	/^        typedef conv_adaptor_vpgen<VertexSource, vpgen_segmentator> base_type;$/;"	t	struct:agg::conv_segmentator
base_type	include/agg_conv_shorten_path.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_vertex_sequence> base_type;$/;"	t	class:agg::conv_shorten_path
base_type	include/agg_conv_smooth_poly1.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_smooth_poly1> base_type;$/;"	t	struct:agg::conv_smooth_poly1
base_type	include/agg_conv_stroke.h	/^        typedef conv_adaptor_vcgen<VertexSource, vcgen_stroke, Markers> base_type;$/;"	t	struct:agg::conv_stroke
base_type	include/agg_renderer_markers.h	/^        typedef renderer_primitives<BaseRenderer> base_type;$/;"	t	class:agg::renderer_markers
base_type	include/agg_renderer_outline_aa.h	/^        typedef line_interpolator_aa_base<Renderer> base_type;$/;"	t	class:agg::line_interpolator_aa0
base_type	include/agg_renderer_outline_aa.h	/^        typedef line_interpolator_aa_base<Renderer> base_type;$/;"	t	class:agg::line_interpolator_aa1
base_type	include/agg_renderer_outline_aa.h	/^        typedef line_interpolator_aa_base<Renderer> base_type;$/;"	t	class:agg::line_interpolator_aa2
base_type	include/agg_renderer_outline_aa.h	/^        typedef line_interpolator_aa_base<Renderer> base_type;$/;"	t	class:agg::line_interpolator_aa3
base_type	include/agg_renderer_outline_image.h	/^        typedef line_image_pattern<Filter> base_type;$/;"	t	class:agg::line_image_pattern_pow2
base_type	include/agg_scanline_u.h	/^        typedef scanline32_u8         base_type;$/;"	t	class:agg::scanline32_u8_am
base_type	include/agg_scanline_u.h	/^        typedef scanline_u8           base_type;$/;"	t	class:agg::scanline_u8_am
base_type	include/agg_span_gouraud_gray.h	/^        typedef span_gouraud<color_type> base_type;$/;"	t	class:agg::span_gouraud_gray
base_type	include/agg_span_gouraud_rgba.h	/^        typedef span_gouraud<color_type> base_type;$/;"	t	class:agg::span_gouraud_rgba
base_type	include/agg_span_image_filter.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_resample
base_type	include/agg_span_image_filter.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_resample_affine
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_gray
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_gray_2x2
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_gray_nn
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_resample<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_resample_gray
base_type	include/agg_span_image_filter_gray.h	/^        typedef span_image_resample_affine<source_type> base_type;$/;"	t	class:agg::span_image_resample_gray_affine
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgb
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgb_nn
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_resample<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_resample_rgb
base_type	include/agg_span_image_filter_rgb.h	/^        typedef span_image_resample_affine<source_type> base_type;$/;"	t	class:agg::span_image_resample_rgb_affine
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgba
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_filter<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_filter_rgba_nn
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_resample<source_type, interpolator_type> base_type;$/;"	t	class:agg::span_image_resample_rgba
base_type	include/agg_span_image_filter_rgba.h	/^        typedef span_image_resample_affine<source_type> base_type;$/;"	t	class:agg::span_image_resample_rgba_affine
base_type	include/agg_span_interpolator_adaptor.h	/^        typedef Interpolator base_type;$/;"	t	class:agg::span_interpolator_adaptor
base_type	include/agg_vertex_sequence.h	/^        typedef pod_bvector<T, S> base_type;$/;"	t	class:agg::vertex_sequence
bbox	gpc/gpc.c	/^} bbox;$/;"	t	typeref:struct:bbox_shape	file:
bbox_shape	gpc/gpc.c	/^typedef struct bbox_shape           \/* Contour axis-aligned bounding box *\/$/;"	s	file:
begin	include/agg_renderer_raster_text.h	/^            const_iterator begin() const { return &m_span; }$/;"	f	class:agg::renderer_raster_htext::scanline_single_span
begin	include/agg_scanline_bin.h	/^        const_iterator begin()     const { return &m_spans[1]; }$/;"	f	class:agg::scanline_bin
begin	include/agg_scanline_bin.h	/^        const_iterator begin()     const { return const_iterator(m_spans); }$/;"	f	class:agg::scanline32_bin
begin	include/agg_scanline_p.h	/^        const_iterator begin()     const { return &m_spans[1]; }$/;"	f	class:agg::scanline_p8
begin	include/agg_scanline_p.h	/^        const_iterator begin()     const { return const_iterator(m_spans); }$/;"	f	class:agg::scanline32_p8
begin	include/agg_scanline_storage_aa.h	/^            const_iterator begin() const { return const_iterator(*this); }$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
begin	include/agg_scanline_storage_aa.h	/^            const_iterator begin() const { return const_iterator(*this); }$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
begin	include/agg_scanline_storage_bin.h	/^            const_iterator begin() const { return const_iterator(*this); }$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
begin	include/agg_scanline_storage_bin.h	/^            const_iterator begin() const { return const_iterator(*this); }$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
begin	include/agg_scanline_u.h	/^        const_iterator begin() const { return &m_spans[1]; }$/;"	f	class:agg::scanline_u8
begin	include/agg_scanline_u.h	/^        const_iterator begin() const { return const_iterator(m_spans); }$/;"	f	class:agg::scanline32_u8
begin	include/agg_scanline_u.h	/^        iterator       begin()       { return &m_spans[1]; }$/;"	f	class:agg::scanline_u8
begin	include/agg_scanline_u.h	/^        iterator       begin()       { return iterator(m_spans); }$/;"	f	class:agg::scanline32_u8
begin	include/agg_span_interpolator_linear.h	/^        void begin(double x, double y, unsigned len)$/;"	f	class:agg::span_interpolator_linear
begin	include/agg_span_interpolator_linear.h	/^        void begin(double x, double y, unsigned len)$/;"	f	class:agg::span_interpolator_linear_subdiv
begin	include/agg_span_interpolator_persp.h	/^        void begin(double x, double y, unsigned len)$/;"	f	class:agg::span_interpolator_persp_exact
begin	include/agg_span_interpolator_persp.h	/^        void begin(double x, double y, unsigned len)$/;"	f	class:agg::span_interpolator_persp_lerp
begin	include/agg_span_interpolator_trans.h	/^        void begin(double x, double y, unsigned)$/;"	f	class:agg::span_interpolator_trans
begin	include/agg_span_subdiv_adaptor.h	/^        void begin(double x, double y, unsigned len)$/;"	f	class:agg::span_subdiv_adaptor
begin	include/agg_trans_bilinear.h	/^        iterator_x begin(double x, double y, double step) const$/;"	f	class:agg::trans_bilinear
begin	include/agg_trans_perspective.h	/^        iterator_x begin(double x, double y, double step) const$/;"	f	struct:agg::trans_perspective
begin_path	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::begin_path()$/;"	f	class:agg::svg::path_renderer
besj	include/agg_math.h	/^    inline double besj(double x, int n)$/;"	f	namespace:agg
bessel_i0	include/agg_image_filters.h	/^        double bessel_i0(double x) const$/;"	f	class:agg::image_filter_kaiser
bevel_join	include/agg_math_stroke.h	/^        bevel_join         = 3,$/;"	e	enum:agg::line_join_e
bezier	src/agg_curves.cpp	/^    void curve3_div::bezier(double x1, double y1, $/;"	f	class:agg::curve3_div
bezier	src/agg_curves.cpp	/^    void curve4_div::bezier(double x1, double y1, $/;"	f	class:agg::curve4_div
bezier4_point	examples/bezier_div.cpp	/^void bezier4_point(double x1, double y1, double x2, double y2,$/;"	f
bezier_arc	include/agg_bezier_arc.h	/^        bezier_arc() : m_vertex(26), m_num_vertices(0), m_cmd(path_cmd_line_to) {}$/;"	f	class:agg::bezier_arc
bezier_arc	include/agg_bezier_arc.h	/^        bezier_arc(double x,  double y, $/;"	f	class:agg::bezier_arc
bezier_arc	include/agg_bezier_arc.h	/^    class bezier_arc$/;"	c	namespace:agg
bezier_arc_angle_epsilon	src/agg_bezier_arc.cpp	/^    const double bezier_arc_angle_epsilon = 0.01;$/;"	m	namespace:agg	file:
bezier_arc_svg	include/agg_bezier_arc.h	/^        bezier_arc_svg() : m_arc(), m_radii_ok(false) {}$/;"	f	class:agg::bezier_arc_svg
bezier_arc_svg	include/agg_bezier_arc.h	/^        bezier_arc_svg(double x1, double y1, $/;"	f	class:agg::bezier_arc_svg
bezier_arc_svg	include/agg_bezier_arc.h	/^    class bezier_arc_svg$/;"	c	namespace:agg
bezier_ctrl	include/ctrl/agg_bezier_ctrl.h	/^        bezier_ctrl() :$/;"	f	class:agg::bezier_ctrl
bezier_ctrl	include/ctrl/agg_bezier_ctrl.h	/^    template<class ColorT> class bezier_ctrl : public bezier_ctrl_impl$/;"	c	namespace:agg
bezier_ctrl_impl	include/ctrl/agg_bezier_ctrl.h	/^    class bezier_ctrl_impl : public ctrl$/;"	c	namespace:agg
bezier_ctrl_impl	src/ctrl/agg_bezier_ctrl.cpp	/^    bezier_ctrl_impl::bezier_ctrl_impl() :$/;"	f	class:agg::bezier_ctrl_impl
bgr8_packed	include/agg_color_rgba.h	/^    inline rgba8 bgr8_packed(unsigned v)$/;"	f	namespace:agg
bgr_e	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	g	struct:agg::order_bgr
bgra_e	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	g	struct:agg::order_bgra
binary_search_pos	include/agg_array.h	/^    unsigned binary_search_pos(const Array& arr, const Value& val, Less less)$/;"	f	namespace:agg
bisectrix	src/agg_line_aa_basics.cpp	/^    void bisectrix(const line_parameters& l1, $/;"	f	namespace:agg
bit	include/agg_bitset_iterator.h	/^        unsigned bit() const$/;"	f	class:agg::bitset_iterator
bitmap_info	include/platform/win32/agg_win32_bmp.h	/^        BITMAPINFO* bitmap_info() { return m_bmp; }$/;"	f	class:agg::pixel_map
bitset_iterator	include/agg_bitset_iterator.h	/^        bitset_iterator(const int8u* bits, unsigned offset = 0) :$/;"	f	class:agg::bitset_iterator
bitset_iterator	include/agg_bitset_iterator.h	/^    class bitset_iterator$/;"	c	namespace:agg
blend	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::blend(WindowRef window, const Rect *device_rect, const Rect *bmp_rect) const$/;"	f	class:agg::pixel_map
blend	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::blend(WindowRef window, int x, int y, double scale) const$/;"	f	class:agg::pixel_map
blend	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::blend(HDC h_dc, const RECT *device_rect, const RECT *bmp_rect) const$/;"	f	class:agg::pixel_map
blend	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::blend(HDC h_dc, int x, int y, double scale) const$/;"	f	class:agg::pixel_map
blend_bar	include/agg_renderer_base.h	/^        void blend_bar(int x1, int y1, int x2, int y2, $/;"	f	class:agg::renderer_base
blend_bar	include/agg_renderer_mclip.h	/^        void blend_bar(int x1, int y1, int x2, int y2, $/;"	f	class:agg::renderer_mclip
blend_color_hspan	include/agg_pixfmt_amask_adaptor.h	/^        void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_color_hspan	include/agg_pixfmt_gray.h	/^        void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_color_hspan	include/agg_pixfmt_rgb.h	/^        void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_color_hspan	include/agg_pixfmt_rgb_packed.h	/^        void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_color_hspan	include/agg_pixfmt_rgba.h	/^        void blend_color_hspan(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_color_hspan	include/agg_pixfmt_rgba.h	/^        void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_color_hspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_color_hspan	include/agg_renderer_base.h	/^        void blend_color_hspan(int x, int y, int len, $/;"	f	class:agg::renderer_base
blend_color_hspan	include/agg_renderer_mclip.h	/^        void blend_color_hspan(int x, int y, int len, $/;"	f	class:agg::renderer_mclip
blend_color_hspan	include/agg_renderer_outline_image.h	/^        void blend_color_hspan(int x, int y, unsigned len, const color_type* colors)$/;"	f	class:agg::renderer_outline_image
blend_color_vspan	include/agg_pixfmt_amask_adaptor.h	/^        void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_color_vspan	include/agg_pixfmt_gray.h	/^        void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_color_vspan	include/agg_pixfmt_rgb.h	/^        void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_color_vspan	include/agg_pixfmt_rgb_packed.h	/^        void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_color_vspan	include/agg_pixfmt_rgba.h	/^        void blend_color_vspan(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_color_vspan	include/agg_pixfmt_rgba.h	/^        void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_color_vspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_color_vspan	include/agg_renderer_base.h	/^        void blend_color_vspan(int x, int y, int len, $/;"	f	class:agg::renderer_base
blend_color_vspan	include/agg_renderer_mclip.h	/^        void blend_color_vspan(int x, int y, int len, $/;"	f	class:agg::renderer_mclip
blend_color_vspan	include/agg_renderer_outline_image.h	/^        void blend_color_vspan(int x, int y, unsigned len, const color_type* colors)$/;"	f	class:agg::renderer_outline_image
blend_from	include/agg_pixfmt_rgb.h	/^        void blend_from(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_from	include/agg_pixfmt_rgb_packed.h	/^        void blend_from(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_from	include/agg_pixfmt_rgba.h	/^        void blend_from(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_from	include/agg_pixfmt_rgba.h	/^        void blend_from(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_from	include/agg_renderer_base.h	/^        void blend_from(const SrcPixelFormatRenderer& src, $/;"	f	class:agg::renderer_base
blend_from	include/agg_renderer_mclip.h	/^        void blend_from(const SrcPixelFormatRenderer& src, $/;"	f	class:agg::renderer_mclip
blend_from_color	include/agg_pixfmt_gray.h	/^        void blend_from_color(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_from_color	include/agg_pixfmt_rgb.h	/^        void blend_from_color(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_from_color	include/agg_pixfmt_rgb_packed.h	/^        void blend_from_color(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_from_color	include/agg_pixfmt_rgba.h	/^        void blend_from_color(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_from_color	include/agg_pixfmt_rgba.h	/^        void blend_from_color(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_from_color	include/agg_renderer_base.h	/^        void blend_from_color(const SrcPixelFormatRenderer& src, $/;"	f	class:agg::renderer_base
blend_from_lut	include/agg_pixfmt_gray.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_from_lut	include/agg_pixfmt_rgb.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_from_lut	include/agg_pixfmt_rgb_packed.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_from_lut	include/agg_pixfmt_rgba.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_from_lut	include/agg_pixfmt_rgba.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& from, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_from_lut	include/agg_renderer_base.h	/^        void blend_from_lut(const SrcPixelFormatRenderer& src, $/;"	f	class:agg::renderer_base
blend_hline	include/agg_pixfmt_amask_adaptor.h	/^        void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_hline	include/agg_pixfmt_gray.h	/^        void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_hline	include/agg_pixfmt_rgb.h	/^        void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_hline	include/agg_pixfmt_rgb_packed.h	/^        void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_hline	include/agg_pixfmt_rgba.h	/^        void blend_hline(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_hline	include/agg_pixfmt_rgba.h	/^        void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_hline	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_hline(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_hline	include/agg_renderer_base.h	/^        void blend_hline(int x1, int y, int x2, $/;"	f	class:agg::renderer_base
blend_hline	include/agg_renderer_mclip.h	/^        void blend_hline(int x1, int y, int x2, $/;"	f	class:agg::renderer_mclip
blend_pix	include/agg_pixfmt_gray.h	/^        static AGG_INLINE void blend_pix(value_type* p, unsigned cv, $/;"	f	struct:agg::blender_gray
blend_pix	include/agg_pixfmt_gray.h	/^        static AGG_INLINE void blend_pix(value_type* p, unsigned cv,$/;"	f	struct:agg::blender_gray_pre
blend_pix	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void blend_pix(value_type* p, $/;"	f	class:agg::blender_rgb_gamma
blend_pix	include/agg_pixfmt_rgb.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::blender_rgb
blend_pix	include/agg_pixfmt_rgb.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::blender_rgb_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_bgrAAA_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_bgrABB_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_rgb555_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_rgb565_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_rgbAAA_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	class:agg::blender_rgbBBA_gamma
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_bgrAAA
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_bgrAAA_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_bgrABB
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_bgrABB_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgb555
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgb555_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgb565
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgb565_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgbAAA
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgbAAA_pre
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgbBBA
blend_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE void blend_pix(pixel_type* p, $/;"	f	struct:agg::blender_rgbBBA_pre
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_adaptor_clip_to_dst_rgba
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_adaptor_clip_to_dst_rgba_pre
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_adaptor_rgba
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_op_adaptor_clip_to_dst_rgba
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_op_adaptor_clip_to_dst_rgba_pre
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_op_adaptor_rgba
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(unsigned op, value_type* p, $/;"	f	struct:agg::comp_op_adaptor_rgba_pre
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::blender_rgba
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::blender_rgba_plain
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::blender_rgba_pre
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_clear
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_color_burn
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_color_dodge
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_contrast
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_darken
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_difference
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_dst_atop
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_dst_in
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_dst_out
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_dst_over
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_exclusion
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_hard_light
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_invert
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_invert_rgb
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_lighten
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_minus
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_multiply
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_overlay
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_plus
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_screen
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_soft_light
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_src
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_src_atop
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_src_in
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_src_out
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_src_over
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type* p, $/;"	f	struct:agg::comp_op_rgba_xor
blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void blend_pix(value_type*, $/;"	f	struct:agg::comp_op_rgba_dst
blend_pixel	include/agg_pixfmt_amask_adaptor.h	/^        void blend_pixel(int x, int y, const color_type& c, cover_type cover)$/;"	f	class:agg::pixfmt_amask_adaptor
blend_pixel	include/agg_pixfmt_gray.h	/^        AGG_INLINE void blend_pixel(int x, int y, const color_type& c, int8u cover)$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_pixel	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void blend_pixel(int x, int y, const color_type& c, int8u cover)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_pixel	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void blend_pixel(int x, int y, const color_type& c, int8u cover)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_pixel	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void blend_pixel(int x, int y, const color_type& c, int8u cover)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_pixel	include/agg_pixfmt_rgba.h	/^        void blend_pixel(int x, int y, const color_type& c, int8u cover)$/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_pixel	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_pixel(int x, int y, $/;"	f	class:agg::pixfmt_transposer
blend_pixel	include/agg_renderer_base.h	/^        void blend_pixel(int x, int y, const color_type& c, cover_type cover)$/;"	f	class:agg::renderer_base
blend_pixel	include/agg_renderer_mclip.h	/^        void blend_pixel(int x, int y, const color_type& c, cover_type cover)$/;"	f	class:agg::renderer_mclip
blend_solid_hspan	include/agg_pixfmt_amask_adaptor.h	/^        void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_solid_hspan	include/agg_pixfmt_gray.h	/^        void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_solid_hspan	include/agg_pixfmt_rgb.h	/^        void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_solid_hspan	include/agg_pixfmt_rgb_packed.h	/^        void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_solid_hspan	include/agg_pixfmt_rgba.h	/^        void blend_solid_hspan(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_solid_hspan	include/agg_pixfmt_rgba.h	/^        void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_solid_hspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_solid_hspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_solid_hspan	include/agg_renderer_base.h	/^        void blend_solid_hspan(int x, int y, int len, $/;"	f	class:agg::renderer_base
blend_solid_hspan	include/agg_renderer_mclip.h	/^        void blend_solid_hspan(int x, int y, int len, $/;"	f	class:agg::renderer_mclip
blend_solid_hspan	include/agg_renderer_outline_aa.h	/^        void blend_solid_hspan(int x, int y, unsigned len, const cover_type* covers)$/;"	f	class:agg::renderer_outline_aa
blend_solid_vspan	include/agg_pixfmt_amask_adaptor.h	/^        void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_solid_vspan	include/agg_pixfmt_gray.h	/^        void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_solid_vspan	include/agg_pixfmt_rgb.h	/^        void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_solid_vspan	include/agg_pixfmt_rgb_packed.h	/^        void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_solid_vspan	include/agg_pixfmt_rgba.h	/^        void blend_solid_vspan(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_solid_vspan	include/agg_pixfmt_rgba.h	/^        void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_solid_vspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_solid_vspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_solid_vspan	include/agg_renderer_base.h	/^        void blend_solid_vspan(int x, int y, int len, $/;"	f	class:agg::renderer_base
blend_solid_vspan	include/agg_renderer_mclip.h	/^        void blend_solid_vspan(int x, int y, int len, $/;"	f	class:agg::renderer_mclip
blend_solid_vspan	include/agg_renderer_outline_aa.h	/^        void blend_solid_vspan(int x, int y, unsigned len, const cover_type* covers)$/;"	f	class:agg::renderer_outline_aa
blend_vline	include/agg_pixfmt_amask_adaptor.h	/^        void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
blend_vline	include/agg_pixfmt_gray.h	/^        void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
blend_vline	include/agg_pixfmt_rgb.h	/^        void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blend_vline	include/agg_pixfmt_rgb_packed.h	/^        void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blend_vline	include/agg_pixfmt_rgba.h	/^        void blend_vline(int x, int y, unsigned len, $/;"	f	class:agg::pixfmt_custom_blend_rgba
blend_vline	include/agg_pixfmt_rgba.h	/^        void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
blend_vline	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void blend_vline(int x, int y,$/;"	f	class:agg::pixfmt_transposer
blend_vline	include/agg_renderer_base.h	/^        void blend_vline(int x, int y1, int y2, $/;"	f	class:agg::renderer_base
blend_vline	include/agg_renderer_mclip.h	/^        void blend_vline(int x, int y1, int y2, $/;"	f	class:agg::renderer_mclip
blender	include/agg_pixfmt_rgb.h	/^        Blender& blender() { return m_blender; }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
blender	include/agg_pixfmt_rgb_packed.h	/^        Blender& blender() { return m_blender; }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
blender_abgr32	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba8, order_abgr> blender_abgr32; \/\/----blender_abgr32$/;"	t	namespace:agg
blender_abgr32_plain	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_plain<rgba8, order_abgr> blender_abgr32_plain; \/\/----blender_abgr32_plain$/;"	t	namespace:agg
blender_abgr32_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba8, order_abgr> blender_abgr32_pre; \/\/----blender_abgr32_pre$/;"	t	namespace:agg
blender_abgr64	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba16, order_abgr> blender_abgr64; \/\/----blender_abgr64$/;"	t	namespace:agg
blender_abgr64_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba16, order_abgr> blender_abgr64_pre; \/\/----blender_abgr64_pre$/;"	t	namespace:agg
blender_argb32	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba8, order_argb> blender_argb32; \/\/----blender_argb32$/;"	t	namespace:agg
blender_argb32_plain	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_plain<rgba8, order_argb> blender_argb32_plain; \/\/----blender_argb32_plain$/;"	t	namespace:agg
blender_argb32_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba8, order_argb> blender_argb32_pre; \/\/----blender_argb32_pre$/;"	t	namespace:agg
blender_argb64	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba16, order_argb> blender_argb64; \/\/----blender_argb64$/;"	t	namespace:agg
blender_argb64_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba16, order_argb> blender_argb64_pre; \/\/----blender_argb64_pre$/;"	t	namespace:agg
blender_bgrAAA	include/agg_pixfmt_rgb_packed.h	/^    struct blender_bgrAAA$/;"	s	namespace:agg
blender_bgrAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_bgrAAA_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_bgrAAA_gamma
blender_bgrAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_bgrAAA_gamma$/;"	c	namespace:agg
blender_bgrAAA_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_bgrAAA_pre$/;"	s	namespace:agg
blender_bgrABB	include/agg_pixfmt_rgb_packed.h	/^    struct blender_bgrABB$/;"	s	namespace:agg
blender_bgrABB_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_bgrABB_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_bgrABB_gamma
blender_bgrABB_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_bgrABB_gamma$/;"	c	namespace:agg
blender_bgrABB_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_bgrABB_pre$/;"	s	namespace:agg
blender_bgra32	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba8, order_bgra> blender_bgra32; \/\/----blender_bgra32$/;"	t	namespace:agg
blender_bgra32_plain	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_plain<rgba8, order_bgra> blender_bgra32_plain; \/\/----blender_bgra32_plain$/;"	t	namespace:agg
blender_bgra32_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba8, order_bgra> blender_bgra32_pre; \/\/----blender_bgra32_pre$/;"	t	namespace:agg
blender_bgra64	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba16, order_bgra> blender_bgra64; \/\/----blender_bgra64$/;"	t	namespace:agg
blender_bgra64_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba16, order_bgra> blender_bgra64_pre; \/\/----blender_bgra64_pre$/;"	t	namespace:agg
blender_gray	include/agg_pixfmt_gray.h	/^    template<class ColorT> struct blender_gray$/;"	s	namespace:agg
blender_gray16	include/agg_pixfmt_gray.h	/^    typedef blender_gray<gray16>     blender_gray16;$/;"	t	namespace:agg
blender_gray16_pre	include/agg_pixfmt_gray.h	/^    typedef blender_gray_pre<gray16> blender_gray16_pre;$/;"	t	namespace:agg
blender_gray8	include/agg_pixfmt_gray.h	/^    typedef blender_gray<gray8>      blender_gray8;$/;"	t	namespace:agg
blender_gray8_pre	include/agg_pixfmt_gray.h	/^    typedef blender_gray_pre<gray8>  blender_gray8_pre;$/;"	t	namespace:agg
blender_gray_pre	include/agg_pixfmt_gray.h	/^    template<class ColorT> struct blender_gray_pre$/;"	s	namespace:agg
blender_rgb	include/agg_pixfmt_rgb.h	/^    template<class ColorT, class Order> struct blender_rgb$/;"	s	namespace:agg
blender_rgb555	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgb555$/;"	s	namespace:agg
blender_rgb555_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_rgb555_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_rgb555_gamma
blender_rgb555_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_rgb555_gamma$/;"	c	namespace:agg
blender_rgb555_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgb555_pre$/;"	s	namespace:agg
blender_rgb565	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgb565$/;"	s	namespace:agg
blender_rgb565_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_rgb565_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_rgb565_gamma
blender_rgb565_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_rgb565_gamma$/;"	c	namespace:agg
blender_rgb565_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgb565_pre$/;"	s	namespace:agg
blender_rgbAAA	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgbAAA$/;"	s	namespace:agg
blender_rgbAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_rgbAAA_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_rgbAAA_gamma
blender_rgbAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_rgbAAA_gamma$/;"	c	namespace:agg
blender_rgbAAA_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgbAAA_pre$/;"	s	namespace:agg
blender_rgbBBA	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgbBBA$/;"	s	namespace:agg
blender_rgbBBA_gamma	include/agg_pixfmt_rgb_packed.h	/^        blender_rgbBBA_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_rgbBBA_gamma
blender_rgbBBA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class blender_rgbBBA_gamma$/;"	c	namespace:agg
blender_rgbBBA_pre	include/agg_pixfmt_rgb_packed.h	/^    struct blender_rgbBBA_pre$/;"	s	namespace:agg
blender_rgb_gamma	include/agg_pixfmt_rgb.h	/^        blender_rgb_gamma() : m_gamma(0) {}$/;"	f	class:agg::blender_rgb_gamma
blender_rgb_gamma	include/agg_pixfmt_rgb.h	/^    template<class ColorT, class Order, class Gamma> class blender_rgb_gamma$/;"	c	namespace:agg
blender_rgb_pre	include/agg_pixfmt_rgb.h	/^    template<class ColorT, class Order> struct blender_rgb_pre$/;"	s	namespace:agg
blender_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct blender_rgba$/;"	s	namespace:agg
blender_rgba32	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba8, order_rgba> blender_rgba32; \/\/----blender_rgba32$/;"	t	namespace:agg
blender_rgba32_plain	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_plain<rgba8, order_rgba> blender_rgba32_plain; \/\/----blender_rgba32_plain$/;"	t	namespace:agg
blender_rgba32_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba8, order_rgba> blender_rgba32_pre; \/\/----blender_rgba32_pre$/;"	t	namespace:agg
blender_rgba64	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba<rgba16, order_rgba> blender_rgba64; \/\/----blender_rgba64$/;"	t	namespace:agg
blender_rgba64_pre	include/agg_pixfmt_rgba.h	/^    typedef blender_rgba_pre<rgba16, order_rgba> blender_rgba64_pre; \/\/----blender_rgba64_pre$/;"	t	namespace:agg
blender_rgba_plain	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct blender_rgba_plain$/;"	s	namespace:agg
blender_rgba_pre	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct blender_rgba_pre$/;"	s	namespace:agg
blender_type	include/agg_pixfmt_gray.h	/^        typedef Blender  blender_type;$/;"	t	class:agg::pixfmt_alpha_blend_gray
blender_type	include/agg_pixfmt_rgb.h	/^        typedef Blender  blender_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
blender_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Blender  blender_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
blender_type	include/agg_pixfmt_rgba.h	/^        typedef Blender  blender_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
blender_type	include/agg_pixfmt_rgba.h	/^        typedef Blender  blender_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
block	include/agg_array.h	/^        const T* block(unsigned nb) const { return m_blocks[nb]; }$/;"	f	class:agg::pod_bvector
block_allocator	include/agg_array.h	/^        block_allocator(unsigned block_size, unsigned block_ptr_inc=256-8) :$/;"	f	class:agg::block_allocator
block_allocator	include/agg_array.h	/^    class block_allocator$/;"	c	namespace:agg
block_mask	include/agg_array.h	/^            block_mask  = block_size - 1$/;"	e	enum:agg::pod_bvector::block_scale_e
block_mask	include/agg_path_storage.h	/^            block_mask  = block_size - 1,$/;"	e	enum:agg::vertex_block_storage::block_scale_e
block_pool	include/agg_path_storage.h	/^            block_pool  = BlockPool$/;"	e	enum:agg::vertex_block_storage::block_scale_e
block_scale_e	include/agg_array.h	/^        enum block_scale_e$/;"	g	class:agg::pod_bvector
block_scale_e	include/agg_path_storage.h	/^        enum block_scale_e$/;"	g	class:agg::vertex_block_storage
block_shift	include/agg_array.h	/^            block_shift = S,$/;"	e	enum:agg::pod_bvector::block_scale_e
block_shift	include/agg_path_storage.h	/^            block_shift = BlockShift,$/;"	e	enum:agg::vertex_block_storage::block_scale_e
block_size	include/agg_array.h	/^            block_size  = 1 << block_shift,$/;"	e	enum:agg::pod_bvector::block_scale_e
block_size	include/agg_font_cache_manager.h	/^        enum block_size_e { block_size = 16384-16 };$/;"	e	enum:agg::font_cache::block_size_e
block_size	include/agg_path_storage.h	/^            block_size  = 1 << block_shift,$/;"	e	enum:agg::vertex_block_storage::block_scale_e
block_size_e	include/agg_font_cache_manager.h	/^        enum block_size_e { block_size = 16384-16 };$/;"	g	class:agg::font_cache
block_type	include/agg_array.h	/^        struct block_type$/;"	s	class:agg::block_allocator
blur	include/agg_blur.h	/^        template<class Img> void blur(Img& img, double radius)$/;"	f	class:agg::recursive_blur
blur	include/agg_blur.h	/^        template<class Img> void blur(Img& img, unsigned radius)$/;"	f	class:agg::stack_blur
blur	include/agg_span_image_filter.h	/^        void blur(double v)   { m_blur_x = $/;"	f	class:agg::span_image_resample
blur	include/agg_span_image_filter.h	/^        void blur(double v) { m_blur_x = m_blur_y = v; }$/;"	f	class:agg::span_image_resample_affine
blur_x	include/agg_blur.h	/^        template<class Img> void blur_x(Img& img, double radius)$/;"	f	class:agg::recursive_blur
blur_x	include/agg_blur.h	/^        template<class Img> void blur_x(Img& img, unsigned radius)$/;"	f	class:agg::stack_blur
blur_x	include/agg_span_image_filter.h	/^        double blur_x() const { return double(m_blur_x) \/ double(image_subpixel_scale); }$/;"	f	class:agg::span_image_resample
blur_x	include/agg_span_image_filter.h	/^        double blur_x() const { return m_blur_x; }$/;"	f	class:agg::span_image_resample_affine
blur_x	include/agg_span_image_filter.h	/^        void blur_x(double v) { m_blur_x = uround(v * double(image_subpixel_scale)); }$/;"	f	class:agg::span_image_resample
blur_x	include/agg_span_image_filter.h	/^        void blur_x(double v) { m_blur_x = v; }$/;"	f	class:agg::span_image_resample_affine
blur_y	include/agg_blur.h	/^        template<class Img> void blur_y(Img& img, double radius)$/;"	f	class:agg::recursive_blur
blur_y	include/agg_blur.h	/^        template<class Img> void blur_y(Img& img, unsigned radius)$/;"	f	class:agg::stack_blur
blur_y	include/agg_span_image_filter.h	/^        double blur_y() const { return double(m_blur_y) \/ double(image_subpixel_scale); }$/;"	f	class:agg::span_image_resample
blur_y	include/agg_span_image_filter.h	/^        double blur_y() const { return m_blur_y; }$/;"	f	class:agg::span_image_resample_affine
blur_y	include/agg_span_image_filter.h	/^        void blur_y(double v) { m_blur_y = uround(v * double(image_subpixel_scale)); }$/;"	f	class:agg::span_image_resample
blur_y	include/agg_span_image_filter.h	/^        void blur_y(double v) { m_blur_y = v; }$/;"	f	class:agg::span_image_resample_affine
bond	examples/mol_view.cpp	/^    const bond_type& bond(unsigned idx) const { return m_bonds[idx]; }$/;"	f	class:molecule
bond_double	examples/mol_view.cpp	/^        bond_double,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_double_left	examples/mol_view.cpp	/^        bond_double_left,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_double_right	examples/mol_view.cpp	/^        bond_double_right,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_single	examples/mol_view.cpp	/^        bond_single,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_style_e	examples/mol_view.cpp	/^    enum bond_style_e$/;"	g	class:bond_vertex_generator	file:
bond_triple	examples/mol_view.cpp	/^        bond_triple$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_type	examples/mol_view.cpp	/^struct bond_type$/;"	s	file:
bond_vertex_generator	examples/mol_view.cpp	/^    bond_vertex_generator(const bond_type& bond, double thickness) :$/;"	f	class:bond_vertex_generator
bond_vertex_generator	examples/mol_view.cpp	/^class bond_vertex_generator$/;"	c	file:
bond_wedged_dashed	examples/mol_view.cpp	/^        bond_wedged_dashed,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
bond_wedged_solid	examples/mol_view.cpp	/^        bond_wedged_solid,$/;"	e	enum:bond_vertex_generator::bond_style_e	file:
border_color	include/ctrl/agg_gamma_ctrl.h	/^        void border_color(const ColorT& c)       { m_border_color = c; }$/;"	f	class:agg::gamma_ctrl
border_color	include/ctrl/agg_rbox_ctrl.h	/^        void border_color(const ColorT& c) { m_border_color = c; }$/;"	f	class:agg::rbox_ctrl
border_color	include/ctrl/agg_scale_ctrl.h	/^        void border_color(const ColorT& c)     { m_border_color = c; }$/;"	f	class:agg::scale_ctrl
border_color	include/ctrl/agg_spline_ctrl.h	/^        void border_color(const ColorT& c)       { m_border_color = c; }$/;"	f	class:agg::spline_ctrl
border_thickness	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::border_thickness(double t, double extra)$/;"	f	class:agg::scale_ctrl_impl
border_width	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::border_width(double t, double extra)$/;"	f	class:agg::gamma_ctrl_impl
border_width	src/ctrl/agg_rbox_ctrl.cpp	/^    void rbox_ctrl_impl::border_width(double t, double extra)$/;"	f	class:agg::rbox_ctrl_impl
border_width	src/ctrl/agg_slider_ctrl.cpp	/^    void slider_ctrl_impl::border_width(double t, double extra)$/;"	f	class:agg::slider_ctrl_impl
border_width	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::border_width(double t, double extra)$/;"	f	class:agg::spline_ctrl_impl
bot	gpc/gpc.c	/^  gpc_vertex          bot;          \/* Edge lower (x, y) coordinate      *\/$/;"	m	struct:edge_shape	file:
bound_list	gpc/gpc.c	/^static edge_node **bound_list(lmt_node **lmt, double y)$/;"	f	file:
bounding_clip_box	include/agg_renderer_base.h	/^        const rect_i& bounding_clip_box() const { return m_clip_box;    }$/;"	f	class:agg::renderer_base
bounding_clip_box	include/agg_renderer_mclip.h	/^        const rect_i& bounding_clip_box() const { return m_bounds;    }$/;"	f	class:agg::renderer_mclip
bounding_rect	examples/svg_viewer/agg_svg_path_renderer.h	/^        void bounding_rect(double* x1, double* y1, double* x2, double* y2)$/;"	f	class:agg::svg::path_renderer
bounding_rect	include/agg_bounding_rect.h	/^    bool bounding_rect(VertexSource& vs, GetId& gi, $/;"	f	namespace:agg
bounding_rect	include/agg_path_storage_integer.h	/^        rect_d bounding_rect() const$/;"	f	class:agg::path_storage_integer
bounding_rect_single	include/agg_bounding_rect.h	/^    bool bounding_rect_single(VertexSource& vs, unsigned path_id,$/;"	f	namespace:agg
bounding_xmax	include/agg_renderer_base.h	/^        int           bounding_xmax()     const { return m_clip_box.x2; }$/;"	f	class:agg::renderer_base
bounding_xmax	include/agg_renderer_mclip.h	/^        int           bounding_xmax()     const { return m_bounds.x2; }$/;"	f	class:agg::renderer_mclip
bounding_xmin	include/agg_renderer_base.h	/^        int           bounding_xmin()     const { return m_clip_box.x1; }$/;"	f	class:agg::renderer_base
bounding_xmin	include/agg_renderer_mclip.h	/^        int           bounding_xmin()     const { return m_bounds.x1; }$/;"	f	class:agg::renderer_mclip
bounding_ymax	include/agg_renderer_base.h	/^        int           bounding_ymax()     const { return m_clip_box.y2; }$/;"	f	class:agg::renderer_base
bounding_ymax	include/agg_renderer_mclip.h	/^        int           bounding_ymax()     const { return m_bounds.y2; }$/;"	f	class:agg::renderer_mclip
bounding_ymin	include/agg_renderer_base.h	/^        int           bounding_ymin()     const { return m_clip_box.y1; }$/;"	f	class:agg::renderer_base
bounding_ymin	include/agg_renderer_mclip.h	/^        int           bounding_ymin()     const { return m_bounds.y1; }$/;"	f	class:agg::renderer_mclip
bounds	font_freetype/agg_font_freetype.h	/^        const rect_i&   bounds()      const { return m_bounds;      }$/;"	f	class:agg::font_engine_freetype_base
bounds	font_win32_tt/agg_font_win32_tt.h	/^        const rect_i&   bounds()      const { return m_bounds;      }$/;"	f	class:agg::font_engine_win32_tt_base
bounds	include/agg_font_cache_manager.h	/^        rect_i          bounds;$/;"	m	struct:agg::glyph_cache
box	src/ctrl/agg_gamma_spline.cpp	/^    void gamma_spline::box(double x1, double y1, double x2, double y2)$/;"	f	class:agg::gamma_spline
bpp	include/platform/agg_platform_support.h	/^        unsigned bpp() const { return m_bpp; }$/;"	f	class:agg::platform_support
bpp	include/platform/mac/agg_mac_pmap.h	/^        unsigned       bpp() const { return m_bpp; }$/;"	f	class:agg::pixel_map
bpp	include/platform/win32/agg_win32_bmp.h	/^        unsigned       bpp() const { return m_bpp; }$/;"	f	class:agg::pixel_map
brightness_to_alpha	examples/line_patterns.cpp	/^static agg::int8u brightness_to_alpha[256 * 3] = $/;"	v	file:
brightness_to_alpha	examples/line_patterns_clip.cpp	/^static agg::int8u brightness_to_alpha[256 * 3] = $/;"	v	file:
bsearch	src/agg_bspline.cpp	/^    void bspline::bsearch(int n, const double *x, double x0, int *i) $/;"	f	class:agg::bspline
bside	gpc/gpc.c	/^  int                 bside[2];     \/* Bundle left \/ right indicators    *\/$/;"	m	struct:edge_shape	file:
bspline	include/agg_bspline.h	/^    class bspline $/;"	c	namespace:agg
bspline	src/agg_bspline.cpp	/^    bspline::bspline() :$/;"	f	class:agg::bspline
bspline	src/agg_bspline.cpp	/^    bspline::bspline(int num) :$/;"	f	class:agg::bspline
bspline	src/agg_bspline.cpp	/^    bspline::bspline(int num, const double* x, const double* y) :$/;"	f	class:agg::bspline
bstate	gpc/gpc.c	/^  bundle_state        bstate[2];    \/* Edge bundle state                 *\/$/;"	m	struct:edge_shape	file:
buf	include/agg_rendering_buffer.h	/^        AGG_INLINE       T* buf()          { return m_buf;    }$/;"	f	class:agg::row_accessor
buf	include/agg_rendering_buffer.h	/^        AGG_INLINE       T* buf()          { return m_buf;    }$/;"	f	class:agg::row_ptr_cache
buf	include/agg_rendering_buffer.h	/^        AGG_INLINE const T* buf()    const { return m_buf;    }$/;"	f	class:agg::row_accessor
buf	include/agg_rendering_buffer.h	/^        AGG_INLINE const T* buf()    const { return m_buf;    }$/;"	f	class:agg::row_ptr_cache
buf	src/platform/mac/agg_mac_pmap.cpp	/^    unsigned char* pixel_map::buf()$/;"	f	class:agg::pixel_map
buf	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned char* pixel_map::buf()$/;"	f	class:agg::pixel_map
buf_size	examples/svg_viewer/agg_svg_parser.h	/^        enum buf_size_e { buf_size = BUFSIZ };$/;"	e	enum:agg::svg::parser::buf_size_e
buf_size	font_win32_tt/agg_font_win32_tt.h	/^       enum { buf_size = 32768-32 };$/;"	e	enum:agg::font_engine_win32_tt_base::__anon3
buf_size_e	examples/svg_viewer/agg_svg_parser.h	/^        enum buf_size_e { buf_size = BUFSIZ };$/;"	g	class:agg::svg::parser
build_gradient_lut	examples/gradient_focal.cpp	/^    void build_gradient_lut()$/;"	f	class:the_application
build_intersection_table	gpc/gpc.c	/^static void build_intersection_table(it_node **it, edge_node *aet, double dy)$/;"	f	file:
build_lmt	gpc/gpc.c	/^static edge_node *build_lmt(lmt_node **lmt, sb_tree **sbtree,$/;"	f	file:
build_lut	include/agg_gradient_lut.h	/^    void gradient_lut<T,S>::build_lut()$/;"	f	class:agg::gradient_lut
build_sbt	gpc/gpc.c	/^static void build_sbt(int *entries, double *sbt, sb_tree *sbtree)$/;"	f	file:
bundle	gpc/gpc.c	/^  int                 bundle[2][2]; \/* Bundle edge flags                 *\/$/;"	m	struct:edge_shape	file:
bundle_state	gpc/gpc.c	/^} bundle_state;$/;"	t	typeref:enum:__anon11	file:
butt_cap	include/agg_math_stroke.h	/^        butt_cap,$/;"	e	enum:agg::line_cap_e
byte_size	include/agg_array.h	/^        unsigned byte_size() const   { return m_size * sizeof(T); }$/;"	f	class:agg::pod_vector
byte_size	include/agg_array.h	/^    unsigned pod_bvector<T, S>::byte_size() const$/;"	f	class:agg::pod_bvector
byte_size	include/agg_path_storage_integer.h	/^        unsigned byte_size() const { return m_storage.size() * sizeof(vertex_integer_type); }$/;"	f	class:agg::path_storage_integer
byte_size	include/agg_scanline_storage_aa.h	/^        unsigned byte_size() const$/;"	f	class:agg::scanline_storage_aa
byte_size	include/agg_scanline_storage_bin.h	/^        unsigned byte_size() const$/;"	f	class:agg::scanline_storage_bin
byte_size	include/agg_trans_viewport.h	/^        unsigned byte_size() const$/;"	f	class:agg::trans_viewport
byte_width	include/agg_rendering_buffer_dynarow.h	/^        unsigned byte_width() const { return m_byte_width; }$/;"	f	class:agg::rendering_buffer_dynarow
c	examples/graph_test.cpp	/^    agg::curve4 c;$/;"	m	struct:curve	file:
c	examples/graph_test.cpp	/^    concat_type    c;$/;"	m	struct:dash_stroke_draft_arrow	file:
c	examples/graph_test.cpp	/^    concat_type    c;$/;"	m	struct:dash_stroke_fine_arrow	file:
c	examples/graph_test.cpp	/^    concat_type    c;$/;"	m	struct:stroke_draft_arrow	file:
c	examples/graph_test.cpp	/^    concat_type    c;$/;"	m	struct:stroke_fine_arrow	file:
c	include/agg_pixfmt_rgba.h	/^    struct  pixel64_type { int16u c[4]; };$/;"	m	struct:agg::pixel64_type
cache_glyph	include/agg_font_cache_manager.h	/^        glyph_cache* cache_glyph(unsigned        glyph_code, $/;"	f	class:agg::font_cache
cache_glyph	include/agg_font_cache_manager.h	/^        glyph_cache* cache_glyph(unsigned        glyph_code, $/;"	f	class:agg::font_cache_pool
calc	include/agg_blur.h	/^        AGG_INLINE void calc(value_type b1, $/;"	f	struct:agg::recursive_blur_calc_gray
calc	include/agg_blur.h	/^        AGG_INLINE void calc(value_type b1, $/;"	f	struct:agg::recursive_blur_calc_rgb
calc	include/agg_blur.h	/^        AGG_INLINE void calc(value_type b1, $/;"	f	struct:agg::recursive_blur_calc_rgba
calc	include/agg_span_gouraud_gray.h	/^            void calc(double y)$/;"	f	struct:agg::span_gouraud_gray::gray_calc
calc	include/agg_span_gouraud_rgba.h	/^            void calc(double y)$/;"	f	struct:agg::span_gouraud_rgba::rgba_calc
calc_arc	include/agg_math_stroke.h	/^    void math_stroke<VC>::calc_arc(VC& vc,$/;"	f	class:agg::math_stroke
calc_box	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::calc_box()$/;"	f	class:agg::scale_ctrl_impl
calc_box	src/ctrl/agg_slider_ctrl.cpp	/^    void slider_ctrl_impl::calc_box()$/;"	f	class:agg::slider_ctrl_impl
calc_cap	include/agg_math_stroke.h	/^    void math_stroke<VC>::calc_cap(VC& vc,$/;"	f	class:agg::math_stroke
calc_crc32	font_freetype/agg_font_freetype.cpp	/^    static unsigned calc_crc32(const unsigned char* buf, unsigned size)$/;"	f	namespace:agg
calc_crc32	font_win32_tt/agg_font_win32_tt.cpp	/^    static unsigned calc_crc32(const unsigned char* buf, unsigned size)$/;"	f	namespace:agg
calc_curve	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::calc_curve()$/;"	f	class:agg::spline_ctrl_impl
calc_dash_start	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::calc_dash_start(double ds)$/;"	f	class:agg::vcgen_dash
calc_distance	include/agg_math.h	/^    AGG_INLINE double calc_distance(double x1, double y1, double x2, double y2)$/;"	f	namespace:agg
calc_full_size	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::calc_full_size(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
calc_header_size	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::calc_header_size(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
calc_img_ptr	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned char * pixel_map::calc_img_ptr(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
calc_intersection	include/agg_math.h	/^    AGG_INLINE bool calc_intersection(double ax, double ay, double bx, double by,$/;"	f	namespace:agg
calc_join	include/agg_math_stroke.h	/^    void math_stroke<VC>::calc_join(VC& vc,$/;"	f	class:agg::math_stroke
calc_line_point_distance	include/agg_math.h	/^    AGG_INLINE double calc_line_point_distance(double x1, double y1, $/;"	f	namespace:agg
calc_linear_gradient_transform	examples/aa_test.cpp	/^void calc_linear_gradient_transform(double x1, double y1, double x2, double y2, $/;"	f
calc_max_error	examples/bezier_div.cpp	/^    template<class Curve> double calc_max_error(Curve& curve, double scale, $/;"	f	class:the_application
calc_miter	include/agg_math_stroke.h	/^    void math_stroke<VC>::calc_miter(VC& vc,$/;"	f	class:agg::math_stroke
calc_num_steps	include/agg_ellipse.h	/^    inline void ellipse::calc_num_steps()$/;"	f	class:agg::ellipse
calc_orthogonal	include/agg_math.h	/^    AGG_INLINE void calc_orthogonal(double thickness,$/;"	f	namespace:agg
calc_palette_size	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned  pixel_map::calc_palette_size(unsigned  clr_used, unsigned bits_per_pixel)$/;"	f	class:agg::pixel_map
calc_palette_size	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::calc_palette_size(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
calc_pix	include/agg_blur.h	/^        AGG_INLINE void calc_pix(ArgT& a, unsigned mul, unsigned shr)$/;"	f	struct:agg::stack_blur_calc_gray
calc_pix	include/agg_blur.h	/^        AGG_INLINE void calc_pix(ArgT& v, unsigned mul, unsigned shr)$/;"	f	struct:agg::stack_blur_calc_rgb
calc_pix	include/agg_blur.h	/^        AGG_INLINE void calc_pix(ArgT& v, unsigned mul, unsigned shr)$/;"	f	struct:agg::stack_blur_calc_rgba
calc_pix	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void calc_pix(ArgT& a, unsigned div)$/;"	f	struct:agg::stack_blur_calc_gray
calc_pix	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void calc_pix(ArgT& v, unsigned div)$/;"	f	struct:agg::stack_blur_calc_rgb
calc_pix	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void calc_pix(ArgT& v, unsigned div)$/;"	f	struct:agg::stack_blur_calc_rgba
calc_points	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::calc_points()$/;"	f	class:agg::gamma_ctrl_impl
calc_polygon_area	include/agg_math.h	/^    template<class Storage> double calc_polygon_area(const Storage& st)$/;"	f	namespace:agg
calc_rbox	src/ctrl/agg_rbox_ctrl.cpp	/^    void rbox_ctrl_impl::calc_rbox()$/;"	f	class:agg::rbox_ctrl_impl
calc_row_len	src/platform/mac/agg_mac_pmap.cpp	/^    unsigned pixel_map::calc_row_len(unsigned width, unsigned bits_per_pixel)$/;"	f	class:agg::pixel_map
calc_row_len	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::calc_row_len(unsigned width, unsigned bits_per_pixel)$/;"	f	class:agg::pixel_map
calc_segment_point_sq_distance	include/agg_math.h	/^    AGG_INLINE double calc_segment_point_sq_distance(double x1, double y1, $/;"	f	namespace:agg
calc_segment_point_u	include/agg_math.h	/^    AGG_INLINE double calc_segment_point_u(double x1, double y1, $/;"	f	namespace:agg
calc_spline_box	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::calc_spline_box()$/;"	f	class:agg::gamma_ctrl_impl
calc_spline_box	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::calc_spline_box()$/;"	f	class:agg::spline_ctrl_impl
calc_sq_distance	include/agg_math.h	/^    AGG_INLINE double calc_sq_distance(double x1, double y1, double x2, double y2)$/;"	f	namespace:agg
calc_triangle_area	include/agg_math.h	/^    AGG_INLINE double calc_triangle_area(double x1, double y1,$/;"	f	namespace:agg
calc_type	include/agg_blur.h	/^        typedef typename calculator_type::value_type calc_type;$/;"	t	class:agg::recursive_blur
calc_type	include/agg_color_gray.h	/^        typedef int32u calc_type;$/;"	t	struct:agg::gray16
calc_type	include/agg_color_gray.h	/^        typedef int32u calc_type;$/;"	t	struct:agg::gray8
calc_type	include/agg_color_rgba.h	/^        typedef int32u calc_type;$/;"	t	struct:agg::rgba16
calc_type	include/agg_color_rgba.h	/^        typedef int32u calc_type;$/;"	t	struct:agg::rgba8
calc_type	include/agg_pattern_filters_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::pattern_filter_bilinear_rgba
calc_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::calc_type    calc_type;$/;"	t	class:agg::pixfmt_alpha_blend_gray
calc_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_gray
calc_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_gray_pre
calc_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::blender_rgb_gamma
calc_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
calc_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb
calc_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_bgrAAA_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_bgrABB_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_rgb555_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_rgb565_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_rgbAAA_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	class:agg::blender_rgbBBA_gamma
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_bgrAAA
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_bgrAAA_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_bgrABB
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_bgrABB_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb555
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb555_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb565
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgb565_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgbAAA
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgbAAA_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgbBBA
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgbBBA_pre
calc_type	include/agg_pixfmt_rgb_packed.h	/^        typedef typename color_type::calc_type    calc_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename ColorT::calc_type calc_type;$/;"	t	struct:agg::multiplier_rgba
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgba
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgba_plain
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::blender_rgba_pre
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_color_burn
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_color_dodge
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_contrast
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_darken
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_difference
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_dst_atop
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_dst_in
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_dst_out
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_dst_over
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_exclusion
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_hard_light
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_invert
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_invert_rgb
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_lighten
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_minus
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_multiply
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_overlay
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_plus
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_screen
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_soft_light
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_src_atop
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_src_in
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_src_out
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_src_over
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::comp_op_rgba_xor
calc_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	struct:agg::copy_or_blend_rgba_wrapper
calc_type	include/agg_pixfmt_transposer.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::pixfmt_transposer
calc_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_gray
calc_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_gray_2x2
calc_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
calc_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
calc_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_gray_nn
calc_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgb
calc_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
calc_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
calc_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
calc_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgb_nn
calc_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgba
calc_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
calc_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
calc_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
calc_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_image_filter_rgba_nn
calc_type	include/agg_span_pattern_gray.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_pattern_gray
calc_type	include/agg_span_pattern_rgb.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_pattern_rgb
calc_type	include/agg_span_pattern_rgba.h	/^        typedef typename color_type::calc_type calc_type;$/;"	t	class:agg::span_pattern_rgba
calc_values	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::calc_values()$/;"	f	class:agg::gamma_ctrl_impl
calc_weight	examples/image_fltr_graph.cpp	/^    virtual double calc_weight(double x) const { return m_filter.calc_weight(fabs(x)); }$/;"	f	struct:image_filter_const_radius_adaptor
calc_weight	examples/image_fltr_graph.cpp	/^    virtual double calc_weight(double x) const { return m_filter.calc_weight(fabs(x)); }$/;"	f	struct:image_filter_variable_radius_adaptor
calc_weight	include/agg_image_filters.h	/^        double calc_weight(double x) const$/;"	f	class:agg::image_filter_blackman
calc_weight	include/agg_image_filters.h	/^        double calc_weight(double x) const$/;"	f	class:agg::image_filter_kaiser
calc_weight	include/agg_image_filters.h	/^        double calc_weight(double x) const$/;"	f	class:agg::image_filter_lanczos
calc_weight	include/agg_image_filters.h	/^        double calc_weight(double x) const$/;"	f	class:agg::image_filter_mitchell
calc_weight	include/agg_image_filters.h	/^        double calc_weight(double x) const$/;"	f	class:agg::image_filter_sinc
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x) $/;"	f	struct:agg::image_filter_gaussian
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	class:agg::image_filter_bicubic
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_bessel
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_bilinear
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_catrom
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_hamming
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_hanning
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_hermite
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_quadric
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_spline16
calc_weight	include/agg_image_filters.h	/^        static double calc_weight(double x)$/;"	f	struct:agg::image_filter_spline36
calc_xp	src/ctrl/agg_spline_ctrl.cpp	/^    double spline_ctrl_impl::calc_xp(unsigned idx)$/;"	f	class:agg::spline_ctrl_impl
calc_yp	src/ctrl/agg_spline_ctrl.cpp	/^    double spline_ctrl_impl::calc_yp(unsigned idx)$/;"	f	class:agg::spline_ctrl_impl
calculate	examples/distortions.cpp	/^    virtual void calculate(int* x, int* y) const$/;"	f	class:distortion_swirl	file:
calculate	examples/distortions.cpp	/^    virtual void calculate(int* x, int* y) const$/;"	f	class:distortion_swirl_wave	file:
calculate	examples/distortions.cpp	/^    virtual void calculate(int* x, int* y) const$/;"	f	class:distortion_wave	file:
calculate	examples/distortions.cpp	/^    virtual void calculate(int* x, int* y) const$/;"	f	class:distortion_wave_swirl	file:
calculate	examples/gradients.cpp	/^    virtual int calculate(int x, int y, int d) const$/;"	f	class:gradient_polymorphic_wrapper
calculate	examples/raster_text.cpp	/^    int calculate(int x, int y, int d) const$/;"	f	class:gradient_sine_repeat_adaptor
calculate	include/agg_alpha_mask_u8.h	/^        static unsigned calculate(const int8u* p) $/;"	f	struct:agg::rgb_to_gray_mask_u8
calculate	include/agg_alpha_mask_u8.h	/^        static unsigned calculate(const int8u* p) { return *p; }$/;"	f	struct:agg::one_component_mask_u8
calculate	include/agg_image_filters.h	/^        template<class FilterF> void calculate(const FilterF& filter,$/;"	f	class:agg::image_filter_lut
calculate	include/agg_scanline_boolean_algebra.h	/^        static AGG_INLINE unsigned calculate(unsigned a, unsigned b)$/;"	f	struct:agg::sbool_xor_formula_abs_diff
calculate	include/agg_scanline_boolean_algebra.h	/^        static AGG_INLINE unsigned calculate(unsigned a, unsigned b)$/;"	f	struct:agg::sbool_xor_formula_linear
calculate	include/agg_scanline_boolean_algebra.h	/^        static AGG_INLINE unsigned calculate(unsigned a, unsigned b)$/;"	f	struct:agg::sbool_xor_formula_saddle
calculate	include/agg_span_gradient.h	/^        AGG_INLINE int calculate(int x, int y, int d) const$/;"	f	class:agg::gradient_reflect_adaptor
calculate	include/agg_span_gradient.h	/^        AGG_INLINE int calculate(int x, int y, int d) const$/;"	f	class:agg::gradient_repeat_adaptor
calculate	include/agg_span_gradient.h	/^        int calculate(int x, int y, int) const$/;"	f	class:agg::gradient_radial_focus
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int d) $/;"	f	class:agg::gradient_conic
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int d) $/;"	f	class:agg::gradient_xy
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int) $/;"	f	class:agg::gradient_diamond
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int) $/;"	f	class:agg::gradient_sqrt_xy
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int)$/;"	f	class:agg::gradient_circle
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int)$/;"	f	class:agg::gradient_radial
calculate	include/agg_span_gradient.h	/^        static AGG_INLINE int calculate(int x, int y, int)$/;"	f	class:agg::gradient_radial_d
calculate	include/agg_span_gradient.h	/^        static int calculate(int x, int, int) { return x; }$/;"	f	class:agg::gradient_x
calculate	include/agg_span_gradient.h	/^        static int calculate(int, int y, int) { return y; }$/;"	f	class:agg::gradient_y
calculate	src/agg_vcgen_smooth_poly1.cpp	/^    void vcgen_smooth_poly1::calculate(const vertex_dist& v0, $/;"	f	class:agg::vcgen_smooth_poly1
calculate_alpha	include/agg_rasterizer_compound_aa.h	/^        AGG_INLINE unsigned calculate_alpha(int area, unsigned master_alpha) const$/;"	f	class:agg::rasterizer_compound_aa
calculate_alpha	include/agg_rasterizer_scanline_aa.h	/^        AGG_INLINE unsigned calculate_alpha(int area) const$/;"	f	class:agg::rasterizer_scanline_aa
calculate_swirl	examples/distortions.cpp	/^inline void calculate_swirl(int* x, int* y,$/;"	f
calculate_wave	examples/distortions.cpp	/^inline void calculate_wave(int* x, int* y, $/;"	f
calculator_type	include/agg_blur.h	/^        typedef CalculatorT calculator_type;$/;"	t	class:agg::recursive_blur
calculator_type	include/agg_blur.h	/^        typedef CalculatorT calculator_type;$/;"	t	class:agg::stack_blur
cap1	include/agg_vcgen_stroke.h	/^            cap1,$/;"	e	enum:agg::vcgen_stroke::status_e
cap2	include/agg_vcgen_stroke.h	/^            cap2,$/;"	e	enum:agg::vcgen_stroke::status_e
capacity	include/agg_array.h	/^        unsigned capacity() const { return m_capacity; }$/;"	f	class:agg::pod_vector
capacity	include/agg_array.h	/^    void pod_vector<T>::capacity(unsigned cap, unsigned extra_tail)$/;"	f	class:agg::pod_vector
caption	include/platform/agg_platform_support.h	/^        const char* caption() const { return m_caption; }$/;"	f	class:agg::platform_support
caption	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
caption	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
caption	src/platform/X11/agg_platform_support.cpp	/^    void platform_specific::caption(const char* capt)$/;"	f	class:agg::platform_specific
caption	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
caption	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
caption	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
caption	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::caption(const char* cap)$/;"	f	class:agg::platform_support
catrom_to_bezier	include/agg_curves.h	/^    catrom_to_bezier(const curve4_points& cp)$/;"	f	namespace:agg
catrom_to_bezier	include/agg_curves.h	/^    inline curve4_points catrom_to_bezier(double x1, double y1, $/;"	f	namespace:agg
cbox_ctrl	include/ctrl/agg_cbox_ctrl.h	/^        cbox_ctrl(double x, double y, const char* label, bool flip_y=false) :$/;"	f	class:agg::cbox_ctrl
cbox_ctrl	include/ctrl/agg_cbox_ctrl.h	/^    template<class ColorT> class cbox_ctrl : public cbox_ctrl_impl$/;"	c	namespace:agg
cbox_ctrl_impl	include/ctrl/agg_cbox_ctrl.h	/^    class cbox_ctrl_impl : public ctrl$/;"	c	namespace:agg
cbox_ctrl_impl	src/ctrl/agg_cbox_ctrl.cpp	/^    cbox_ctrl_impl::cbox_ctrl_impl(double x, double y, $/;"	f	class:agg::cbox_ctrl_impl
cell_aa	include/agg_rasterizer_scanline_aa.h	/^    struct cell_aa$/;"	s	namespace:agg
cell_block_limit	include/agg_rasterizer_cells_aa.h	/^            cell_block_limit = 1024$/;"	e	enum:agg::rasterizer_cells_aa::cell_block_scale_e
cell_block_mask	include/agg_rasterizer_cells_aa.h	/^            cell_block_mask  = cell_block_size - 1,$/;"	e	enum:agg::rasterizer_cells_aa::cell_block_scale_e
cell_block_pool	include/agg_rasterizer_cells_aa.h	/^            cell_block_pool  = 256,$/;"	e	enum:agg::rasterizer_cells_aa::cell_block_scale_e
cell_block_scale_e	include/agg_rasterizer_cells_aa.h	/^        enum cell_block_scale_e$/;"	g	class:agg::rasterizer_cells_aa
cell_block_shift	include/agg_rasterizer_cells_aa.h	/^            cell_block_shift = 12,$/;"	e	enum:agg::rasterizer_cells_aa::cell_block_scale_e
cell_block_size	include/agg_rasterizer_cells_aa.h	/^            cell_block_size  = 1 << cell_block_shift,$/;"	e	enum:agg::rasterizer_cells_aa::cell_block_scale_e
cell_info	include/agg_rasterizer_compound_aa.h	/^        struct cell_info$/;"	s	class:agg::rasterizer_compound_aa
cell_style_aa	include/agg_rasterizer_compound_aa.h	/^    struct cell_style_aa$/;"	s	namespace:agg
cell_type	include/agg_rasterizer_cells_aa.h	/^        typedef Cell cell_type;$/;"	t	class:agg::rasterizer_cells_aa
center	examples/distortions.cpp	/^    void center(double x, double y) { m_cx = x; m_cy = y; }$/;"	f	class:periodic_distortion
center	include/agg_trans_warp_magnifier.h	/^        void center(double x, double y) { m_xc = x; m_yc = y; }$/;"	f	class:agg::trans_warp_magnifier
center_x	examples/gradients.cpp	/^const double center_x = 350;$/;"	v
center_y	examples/gradients.cpp	/^const double center_y = 280;$/;"	v
change_active_point	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::change_active_point()$/;"	f	class:agg::gamma_ctrl_impl
change_stamp	font_freetype/agg_font_freetype.h	/^        int             change_stamp()   const { return m_change_stamp; }$/;"	f	class:agg::font_engine_freetype_base
change_stamp	font_win32_tt/agg_font_win32_tt.h	/^        int             change_stamp()   const { return m_change_stamp; }$/;"	f	class:agg::font_engine_win32_tt_base
char_map	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::char_map(FT_Encoding char_map)$/;"	f	class:agg::font_engine_freetype_base
char_map	font_freetype/agg_font_freetype.h	/^        FT_Encoding char_map()     const { return m_char_map;   }$/;"	f	class:agg::font_engine_freetype_base
char_set	font_win32_tt/agg_font_win32_tt.h	/^        DWORD       char_set()     const { return m_char_set;   }$/;"	f	class:agg::font_engine_win32_tt_base
char_set	font_win32_tt/agg_font_win32_tt.h	/^        void char_set(DWORD c)        { m_char_set = c;          }$/;"	f	class:agg::font_engine_win32_tt_base
char_type	examples/truetype_test.cpp	/^typedef char char_type;$/;"	t	file:
charge	examples/mol_view.cpp	/^    int      charge;$/;"	m	struct:atom_type	file:
check_chr	src/platform/win32/agg_platform_support.cpp	/^    inline int tokenizer::check_chr(const char *str, char chr)$/;"	f	class:agg::tokenizer
check_edge	examples/interactive_polygon.cpp	/^    bool interactive_polygon::check_edge(unsigned i, double x, double y) const$/;"	f	class:agg::interactive_polygon
check_edge	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::check_edge(unsigned i, double x, double y) const$/;"	f	class:agg::polygon_ctrl_impl
circle	examples/compositing.cpp	/^void circle(RenBase& rbase, color c1, color c2, $/;"	f
circle	include/agg_renderer_markers.h	/^        void circle(int x, int y, int r)$/;"	f	class:agg::renderer_markers
clear	examples/polymorphic_renderer.cpp	/^        virtual void clear(const color_type& c)$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
clear	include/agg_array.h	/^        void clear()                 { m_size = 0; }$/;"	f	class:agg::pod_auto_vector
clear	include/agg_array.h	/^        void clear()              { m_size = 0; }$/;"	f	class:agg::pod_vector
clear	include/agg_array.h	/^        void clear()      { m_size = 0; }$/;"	f	class:agg::pod_bvector
clear	include/agg_blur.h	/^        AGG_INLINE void clear() $/;"	f	struct:agg::stack_blur_calc_gray
clear	include/agg_blur.h	/^        AGG_INLINE void clear() $/;"	f	struct:agg::stack_blur_calc_rgb
clear	include/agg_blur.h	/^        AGG_INLINE void clear() $/;"	f	struct:agg::stack_blur_calc_rgba
clear	include/agg_color_gray.h	/^        void clear()$/;"	f	struct:agg::gray16
clear	include/agg_color_gray.h	/^        void clear()$/;"	f	struct:agg::gray8
clear	include/agg_color_rgba.h	/^        void clear()$/;"	f	struct:agg::rgba
clear	include/agg_color_rgba.h	/^        void clear()$/;"	f	struct:agg::rgba16
clear	include/agg_color_rgba.h	/^        void clear()$/;"	f	struct:agg::rgba8
clear	include/agg_renderer_base.h	/^        void clear(const color_type& c)$/;"	f	class:agg::renderer_base
clear	include/agg_renderer_mclip.h	/^        void clear(const color_type& c)$/;"	f	class:agg::renderer_mclip
clear	include/agg_rendering_buffer.h	/^        void clear(T value)$/;"	f	class:agg::row_accessor
clear	include/agg_rendering_buffer.h	/^        void clear(T value)$/;"	f	class:agg::row_ptr_cache
clear	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::clear(unsigned clear_val)$/;"	f	class:agg::pixel_map
clear	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::clear(unsigned clear_val)$/;"	f	class:agg::pixel_map
clear_orientation	include/agg_basics.h	/^    inline unsigned clear_orientation(unsigned c)$/;"	f	namespace:agg
clip	include/agg_basics.h	/^        bool clip(const self_type& r)$/;"	f	struct:agg::rect_base
clip_box	include/agg_conv_clip_polygon.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	struct:agg::conv_clip_polygon
clip_box	include/agg_conv_clip_polyline.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	struct:agg::conv_clip_polyline
clip_box	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::clip_box(double x1, double y1, $/;"	f	class:agg::rasterizer_compound_aa
clip_box	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::clip_box(double x1, double y1, $/;"	f	class:agg::rasterizer_scanline_aa
clip_box	include/agg_rasterizer_sl_clip.h	/^        void clip_box(coord_type x1, coord_type y1, coord_type x2, coord_type y2) {}$/;"	f	class:agg::rasterizer_sl_no_clip
clip_box	include/agg_rasterizer_sl_clip.h	/^        void clip_box(coord_type x1, coord_type y1, coord_type x2, coord_type y2)$/;"	f	class:agg::rasterizer_sl_clip
clip_box	include/agg_renderer_base.h	/^        bool clip_box(int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_base
clip_box	include/agg_renderer_base.h	/^        const rect_i& clip_box() const { return m_clip_box;    }$/;"	f	class:agg::renderer_base
clip_box	include/agg_renderer_mclip.h	/^        const rect_i& clip_box() const { return m_ren.clip_box(); }$/;"	f	class:agg::renderer_mclip
clip_box	include/agg_renderer_outline_aa.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	class:agg::renderer_outline_aa
clip_box	include/agg_renderer_outline_image.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	class:agg::renderer_outline_image
clip_box	include/agg_vpgen_clip_polygon.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	class:agg::vpgen_clip_polygon
clip_box	include/agg_vpgen_clip_polyline.h	/^        void clip_box(double x1, double y1, double x2, double y2)$/;"	f	class:agg::vpgen_clip_polyline
clip_box_naked	include/agg_renderer_base.h	/^        void clip_box_naked(int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_base
clip_liang_barsky	include/agg_clip_liang_barsky.h	/^    inline unsigned clip_liang_barsky(T x1, T y1, T x2, T y2,$/;"	f	namespace:agg
clip_line_segment	include/agg_clip_liang_barsky.h	/^    unsigned clip_line_segment(T* x1, T* y1, T* x2, T* y2,$/;"	f	namespace:agg
clip_move_point	include/agg_clip_liang_barsky.h	/^    bool clip_move_point(T x1, T y1, T x2, T y2, $/;"	f	namespace:agg
clip_rect_area	include/agg_renderer_base.h	/^        rect_i clip_rect_area(rect_i& dst, rect_i& src, int wsrc, int hsrc) const$/;"	f	class:agg::renderer_base
clip_type	include/agg_rasterizer_compound_aa.h	/^        typedef Clip                      clip_type;$/;"	t	class:agg::rasterizer_compound_aa
clip_type	include/agg_rasterizer_scanline_aa.h	/^        typedef Clip                      clip_type;$/;"	t	class:agg::rasterizer_scanline_aa
clipping_flags	include/agg_clip_liang_barsky.h	/^    inline unsigned clipping_flags(T x, T y, const rect_base<T>& clip_box)$/;"	f	namespace:agg
clipping_flags	src/agg_vpgen_clip_polygon.cpp	/^    unsigned vpgen_clip_polygon::clipping_flags(double x, double y)$/;"	f	class:agg::vpgen_clip_polygon
clipping_flags_e	include/agg_clip_liang_barsky.h	/^    enum clipping_flags_e$/;"	g	namespace:agg
clipping_flags_x	include/agg_clip_liang_barsky.h	/^    inline unsigned clipping_flags_x(T x, const rect_base<T>& clip_box)$/;"	f	namespace:agg
clipping_flags_x1_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_x1_clipped = 4,$/;"	e	enum:agg::clipping_flags_e
clipping_flags_x2_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_x2_clipped = 1,$/;"	e	enum:agg::clipping_flags_e
clipping_flags_x_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_x_clipped = clipping_flags_x1_clipped | clipping_flags_x2_clipped,$/;"	e	enum:agg::clipping_flags_e
clipping_flags_y	include/agg_clip_liang_barsky.h	/^    inline unsigned clipping_flags_y(T y, const rect_base<T>& clip_box)$/;"	f	namespace:agg
clipping_flags_y1_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_y1_clipped = 8,$/;"	e	enum:agg::clipping_flags_e
clipping_flags_y2_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_y2_clipped = 2,$/;"	e	enum:agg::clipping_flags_e
clipping_flags_y_clipped	include/agg_clip_liang_barsky.h	/^        clipping_flags_y_clipped = clipping_flags_y1_clipped | clipping_flags_y2_clipped$/;"	e	enum:agg::clipping_flags_e
close	examples/interactive_polygon.h	/^        bool close() const { return m_close; }$/;"	f	class:agg::simple_polygon_vertex_source
close	examples/interactive_polygon.h	/^        bool close() const { return m_vs.close(); }$/;"	f	class:agg::interactive_polygon
close	examples/interactive_polygon.h	/^        void close(bool f) { m_close = f;    }$/;"	f	class:agg::simple_polygon_vertex_source
close	examples/interactive_polygon.h	/^        void close(bool f) { m_vs.close(f);       }$/;"	f	class:agg::interactive_polygon
close	include/agg_rasterizer_outline.h	/^        void close()$/;"	f	class:agg::rasterizer_outline
close	include/agg_vertex_sequence.h	/^    void vertex_sequence<T, S>::close(bool closed)$/;"	f	class:agg::vertex_sequence
close	include/ctrl/agg_polygon_ctrl.h	/^        bool close() const { return m_close; }$/;"	f	class:agg::simple_polygon_vertex_source
close	include/ctrl/agg_polygon_ctrl.h	/^        bool close() const { return m_vs.close(); }$/;"	f	class:agg::polygon_ctrl_impl
close	include/ctrl/agg_polygon_ctrl.h	/^        void close(bool f) { m_close = f;    }$/;"	f	class:agg::simple_polygon_vertex_source
close	include/ctrl/agg_polygon_ctrl.h	/^        void close(bool f) { m_vs.close(f);       }$/;"	f	class:agg::polygon_ctrl_impl
close_first	include/agg_vcgen_stroke.h	/^            close_first,$/;"	e	enum:agg::vcgen_stroke::status_e
close_libs	src/platform/AmigaOS/agg_platform_support.cpp	/^void close_libs()$/;"	f
close_polygon	include/agg_path_storage.h	/^    inline void path_base<VC>::close_polygon(unsigned flags)$/;"	f	class:agg::path_base
close_polygon	include/agg_path_storage_integer.h	/^        void close_polygon() {}$/;"	f	class:agg::path_storage_integer
close_polygon	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::close_polygon()$/;"	f	class:agg::rasterizer_scanline_aa
close_subpath	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::close_subpath()$/;"	f	class:agg::svg::path_renderer
cmd	include/agg_basics.h	/^        unsigned cmd;$/;"	m	struct:agg::vertex_base
cmd	include/agg_vertex_sequence.h	/^        unsigned cmd;$/;"	m	struct:agg::vertex_dist_cmd
cmd_curve3	include/agg_path_storage_integer.h	/^            cmd_curve3  = 2,$/;"	e	enum:agg::vertex_integer::path_cmd
cmd_curve4	include/agg_path_storage_integer.h	/^            cmd_curve4  = 3$/;"	e	enum:agg::vertex_integer::path_cmd
cmd_line_to	include/agg_path_storage_integer.h	/^            cmd_line_to = 1,$/;"	e	enum:agg::vertex_integer::path_cmd
cmd_move_to	include/agg_path_storage_integer.h	/^            cmd_move_to = 0,$/;"	e	enum:agg::vertex_integer::path_cmd
cmp_color	examples/svg_viewer/agg_svg_parser.cpp	/^    int cmp_color(const void* p1, const void* p2)$/;"	f	namespace:agg::svg
cmp_dist_end	include/agg_rasterizer_outline_aa.h	/^    inline bool cmp_dist_end(int d)   { return d <= 0; }$/;"	f	namespace:agg
cmp_dist_start	include/agg_rasterizer_outline_aa.h	/^    inline bool cmp_dist_start(int d) { return d > 0;  }$/;"	f	namespace:agg
cob_type	include/agg_pixfmt_rgba.h	/^        typedef copy_or_blend_rgba_wrapper<blender_type> cob_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
color	examples/aa_demo.cpp	/^        void color(rgba8 c) { m_color = c; }$/;"	f	class:agg::renderer_enlarged
color	examples/circles.cpp	/^    agg::rgba  color;$/;"	m	struct:scatter_point	file:
color	examples/compositing.cpp	/^typedef agg::rgba8 color;$/;"	t	file:
color	examples/compositing2.cpp	/^typedef agg::rgba8 color;$/;"	t	file:
color	examples/flash_rasterizer.cpp	/^        const rgba8& color(unsigned style) const $/;"	f	class:agg::test_styles
color	examples/gouraud_mesh.cpp	/^        rgba8 color(unsigned style) const { return rgba8(0,0,0,0); }$/;"	f	class:agg::styles_gouraud
color	examples/gouraud_mesh.cpp	/^        rgba8 color;$/;"	m	struct:agg::mesh_point	file:
color	examples/polymorphic_renderer.cpp	/^        virtual const color_type& color() const$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
color	examples/polymorphic_renderer.cpp	/^        virtual void color(const color_type& c)$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
color	examples/rasterizer_compound.cpp	/^    const agg::rgba8& color(unsigned style) const $/;"	f	class:style_handler
color	examples/trans_polar.cpp	/^        const ColorT& color(unsigned i) const { return m_ctrl.color(i); } $/;"	f	class:agg::transformed_control
color	include/agg_gradient_lut.h	/^            color_type color;$/;"	m	struct:agg::gradient_lut::color_point
color	include/agg_gradient_lut.h	/^        color_type color() const$/;"	f	struct:agg::color_interpolator
color	include/agg_renderer_outline_aa.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::renderer_outline_aa
color	include/agg_renderer_outline_aa.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::renderer_outline_aa
color	include/agg_renderer_raster_text.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::renderer_raster_htext_solid
color	include/agg_renderer_raster_text.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::renderer_raster_vtext_solid
color	include/agg_renderer_raster_text.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::renderer_raster_htext_solid
color	include/agg_renderer_raster_text.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::renderer_raster_vtext_solid
color	include/agg_renderer_scanline.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::renderer_scanline_aa_solid
color	include/agg_renderer_scanline.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::renderer_scanline_bin_solid
color	include/agg_renderer_scanline.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::renderer_scanline_aa_solid
color	include/agg_renderer_scanline.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::renderer_scanline_bin_solid
color	include/agg_span_gouraud.h	/^            color_type color;$/;"	m	struct:agg::span_gouraud::coord_type
color	include/agg_span_solid.h	/^        const color_type& color() const { return m_color; }$/;"	f	class:agg::span_solid
color	include/agg_span_solid.h	/^        void color(const color_type& c) { m_color = c; }$/;"	f	class:agg::span_solid
color	include/ctrl/agg_bezier_ctrl.h	/^        const ColorT& color(unsigned i) const { return m_color; } $/;"	f	class:agg::bezier_ctrl
color	include/ctrl/agg_bezier_ctrl.h	/^        const ColorT& color(unsigned i) const { return m_color; } $/;"	f	class:agg::curve3_ctrl
color	include/ctrl/agg_cbox_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::cbox_ctrl
color	include/ctrl/agg_gamma_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::gamma_ctrl
color	include/ctrl/agg_polygon_ctrl.h	/^        const ColorT& color(unsigned i) const { return m_color; } $/;"	f	class:agg::polygon_ctrl
color	include/ctrl/agg_rbox_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::rbox_ctrl
color	include/ctrl/agg_scale_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::scale_ctrl
color	include/ctrl/agg_slider_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::slider_ctrl
color	include/ctrl/agg_spline_ctrl.h	/^        const ColorT& color(unsigned i) const { return *m_colors[i]; } $/;"	f	class:agg::spline_ctrl
color_array_type	examples/distortions.cpp	/^    typedef agg::pod_auto_array<agg::rgba8, 256> color_array_type;$/;"	t	class:the_application	file:
color_array_type	examples/graph_test.cpp	/^typedef agg::pod_auto_array<color_type, 256> color_array_type;$/;"	t	file:
color_conv	include/util/agg_color_conv.h	/^    void color_conv(RenBuf* dst, const RenBuf* src, CopyRow copy_row_functor)$/;"	f	namespace:agg
color_conv_abgr32_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<4> color_conv_abgr32_to_abgr32; \/\/----color_conv_abgr32_to_abgr32$/;"	t	namespace:agg
color_conv_abgr32_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<0,3,2,1> color_conv_abgr32_to_argb32; \/\/----color_conv_abgr32_to_argb32$/;"	t	namespace:agg
color_conv_abgr32_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<1,2,3> color_conv_abgr32_to_bgr24; \/\/----color_conv_abgr32_to_bgr24$/;"	t	namespace:agg
color_conv_abgr32_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<1,2,3,0> color_conv_abgr32_to_bgra32; \/\/----color_conv_abgr32_to_bgra32$/;"	t	namespace:agg
color_conv_abgr32_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<3,2,1> color_conv_abgr32_to_rgb24; \/\/----color_conv_abgr32_to_rgb24$/;"	t	namespace:agg
color_conv_abgr32_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb555<3,2,1,0> color_conv_abgr32_to_rgb555; \/\/----color_conv_abgr32_to_rgb555$/;"	t	namespace:agg
color_conv_abgr32_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb565<3,2,1> color_conv_abgr32_to_rgb565; \/\/----color_conv_abgr32_to_rgb565$/;"	t	namespace:agg
color_conv_abgr32_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,2,1,0> color_conv_abgr32_to_rgba32; \/\/----color_conv_abgr32_to_rgba32$/;"	t	namespace:agg
color_conv_abgr64_to_abgr32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,1,2,3> color_conv_abgr64_to_abgr32; \/\/----color_conv_abgr64_to_abgr32$/;"	t	namespace:agg
color_conv_abgr64_to_argb32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,3,2,1> color_conv_abgr64_to_argb32; \/\/----color_conv_abgr64_to_argb32$/;"	t	namespace:agg
color_conv_abgr64_to_bgra32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<1,2,3,0> color_conv_abgr64_to_bgra32; \/\/----color_conv_abgr64_to_bgra32$/;"	t	namespace:agg
color_conv_abgr64_to_rgba32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,2,1,0> color_conv_abgr64_to_rgba32; \/\/----color_conv_abgr64_to_rgba32$/;"	t	namespace:agg
color_conv_argb32_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<0,3,2,1> color_conv_argb32_to_abgr32; \/\/----color_conv_argb32_to_abgr32$/;"	t	namespace:agg
color_conv_argb32_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<4> color_conv_argb32_to_argb32; \/\/----color_conv_argb32_to_argb32$/;"	t	namespace:agg
color_conv_argb32_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<3,2,1> color_conv_argb32_to_bgr24; \/\/----color_conv_argb32_to_bgr24$/;"	t	namespace:agg
color_conv_argb32_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,2,1,0> color_conv_argb32_to_bgra32; \/\/----color_conv_argb32_to_bgra32$/;"	t	namespace:agg
color_conv_argb32_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<1,2,3> color_conv_argb32_to_rgb24; \/\/----color_conv_argb32_to_rgb24$/;"	t	namespace:agg
color_conv_argb32_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb555<1,2,3,0> color_conv_argb32_to_rgb555; \/\/----color_conv_argb32_to_rgb555$/;"	t	namespace:agg
color_conv_argb32_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb565<1,2,3> color_conv_argb32_to_rgb565; \/\/----color_conv_argb32_to_rgb565$/;"	t	namespace:agg
color_conv_argb32_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<1,2,3,0> color_conv_argb32_to_rgba32; \/\/----color_conv_argb32_to_rgba32$/;"	t	namespace:agg
color_conv_argb64_to_abgr32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,3,2,1> color_conv_argb64_to_abgr32; \/\/----color_conv_argb64_to_abgr32$/;"	t	namespace:agg
color_conv_argb64_to_argb32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,1,2,3> color_conv_argb64_to_argb32; \/\/----color_conv_argb64_to_argb32$/;"	t	namespace:agg
color_conv_argb64_to_bgra32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,2,1,0> color_conv_argb64_to_bgra32; \/\/----color_conv_argb64_to_bgra32$/;"	t	namespace:agg
color_conv_argb64_to_rgba32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<1,2,3,0> color_conv_argb64_to_rgba32; \/\/----color_conv_argb64_to_rgba32$/;"	t	namespace:agg
color_conv_bgr24_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<1,2,3,0> color_conv_bgr24_to_abgr32; \/\/----color_conv_bgr24_to_abgr32$/;"	t	namespace:agg
color_conv_bgr24_to_abgr64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<1,2,3,0> color_conv_bgr24_to_abgr64; \/\/----color_conv_bgr24_to_abgr64$/;"	t	namespace:agg
color_conv_bgr24_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<3,2,1,0> color_conv_bgr24_to_argb32; \/\/----color_conv_bgr24_to_argb32$/;"	t	namespace:agg
color_conv_bgr24_to_argb64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<3,2,1,0> color_conv_bgr24_to_argb64; \/\/----color_conv_bgr24_to_argb64$/;"	t	namespace:agg
color_conv_bgr24_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<3> color_conv_bgr24_to_bgr24;$/;"	t	namespace:agg
color_conv_bgr24_to_bgr48	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgb48<0,2> color_conv_bgr24_to_bgr48;$/;"	t	namespace:agg
color_conv_bgr24_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<0,1,2,3> color_conv_bgr24_to_bgra32; \/\/----color_conv_bgr24_to_bgra32$/;"	t	namespace:agg
color_conv_bgr24_to_bgra64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<0,1,2,3> color_conv_bgr24_to_bgra64; \/\/----color_conv_bgr24_to_bgra64$/;"	t	namespace:agg
color_conv_bgr24_to_gray16	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_gray16<2,0> color_conv_bgr24_to_gray16;$/;"	t	namespace:agg
color_conv_bgr24_to_gray8	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_gray8<2,0> color_conv_bgr24_to_gray8; \/\/----color_conv_bgr24_to_gray8$/;"	t	namespace:agg
color_conv_bgr24_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24 color_conv_bgr24_to_rgb24;$/;"	t	namespace:agg
color_conv_bgr24_to_rgb48	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgb48<2,0> color_conv_bgr24_to_rgb48;$/;"	t	namespace:agg
color_conv_bgr24_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgb555<2,0> color_conv_bgr24_to_rgb555; \/\/----color_conv_bgr24_to_rgb555$/;"	t	namespace:agg
color_conv_bgr24_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgb565<2,0> color_conv_bgr24_to_rgb565; \/\/----color_conv_bgr24_to_rgb565$/;"	t	namespace:agg
color_conv_bgr24_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<2,1,0,3> color_conv_bgr24_to_rgba32; \/\/----color_conv_bgr24_to_rgba32$/;"	t	namespace:agg
color_conv_bgr24_to_rgba64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<2,1,0,3> color_conv_bgr24_to_rgba64; \/\/----color_conv_bgr24_to_rgba64$/;"	t	namespace:agg
color_conv_bgr48_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb48_rgb24<0,2> color_conv_bgr48_to_bgr24;$/;"	t	namespace:agg
color_conv_bgr48_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb48_rgb24<2,0> color_conv_bgr48_to_rgb24;$/;"	t	namespace:agg
color_conv_bgrAAA_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbAAA_rgb24<0,2> color_conv_bgrAAA_to_bgr24;$/;"	t	namespace:agg
color_conv_bgrAAA_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbAAA_rgb24<2,0> color_conv_bgrAAA_to_rgb24;$/;"	t	namespace:agg
color_conv_bgrABB_rgb24	include/util/agg_color_conv_rgb16.h	/^    template<int B, int R> class color_conv_bgrABB_rgb24$/;"	c	namespace:agg
color_conv_bgrABB_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_bgrABB_rgb24<0,2> color_conv_bgrABB_to_bgr24;$/;"	t	namespace:agg
color_conv_bgrABB_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_bgrABB_rgb24<2,0> color_conv_bgrABB_to_rgb24;$/;"	t	namespace:agg
color_conv_bgra32_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,0,1,2> color_conv_bgra32_to_abgr32; \/\/----color_conv_bgra32_to_abgr32$/;"	t	namespace:agg
color_conv_bgra32_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,2,1,0> color_conv_bgra32_to_argb32; \/\/----color_conv_bgra32_to_argb32$/;"	t	namespace:agg
color_conv_bgra32_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<0,1,2> color_conv_bgra32_to_bgr24; \/\/----color_conv_bgra32_to_bgr24$/;"	t	namespace:agg
color_conv_bgra32_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<4> color_conv_bgra32_to_bgra32; \/\/----color_conv_bgra32_to_bgra32$/;"	t	namespace:agg
color_conv_bgra32_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<2,1,0> color_conv_bgra32_to_rgb24; \/\/----color_conv_bgra32_to_rgb24$/;"	t	namespace:agg
color_conv_bgra32_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb555<2,1,0,3> color_conv_bgra32_to_rgb555; \/\/----color_conv_bgra32_to_rgb555$/;"	t	namespace:agg
color_conv_bgra32_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb565<2,1,0> color_conv_bgra32_to_rgb565; \/\/----color_conv_bgra32_to_rgb565$/;"	t	namespace:agg
color_conv_bgra32_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<2,1,0,3> color_conv_bgra32_to_rgba32; \/\/----color_conv_bgra32_to_rgba32$/;"	t	namespace:agg
color_conv_bgra64_to_abgr32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,0,1,2> color_conv_bgra64_to_abgr32; \/\/----color_conv_bgra64_to_abgr32$/;"	t	namespace:agg
color_conv_bgra64_to_argb32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,2,1,0> color_conv_bgra64_to_argb32; \/\/----color_conv_bgra64_to_argb32$/;"	t	namespace:agg
color_conv_bgra64_to_bgra32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,1,2,3> color_conv_bgra64_to_bgra32; \/\/----color_conv_bgra64_to_bgra32$/;"	t	namespace:agg
color_conv_bgra64_to_rgba32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<2,1,0,3> color_conv_bgra64_to_rgba32; \/\/----color_conv_bgra64_to_rgba32$/;"	t	namespace:agg
color_conv_gray16_to_gray8	include/util/agg_color_conv_rgb16.h	/^    class color_conv_gray16_to_gray8$/;"	c	namespace:agg
color_conv_rgb24	include/util/agg_color_conv_rgb8.h	/^    class color_conv_rgb24$/;"	c	namespace:agg
color_conv_rgb24_gray16	include/util/agg_color_conv_rgb16.h	/^    template<int R, int B> class color_conv_rgb24_gray16$/;"	c	namespace:agg
color_conv_rgb24_gray8	include/util/agg_color_conv_rgb8.h	/^    template<int R, int B> class color_conv_rgb24_gray8$/;"	c	namespace:agg
color_conv_rgb24_rgb48	include/util/agg_color_conv_rgb16.h	/^    template<int I1, int I3> class color_conv_rgb24_rgb48$/;"	c	namespace:agg
color_conv_rgb24_rgb555	include/util/agg_color_conv_rgb8.h	/^    template<int R, int B> class color_conv_rgb24_rgb555$/;"	c	namespace:agg
color_conv_rgb24_rgb565	include/util/agg_color_conv_rgb8.h	/^    template<int R, int B> class color_conv_rgb24_rgb565$/;"	c	namespace:agg
color_conv_rgb24_rgba32	include/util/agg_color_conv_rgb8.h	/^    template<int I1, int I2, int I3, int A> class color_conv_rgb24_rgba32$/;"	c	namespace:agg
color_conv_rgb24_rgba64	include/util/agg_color_conv_rgb16.h	/^    template<int I1, int I2, int I3, int A> class color_conv_rgb24_rgba64$/;"	c	namespace:agg
color_conv_rgb24_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<3,2,1,0> color_conv_rgb24_to_abgr32; \/\/----color_conv_rgb24_to_abgr32$/;"	t	namespace:agg
color_conv_rgb24_to_abgr64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<3,2,1,0> color_conv_rgb24_to_abgr64; \/\/----color_conv_rgb24_to_abgr64$/;"	t	namespace:agg
color_conv_rgb24_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<1,2,3,0> color_conv_rgb24_to_argb32; \/\/----color_conv_rgb24_to_argb32$/;"	t	namespace:agg
color_conv_rgb24_to_argb64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<1,2,3,0> color_conv_rgb24_to_argb64; \/\/----color_conv_rgb24_to_argb64$/;"	t	namespace:agg
color_conv_rgb24_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24 color_conv_rgb24_to_bgr24;$/;"	t	namespace:agg
color_conv_rgb24_to_bgr48	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgb48<2,0> color_conv_rgb24_to_bgr48;$/;"	t	namespace:agg
color_conv_rgb24_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<2,1,0,3> color_conv_rgb24_to_bgra32; \/\/----color_conv_rgb24_to_bgra32$/;"	t	namespace:agg
color_conv_rgb24_to_bgra64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<2,1,0,3> color_conv_rgb24_to_bgra64; \/\/----color_conv_rgb24_to_bgra64$/;"	t	namespace:agg
color_conv_rgb24_to_gray16	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_gray16<0,2> color_conv_rgb24_to_gray16;$/;"	t	namespace:agg
color_conv_rgb24_to_gray8	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_gray8<0,2> color_conv_rgb24_to_gray8; \/\/----color_conv_rgb24_to_gray8$/;"	t	namespace:agg
color_conv_rgb24_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<3> color_conv_rgb24_to_rgb24;$/;"	t	namespace:agg
color_conv_rgb24_to_rgb48	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgb48<0,2> color_conv_rgb24_to_rgb48;$/;"	t	namespace:agg
color_conv_rgb24_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgb555<0,2> color_conv_rgb24_to_rgb555; \/\/----color_conv_rgb24_to_rgb555$/;"	t	namespace:agg
color_conv_rgb24_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgb565<0,2> color_conv_rgb24_to_rgb565; \/\/----color_conv_rgb24_to_rgb565$/;"	t	namespace:agg
color_conv_rgb24_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb24_rgba32<0,1,2,3> color_conv_rgb24_to_rgba32; \/\/----color_conv_rgb24_to_rgba32$/;"	t	namespace:agg
color_conv_rgb24_to_rgba64	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb24_rgba64<0,1,2,3> color_conv_rgb24_to_rgba64; \/\/----color_conv_rgb24_to_rgba64$/;"	t	namespace:agg
color_conv_rgb48_rgb24	include/util/agg_color_conv_rgb16.h	/^    template<int I1, int I3> class color_conv_rgb48_rgb24$/;"	c	namespace:agg
color_conv_rgb48_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb48_rgb24<2,0> color_conv_rgb48_to_bgr24;$/;"	t	namespace:agg
color_conv_rgb48_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgb48_rgb24<0,2> color_conv_rgb48_to_rgb24;$/;"	t	namespace:agg
color_conv_rgb555_rgb24	include/util/agg_color_conv_rgb8.h	/^    template<int R, int B> class color_conv_rgb555_rgb24$/;"	c	namespace:agg
color_conv_rgb555_rgba32	include/util/agg_color_conv_rgb8.h	/^    template<int R, int G, int B, int A> class color_conv_rgb555_rgba32$/;"	c	namespace:agg
color_conv_rgb555_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgba32<3,2,1,0> color_conv_rgb555_to_abgr32; \/\/----color_conv_rgb555_to_abgr32$/;"	t	namespace:agg
color_conv_rgb555_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgba32<1,2,3,0> color_conv_rgb555_to_argb32; \/\/----color_conv_rgb555_to_argb32$/;"	t	namespace:agg
color_conv_rgb555_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgb24<2,0> color_conv_rgb555_to_bgr24; \/\/----color_conv_rgb555_to_bgr24$/;"	t	namespace:agg
color_conv_rgb555_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgba32<2,1,0,3> color_conv_rgb555_to_bgra32; \/\/----color_conv_rgb555_to_bgra32$/;"	t	namespace:agg
color_conv_rgb555_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgb24<0,2> color_conv_rgb555_to_rgb24; \/\/----color_conv_rgb555_to_rgb24$/;"	t	namespace:agg
color_conv_rgb555_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<2> color_conv_rgb555_to_rgb555; \/\/----color_conv_rgb555_to_rgb555$/;"	t	namespace:agg
color_conv_rgb555_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    class color_conv_rgb555_to_rgb565$/;"	c	namespace:agg
color_conv_rgb555_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb555_rgba32<0,1,2,3> color_conv_rgb555_to_rgba32; \/\/----color_conv_rgb555_to_rgba32$/;"	t	namespace:agg
color_conv_rgb565_rgb24	include/util/agg_color_conv_rgb8.h	/^    template<int R, int B> class color_conv_rgb565_rgb24$/;"	c	namespace:agg
color_conv_rgb565_rgba32	include/util/agg_color_conv_rgb8.h	/^    template<int R, int G, int B, int A> class color_conv_rgb565_rgba32$/;"	c	namespace:agg
color_conv_rgb565_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgba32<3,2,1,0> color_conv_rgb565_to_abgr32; \/\/----color_conv_rgb565_to_abgr32$/;"	t	namespace:agg
color_conv_rgb565_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgba32<1,2,3,0> color_conv_rgb565_to_argb32; \/\/----color_conv_rgb565_to_argb32$/;"	t	namespace:agg
color_conv_rgb565_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgb24<2,0> color_conv_rgb565_to_bgr24; \/\/----color_conv_rgb565_to_bgr24$/;"	t	namespace:agg
color_conv_rgb565_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgba32<2,1,0,3> color_conv_rgb565_to_bgra32; \/\/----color_conv_rgb565_to_bgra32$/;"	t	namespace:agg
color_conv_rgb565_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgb24<0,2> color_conv_rgb565_to_rgb24; \/\/----color_conv_rgb565_to_rgb24$/;"	t	namespace:agg
color_conv_rgb565_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    class color_conv_rgb565_to_rgb555$/;"	c	namespace:agg
color_conv_rgb565_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<2> color_conv_rgb565_to_rgb565; \/\/----color_conv_rgb565_to_rgb565$/;"	t	namespace:agg
color_conv_rgb565_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgb565_rgba32<0,1,2,3> color_conv_rgb565_to_rgba32; \/\/----color_conv_rgb565_to_rgba32$/;"	t	namespace:agg
color_conv_rgbAAA_rgb24	include/util/agg_color_conv_rgb16.h	/^    template<int R, int B> class color_conv_rgbAAA_rgb24$/;"	c	namespace:agg
color_conv_rgbAAA_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbAAA_rgb24<2,0> color_conv_rgbAAA_to_bgr24;$/;"	t	namespace:agg
color_conv_rgbAAA_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbAAA_rgb24<0,2> color_conv_rgbAAA_to_rgb24;$/;"	t	namespace:agg
color_conv_rgbBBA_rgb24	include/util/agg_color_conv_rgb16.h	/^    template<int R, int B> class color_conv_rgbBBA_rgb24$/;"	c	namespace:agg
color_conv_rgbBBA_to_bgr24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbBBA_rgb24<2,0> color_conv_rgbBBA_to_bgr24;$/;"	t	namespace:agg
color_conv_rgbBBA_to_rgb24	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgbBBA_rgb24<0,2> color_conv_rgbBBA_to_rgb24;$/;"	t	namespace:agg
color_conv_rgba32	include/util/agg_color_conv_rgb8.h	/^    template<int I1, int I2, int I3, int I4> class color_conv_rgba32$/;"	c	namespace:agg
color_conv_rgba32_rgb24	include/util/agg_color_conv_rgb8.h	/^    template<int I1, int I2, int I3> class color_conv_rgba32_rgb24$/;"	c	namespace:agg
color_conv_rgba32_rgb555	include/util/agg_color_conv_rgb8.h	/^    template<int R, int G, int B, int A> class color_conv_rgba32_rgb555$/;"	c	namespace:agg
color_conv_rgba32_rgb565	include/util/agg_color_conv_rgb8.h	/^    template<int R, int G, int B> class color_conv_rgba32_rgb565$/;"	c	namespace:agg
color_conv_rgba32_to_abgr32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,2,1,0> color_conv_rgba32_to_abgr32; \/\/----color_conv_rgba32_to_abgr32$/;"	t	namespace:agg
color_conv_rgba32_to_argb32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<3,0,1,2> color_conv_rgba32_to_argb32; \/\/----color_conv_rgba32_to_argb32$/;"	t	namespace:agg
color_conv_rgba32_to_bgr24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<2,1,0> color_conv_rgba32_to_bgr24; \/\/----color_conv_rgba32_to_bgr24$/;"	t	namespace:agg
color_conv_rgba32_to_bgra32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32<2,1,0,3> color_conv_rgba32_to_bgra32; \/\/----color_conv_rgba32_to_bgra32$/;"	t	namespace:agg
color_conv_rgba32_to_rgb24	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb24<0,1,2> color_conv_rgba32_to_rgb24; \/\/----color_conv_rgba32_to_rgb24$/;"	t	namespace:agg
color_conv_rgba32_to_rgb555	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb555<0,1,2,3> color_conv_rgba32_to_rgb555; \/\/----color_conv_rgba32_to_rgb555$/;"	t	namespace:agg
color_conv_rgba32_to_rgb565	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_rgba32_rgb565<0,1,2> color_conv_rgba32_to_rgb565; \/\/----color_conv_rgba32_to_rgb565$/;"	t	namespace:agg
color_conv_rgba32_to_rgba32	include/util/agg_color_conv_rgb8.h	/^    typedef color_conv_same<4> color_conv_rgba32_to_rgba32; \/\/----color_conv_rgba32_to_rgba32$/;"	t	namespace:agg
color_conv_rgba64_rgba32	include/util/agg_color_conv_rgb16.h	/^    template<int I1, int I2, int I3, int I4> class color_conv_rgba64_rgba32$/;"	c	namespace:agg
color_conv_rgba64_to_abgr32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,2,1,0> color_conv_rgba64_to_abgr32; \/\/----color_conv_rgba64_to_abgr32$/;"	t	namespace:agg
color_conv_rgba64_to_argb32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<3,0,1,2> color_conv_rgba64_to_argb32; \/\/----color_conv_rgba64_to_argb32$/;"	t	namespace:agg
color_conv_rgba64_to_bgra32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<2,1,0,3> color_conv_rgba64_to_bgra32; \/\/----color_conv_rgba64_to_bgra32$/;"	t	namespace:agg
color_conv_rgba64_to_rgba32	include/util/agg_color_conv_rgb16.h	/^    typedef color_conv_rgba64_rgba32<0,1,2,3> color_conv_rgba64_to_rgba32; \/\/----color_conv_rgba64_to_rgba32$/;"	t	namespace:agg
color_conv_row	include/util/agg_color_conv.h	/^    void color_conv_row(int8u* dst, $/;"	f	namespace:agg
color_conv_same	include/util/agg_color_conv.h	/^    template<int BPP> class color_conv_same$/;"	c	namespace:agg
color_func_type	examples/gradient_focal.cpp	/^    typedef agg::gradient_lut<agg::color_interpolator<agg::rgba8>, 1024> color_func_type;$/;"	t	class:the_application	file:
color_function	include/agg_span_gradient.h	/^        const ColorF& color_function() const { return *m_color_function; }$/;"	f	class:agg::span_gradient
color_function	include/agg_span_gradient.h	/^        void color_function(const ColorF& cf) { m_color_function = &cf; }$/;"	f	class:agg::span_gradient
color_function_profile	examples/gradients.cpp	/^    color_function_profile() {}$/;"	f	struct:color_function_profile
color_function_profile	examples/gradients.cpp	/^    color_function_profile(const color_type* colors, const agg::int8u* profile) :$/;"	f	struct:color_function_profile
color_function_profile	examples/gradients.cpp	/^struct color_function_profile$/;"	s	file:
color_idx	examples/mol_view.cpp	/^    unsigned color_idx;$/;"	m	struct:atom_type	file:
color_interpolator	include/agg_gradient_lut.h	/^        color_interpolator(const color_type& c1, $/;"	f	struct:agg::color_interpolator
color_interpolator	include/agg_gradient_lut.h	/^    template<> struct color_interpolator<gray8>$/;"	s	namespace:agg
color_interpolator	include/agg_gradient_lut.h	/^    template<> struct color_interpolator<rgba8>$/;"	s	namespace:agg
color_interpolator	include/agg_gradient_lut.h	/^    template<class ColorT> struct color_interpolator$/;"	s	namespace:agg
color_lut_size	include/agg_gradient_lut.h	/^        enum { color_lut_size = ColorLutSize };$/;"	e	enum:agg::gradient_lut::__anon2
color_lut_type	include/agg_gradient_lut.h	/^        typedef agg::pod_array<color_type>       color_lut_type;$/;"	t	class:agg::gradient_lut
color_point	include/agg_gradient_lut.h	/^            color_point() {}$/;"	f	struct:agg::gradient_lut::color_point
color_point	include/agg_gradient_lut.h	/^            color_point(double off, const color_type& c) : $/;"	f	struct:agg::gradient_lut::color_point
color_point	include/agg_gradient_lut.h	/^        struct color_point$/;"	s	class:agg::gradient_lut
color_profile_type	include/agg_gradient_lut.h	/^        typedef agg::pod_bvector<color_point, 4> color_profile_type;$/;"	t	class:agg::gradient_lut
color_type	examples/aa_test.cpp	/^typedef pixfmt_type::color_type                             color_type;$/;"	t	file:
color_type	examples/alpha_gradient.cpp	/^typedef pixfmt_type::color_type color_type;$/;"	t	file:
color_type	examples/alpha_mask2.cpp	/^        typedef gray8 color_type;$/;"	t	struct:agg::gradient_linear_color	file:
color_type	examples/alpha_mask2.cpp	/^        typedef rgba8 color_type;$/;"	t	struct:agg::gradient_linear_color	file:
color_type	examples/compositing.cpp	/^        typedef color color_type;$/;"	t	struct:agg::gradient_linear_color	file:
color_type	examples/gamma_tuner.cpp	/^typedef agg::rgba8 color_type;$/;"	t	file:
color_type	examples/gradient_focal.cpp	/^typedef agg::rgba8 color_type;$/;"	t	file:
color_type	examples/graph_test.cpp	/^typedef pixfmt::color_type color_type;$/;"	t	file:
color_type	examples/image_alpha.cpp	/^        typedef rgba8 color_type;$/;"	t	class:agg::span_conv_brightness_alpha_rgb8	file:
color_type	examples/image_filters.cpp	/^typedef pixfmt::color_type color_type;$/;"	t	file:
color_type	examples/image_perspective.cpp	/^    typedef pixfmt::color_type                             color_type;$/;"	t	class:the_application	file:
color_type	examples/image_resample.cpp	/^typedef pixfmt::color_type                             color_type;$/;"	t	file:
color_type	examples/multi_clip.cpp	/^        typedef gray8 color_type;$/;"	t	struct:agg::gradient_linear_color	file:
color_type	examples/multi_clip.cpp	/^        typedef rgba8 color_type;$/;"	t	struct:agg::gradient_linear_color	file:
color_type	examples/pattern_perspective.cpp	/^typedef pixfmt::color_type color_type;$/;"	t	file:
color_type	examples/pattern_resample.cpp	/^typedef pixfmt::color_type                             color_type;$/;"	t	file:
color_type	examples/pixel_formats.h	/^typedef agg::gray16 color_type;$/;"	t
color_type	examples/pixel_formats.h	/^typedef agg::gray8 color_type;$/;"	t
color_type	examples/pixel_formats.h	/^typedef agg::rgba16 color_type;$/;"	t
color_type	examples/pixel_formats.h	/^typedef agg::rgba8 color_type;$/;"	t
color_type	examples/polymorphic_renderer.cpp	/^        typedef rgba8       color_type;$/;"	t	class:agg::polymorphic_renderer_solid_rgba8_base	file:
color_type	examples/rasterizers2.cpp	/^        typedef rgba8 color_type;$/;"	t	class:agg::pattern_pixmap_argb32	file:
color_type	examples/simple_blur.cpp	/^        typedef rgba8 color_type;$/;"	t	class:agg::span_simple_blur_rgb24	file:
color_type	include/agg_blur.h	/^        typedef ColorT      color_type;$/;"	t	class:agg::stack_blur
color_type	include/agg_blur.h	/^        typedef ColorT color_type;$/;"	t	class:agg::recursive_blur
color_type	include/agg_glyph_raster_bin.h	/^        typedef ColorT color_type;$/;"	t	class:agg::glyph_raster_bin
color_type	include/agg_gradient_lut.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::color_interpolator
color_type	include/agg_gradient_lut.h	/^        typedef gray8 color_type;$/;"	t	struct:agg::color_interpolator
color_type	include/agg_gradient_lut.h	/^        typedef rgba8 color_type;$/;"	t	struct:agg::color_interpolator
color_type	include/agg_gradient_lut.h	/^        typedef typename interpolator_type::color_type color_type;$/;"	t	class:agg::gradient_lut
color_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::image_accessor_clip
color_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::image_accessor_clone
color_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::image_accessor_no_clip
color_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::image_accessor_wrap
color_type	include/agg_pattern_filters_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::pattern_filter_bilinear_rgba
color_type	include/agg_pattern_filters_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::pattern_filter_nn
color_type	include/agg_pixfmt_amask_adaptor.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::pixfmt_amask_adaptor
color_type	include/agg_pixfmt_gray.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_gray
color_type	include/agg_pixfmt_gray.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_gray_pre
color_type	include/agg_pixfmt_gray.h	/^        typedef typename blender_type::color_type color_type;$/;"	t	class:agg::pixfmt_alpha_blend_gray
color_type	include/agg_pixfmt_rgb.h	/^        typedef ColorT color_type;$/;"	t	class:agg::blender_rgb_gamma
color_type	include/agg_pixfmt_rgb.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_rgb
color_type	include/agg_pixfmt_rgb.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_rgb_pre
color_type	include/agg_pixfmt_rgb.h	/^        typedef typename blender_type::color_type color_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	class:agg::blender_bgrAAA_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	class:agg::blender_bgrABB_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	class:agg::blender_rgbAAA_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	class:agg::blender_rgbBBA_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_bgrAAA
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_bgrAAA_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_bgrABB
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_bgrABB_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_rgbAAA
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_rgbAAA_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_rgbBBA
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba16 color_type;$/;"	t	struct:agg::blender_rgbBBA_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	class:agg::blender_rgb555_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	class:agg::blender_rgb565_gamma
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	struct:agg::blender_rgb555
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	struct:agg::blender_rgb555_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	struct:agg::blender_rgb565
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef rgba8 color_type;$/;"	t	struct:agg::blender_rgb565_pre
color_type	include/agg_pixfmt_rgb_packed.h	/^        typedef typename blender_type::color_type color_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_rgba_plain
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::blender_rgba_pre
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba_pre
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_adaptor_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_adaptor_rgba_pre
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_clear
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_color_burn
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_color_dodge
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_contrast
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_darken
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_difference
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_dst
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_dst_atop
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_dst_in
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_dst_out
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_dst_over
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_exclusion
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_hard_light
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_invert
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_invert_rgb
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_lighten
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_minus
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_multiply
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_overlay
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_plus
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_screen
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_soft_light
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_src
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_src_atop
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_src_in
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_src_out
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_src_over
color_type	include/agg_pixfmt_rgba.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::comp_op_rgba_xor
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename Blender::color_type color_type;$/;"	t	struct:agg::copy_or_blend_rgba_wrapper
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::color_type color_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::color_type color_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba_pre
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::color_type color_type;$/;"	t	struct:agg::comp_adaptor_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename blender_type::color_type color_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
color_type	include/agg_pixfmt_rgba.h	/^        typedef typename blender_type::color_type color_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
color_type	include/agg_pixfmt_transposer.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::pixfmt_transposer
color_type	include/agg_renderer_base.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::renderer_base
color_type	include/agg_renderer_markers.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_markers
color_type	include/agg_renderer_mclip.h	/^        typedef typename pixfmt_type::color_type color_type;$/;"	t	class:agg::renderer_mclip
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_aa0
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_aa1
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_aa2
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_aa3
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_aa_base
color_type	include/agg_renderer_outline_aa.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_outline_aa
color_type	include/agg_renderer_outline_image.h	/^        typedef typename Renderer::color_type color_type;$/;"	t	class:agg::line_interpolator_image
color_type	include/agg_renderer_outline_image.h	/^        typedef typename Source::color_type color_type;$/;"	t	class:agg::line_image_scale
color_type	include/agg_renderer_outline_image.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_outline_image
color_type	include/agg_renderer_outline_image.h	/^        typedef typename filter_type::color_type color_type;$/;"	t	class:agg::line_image_pattern
color_type	include/agg_renderer_outline_image.h	/^        typedef typename filter_type::color_type color_type;$/;"	t	class:agg::line_image_pattern_pow2
color_type	include/agg_renderer_primitives.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_primitives
color_type	include/agg_renderer_raster_text.h	/^        typedef typename ren_type::color_type color_type;$/;"	t	class:agg::renderer_raster_htext_solid
color_type	include/agg_renderer_raster_text.h	/^        typedef typename ren_type::color_type color_type;$/;"	t	class:agg::renderer_raster_vtext_solid
color_type	include/agg_renderer_scanline.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_scanline_aa_solid
color_type	include/agg_renderer_scanline.h	/^        typedef typename base_ren_type::color_type color_type;$/;"	t	class:agg::renderer_scanline_bin_solid
color_type	include/agg_span_allocator.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_allocator
color_type	include/agg_span_converter.h	/^        typedef typename SpanGenerator::color_type color_type;$/;"	t	class:agg::span_converter
color_type	include/agg_span_gouraud.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_gouraud
color_type	include/agg_span_gouraud_gray.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_gouraud_gray
color_type	include/agg_span_gouraud_rgba.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_gouraud_rgba
color_type	include/agg_span_gradient.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_gradient
color_type	include/agg_span_gradient.h	/^        typedef ColorT color_type;$/;"	t	struct:agg::gradient_linear_color
color_type	include/agg_span_gradient_alpha.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_gradient_alpha
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_gray
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_gray_2x2
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_gray_nn
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_gray
color_type	include/agg_span_image_filter_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_gray_affine
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgb
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgb_nn
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_rgb
color_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_rgb_affine
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgba
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_filter_rgba_nn
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_rgba
color_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_image_resample_rgba_affine
color_type	include/agg_span_pattern_gray.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_pattern_gray
color_type	include/agg_span_pattern_rgb.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_pattern_rgb
color_type	include/agg_span_pattern_rgba.h	/^        typedef typename source_type::color_type color_type;$/;"	t	class:agg::span_pattern_rgba
color_type	include/agg_span_solid.h	/^        typedef ColorT color_type;$/;"	t	class:agg::span_solid
color_value_type	examples/alpha_gradient.cpp	/^typedef color_type::value_type color_value_type;$/;"	t	file:
colors	examples/alpha_mask2.cpp	/^        void colors(const color_type& c1, const color_type& c2)$/;"	f	struct:agg::gradient_linear_color
colors	examples/compositing.cpp	/^        void colors(const color_type& c1, const color_type& c2)$/;"	f	struct:agg::gradient_linear_color
colors	examples/multi_clip.cpp	/^        void colors(const color_type& c1, const color_type& c2)$/;"	f	struct:agg::gradient_linear_color
colors	examples/svg_viewer/agg_svg_parser.cpp	/^    named_color colors[] = $/;"	m	namespace:agg::svg	file:
colors	include/agg_span_gouraud.h	/^        void colors(ColorT c1, ColorT c2, ColorT c3)$/;"	f	class:agg::span_gouraud
colors	include/agg_span_gradient.h	/^        void colors(const color_type& c1, const color_type& c2, unsigned size = 256)$/;"	f	struct:agg::gradient_linear_color
combine_hspan	include/agg_alpha_mask_u8.h	/^        void combine_hspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::alpha_mask_u8
combine_hspan	include/agg_alpha_mask_u8.h	/^        void combine_hspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::amask_no_clip_u8
combine_pixel	include/agg_alpha_mask_u8.h	/^        cover_type combine_pixel(int x, int y, cover_type val) const$/;"	f	class:agg::alpha_mask_u8
combine_pixel	include/agg_alpha_mask_u8.h	/^        cover_type combine_pixel(int x, int y, cover_type val) const$/;"	f	class:agg::amask_no_clip_u8
combine_vspan	include/agg_alpha_mask_u8.h	/^        void combine_vspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::alpha_mask_u8
combine_vspan	include/agg_alpha_mask_u8.h	/^        void combine_vspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::amask_no_clip_u8
command	include/agg_path_storage.h	/^        unsigned command(unsigned idx) const$/;"	f	class:agg::vertex_stl_storage
command	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::command(unsigned idx) const$/;"	f	class:agg::path_base
command	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::command(unsigned idx) const$/;"	f	class:agg::vertex_block_storage
comp_adaptor_clip_to_dst_rgba	include/agg_pixfmt_rgba.h	/^    template<class BlenderPre> struct comp_adaptor_clip_to_dst_rgba$/;"	s	namespace:agg
comp_adaptor_clip_to_dst_rgba_pre	include/agg_pixfmt_rgba.h	/^    template<class BlenderPre> struct comp_adaptor_clip_to_dst_rgba_pre$/;"	s	namespace:agg
comp_adaptor_rgba	include/agg_pixfmt_rgba.h	/^    template<class BlenderPre> struct comp_adaptor_rgba$/;"	s	namespace:agg
comp_op	include/agg_pixfmt_rgba.h	/^        unsigned comp_op() const  { return m_comp_op; }$/;"	f	class:agg::pixfmt_custom_blend_rgba
comp_op	include/agg_pixfmt_rgba.h	/^        void comp_op(unsigned op) { m_comp_op = op; }$/;"	f	class:agg::pixfmt_custom_blend_rgba
comp_op_adaptor_clip_to_dst_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_adaptor_clip_to_dst_rgba$/;"	s	namespace:agg
comp_op_adaptor_clip_to_dst_rgba_pre	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_adaptor_clip_to_dst_rgba_pre$/;"	s	namespace:agg
comp_op_adaptor_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_adaptor_rgba$/;"	s	namespace:agg
comp_op_adaptor_rgba_pre	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_adaptor_rgba_pre$/;"	s	namespace:agg
comp_op_clear	include/agg_pixfmt_rgba.h	/^        comp_op_clear,         \/\/----comp_op_clear$/;"	e	enum:agg::comp_op_e
comp_op_color_burn	include/agg_pixfmt_rgba.h	/^        comp_op_color_burn,    \/\/----comp_op_color_burn$/;"	e	enum:agg::comp_op_e
comp_op_color_dodge	include/agg_pixfmt_rgba.h	/^        comp_op_color_dodge,   \/\/----comp_op_color_dodge$/;"	e	enum:agg::comp_op_e
comp_op_contrast	include/agg_pixfmt_rgba.h	/^        comp_op_contrast,      \/\/----comp_op_contrast$/;"	e	enum:agg::comp_op_e
comp_op_darken	include/agg_pixfmt_rgba.h	/^        comp_op_darken,        \/\/----comp_op_darken$/;"	e	enum:agg::comp_op_e
comp_op_difference	include/agg_pixfmt_rgba.h	/^        comp_op_difference,    \/\/----comp_op_difference$/;"	e	enum:agg::comp_op_e
comp_op_dst	include/agg_pixfmt_rgba.h	/^        comp_op_dst,           \/\/----comp_op_dst$/;"	e	enum:agg::comp_op_e
comp_op_dst_atop	include/agg_pixfmt_rgba.h	/^        comp_op_dst_atop,      \/\/----comp_op_dst_atop$/;"	e	enum:agg::comp_op_e
comp_op_dst_in	include/agg_pixfmt_rgba.h	/^        comp_op_dst_in,        \/\/----comp_op_dst_in$/;"	e	enum:agg::comp_op_e
comp_op_dst_out	include/agg_pixfmt_rgba.h	/^        comp_op_dst_out,       \/\/----comp_op_dst_out$/;"	e	enum:agg::comp_op_e
comp_op_dst_over	include/agg_pixfmt_rgba.h	/^        comp_op_dst_over,      \/\/----comp_op_dst_over$/;"	e	enum:agg::comp_op_e
comp_op_e	include/agg_pixfmt_rgba.h	/^    enum comp_op_e$/;"	g	namespace:agg
comp_op_exclusion	include/agg_pixfmt_rgba.h	/^        comp_op_exclusion,     \/\/----comp_op_exclusion$/;"	e	enum:agg::comp_op_e
comp_op_func_type	include/agg_pixfmt_rgba.h	/^        typedef void (*comp_op_func_type)(value_type* p, $/;"	t	struct:agg::comp_op_table_rgba
comp_op_hard_light	include/agg_pixfmt_rgba.h	/^        comp_op_hard_light,    \/\/----comp_op_hard_light$/;"	e	enum:agg::comp_op_e
comp_op_invert	include/agg_pixfmt_rgba.h	/^        comp_op_invert,        \/\/----comp_op_invert$/;"	e	enum:agg::comp_op_e
comp_op_invert_rgb	include/agg_pixfmt_rgba.h	/^        comp_op_invert_rgb,    \/\/----comp_op_invert_rgb$/;"	e	enum:agg::comp_op_e
comp_op_lighten	include/agg_pixfmt_rgba.h	/^        comp_op_lighten,       \/\/----comp_op_lighten$/;"	e	enum:agg::comp_op_e
comp_op_minus	include/agg_pixfmt_rgba.h	/^        comp_op_minus,         \/\/----comp_op_minus$/;"	e	enum:agg::comp_op_e
comp_op_multiply	include/agg_pixfmt_rgba.h	/^        comp_op_multiply,      \/\/----comp_op_multiply$/;"	e	enum:agg::comp_op_e
comp_op_overlay	include/agg_pixfmt_rgba.h	/^        comp_op_overlay,       \/\/----comp_op_overlay$/;"	e	enum:agg::comp_op_e
comp_op_plus	include/agg_pixfmt_rgba.h	/^        comp_op_plus,          \/\/----comp_op_plus$/;"	e	enum:agg::comp_op_e
comp_op_rgba_clear	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_clear$/;"	s	namespace:agg
comp_op_rgba_color_burn	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_color_burn$/;"	s	namespace:agg
comp_op_rgba_color_dodge	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_color_dodge$/;"	s	namespace:agg
comp_op_rgba_contrast	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_contrast$/;"	s	namespace:agg
comp_op_rgba_darken	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_darken$/;"	s	namespace:agg
comp_op_rgba_difference	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_difference$/;"	s	namespace:agg
comp_op_rgba_dst	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_dst$/;"	s	namespace:agg
comp_op_rgba_dst_atop	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_dst_atop$/;"	s	namespace:agg
comp_op_rgba_dst_in	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_dst_in$/;"	s	namespace:agg
comp_op_rgba_dst_out	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_dst_out$/;"	s	namespace:agg
comp_op_rgba_dst_over	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_dst_over$/;"	s	namespace:agg
comp_op_rgba_exclusion	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_exclusion$/;"	s	namespace:agg
comp_op_rgba_hard_light	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_hard_light$/;"	s	namespace:agg
comp_op_rgba_invert	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_invert$/;"	s	namespace:agg
comp_op_rgba_invert_rgb	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_invert_rgb$/;"	s	namespace:agg
comp_op_rgba_lighten	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_lighten$/;"	s	namespace:agg
comp_op_rgba_minus	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_minus$/;"	s	namespace:agg
comp_op_rgba_multiply	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_multiply$/;"	s	namespace:agg
comp_op_rgba_overlay	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_overlay$/;"	s	namespace:agg
comp_op_rgba_plus	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_plus$/;"	s	namespace:agg
comp_op_rgba_screen	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_screen$/;"	s	namespace:agg
comp_op_rgba_soft_light	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_soft_light$/;"	s	namespace:agg
comp_op_rgba_src	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_src$/;"	s	namespace:agg
comp_op_rgba_src_atop	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_src_atop$/;"	s	namespace:agg
comp_op_rgba_src_in	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_src_in$/;"	s	namespace:agg
comp_op_rgba_src_out	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_src_out$/;"	s	namespace:agg
comp_op_rgba_src_over	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_src_over$/;"	s	namespace:agg
comp_op_rgba_xor	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_rgba_xor$/;"	s	namespace:agg
comp_op_screen	include/agg_pixfmt_rgba.h	/^        comp_op_screen,        \/\/----comp_op_screen$/;"	e	enum:agg::comp_op_e
comp_op_soft_light	include/agg_pixfmt_rgba.h	/^        comp_op_soft_light,    \/\/----comp_op_soft_light$/;"	e	enum:agg::comp_op_e
comp_op_src	include/agg_pixfmt_rgba.h	/^        comp_op_src,           \/\/----comp_op_src$/;"	e	enum:agg::comp_op_e
comp_op_src_atop	include/agg_pixfmt_rgba.h	/^        comp_op_src_atop,      \/\/----comp_op_src_atop$/;"	e	enum:agg::comp_op_e
comp_op_src_in	include/agg_pixfmt_rgba.h	/^        comp_op_src_in,        \/\/----comp_op_src_in$/;"	e	enum:agg::comp_op_e
comp_op_src_out	include/agg_pixfmt_rgba.h	/^        comp_op_src_out,       \/\/----comp_op_src_out$/;"	e	enum:agg::comp_op_e
comp_op_src_over	include/agg_pixfmt_rgba.h	/^        comp_op_src_over,      \/\/----comp_op_src_over$/;"	e	enum:agg::comp_op_e
comp_op_table_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct comp_op_table_rgba$/;"	s	namespace:agg
comp_op_xor	include/agg_pixfmt_rgba.h	/^        comp_op_xor,           \/\/----comp_op_xor$/;"	e	enum:agg::comp_op_e
component_order	examples/gamma_tuner.cpp	/^typedef agg::order_bgr component_order;$/;"	t	file:
component_order	examples/gradient_focal.cpp	/^typedef agg::order_bgr component_order;$/;"	t	file:
component_order	examples/pixel_formats.h	/^typedef agg::order_argb component_order;$/;"	t
component_order	examples/pixel_formats.h	/^typedef agg::order_bgr component_order;$/;"	t
component_order	examples/pixel_formats.h	/^typedef agg::order_bgra component_order;$/;"	t
component_order	examples/pixel_formats.h	/^typedef agg::order_rgb component_order;$/;"	t
component_order	examples/pixel_formats.h	/^typedef agg::order_rgba component_order;$/;"	t
compose_path	examples/conv_contour.cpp	/^    void compose_path()$/;"	f	class:the_application
compose_path	examples/rasterizer_compound.cpp	/^    void compose_path()$/;"	f	class:the_application
compound_shape	examples/flash_rasterizer.cpp	/^        compound_shape() :$/;"	f	class:agg::compound_shape
compound_shape	examples/flash_rasterizer.cpp	/^    class compound_shape$/;"	c	namespace:agg	file:
compound_shape	examples/flash_rasterizer2.cpp	/^        compound_shape() :$/;"	f	class:agg::compound_shape
compound_shape	examples/flash_rasterizer2.cpp	/^    class compound_shape$/;"	c	namespace:agg	file:
concat_path	include/agg_path_storage.h	/^        void concat_path(VertexSource& vs, unsigned path_id = 0)$/;"	f	class:agg::path_base
concat_poly	include/agg_path_storage.h	/^        template<class T> void concat_poly(const T* data, $/;"	f	class:agg::path_base
concat_type	examples/graph_test.cpp	/^    typedef agg::conv_concat<dash_type, marker_type>                          concat_type;$/;"	t	struct:dash_stroke_draft_arrow	file:
concat_type	examples/graph_test.cpp	/^    typedef agg::conv_concat<stroke_type, marker_type>                          concat_type;$/;"	t	struct:stroke_draft_arrow	file:
concat_type	examples/graph_test.cpp	/^    typedef agg::conv_concat<stroke_type, marker_type>                          concat_type;$/;"	t	struct:stroke_fine_arrow	file:
concat_type	examples/graph_test.cpp	/^    typedef agg::conv_concat<stroke_type, marker_type>                        concat_type;$/;"	t	struct:dash_stroke_fine_arrow	file:
const_iterator	include/agg_renderer_raster_text.h	/^            typedef const const_span* const_iterator;$/;"	t	class:agg::renderer_raster_htext::scanline_single_span
const_iterator	include/agg_scanline_bin.h	/^            const_iterator(const span_array_type& spans) :$/;"	f	class:agg::scanline32_bin::const_iterator
const_iterator	include/agg_scanline_bin.h	/^        class const_iterator$/;"	c	class:agg::scanline32_bin
const_iterator	include/agg_scanline_bin.h	/^        typedef const span* const_iterator;$/;"	t	class:agg::scanline_bin
const_iterator	include/agg_scanline_p.h	/^            const_iterator(const span_array_type& spans) :$/;"	f	class:agg::scanline32_p8::const_iterator
const_iterator	include/agg_scanline_p.h	/^        class const_iterator$/;"	c	class:agg::scanline32_p8
const_iterator	include/agg_scanline_p.h	/^        typedef const span* const_iterator;$/;"	t	class:agg::scanline_p8
const_iterator	include/agg_scanline_storage_aa.h	/^                const_iterator() : m_ptr(0) {}$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_aa.h	/^                const_iterator() : m_storage(0) {}$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_aa.h	/^                const_iterator(const embedded_scanline& sl) :$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_aa.h	/^                const_iterator(const embedded_scanline& sl) :$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_aa.h	/^            class const_iterator$/;"	c	class:agg::scanline_storage_aa::embedded_scanline
const_iterator	include/agg_scanline_storage_aa.h	/^            class const_iterator$/;"	c	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
const_iterator	include/agg_scanline_storage_bin.h	/^                const_iterator() : m_ptr(0) {}$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_bin.h	/^                const_iterator() : m_storage(0) {}$/;"	f	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_bin.h	/^                const_iterator(const embedded_scanline& sl) :$/;"	f	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_bin.h	/^                const_iterator(const embedded_scanline& sl) :$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
const_iterator	include/agg_scanline_storage_bin.h	/^            class const_iterator$/;"	c	class:agg::scanline_storage_bin::embedded_scanline
const_iterator	include/agg_scanline_storage_bin.h	/^            class const_iterator$/;"	c	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
const_iterator	include/agg_scanline_u.h	/^            const_iterator(const span_array_type& spans) :$/;"	f	class:agg::scanline32_u8::const_iterator
const_iterator	include/agg_scanline_u.h	/^        class const_iterator$/;"	c	class:agg::scanline32_u8
const_iterator	include/agg_scanline_u.h	/^        typedef const span* const_iterator;$/;"	t	class:agg::scanline_u8
const_row_info	include/agg_basics.h	/^        const_row_info() {}$/;"	f	struct:agg::const_row_info
const_row_info	include/agg_basics.h	/^        const_row_info(int x1_, int x2_, const T* ptr_) : $/;"	f	struct:agg::const_row_info
const_row_info	include/agg_basics.h	/^    template<class T> struct const_row_info$/;"	s	namespace:agg
const_span	include/agg_renderer_raster_text.h	/^                const_span() {}$/;"	f	struct:agg::renderer_raster_htext::scanline_single_span::const_span
const_span	include/agg_renderer_raster_text.h	/^                const_span(int x_, unsigned len_, const cover_type* covers_) :$/;"	f	struct:agg::renderer_raster_htext::scanline_single_span::const_span
const_span	include/agg_renderer_raster_text.h	/^            struct const_span$/;"	s	class:agg::renderer_raster_htext::scanline_single_span
container_type	include/agg_path_storage.h	/^        typedef VertexContainer            container_type;$/;"	t	class:agg::path_base
contains	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        bool contains(const char* mask, unsigned c) const$/;"	f	class:agg::svg::path_tokenizer
content	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::content(void* data, const char* s, int len)$/;"	f	class:agg::svg::parser
contour	gpc/gpc.h	/^  gpc_vertex_list    *contour;      \/* Contour array pointer             *\/$/;"	m	struct:__anon7
contour_header_array_type	include/agg_conv_gpc.h	/^        typedef pod_bvector<contour_header_type, 6> contour_header_array_type;$/;"	t	class:agg::conv_gpc
contour_header_type	include/agg_conv_gpc.h	/^        struct contour_header_type$/;"	s	class:agg::conv_gpc
conv	include/agg_line_aa_basics.h	/^        AGG_INLINE static int conv(double x)$/;"	f	struct:agg::line_coord
conv	include/agg_line_aa_basics.h	/^        AGG_INLINE static int conv(double x)$/;"	f	struct:agg::line_coord_sat
conv_adaptor_vcgen	include/agg_conv_adaptor_vcgen.h	/^             class Markers=null_markers> class conv_adaptor_vcgen$/;"	c	namespace:agg
conv_adaptor_vcgen	include/agg_conv_adaptor_vcgen.h	/^        explicit conv_adaptor_vcgen(VertexSource& source) :$/;"	f	class:agg::conv_adaptor_vcgen
conv_adaptor_vpgen	include/agg_conv_adaptor_vpgen.h	/^        explicit conv_adaptor_vpgen(VertexSource& source) : m_source(&source) {}$/;"	f	class:agg::conv_adaptor_vpgen
conv_adaptor_vpgen	include/agg_conv_adaptor_vpgen.h	/^    template<class VertexSource, class VPGen> class conv_adaptor_vpgen$/;"	c	namespace:agg
conv_bspline	include/agg_conv_bspline.h	/^        conv_bspline(VertexSource& vs) : $/;"	f	struct:agg::conv_bspline
conv_bspline	include/agg_conv_bspline.h	/^    struct conv_bspline : public conv_adaptor_vcgen<VertexSource, vcgen_bspline>$/;"	s	namespace:agg
conv_clip_polygon	include/agg_conv_clip_polygon.h	/^        conv_clip_polygon(VertexSource& vs) : $/;"	f	struct:agg::conv_clip_polygon
conv_clip_polygon	include/agg_conv_clip_polygon.h	/^    struct conv_clip_polygon : public conv_adaptor_vpgen<VertexSource, vpgen_clip_polygon>$/;"	s	namespace:agg
conv_clip_polyline	include/agg_conv_clip_polyline.h	/^        conv_clip_polyline(VertexSource& vs) : $/;"	f	struct:agg::conv_clip_polyline
conv_clip_polyline	include/agg_conv_clip_polyline.h	/^    struct conv_clip_polyline : public conv_adaptor_vpgen<VertexSource, vpgen_clip_polyline>$/;"	s	namespace:agg
conv_close_polygon	include/agg_conv_close_polygon.h	/^        explicit conv_close_polygon(VertexSource& vs) : m_source(&vs) {}$/;"	f	class:agg::conv_close_polygon
conv_close_polygon	include/agg_conv_close_polygon.h	/^    template<class VertexSource> class conv_close_polygon$/;"	c	namespace:agg
conv_concat	include/agg_conv_concat.h	/^        conv_concat(VS1& source1, VS2& source2) :$/;"	f	class:agg::conv_concat
conv_concat	include/agg_conv_concat.h	/^    template<class VS1, class VS2> class conv_concat$/;"	c	namespace:agg
conv_contour	include/agg_conv_contour.h	/^        conv_contour(VertexSource& vs) : $/;"	f	struct:agg::conv_contour
conv_contour	include/agg_conv_contour.h	/^    struct conv_contour : public conv_adaptor_vcgen<VertexSource, vcgen_contour>$/;"	s	namespace:agg
conv_contour_type	examples/truetype_test.cpp	/^    typedef agg::conv_contour<conv_curve_type> conv_contour_type;$/;"	t	class:the_application	file:
conv_count	examples/svg_viewer/agg_svg_path_renderer.h	/^        conv_count(VertexSource& vs) : m_source(&vs), m_count(0) {}$/;"	f	class:agg::svg::conv_count
conv_count	examples/svg_viewer/agg_svg_path_renderer.h	/^    template<class VertexSource> class conv_count$/;"	c	namespace:agg::svg
conv_curve	include/agg_conv_curve.h	/^             class Curve4=curve4> class conv_curve$/;"	c	namespace:agg
conv_curve	include/agg_conv_curve.h	/^        explicit conv_curve(VertexSource& source) :$/;"	f	class:agg::conv_curve
conv_curve_type	examples/truetype_test.cpp	/^    typedef agg::conv_curve<font_manager_type::path_adaptor_type> conv_curve_type;$/;"	t	class:the_application	file:
conv_dash	include/agg_conv_dash.h	/^        conv_dash(VertexSource& vs) : $/;"	f	struct:agg::conv_dash
conv_dash	include/agg_conv_dash.h	/^    struct conv_dash : public conv_adaptor_vcgen<VertexSource, vcgen_dash, Markers>$/;"	s	namespace:agg
conv_gpc	include/agg_conv_gpc.h	/^        conv_gpc(source_a_type& a, source_b_type& b, gpc_op_e op = gpc_or) :$/;"	f	class:agg::conv_gpc
conv_gpc	include/agg_conv_gpc.h	/^    template<class VSA, class VSB> class conv_gpc$/;"	c	namespace:agg
conv_marker	include/agg_conv_marker.h	/^    class conv_marker$/;"	c	namespace:agg
conv_marker	include/agg_conv_marker.h	/^    conv_marker<MarkerLocator, MarkerShapes>::conv_marker(MarkerLocator& ml, MarkerShapes& ms) :$/;"	f	class:agg::conv_marker
conv_marker_adaptor	include/agg_conv_marker_adaptor.h	/^        conv_marker_adaptor(VertexSource& vs) : $/;"	f	struct:agg::conv_marker_adaptor
conv_marker_adaptor	include/agg_conv_marker_adaptor.h	/^    struct conv_marker_adaptor : $/;"	s	namespace:agg
conv_poly_counter	examples/gpc_test.cpp	/^        conv_poly_counter(Src& src) : m_src(&src), m_contours(0), m_points(0) {}$/;"	f	struct:agg::conv_poly_counter
conv_poly_counter	examples/gpc_test.cpp	/^    template<class Src> struct conv_poly_counter$/;"	s	namespace:agg	file:
conv_segmentator	include/agg_conv_segmentator.h	/^        conv_segmentator(VertexSource& vs) : $/;"	f	struct:agg::conv_segmentator
conv_segmentator	include/agg_conv_segmentator.h	/^    struct conv_segmentator : public conv_adaptor_vpgen<VertexSource, vpgen_segmentator>$/;"	s	namespace:agg
conv_shorten_path	include/agg_conv_shorten_path.h	/^        conv_shorten_path(VertexSource& vs) : $/;"	f	class:agg::conv_shorten_path
conv_shorten_path	include/agg_conv_shorten_path.h	/^    template<class VertexSource>  class conv_shorten_path : $/;"	c	namespace:agg
conv_smooth_poly1	include/agg_conv_smooth_poly1.h	/^        conv_smooth_poly1(VertexSource& vs) : $/;"	f	struct:agg::conv_smooth_poly1
conv_smooth_poly1	include/agg_conv_smooth_poly1.h	/^    struct conv_smooth_poly1 : $/;"	s	namespace:agg
conv_smooth_poly1_curve	include/agg_conv_smooth_poly1.h	/^        conv_smooth_poly1_curve(VertexSource& vs) :$/;"	f	struct:agg::conv_smooth_poly1_curve
conv_smooth_poly1_curve	include/agg_conv_smooth_poly1.h	/^    struct conv_smooth_poly1_curve : $/;"	s	namespace:agg
conv_stroke	include/agg_conv_stroke.h	/^        conv_stroke(VertexSource& vs) : $/;"	f	struct:agg::conv_stroke
conv_stroke	include/agg_conv_stroke.h	/^    struct conv_stroke : $/;"	s	namespace:agg
conv_transform	include/agg_conv_transform.h	/^        conv_transform(VertexSource& source, const Transformer& tr) :$/;"	f	class:agg::conv_transform
conv_transform	include/agg_conv_transform.h	/^    template<class VertexSource, class Transformer=trans_affine> class conv_transform$/;"	c	namespace:agg
conv_type	include/agg_rasterizer_compound_aa.h	/^        typedef typename Clip::conv_type  conv_type;$/;"	t	class:agg::rasterizer_compound_aa
conv_type	include/agg_rasterizer_scanline_aa.h	/^        typedef typename Clip::conv_type  conv_type;$/;"	t	class:agg::rasterizer_scanline_aa
conv_type	include/agg_rasterizer_sl_clip.h	/^        typedef Conv                      conv_type;$/;"	t	class:agg::rasterizer_sl_clip
conv_type	include/agg_rasterizer_sl_clip.h	/^        typedef ras_conv_int conv_type;$/;"	t	class:agg::rasterizer_sl_no_clip
conv_unclose_polygon	include/agg_conv_unclose_polygon.h	/^        explicit conv_unclose_polygon(VertexSource& vs) : m_source(&vs) {}$/;"	f	class:agg::conv_unclose_polygon
conv_unclose_polygon	include/agg_conv_unclose_polygon.h	/^    template<class VertexSource> class conv_unclose_polygon$/;"	c	namespace:agg
convert_pmap	src/platform/win32/agg_platform_support.cpp	/^    static void convert_pmap(rendering_buffer* dst, $/;"	f	namespace:agg
coord	include/agg_renderer_primitives.h	/^        static int coord(double c) $/;"	f	class:agg::renderer_primitives
coord_scale	include/agg_path_storage_integer.h	/^            coord_scale  = 1 << coord_shift$/;"	e	enum:agg::vertex_integer::coord_scale_e
coord_scale_e	include/agg_path_storage_integer.h	/^        enum coord_scale_e$/;"	g	struct:agg::vertex_integer
coord_shift	include/agg_path_storage_integer.h	/^            coord_shift = CoordShift,$/;"	e	enum:agg::vertex_integer::coord_scale_e
coord_storage	include/agg_vcgen_contour.h	/^        typedef pod_bvector<point_d, 6>         coord_storage;$/;"	t	class:agg::vcgen_contour
coord_storage	include/agg_vcgen_markers_term.h	/^        typedef pod_bvector<coord_type, 6> coord_storage; $/;"	t	class:agg::vcgen_markers_term
coord_storage	include/agg_vcgen_stroke.h	/^        typedef pod_bvector<point_d, 6>         coord_storage;$/;"	t	class:agg::vcgen_stroke
coord_type	include/agg_math_stroke.h	/^        typedef typename VertexConsumer::value_type coord_type;$/;"	t	class:agg::math_stroke
coord_type	include/agg_rasterizer_compound_aa.h	/^        typedef typename Clip::coord_type coord_type;$/;"	t	class:agg::rasterizer_compound_aa
coord_type	include/agg_rasterizer_scanline_aa.h	/^        typedef typename Clip::coord_type coord_type;$/;"	t	class:agg::rasterizer_scanline_aa
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef double coord_type;$/;"	t	struct:agg::ras_conv_dbl
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef double coord_type;$/;"	t	struct:agg::ras_conv_dbl_3x
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef int          coord_type;$/;"	t	class:agg::rasterizer_sl_no_clip
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef int coord_type;$/;"	t	struct:agg::ras_conv_int
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef int coord_type;$/;"	t	struct:agg::ras_conv_int_3x
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef int coord_type;$/;"	t	struct:agg::ras_conv_int_sat
coord_type	include/agg_rasterizer_sl_clip.h	/^        typedef typename Conv::coord_type coord_type;$/;"	t	class:agg::rasterizer_sl_clip
coord_type	include/agg_scanline_bin.h	/^        typedef int32 coord_type;$/;"	t	class:agg::scanline32_bin
coord_type	include/agg_scanline_bin.h	/^        typedef int32 coord_type;$/;"	t	class:agg::scanline_bin
coord_type	include/agg_scanline_p.h	/^        typedef int16       coord_type;$/;"	t	class:agg::scanline_p8
coord_type	include/agg_scanline_p.h	/^        typedef int32         coord_type;$/;"	t	class:agg::scanline32_p8
coord_type	include/agg_scanline_u.h	/^        typedef base_type::coord_type coord_type;$/;"	t	class:agg::scanline32_u8_am
coord_type	include/agg_scanline_u.h	/^        typedef base_type::coord_type coord_type;$/;"	t	class:agg::scanline_u8_am
coord_type	include/agg_scanline_u.h	/^        typedef int16       coord_type;$/;"	t	class:agg::scanline_u8
coord_type	include/agg_scanline_u.h	/^        typedef int32         coord_type;$/;"	t	class:agg::scanline32_u8
coord_type	include/agg_span_gouraud.h	/^        struct coord_type$/;"	s	class:agg::span_gouraud
coord_type	include/agg_span_gouraud_gray.h	/^        typedef typename base_type::coord_type coord_type;$/;"	t	class:agg::span_gouraud_gray
coord_type	include/agg_span_gouraud_rgba.h	/^        typedef typename base_type::coord_type coord_type;$/;"	t	class:agg::span_gouraud_rgba
coord_type	include/agg_vcgen_markers_term.h	/^            coord_type() {}$/;"	f	struct:agg::vcgen_markers_term::coord_type
coord_type	include/agg_vcgen_markers_term.h	/^            coord_type(double x_, double y_) : x(x_), y(y_) {}$/;"	f	struct:agg::vcgen_markers_term::coord_type
coord_type	include/agg_vcgen_markers_term.h	/^        struct coord_type$/;"	s	class:agg::vcgen_markers_term
coordinates	include/agg_span_interpolator_adaptor.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_adaptor
coordinates	include/agg_span_interpolator_linear.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_linear
coordinates	include/agg_span_interpolator_linear.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_linear_subdiv
coordinates	include/agg_span_interpolator_persp.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_persp_exact
coordinates	include/agg_span_interpolator_persp.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_persp_lerp
coordinates	include/agg_span_interpolator_trans.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_interpolator_trans
coordinates	include/agg_span_subdiv_adaptor.h	/^        void coordinates(int* x, int* y) const$/;"	f	class:agg::span_subdiv_adaptor
copy_bar	include/agg_renderer_base.h	/^        void copy_bar(int x1, int y1, int x2, int y2, const color_type& c)$/;"	f	class:agg::renderer_base
copy_bar	include/agg_renderer_mclip.h	/^        void copy_bar(int x1, int y1, int x2, int y2, const color_type& c)$/;"	f	class:agg::renderer_mclip
copy_color_hspan	include/agg_pixfmt_amask_adaptor.h	/^        void copy_color_hspan(int x, int y, unsigned len, const color_type* colors)$/;"	f	class:agg::pixfmt_amask_adaptor
copy_color_hspan	include/agg_pixfmt_gray.h	/^        void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_color_hspan	include/agg_pixfmt_rgb.h	/^        void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_color_hspan	include/agg_pixfmt_rgb_packed.h	/^        void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_color_hspan	include/agg_pixfmt_rgba.h	/^        void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_color_hspan	include/agg_pixfmt_rgba.h	/^        void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_color_hspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void copy_color_hspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
copy_color_hspan	include/agg_renderer_base.h	/^        void copy_color_hspan(int x, int y, int len, const color_type* colors)$/;"	f	class:agg::renderer_base
copy_color_hspan	include/agg_renderer_mclip.h	/^        void copy_color_hspan(int x, int y, int len, const color_type* colors)$/;"	f	class:agg::renderer_mclip
copy_color_vspan	include/agg_pixfmt_amask_adaptor.h	/^        void copy_color_vspan(int x, int y, unsigned len, const color_type* colors)$/;"	f	class:agg::pixfmt_amask_adaptor
copy_color_vspan	include/agg_pixfmt_gray.h	/^        void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_color_vspan	include/agg_pixfmt_rgb.h	/^        void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_color_vspan	include/agg_pixfmt_rgb_packed.h	/^        void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_color_vspan	include/agg_pixfmt_rgba.h	/^        void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_color_vspan	include/agg_pixfmt_rgba.h	/^        void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_color_vspan	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void copy_color_vspan(int x, int y,$/;"	f	class:agg::pixfmt_transposer
copy_color_vspan	include/agg_renderer_base.h	/^        void copy_color_vspan(int x, int y, int len, const color_type* colors)$/;"	f	class:agg::renderer_base
copy_extra_storage	include/agg_scanline_storage_aa.h	/^        void copy_extra_storage(const scanline_cell_storage<T>& v)$/;"	f	class:agg::scanline_cell_storage
copy_from	include/agg_pixfmt_amask_adaptor.h	/^        void copy_from(const rendering_buffer& from, $/;"	f	class:agg::pixfmt_amask_adaptor
copy_from	include/agg_pixfmt_gray.h	/^        void copy_from(const RenBuf2& from, $/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_from	include/agg_pixfmt_rgb.h	/^        void copy_from(const RenBuf2& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_from	include/agg_pixfmt_rgb_packed.h	/^        void copy_from(const RenBuf2& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_from	include/agg_pixfmt_rgba.h	/^        template<class RenBuf2> void copy_from(const RenBuf2& from, $/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_from	include/agg_pixfmt_rgba.h	/^        template<class RenBuf2> void copy_from(const RenBuf2& from, $/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_from	include/agg_renderer_base.h	/^        void copy_from(const RenBuf& src, $/;"	f	class:agg::renderer_base
copy_from	include/agg_renderer_mclip.h	/^        void copy_from(const rendering_buffer& from, $/;"	f	class:agg::renderer_mclip
copy_from	include/agg_rendering_buffer.h	/^        void copy_from(const RenBuf& src)$/;"	f	class:agg::row_accessor
copy_from	include/agg_rendering_buffer.h	/^        void copy_from(const RenBuf& src)$/;"	f	class:agg::row_ptr_cache
copy_hline	include/agg_pixfmt_amask_adaptor.h	/^        void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_amask_adaptor
copy_hline	include/agg_pixfmt_gray.h	/^        AGG_INLINE void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_hline	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_hline	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_hline	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_hline	include/agg_pixfmt_rgba.h	/^        void copy_hline(int x, int y, unsigned len, const color_type& c)$/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_hline	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void copy_hline(int x, int y, $/;"	f	class:agg::pixfmt_transposer
copy_hline	include/agg_renderer_base.h	/^        void copy_hline(int x1, int y, int x2, const color_type& c)$/;"	f	class:agg::renderer_base
copy_hline	include/agg_renderer_mclip.h	/^        void copy_hline(int x1, int y, int x2, const color_type& c)$/;"	f	class:agg::renderer_mclip
copy_img_to_img	include/platform/agg_platform_support.h	/^        void copy_img_to_img(unsigned idx_to, unsigned idx_from)$/;"	f	class:agg::platform_support
copy_img_to_window	include/platform/agg_platform_support.h	/^        void copy_img_to_window(unsigned idx)$/;"	f	class:agg::platform_support
copy_name	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::copy_name(const char* start, const char* end)$/;"	f	class:agg::svg::parser
copy_or_blend_pix	include/agg_pixfmt_gray.h	/^        static AGG_INLINE void copy_or_blend_pix(value_type* p, $/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_or_blend_pix	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void copy_or_blend_pix(value_type* p, $/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_or_blend_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void copy_or_blend_pix(pixel_type* p, const color_type& c, unsigned cover)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_or_blend_pix	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void copy_or_blend_pix(value_type* p, $/;"	f	struct:agg::copy_or_blend_rgba_wrapper
copy_or_blend_rgba_wrapper	include/agg_pixfmt_rgba.h	/^    template<class Blender> struct copy_or_blend_rgba_wrapper$/;"	s	namespace:agg
copy_pixel	include/agg_pixfmt_amask_adaptor.h	/^        void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_amask_adaptor
copy_pixel	include/agg_pixfmt_gray.h	/^        AGG_INLINE void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_pixel	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_pixel	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_pixel	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_pixel	include/agg_pixfmt_rgba.h	/^        void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_pixel	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::pixfmt_transposer
copy_pixel	include/agg_renderer_base.h	/^        void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::renderer_base
copy_pixel	include/agg_renderer_mclip.h	/^        void copy_pixel(int x, int y, const color_type& c)$/;"	f	class:agg::renderer_mclip
copy_value	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::copy_value(const char* start, const char* end)$/;"	f	class:agg::svg::parser
copy_vline	include/agg_pixfmt_amask_adaptor.h	/^        void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_amask_adaptor
copy_vline	include/agg_pixfmt_gray.h	/^        AGG_INLINE void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_gray
copy_vline	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb
copy_vline	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
copy_vline	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_alpha_blend_rgba
copy_vline	include/agg_pixfmt_rgba.h	/^        void copy_vline(int x, int y, unsigned len, const color_type& c)$/;"	f	class:agg::pixfmt_custom_blend_rgba
copy_vline	include/agg_pixfmt_transposer.h	/^        AGG_INLINE void copy_vline(int x, int y,$/;"	f	class:agg::pixfmt_transposer
copy_vline	include/agg_renderer_base.h	/^        void copy_vline(int x, int y1, int y2, const color_type& c)$/;"	f	class:agg::renderer_base
copy_vline	include/agg_renderer_mclip.h	/^        void copy_vline(int x, int y1, int y2, const color_type& c)$/;"	f	class:agg::renderer_mclip
copy_window_to_img	include/platform/agg_platform_support.h	/^        void copy_window_to_img(unsigned idx)$/;"	f	class:agg::platform_support
count	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned count() const { return m_count; }$/;"	f	class:agg::svg::conv_count
count	examples/svg_viewer/agg_svg_path_renderer.h	/^        void count(unsigned n) { m_count = n; }$/;"	f	class:agg::svg::conv_count
count	include/agg_renderer_outline_aa.h	/^        int  count() const { return m_count; }$/;"	f	class:agg::line_interpolator_aa_base
count	include/agg_renderer_outline_image.h	/^        int  count() const { return m_count; }$/;"	f	class:agg::line_interpolator_image
count_contours	gpc/gpc.c	/^static int count_contours(polygon_node *polygon)$/;"	f	file:
count_optimal_vertices	gpc/gpc.c	/^static int count_optimal_vertices(gpc_vertex_list c)$/;"	f	file:
count_spans	examples/scanline_boolean2.cpp	/^unsigned count_spans(Rasterizer& ras, Scanline& sl)$/;"	f
count_tristrips	gpc/gpc.c	/^static int count_tristrips(polygon_node *tn)$/;"	f	file:
cover	include/agg_rasterizer_compound_aa.h	/^            int x, area, cover; $/;"	m	struct:agg::rasterizer_compound_aa::cell_info
cover	include/agg_rasterizer_compound_aa.h	/^        int   cover;$/;"	m	struct:agg::cell_style_aa
cover	include/agg_rasterizer_scanline_aa.h	/^        int cover;$/;"	m	struct:agg::cell_aa
cover	include/agg_renderer_outline_aa.h	/^        int cover(int d) const$/;"	f	class:agg::renderer_outline_aa
cover_full	include/agg_alpha_mask_u8.h	/^            cover_full  = 255$/;"	e	enum:agg::alpha_mask_u8::cover_scale_e
cover_full	include/agg_alpha_mask_u8.h	/^            cover_full  = 255$/;"	e	enum:agg::amask_no_clip_u8::cover_scale_e
cover_full	include/agg_basics.h	/^        cover_full  = cover_mask         \/\/----cover_full $/;"	e	enum:agg::cover_scale_e
cover_full	include/agg_scanline_boolean_algebra.h	/^            cover_full  = cover_mask$/;"	e	enum:agg::sbool_intersect_spans_aa::cover_scale_e
cover_full	include/agg_scanline_boolean_algebra.h	/^            cover_full  = cover_mask$/;"	e	enum:agg::sbool_subtract_spans_aa::cover_scale_e
cover_full	include/agg_scanline_boolean_algebra.h	/^            cover_full  = cover_mask$/;"	e	enum:agg::sbool_unite_spans_aa::cover_scale_e
cover_full	include/agg_scanline_boolean_algebra.h	/^            cover_full  = cover_mask$/;"	e	enum:agg::sbool_xor_spans_aa::cover_scale_e
cover_mask	include/agg_basics.h	/^        cover_mask  = cover_size - 1,    \/\/----cover_mask $/;"	e	enum:agg::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1$/;"	e	enum:agg::sbool_xor_formula_linear::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1$/;"	e	enum:agg::sbool_xor_formula_saddle::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1,$/;"	e	enum:agg::sbool_intersect_spans_aa::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1,$/;"	e	enum:agg::sbool_subtract_spans_aa::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1,$/;"	e	enum:agg::sbool_unite_spans_aa::cover_scale_e
cover_mask	include/agg_scanline_boolean_algebra.h	/^            cover_mask  = cover_size - 1,$/;"	e	enum:agg::sbool_xor_spans_aa::cover_scale_e
cover_none	include/agg_alpha_mask_u8.h	/^            cover_none  = 0,$/;"	e	enum:agg::alpha_mask_u8::cover_scale_e
cover_none	include/agg_alpha_mask_u8.h	/^            cover_none  = 0,$/;"	e	enum:agg::amask_no_clip_u8::cover_scale_e
cover_none	include/agg_basics.h	/^        cover_none  = 0,                 \/\/----cover_none $/;"	e	enum:agg::cover_scale_e
cover_scale_e	include/agg_alpha_mask_u8.h	/^        enum cover_scale_e$/;"	g	class:agg::alpha_mask_u8
cover_scale_e	include/agg_alpha_mask_u8.h	/^        enum cover_scale_e$/;"	g	class:agg::amask_no_clip_u8
cover_scale_e	include/agg_basics.h	/^    enum cover_scale_e$/;"	g	namespace:agg
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_intersect_spans_aa
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_subtract_spans_aa
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_unite_spans_aa
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_xor_formula_linear
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_xor_formula_saddle
cover_scale_e	include/agg_scanline_boolean_algebra.h	/^        enum cover_scale_e$/;"	g	struct:agg::sbool_xor_spans_aa
cover_shift	include/agg_alpha_mask_u8.h	/^            cover_shift = 8,$/;"	e	enum:agg::alpha_mask_u8::cover_scale_e
cover_shift	include/agg_alpha_mask_u8.h	/^            cover_shift = 8,$/;"	e	enum:agg::amask_no_clip_u8::cover_scale_e
cover_shift	include/agg_basics.h	/^        cover_shift = 8,                 \/\/----cover_shift$/;"	e	enum:agg::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_intersect_spans_aa::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_subtract_spans_aa::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_unite_spans_aa::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_xor_formula_linear::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_xor_formula_saddle::cover_scale_e
cover_shift	include/agg_scanline_boolean_algebra.h	/^            cover_shift = CoverShift,$/;"	e	enum:agg::sbool_xor_spans_aa::cover_scale_e
cover_size	include/agg_basics.h	/^        cover_size  = 1 << cover_shift,  \/\/----cover_size $/;"	e	enum:agg::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_intersect_spans_aa::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_subtract_spans_aa::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_unite_spans_aa::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_xor_formula_linear::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_xor_formula_saddle::cover_scale_e
cover_size	include/agg_scanline_boolean_algebra.h	/^            cover_size  = 1 << cover_shift,$/;"	e	enum:agg::sbool_xor_spans_aa::cover_scale_e
cover_type	include/agg_alpha_mask_u8.h	/^        typedef int8u cover_type;$/;"	t	class:agg::alpha_mask_u8
cover_type	include/agg_alpha_mask_u8.h	/^        typedef int8u cover_type;$/;"	t	class:agg::amask_no_clip_u8
cover_type	include/agg_basics.h	/^    typedef unsigned char cover_type;    \/\/----cover_type$/;"	t	namespace:agg
cover_type	include/agg_pixfmt_amask_adaptor.h	/^        typedef typename amask_type::cover_type cover_type;$/;"	t	class:agg::pixfmt_amask_adaptor
cover_type	include/agg_renderer_raster_text.h	/^            typedef agg::cover_type cover_type;$/;"	t	class:agg::renderer_raster_htext::scanline_single_span
cover_type	include/agg_scanline_p.h	/^        typedef int8u         cover_type;$/;"	t	class:agg::scanline32_p8
cover_type	include/agg_scanline_p.h	/^        typedef int8u       cover_type;$/;"	t	class:agg::scanline_p8
cover_type	include/agg_scanline_storage_aa.h	/^            typedef T cover_type;$/;"	t	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
cover_type	include/agg_scanline_storage_aa.h	/^        typedef T cover_type;$/;"	t	class:agg::scanline_storage_aa
cover_type	include/agg_scanline_storage_aa.h	/^        typedef T cover_type;$/;"	t	class:agg::serialized_scanlines_adaptor_aa
cover_type	include/agg_scanline_storage_bin.h	/^        typedef bool cover_type;$/;"	t	class:agg::serialized_scanlines_adaptor_bin
cover_type	include/agg_scanline_u.h	/^        typedef base_type::cover_type cover_type;$/;"	t	class:agg::scanline32_u8_am
cover_type	include/agg_scanline_u.h	/^        typedef base_type::cover_type cover_type;$/;"	t	class:agg::scanline_u8_am
cover_type	include/agg_scanline_u.h	/^        typedef int8u         cover_type;$/;"	t	class:agg::scanline32_u8
cover_type	include/agg_scanline_u.h	/^        typedef int8u       cover_type;$/;"	t	class:agg::scanline_u8
covers	include/agg_renderer_raster_text.h	/^                const cover_type* covers;$/;"	m	struct:agg::renderer_raster_htext::scanline_single_span::const_span
covers	include/agg_scanline_p.h	/^            const cover_type* covers;$/;"	m	struct:agg::scanline32_p8::span
covers	include/agg_scanline_p.h	/^            const cover_type* covers;$/;"	m	struct:agg::scanline_p8::span
covers	include/agg_scanline_storage_aa.h	/^                    const T* covers; $/;"	m	struct:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator::span
covers	include/agg_scanline_storage_aa.h	/^                    const T* covers;$/;"	m	struct:agg::scanline_storage_aa::embedded_scanline::const_iterator::span
covers	include/agg_scanline_u.h	/^            cover_type* covers;$/;"	m	struct:agg::scanline32_u8::span
covers	include/agg_scanline_u.h	/^            cover_type* covers;$/;"	m	struct:agg::scanline_u8::span
covers_by_index	include/agg_scanline_storage_aa.h	/^        const T* covers_by_index(int i) const$/;"	f	class:agg::scanline_storage_aa
covers_id	include/agg_scanline_storage_aa.h	/^            int   covers_id; \/\/ The index of the cells in the scanline_cell_storage$/;"	m	struct:agg::scanline_storage_aa::span_data
cp	include/agg_curves.h	/^        double cp[8];$/;"	m	struct:agg::curve4_points
crc32tab	font_freetype/agg_font_freetype.cpp	/^    static const unsigned crc32tab[256] = $/;"	m	namespace:agg	file:
crc32tab	font_win32_tt/agg_font_win32_tt.cpp	/^    static const unsigned crc32tab[256] = $/;"	m	namespace:agg	file:
create	include/agg_renderer_outline_image.h	/^        template<class Source> void create(const Source& src)$/;"	f	class:agg::line_image_pattern
create	include/agg_renderer_outline_image.h	/^        template<class Source> void create(const Source& src)$/;"	f	class:agg::line_image_pattern_pow2
create	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::create(unsigned width, $/;"	f	class:agg::pixel_map
create	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::create(unsigned width, $/;"	f	class:agg::pixel_map
create_bitmap_info	src/platform/win32/agg_win32_bmp.cpp	/^    BITMAPINFO* pixel_map::create_bitmap_info(unsigned width, $/;"	f	class:agg::pixel_map
create_contour_bboxes	gpc/gpc.c	/^static bbox *create_contour_bboxes(gpc_polygon *p)$/;"	f	file:
create_dib_section	src/platform/win32/agg_win32_bmp.cpp	/^    HBITMAP pixel_map::create_dib_section(HDC h_dc,$/;"	f	class:agg::pixel_map
create_dib_section_from_args	src/platform/win32/agg_win32_bmp.cpp	/^    HBITMAP pixel_map::create_dib_section_from_args(HDC h_dc,$/;"	f	class:agg::pixel_map
create_font	font_win32_tt/agg_font_win32_tt.cpp	/^    bool font_engine_win32_tt_base::create_font(const char* typeface_, $/;"	f	class:agg::font_engine_win32_tt_base
create_from_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::create_from_bmp(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
create_gray_scale_palette	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::create_gray_scale_palette(BITMAPINFO *bmp)$/;"	f	class:agg::pixel_map
create_img	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_specific::create_img(unsigned idx, rendering_buffer* rbuf,$/;"	f	class:agg::platform_specific
create_img	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_support::create_img(unsigned idx, unsigned width,$/;"	f	class:agg::platform_support
create_img	src/platform/BeOS/agg_platform_support.cpp	/^    bool platform_support::create_img(unsigned idx, unsigned width, unsigned height)$/;"	f	class:agg::platform_support
create_img	src/platform/X11/agg_platform_support.cpp	/^    bool platform_support::create_img(unsigned idx, unsigned width, unsigned height)$/;"	f	class:agg::platform_support
create_img	src/platform/mac/agg_platform_support.cpp	/^    bool platform_support::create_img(unsigned idx, unsigned width, unsigned height)$/;"	f	class:agg::platform_support
create_img	src/platform/sdl/agg_platform_support.cpp	/^    bool platform_support::create_img(unsigned idx, unsigned width, unsigned height)$/;"	f	class:agg::platform_support
create_img	src/platform/win32/agg_platform_support.cpp	/^    bool platform_support::create_img(unsigned idx, unsigned width, unsigned height)$/;"	f	class:agg::platform_support
create_pmap	src/platform/mac/agg_platform_support.cpp	/^    void platform_specific::create_pmap(unsigned width, $/;"	f	class:agg::platform_specific
create_pmap	src/platform/win32/agg_platform_support.cpp	/^    void platform_specific::create_pmap(unsigned width, $/;"	f	class:agg::platform_specific
create_star	examples/image_transforms.cpp	/^    void create_star(agg::path_storage& ps)$/;"	f	class:the_application
create_star	examples/pattern_fill.cpp	/^    void create_star(double xc, double yc,$/;"	f	class:the_application
cross	include/agg_renderer_markers.h	/^        void cross(int x, int y, int r)$/;"	f	class:agg::renderer_markers
cross_product	include/agg_math.h	/^    AGG_INLINE double cross_product(double x1, double y1, $/;"	f	namespace:agg
crossed_circle	include/agg_renderer_markers.h	/^        void crossed_circle(int x, int y, int r)$/;"	f	class:agg::renderer_markers
ctrl	include/ctrl/agg_ctrl.h	/^        ctrl(double x1, double y1, double x2, double y2, bool flip_y) :$/;"	f	class:agg::ctrl
ctrl	include/ctrl/agg_ctrl.h	/^    class ctrl$/;"	c	namespace:agg
ctrl1	include/agg_vcgen_smooth_poly1.h	/^            ctrl1,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
ctrl2	include/agg_vcgen_smooth_poly1.h	/^            ctrl2,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
ctrl_b	include/agg_vcgen_smooth_poly1.h	/^            ctrl_b,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
ctrl_container	include/platform/agg_platform_support.h	/^        ctrl_container() : m_num_ctrl(0), m_cur_ctrl(-1) {}$/;"	f	class:agg::ctrl_container
ctrl_container	include/platform/agg_platform_support.h	/^    class ctrl_container$/;"	c	namespace:agg
ctrl_e	include/agg_vcgen_smooth_poly1.h	/^            ctrl_e,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
cur_attr	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    path_attributes& path_renderer::cur_attr()$/;"	f	class:agg::svg::path_renderer
cur_item	include/ctrl/agg_rbox_ctrl.h	/^        int  cur_item() const { return m_cur_item; }$/;"	f	class:agg::rbox_ctrl_impl
cur_item	include/ctrl/agg_rbox_ctrl.h	/^        void cur_item(int i) { m_cur_item = i; }$/;"	f	class:agg::rbox_ctrl_impl
curr	include/agg_array.h	/^        T& curr(unsigned idx)$/;"	f	class:agg::pod_bvector
curr	include/agg_array.h	/^        const T& curr(unsigned idx) const$/;"	f	class:agg::pod_bvector
curr	include/agg_rasterizer_outline_aa.h	/^            line_parameters curr, next;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
curve	examples/graph_test.cpp	/^    curve(double x1, double y1, double x2, double y2, double k=0.5)$/;"	f	struct:curve
curve	examples/graph_test.cpp	/^struct curve$/;"	s	file:
curve	src/ctrl/agg_bezier_ctrl.cpp	/^    curve3& curve3_ctrl_impl::curve()$/;"	f	class:agg::curve3_ctrl_impl
curve	src/ctrl/agg_bezier_ctrl.cpp	/^    curve4& bezier_ctrl_impl::curve()$/;"	f	class:agg::bezier_ctrl_impl
curve	src/ctrl/agg_bezier_ctrl.cpp	/^    void bezier_ctrl_impl::curve(double x1, double y1, $/;"	f	class:agg::bezier_ctrl_impl
curve	src/ctrl/agg_bezier_ctrl.cpp	/^    void curve3_ctrl_impl::curve(double x1, double y1, $/;"	f	class:agg::curve3_ctrl_impl
curve3	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::curve3(double x, double y, bool rel)           \/\/ T, t$/;"	f	class:agg::svg::path_renderer
curve3	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::curve3(double x1, double y1,                   \/\/ Q, q$/;"	f	class:agg::svg::path_renderer
curve3	include/agg_curves.h	/^        curve3() : m_approximation_method(curve_div) {}$/;"	f	class:agg::curve3
curve3	include/agg_curves.h	/^        curve3(double x1, double y1, $/;"	f	class:agg::curve3
curve3	include/agg_curves.h	/^    class curve3$/;"	c	namespace:agg
curve3	include/agg_path_storage.h	/^    void path_base<VC>::curve3(double x_ctrl, double y_ctrl, $/;"	f	class:agg::path_base
curve3	include/agg_path_storage.h	/^    void path_base<VC>::curve3(double x_to, double y_to)$/;"	f	class:agg::path_base
curve3	include/agg_path_storage_integer.h	/^        void curve3(T x_ctrl,  T y_ctrl, $/;"	f	class:agg::path_storage_integer
curve3_ctrl	include/ctrl/agg_bezier_ctrl.h	/^        curve3_ctrl() :$/;"	f	class:agg::curve3_ctrl
curve3_ctrl	include/ctrl/agg_bezier_ctrl.h	/^    template<class ColorT> class curve3_ctrl : public curve3_ctrl_impl$/;"	c	namespace:agg
curve3_ctrl_impl	include/ctrl/agg_bezier_ctrl.h	/^    class curve3_ctrl_impl : public ctrl$/;"	c	namespace:agg
curve3_ctrl_impl	src/ctrl/agg_bezier_ctrl.cpp	/^    curve3_ctrl_impl::curve3_ctrl_impl() :$/;"	f	class:agg::curve3_ctrl_impl
curve3_div	include/agg_curves.h	/^        curve3_div() : $/;"	f	class:agg::curve3_div
curve3_div	include/agg_curves.h	/^        curve3_div(double x1, double y1, $/;"	f	class:agg::curve3_div
curve3_div	include/agg_curves.h	/^    class curve3_div$/;"	c	namespace:agg
curve3_inc	include/agg_curves.h	/^        curve3_inc() :$/;"	f	class:agg::curve3_inc
curve3_inc	include/agg_curves.h	/^        curve3_inc(double x1, double y1, $/;"	f	class:agg::curve3_inc
curve3_inc	include/agg_curves.h	/^    class curve3_inc$/;"	c	namespace:agg
curve3_rel	include/agg_path_storage.h	/^    void path_base<VC>::curve3_rel(double dx_ctrl, double dy_ctrl, $/;"	f	class:agg::path_base
curve3_rel	include/agg_path_storage.h	/^    void path_base<VC>::curve3_rel(double dx_to, double dy_to)$/;"	f	class:agg::path_base
curve3_type	include/agg_conv_curve.h	/^        typedef Curve3 curve3_type;$/;"	t	class:agg::conv_curve
curve4	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::curve4(double x1, double y1,                   \/\/ C, c$/;"	f	class:agg::svg::path_renderer
curve4	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::curve4(double x2, double y2,                   \/\/ S, s$/;"	f	class:agg::svg::path_renderer
curve4	include/agg_curves.h	/^        curve4() : m_approximation_method(curve_div) {}$/;"	f	class:agg::curve4
curve4	include/agg_curves.h	/^        curve4(const curve4_points& cp) :$/;"	f	class:agg::curve4
curve4	include/agg_curves.h	/^        curve4(double x1, double y1, $/;"	f	class:agg::curve4
curve4	include/agg_curves.h	/^    class curve4$/;"	c	namespace:agg
curve4	include/agg_path_storage.h	/^    void path_base<VC>::curve4(double x_ctrl1, double y_ctrl1, $/;"	f	class:agg::path_base
curve4	include/agg_path_storage.h	/^    void path_base<VC>::curve4(double x_ctrl2, double y_ctrl2, $/;"	f	class:agg::path_base
curve4	include/agg_path_storage_integer.h	/^        void curve4(T x_ctrl1, T y_ctrl1, $/;"	f	class:agg::path_storage_integer
curve4_div	include/agg_curves.h	/^        curve4_div() : $/;"	f	class:agg::curve4_div
curve4_div	include/agg_curves.h	/^        curve4_div(const curve4_points& cp) :$/;"	f	class:agg::curve4_div
curve4_div	include/agg_curves.h	/^        curve4_div(double x1, double y1, $/;"	f	class:agg::curve4_div
curve4_div	include/agg_curves.h	/^    class curve4_div$/;"	c	namespace:agg
curve4_inc	include/agg_curves.h	/^        curve4_inc() :$/;"	f	class:agg::curve4_inc
curve4_inc	include/agg_curves.h	/^        curve4_inc(const curve4_points& cp) :$/;"	f	class:agg::curve4_inc
curve4_inc	include/agg_curves.h	/^        curve4_inc(double x1, double y1, $/;"	f	class:agg::curve4_inc
curve4_inc	include/agg_curves.h	/^    class curve4_inc$/;"	c	namespace:agg
curve4_points	include/agg_curves.h	/^        curve4_points() {}$/;"	f	struct:agg::curve4_points
curve4_points	include/agg_curves.h	/^        curve4_points(double x1, double y1,$/;"	f	struct:agg::curve4_points
curve4_points	include/agg_curves.h	/^    struct curve4_points$/;"	s	namespace:agg
curve4_rel	include/agg_path_storage.h	/^    void path_base<VC>::curve4_rel(double dx_ctrl1, double dy_ctrl1, $/;"	f	class:agg::path_base
curve4_rel	include/agg_path_storage.h	/^    void path_base<VC>::curve4_rel(double dx_ctrl2, double dy_ctrl2, $/;"	f	class:agg::path_base
curve4_type	include/agg_conv_curve.h	/^        typedef Curve4 curve4_type;$/;"	t	class:agg::conv_curve
curve_angle_tolerance_epsilon	src/agg_curves.cpp	/^    const double curve_angle_tolerance_epsilon           = 0.01;$/;"	m	namespace:agg	file:
curve_approximation_method_e	include/agg_curves.h	/^    enum curve_approximation_method_e$/;"	g	namespace:agg
curve_collinearity_epsilon	src/agg_curves.cpp	/^    const double curve_collinearity_epsilon              = 1e-30;$/;"	m	namespace:agg	file:
curve_color	include/ctrl/agg_gamma_ctrl.h	/^        void curve_color(const ColorT& c)        { m_curve_color = c; }$/;"	f	class:agg::gamma_ctrl
curve_color	include/ctrl/agg_spline_ctrl.h	/^        void curve_color(const ColorT& c)        { m_curve_color = c; }$/;"	f	class:agg::spline_ctrl
curve_distance_epsilon	src/agg_curves.cpp	/^    const double curve_distance_epsilon                  = 1e-30;$/;"	m	namespace:agg	file:
curve_div	include/agg_curves.h	/^        curve_div$/;"	e	enum:agg::curve_approximation_method_e
curve_inc	include/agg_curves.h	/^        curve_inc,$/;"	e	enum:agg::curve_approximation_method_e
curve_point	examples/bezier_div.cpp	/^        curve_point() {}$/;"	f	struct:the_application::curve_point
curve_point	examples/bezier_div.cpp	/^        curve_point(double x1, double y1, double mu1) : x(x1), y(y1), mu(mu1) {}$/;"	f	struct:the_application::curve_point
curve_point	examples/bezier_div.cpp	/^    struct curve_point$/;"	s	class:the_application	file:
curve_recursion_limit	src/agg_curves.cpp	/^    enum curve_recursion_limit_e { curve_recursion_limit = 32 };$/;"	e	enum:agg::curve_recursion_limit_e	file:
curve_recursion_limit_e	src/agg_curves.cpp	/^    enum curve_recursion_limit_e { curve_recursion_limit = 32 };$/;"	g	namespace:agg	file:
curve_width	include/ctrl/agg_gamma_ctrl.h	/^        void curve_width(double t)         { m_curve_width = t; }$/;"	f	class:agg::gamma_ctrl_impl
curve_width	include/ctrl/agg_spline_ctrl.h	/^        void curve_width(double t) { m_curve_width = t; }$/;"	f	class:agg::spline_ctrl_impl
curved	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_curve<path_storage>       curved;$/;"	t	class:agg::svg::path_renderer
curved_count	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_count<curved>             curved_count;$/;"	t	class:agg::svg::path_renderer
curved_stroked	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_stroke<curved_count>      curved_stroked;$/;"	t	class:agg::svg::path_renderer
curved_stroked_trans	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_transform<curved_stroked> curved_stroked_trans;$/;"	t	class:agg::svg::path_renderer
curved_trans	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_transform<curved_count>   curved_trans;$/;"	t	class:agg::svg::path_renderer
curved_trans_contour	examples/svg_viewer/agg_svg_path_renderer.h	/^        typedef conv_contour<curved_trans>     curved_trans_contour;$/;"	t	class:agg::svg::path_renderer
cusp_limit	include/agg_conv_curve.h	/^        double cusp_limit() const $/;"	f	class:agg::conv_curve
cusp_limit	include/agg_conv_curve.h	/^        void cusp_limit(double v) $/;"	f	class:agg::conv_curve
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const $/;"	f	class:agg::curve3
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const $/;"	f	class:agg::curve4
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const $/;"	f	class:agg::curve4_div
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const { return 0.0; }$/;"	f	class:agg::curve3_div
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const { return 0.0; }$/;"	f	class:agg::curve3_inc
cusp_limit	include/agg_curves.h	/^        double cusp_limit() const { return 0.0; }$/;"	f	class:agg::curve4_inc
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double v) $/;"	f	class:agg::curve3
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double v) $/;"	f	class:agg::curve4
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double v) $/;"	f	class:agg::curve4_div
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double) {}$/;"	f	class:agg::curve3_div
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double) {}$/;"	f	class:agg::curve3_inc
cusp_limit	include/agg_curves.h	/^        void cusp_limit(double) {}$/;"	f	class:agg::curve4_inc
cut_at	include/agg_array.h	/^        void cut_at(unsigned num) { if(num < m_size) m_size = num; }$/;"	f	class:agg::pod_vector
cut_at	include/agg_array.h	/^        void cut_at(unsigned size)$/;"	f	class:agg::pod_bvector
d	examples/graph_test.cpp	/^    dash_type      d;$/;"	m	struct:dash_stroke_draft_arrow	file:
d	examples/graph_test.cpp	/^    dash_type      d;$/;"	m	struct:dash_stroke_fine_arrow	file:
d	examples/graph_test.cpp	/^    dash_type      d;$/;"	m	struct:dash_stroke_fine_simple	file:
d	examples/graph_test.cpp	/^    dash_type d;$/;"	m	struct:dash_stroke_draft_simple	file:
d1	include/agg_span_gradient.h	/^        double d1() const { return double(m_d1) \/ gradient_subpixel_scale; }$/;"	f	class:agg::span_gradient
d1	include/agg_span_gradient.h	/^        void d1(double v) { m_d1 = iround(v * gradient_subpixel_scale); }$/;"	f	class:agg::span_gradient
d1	include/agg_span_gradient_alpha.h	/^        double d1() const { return double(m_d1) \/ gradient_subpixel_scale; }$/;"	f	class:agg::span_gradient_alpha
d1	include/agg_span_gradient_alpha.h	/^        void d1(double v) { m_d1 = iround(v * gradient_subpixel_scale); }$/;"	f	class:agg::span_gradient_alpha
d2	include/agg_span_gradient.h	/^        double d2() const { return double(m_d2) \/ gradient_subpixel_scale; }$/;"	f	class:agg::span_gradient
d2	include/agg_span_gradient.h	/^        void d2(double v) { m_d2 = iround(v * gradient_subpixel_scale); }$/;"	f	class:agg::span_gradient
d2	include/agg_span_gradient_alpha.h	/^        double d2() const { return double(m_d2) \/ gradient_subpixel_scale; }$/;"	f	class:agg::span_gradient_alpha
d2	include/agg_span_gradient_alpha.h	/^        void d2(double v) { m_d2 = iround(v * gradient_subpixel_scale); }$/;"	f	class:agg::span_gradient_alpha
dash	include/agg_renderer_markers.h	/^        void dash(int x, int y, int r)$/;"	f	class:agg::renderer_markers
dash_start	include/agg_conv_dash.h	/^        void dash_start(double ds) $/;"	f	struct:agg::conv_dash
dash_start	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::dash_start(double ds)$/;"	f	class:agg::vcgen_dash
dash_stroke_draft	examples/graph_test.cpp	401;"	d	file:
dash_stroke_draft_arrow	examples/graph_test.cpp	/^    dash_stroke_draft_arrow(Source& src, $/;"	f	struct:dash_stroke_draft_arrow
dash_stroke_draft_arrow	examples/graph_test.cpp	/^template<class Source> struct dash_stroke_draft_arrow$/;"	s	file:
dash_stroke_draft_simple	examples/graph_test.cpp	/^    dash_stroke_draft_simple(Source& src, $/;"	f	struct:dash_stroke_draft_simple
dash_stroke_draft_simple	examples/graph_test.cpp	/^template<class Source> struct dash_stroke_draft_simple$/;"	s	file:
dash_stroke_fine	examples/graph_test.cpp	403;"	d	file:
dash_stroke_fine_arrow	examples/graph_test.cpp	/^    dash_stroke_fine_arrow(Source& src, $/;"	f	struct:dash_stroke_fine_arrow
dash_stroke_fine_arrow	examples/graph_test.cpp	/^template<class Source> struct dash_stroke_fine_arrow$/;"	s	file:
dash_stroke_fine_simple	examples/graph_test.cpp	/^    dash_stroke_fine_simple(Source& src, $/;"	f	struct:dash_stroke_fine_simple
dash_stroke_fine_simple	examples/graph_test.cpp	/^template<class Source> struct dash_stroke_fine_simple$/;"	s	file:
dash_type	examples/graph_test.cpp	/^    typedef agg::conv_dash<Source, agg::vcgen_markers_term>                   dash_type;$/;"	t	struct:dash_stroke_draft_arrow	file:
dash_type	examples/graph_test.cpp	/^    typedef agg::conv_dash<Source, agg::vcgen_markers_term>                   dash_type;$/;"	t	struct:dash_stroke_fine_arrow	file:
dash_type	examples/graph_test.cpp	/^    typedef agg::conv_dash<Source, agg::vcgen_markers_term> dash_type;$/;"	t	struct:dash_stroke_draft_simple	file:
dash_type	examples/graph_test.cpp	/^    typedef agg::conv_dash<Source>       dash_type;$/;"	t	struct:dash_stroke_fine_simple	file:
dashed_line	examples/aa_test.cpp	/^    dashed_line(Ras& ras, Ren& ren, Scanline& sl) : $/;"	f	class:dashed_line
dashed_line	examples/aa_test.cpp	/^template<class Ras, class Ren, class Scanline> class dashed_line$/;"	c	file:
dashed_wedge	examples/mol_view.cpp	/^        dashed_wedge() :$/;"	f	class:agg::dashed_wedge
dashed_wedge	examples/mol_view.cpp	/^        dashed_wedge(double x1, double y1, double x2, double y2, $/;"	f	class:agg::dashed_wedge
dashed_wedge	examples/mol_view.cpp	/^    class dashed_wedge$/;"	c	namespace:agg	file:
data	include/agg_array.h	/^              T* data()       { return m_array; }$/;"	f	class:agg::pod_array
data	include/agg_array.h	/^              T* data()       { return m_array; }$/;"	f	class:agg::pod_vector
data	include/agg_array.h	/^            int8u*   data;$/;"	m	struct:agg::block_allocator::block_type
data	include/agg_array.h	/^        const T* data() const { return m_array; }$/;"	f	class:agg::pod_array
data	include/agg_array.h	/^        const T* data() const { return m_array; }$/;"	f	class:agg::pod_vector
data	include/agg_font_cache_manager.h	/^        int8u*          data;$/;"	m	struct:agg::glyph_cache
data_ptr	include/agg_array.h	/^    inline T* pod_bvector<T, S>::data_ptr()$/;"	f	class:agg::pod_bvector
data_size	font_freetype/agg_font_freetype.h	/^        unsigned        data_size()   const { return m_data_size;   }$/;"	f	class:agg::font_engine_freetype_base
data_size	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        data_size()   const { return m_data_size;   }$/;"	f	class:agg::font_engine_win32_tt_base
data_size	include/agg_font_cache_manager.h	/^        unsigned        data_size;$/;"	m	struct:agg::glyph_cache
data_type	font_freetype/agg_font_freetype.h	/^        glyph_data_type data_type()   const { return m_data_type;   }$/;"	f	class:agg::font_engine_freetype_base
data_type	font_win32_tt/agg_font_win32_tt.h	/^        glyph_data_type data_type()   const { return m_data_type;   }$/;"	f	class:agg::font_engine_win32_tt_base
data_type	include/agg_font_cache_manager.h	/^        glyph_data_type data_type;$/;"	m	struct:agg::glyph_cache
dbl_to_fx	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline FIXED dbl_to_fx(double d)$/;"	f	namespace:agg
dbl_to_int26p6	font_freetype/agg_font_freetype.cpp	/^    static inline int dbl_to_int26p6(double p)$/;"	f	namespace:agg
dbl_to_int26p6	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline int dbl_to_int26p6(double p)$/;"	f	namespace:agg
dbl_to_plain_fx	font_freetype/agg_font_freetype.cpp	/^    static inline int dbl_to_plain_fx(double d)$/;"	f	namespace:agg
dbl_to_plain_fx	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline int dbl_to_plain_fx(double d)$/;"	f	namespace:agg
dc	examples/gouraud_mesh.cpp	/^        rgba8 dc;$/;"	m	struct:agg::mesh_point	file:
dda2_line_interpolator	include/agg_dda_line.h	/^        dda2_line_interpolator() {}$/;"	f	class:agg::dda2_line_interpolator
dda2_line_interpolator	include/agg_dda_line.h	/^        dda2_line_interpolator(int y, int count) :$/;"	f	class:agg::dda2_line_interpolator
dda2_line_interpolator	include/agg_dda_line.h	/^        dda2_line_interpolator(int y1, int y2, int count) :$/;"	f	class:agg::dda2_line_interpolator
dda2_line_interpolator	include/agg_dda_line.h	/^        dda2_line_interpolator(int y1, int y2, int count, int) :$/;"	f	class:agg::dda2_line_interpolator
dda2_line_interpolator	include/agg_dda_line.h	/^    class dda2_line_interpolator$/;"	c	namespace:agg
dda_line_interpolator	include/agg_dda_line.h	/^        dda_line_interpolator() {}$/;"	f	class:agg::dda_line_interpolator
dda_line_interpolator	include/agg_dda_line.h	/^        dda_line_interpolator(int y1, int y2, unsigned count) :$/;"	f	class:agg::dda_line_interpolator
dda_line_interpolator	include/agg_dda_line.h	/^    template<int FractionShift, int YShift=0> class dda_line_interpolator$/;"	c	namespace:agg
deallocate	include/agg_basics.h	/^        static void deallocate(T* ptr) { delete ptr;   }$/;"	f	struct:agg::obj_allocator
deallocate	include/agg_basics.h	/^        static void deallocate(T* ptr, unsigned) { delete [] ptr;      }$/;"	f	struct:agg::pod_allocator
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x() { m_dist -= m_dy; m_dist_start -= m_dy_start; m_dist_end -= m_dy_end; }$/;"	f	class:agg::distance_interpolator3
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x() { m_dist -= m_dy; m_dist_start -= m_dy_start; }$/;"	f	class:agg::distance_interpolator2
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x() { m_dist -= m_dy; }$/;"	f	class:agg::distance_interpolator1
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x(int dy)$/;"	f	class:agg::distance_interpolator1
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x(int dy)$/;"	f	class:agg::distance_interpolator2
dec_x	include/agg_renderer_outline_aa.h	/^        void dec_x(int dy)$/;"	f	class:agg::distance_interpolator3
dec_x	include/agg_renderer_outline_image.h	/^        void dec_x() $/;"	f	class:agg::distance_interpolator4
dec_x	include/agg_renderer_outline_image.h	/^        void dec_x(int dy)$/;"	f	class:agg::distance_interpolator4
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y() { m_dist += m_dx; m_dist_start += m_dx_start; m_dist_end += m_dx_end; }$/;"	f	class:agg::distance_interpolator3
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y() { m_dist += m_dx; m_dist_start += m_dx_start; }$/;"	f	class:agg::distance_interpolator2
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y() { m_dist += m_dx; }$/;"	f	class:agg::distance_interpolator1
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y(int dx)$/;"	f	class:agg::distance_interpolator1
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y(int dx)$/;"	f	class:agg::distance_interpolator2
dec_y	include/agg_renderer_outline_aa.h	/^        void dec_y(int dx)$/;"	f	class:agg::distance_interpolator3
dec_y	include/agg_renderer_outline_image.h	/^        void dec_y() $/;"	f	class:agg::distance_interpolator4
dec_y	include/agg_renderer_outline_image.h	/^        void dec_y(int dx)$/;"	f	class:agg::distance_interpolator4
decompose_ft_bitmap_gray8	font_freetype/agg_font_freetype.cpp	/^    void decompose_ft_bitmap_gray8(const FT_Bitmap& bitmap,$/;"	f	namespace:agg
decompose_ft_bitmap_mono	font_freetype/agg_font_freetype.cpp	/^    void decompose_ft_bitmap_mono(const FT_Bitmap& bitmap,$/;"	f	namespace:agg
decompose_ft_outline	font_freetype/agg_font_freetype.cpp	/^    bool decompose_ft_outline(const FT_Outline& outline,$/;"	f	namespace:agg
decompose_win32_glyph_bitmap_gray8	font_win32_tt/agg_font_win32_tt.cpp	/^    void decompose_win32_glyph_bitmap_gray8(const char* gbuf, $/;"	f	namespace:agg
decompose_win32_glyph_bitmap_mono	font_win32_tt/agg_font_win32_tt.cpp	/^    void decompose_win32_glyph_bitmap_mono(const char* gbuf, $/;"	f	namespace:agg
decompose_win32_glyph_outline	font_win32_tt/agg_font_win32_tt.cpp	/^    bool decompose_win32_glyph_outline(const char* gbuf,$/;"	f	namespace:agg
default_num_points	examples/circles.cpp	/^enum default_num_points_e { default_num_points = 10000 };$/;"	e	enum:default_num_points_e	file:
default_num_points	examples/mol_view.cpp	/^enum default_num_points_e { default_num_points = 20000 };$/;"	e	enum:default_num_points_e	file:
default_num_points_e	examples/circles.cpp	/^enum default_num_points_e { default_num_points = 10000 };$/;"	g	file:
default_num_points_e	examples/mol_view.cpp	/^enum default_num_points_e { default_num_points = 20000 };$/;"	g	file:
deg2rad	include/agg_basics.h	/^    inline double deg2rad(double deg)$/;"	f	namespace:agg
demultiply	include/agg_color_gray.h	/^        const self_type& demultiply()$/;"	f	struct:agg::gray16
demultiply	include/agg_color_gray.h	/^        const self_type& demultiply()$/;"	f	struct:agg::gray8
demultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& demultiply()$/;"	f	struct:agg::rgba16
demultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& demultiply()$/;"	f	struct:agg::rgba8
demultiply	include/agg_color_rgba.h	/^        const rgba& demultiply()$/;"	f	struct:agg::rgba
demultiply	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void demultiply(value_type* p)$/;"	f	struct:agg::multiplier_rgba
demultiply	include/agg_pixfmt_rgba.h	/^        void demultiply()$/;"	f	class:agg::pixfmt_alpha_blend_rgba
demultiply	include/agg_pixfmt_rgba.h	/^        void demultiply()$/;"	f	class:agg::pixfmt_custom_blend_rgba
den	include/agg_trans_perspective.h	/^            double den;$/;"	m	class:agg::trans_perspective::iterator_x
den_step	include/agg_trans_perspective.h	/^            double den_step;$/;"	m	class:agg::trans_perspective::iterator_x
descender	font_freetype/agg_font_freetype.cpp	/^    double font_engine_freetype_base::descender() const$/;"	f	class:agg::font_engine_freetype_base
descending	include/ctrl/agg_slider_ctrl.h	/^        bool descending() const { return m_descending; }$/;"	f	class:agg::slider_ctrl_impl
descending	include/ctrl/agg_slider_ctrl.h	/^        void descending(bool v) { m_descending = v; }$/;"	f	class:agg::slider_ctrl_impl
deserialize	include/agg_array.h	/^        void deserialize(ByteAccessor data)$/;"	f	class:agg::pod_bvector
deserialize	include/agg_array.h	/^        void deserialize(unsigned start, const T& empty_val, ByteAccessor data)$/;"	f	class:agg::pod_bvector
deserialize	include/agg_array.h	/^    void pod_bvector<T, S>::deserialize(const int8u* data, unsigned byte_size)$/;"	f	class:agg::pod_bvector
deserialize	include/agg_array.h	/^    void pod_bvector<T, S>::deserialize(unsigned start, const T& empty_val, $/;"	f	class:agg::pod_bvector
deserialize	include/agg_array.h	/^    void pod_vector<T>::deserialize(const int8u* data, unsigned byte_size)$/;"	f	class:agg::pod_vector
deserialize	include/agg_trans_viewport.h	/^        void deserialize(const int8u* ptr)$/;"	f	class:agg::trans_viewport
destroy	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::destroy()$/;"	f	class:agg::pixel_map
destroy	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::destroy()$/;"	f	class:agg::pixel_map
determinant	include/agg_trans_affine.h	/^        double determinant() const$/;"	f	struct:agg::trans_affine
determinant	include/agg_trans_perspective.h	/^    inline double trans_perspective::determinant() const$/;"	f	class:agg::trans_perspective
determinant_reciprocal	include/agg_trans_affine.h	/^        double determinant_reciprocal() const$/;"	f	struct:agg::trans_affine
determinant_reciprocal	include/agg_trans_perspective.h	/^    inline double trans_perspective::determinant_reciprocal() const$/;"	f	class:agg::trans_perspective
device_dx	include/agg_trans_viewport.h	/^        double device_dx() const { return m_dx1 - m_wx1 * m_kx; }$/;"	f	class:agg::trans_viewport
device_dy	include/agg_trans_viewport.h	/^        double device_dy() const { return m_dy1 - m_wy1 * m_ky; }$/;"	f	class:agg::trans_viewport
device_viewport	include/agg_trans_viewport.h	/^        void device_viewport(double x1, double y1, double x2, double y2)$/;"	f	class:agg::trans_viewport
device_viewport	include/agg_trans_viewport.h	/^        void device_viewport(double* x1, double* y1, double* x2, double* y2) const$/;"	f	class:agg::trans_viewport
diagonal_quadrant	include/agg_line_aa_basics.h	/^        unsigned diagonal_quadrant()   const { return s_diagonal_quadrant[octant];   }$/;"	f	struct:agg::line_parameters
diameter	include/agg_image_filters.h	/^        unsigned     diameter()     const { return m_diameter; }$/;"	f	class:agg::image_filter_lut
diamond	include/agg_renderer_markers.h	/^        void diamond(int x, int y, int r)$/;"	f	class:agg::renderer_markers
dilate_triangle	include/agg_math.h	/^    AGG_INLINE void dilate_triangle(double x1, double y1,$/;"	f	namespace:agg
dilation	include/agg_pattern_filters_rgba.h	/^        static unsigned dilation() { return 0; }$/;"	f	struct:agg::pattern_filter_nn
dilation	include/agg_pattern_filters_rgba.h	/^        static unsigned dilation() { return 1; }$/;"	f	struct:agg::pattern_filter_bilinear_rgba
dir	include/agg_gamma_lut.h	/^        HiResT dir(LoResT v) const $/;"	f	class:agg::gamma_lut
display_pmap	src/platform/mac/agg_platform_support.cpp	/^    void platform_specific::display_pmap(WindowRef window, const rendering_buffer* src)$/;"	f	class:agg::platform_specific
display_pmap	src/platform/win32/agg_platform_support.cpp	/^    void platform_specific::display_pmap(HDC dc, const rendering_buffer* src)$/;"	f	class:agg::platform_specific
dist	examples/bezier_div.cpp	/^        double x, y, dist, mu;$/;"	m	struct:the_application::curve_point	file:
dist	include/agg_renderer_outline_aa.h	/^        int  dist() const { return m_dist; }$/;"	f	class:agg::distance_interpolator0
dist	include/agg_renderer_outline_aa.h	/^        int dist()       const { return m_dist;       }$/;"	f	class:agg::distance_interpolator2
dist	include/agg_renderer_outline_aa.h	/^        int dist()       const { return m_dist;       }$/;"	f	class:agg::distance_interpolator3
dist	include/agg_renderer_outline_aa.h	/^        int dist() const { return m_dist; }$/;"	f	class:agg::distance_interpolator1
dist	include/agg_renderer_outline_image.h	/^        int dist()       const { return m_dist;       }$/;"	f	class:agg::distance_interpolator4
dist	include/agg_vertex_sequence.h	/^        double   dist;$/;"	m	struct:agg::vertex_dist
dist1	include/agg_renderer_outline_aa.h	/^        int  dist1() const { return m_dist1; }$/;"	f	class:agg::distance_interpolator00
dist2	include/agg_renderer_outline_aa.h	/^        int  dist2() const { return m_dist2; }$/;"	f	class:agg::distance_interpolator00
dist_end	include/agg_renderer_outline_aa.h	/^        int dist_end()   const { return m_dist_end;   }$/;"	f	class:agg::distance_interpolator3
dist_end	include/agg_renderer_outline_aa.h	/^        int dist_end()   const { return m_dist_start; }$/;"	f	class:agg::distance_interpolator2
dist_end	include/agg_renderer_outline_image.h	/^        int dist_end()   const { return m_dist_end;   }$/;"	f	class:agg::distance_interpolator4
dist_pict	include/agg_renderer_outline_image.h	/^        int dist_pict()  const { return m_dist_pict;  }$/;"	f	class:agg::distance_interpolator4
dist_start	include/agg_renderer_outline_aa.h	/^        int dist_start() const { return m_dist_start; }$/;"	f	class:agg::distance_interpolator2
dist_start	include/agg_renderer_outline_aa.h	/^        int dist_start() const { return m_dist_start; }$/;"	f	class:agg::distance_interpolator3
dist_start	include/agg_renderer_outline_image.h	/^        int dist_start() const { return m_dist_start; }$/;"	f	class:agg::distance_interpolator4
distance_interpolator0	include/agg_renderer_outline_aa.h	/^        distance_interpolator0() {}$/;"	f	class:agg::distance_interpolator0
distance_interpolator0	include/agg_renderer_outline_aa.h	/^        distance_interpolator0(int x1, int y1, int x2, int y2, int x, int y) :$/;"	f	class:agg::distance_interpolator0
distance_interpolator0	include/agg_renderer_outline_aa.h	/^    class distance_interpolator0$/;"	c	namespace:agg
distance_interpolator00	include/agg_renderer_outline_aa.h	/^        distance_interpolator00() {}$/;"	f	class:agg::distance_interpolator00
distance_interpolator00	include/agg_renderer_outline_aa.h	/^        distance_interpolator00(int xc, int yc, $/;"	f	class:agg::distance_interpolator00
distance_interpolator00	include/agg_renderer_outline_aa.h	/^    class distance_interpolator00$/;"	c	namespace:agg
distance_interpolator1	include/agg_renderer_outline_aa.h	/^        distance_interpolator1() {}$/;"	f	class:agg::distance_interpolator1
distance_interpolator1	include/agg_renderer_outline_aa.h	/^        distance_interpolator1(int x1, int y1, int x2, int y2, int x, int y) :$/;"	f	class:agg::distance_interpolator1
distance_interpolator1	include/agg_renderer_outline_aa.h	/^    class distance_interpolator1$/;"	c	namespace:agg
distance_interpolator2	include/agg_renderer_outline_aa.h	/^        distance_interpolator2() {}$/;"	f	class:agg::distance_interpolator2
distance_interpolator2	include/agg_renderer_outline_aa.h	/^        distance_interpolator2(int x1, int y1, int x2, int y2,$/;"	f	class:agg::distance_interpolator2
distance_interpolator2	include/agg_renderer_outline_aa.h	/^    class distance_interpolator2$/;"	c	namespace:agg
distance_interpolator3	include/agg_renderer_outline_aa.h	/^        distance_interpolator3() {}$/;"	f	class:agg::distance_interpolator3
distance_interpolator3	include/agg_renderer_outline_aa.h	/^        distance_interpolator3(int x1, int y1, int x2, int y2,$/;"	f	class:agg::distance_interpolator3
distance_interpolator3	include/agg_renderer_outline_aa.h	/^    class distance_interpolator3$/;"	c	namespace:agg
distance_interpolator4	include/agg_renderer_outline_image.h	/^        distance_interpolator4() {}$/;"	f	class:agg::distance_interpolator4
distance_interpolator4	include/agg_renderer_outline_image.h	/^        distance_interpolator4(int x1,  int y1, int x2, int y2,$/;"	f	class:agg::distance_interpolator4
distance_interpolator4	include/agg_renderer_outline_image.h	/^    class distance_interpolator4$/;"	c	namespace:agg
distortion	include/agg_span_interpolator_adaptor.h	/^        const distortion_type& distortion() const$/;"	f	class:agg::span_interpolator_adaptor
distortion	include/agg_span_interpolator_adaptor.h	/^        void distortion(const distortion_type& dist)$/;"	f	class:agg::span_interpolator_adaptor
distortion_swirl	examples/distortions.cpp	/^class distortion_swirl : public periodic_distortion$/;"	c	file:
distortion_swirl_wave	examples/distortions.cpp	/^class distortion_swirl_wave : public periodic_distortion$/;"	c	file:
distortion_type	include/agg_span_interpolator_adaptor.h	/^        typedef Distortion distortion_type;$/;"	t	class:agg::span_interpolator_adaptor
distortion_wave	examples/distortions.cpp	/^class distortion_wave : public periodic_distortion$/;"	c	file:
distortion_wave_swirl	examples/distortions.cpp	/^class distortion_wave_swirl : public periodic_distortion$/;"	c	file:
divide	include/agg_line_aa_basics.h	/^        void divide(line_parameters& lp1, line_parameters& lp2) const$/;"	f	struct:agg::line_parameters
dot	include/agg_renderer_markers.h	/^        void dot(int x, int y, int r)$/;"	f	class:agg::renderer_markers
downscale	include/agg_rasterizer_sl_clip.h	/^        static double downscale(int v)  { return v \/ double(poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_dbl
downscale	include/agg_rasterizer_sl_clip.h	/^        static double downscale(int v)  { return v \/ double(poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_dbl_3x
downscale	include/agg_rasterizer_sl_clip.h	/^        static int downscale(int v)  { return v; }$/;"	f	struct:agg::ras_conv_int
downscale	include/agg_rasterizer_sl_clip.h	/^        static int downscale(int v)  { return v; }$/;"	f	struct:agg::ras_conv_int_3x
downscale	include/agg_rasterizer_sl_clip.h	/^        static int downscale(int v) { return v; }$/;"	f	struct:agg::ras_conv_int_sat
downscale_shift	include/agg_span_gradient.h	/^            downscale_shift = interpolator_type::subpixel_shift - $/;"	e	enum:agg::span_gradient::downscale_shift_e
downscale_shift	include/agg_span_gradient_alpha.h	/^            downscale_shift = interpolator_type::subpixel_shift - gradient_subpixel_shift$/;"	e	enum:agg::span_gradient_alpha::downscale_shift_e
downscale_shift	include/agg_span_image_filter_gray.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_gray::base_scale_e
downscale_shift	include/agg_span_image_filter_gray.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_gray_affine::base_scale_e
downscale_shift	include/agg_span_image_filter_rgb.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_rgb::base_scale_e
downscale_shift	include/agg_span_image_filter_rgb.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_rgb_affine::base_scale_e
downscale_shift	include/agg_span_image_filter_rgba.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_rgba::base_scale_e
downscale_shift	include/agg_span_image_filter_rgba.h	/^            downscale_shift = image_filter_shift$/;"	e	enum:agg::span_image_resample_rgba_affine::base_scale_e
downscale_shift_e	include/agg_span_gradient.h	/^        enum downscale_shift_e$/;"	g	class:agg::span_gradient
downscale_shift_e	include/agg_span_gradient_alpha.h	/^        enum downscale_shift_e$/;"	g	class:agg::span_gradient_alpha
draft_renderer	examples/graph_test.cpp	/^typedef agg::renderer_scanline_bin_solid<base_renderer> draft_renderer;$/;"	t	file:
draw	examples/aa_demo.cpp	/^        void draw(Rasterizer& ras, Scanline& sl, Renderer& ren, ColorT color, $/;"	f	class:agg::square
draw	examples/aa_test.cpp	/^    void draw(double x1, double y1, double x2, double y2, $/;"	f	class:dashed_line
draw	include/agg_rasterizer_outline_aa.h	/^    void rasterizer_outline_aa<Renderer, Coord>::draw(draw_vars& dv, $/;"	f	class:agg::rasterizer_outline_aa
draw	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::draw(WindowRef window, const Rect *device_rect, const Rect *pmap_rect) const$/;"	f	class:agg::pixel_map
draw	src/platform/mac/agg_mac_pmap.cpp	/^    void pixel_map::draw(WindowRef window, int x, int y, double scale) const$/;"	f	class:agg::pixel_map
draw	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::draw(HDC h_dc, const RECT *device_rect, const RECT *bmp_rect) const$/;"	f	class:agg::pixel_map
draw	src/platform/win32/agg_win32_bmp.cpp	/^    void pixel_map::draw(HDC h_dc, int x, int y, double scale) const$/;"	f	class:agg::pixel_map
draw_aliased	examples/rasterizers.cpp	/^    void draw_aliased()$/;"	f	class:the_application
draw_aliased_pix_accuracy	examples/rasterizers2.cpp	/^    void draw_aliased_pix_accuracy(rasterizer_outline& ras, renderer_prim& prim)$/;"	f	class:the_application
draw_aliased_subpix_accuracy	examples/rasterizers2.cpp	/^    void draw_aliased_subpix_accuracy(rasterizer_outline& ras, renderer_prim& prim)$/;"	f	class:the_application
draw_anti_aliased	examples/rasterizers.cpp	/^    void draw_anti_aliased()$/;"	f	class:the_application
draw_anti_aliased_outline	examples/rasterizers2.cpp	/^    void draw_anti_aliased_outline(rasterizer_outline_aa& ras, renderer_oaa& ren)$/;"	f	class:the_application
draw_anti_aliased_outline_img	examples/rasterizers2.cpp	/^    void draw_anti_aliased_outline_img(rasterizer_outline_img& ras, renderer_img& ren)$/;"	f	class:the_application
draw_anti_aliased_scanline	examples/rasterizers2.cpp	/^    void draw_anti_aliased_scanline(rasterizer_scanline& ras, scanline& sl, renderer_aa& ren)$/;"	f	class:the_application
draw_curve	examples/line_patterns.cpp	/^    void draw_curve(Pattern& patt, $/;"	f	class:the_application
draw_curves_draft	examples/graph_test.cpp	/^    void draw_curves_draft()$/;"	f	class:the_application
draw_curves_fine	examples/graph_test.cpp	/^    void draw_curves_fine(scanline_rasterizer& ras, $/;"	f	class:the_application
draw_dashes_draft	examples/graph_test.cpp	/^    void draw_dashes_draft()$/;"	f	class:the_application
draw_dashes_fine	examples/graph_test.cpp	/^    void draw_dashes_fine(scanline_rasterizer& ras, $/;"	f	class:the_application
draw_lines_draft	examples/graph_test.cpp	/^    void draw_lines_draft()$/;"	f	class:the_application
draw_lines_fine	examples/graph_test.cpp	/^    void draw_lines_fine(scanline_rasterizer& ras, $/;"	f	class:the_application
draw_nodes_draft	examples/graph_test.cpp	/^    void draw_nodes_draft()$/;"	f	class:the_application
draw_nodes_fine	examples/graph_test.cpp	/^    void draw_nodes_fine(scanline_rasterizer& ras)$/;"	f	class:the_application
draw_polygons	examples/graph_test.cpp	/^    void draw_polygons(scanline_rasterizer& ras, $/;"	f	class:the_application
draw_polyline	examples/line_patterns_clip.cpp	/^    void draw_polyline(Rasterizer& ras, $/;"	f	class:the_application
draw_scene	examples/graph_test.cpp	/^    void draw_scene(scanline_rasterizer& ras, $/;"	f	class:the_application
draw_text	examples/alpha_mask3.cpp	/^    void draw_text(double x, double y, const char* str)$/;"	f	class:the_application
draw_text	examples/freetype_test.cpp	/^    unsigned draw_text(Rasterizer& ras, Scanline& sl, $/;"	f	class:the_application
draw_text	examples/truetype_test.cpp	/^    unsigned draw_text(Rasterizer& ras, Scanline& sl, $/;"	f	class:the_application
draw_vars	include/agg_rasterizer_outline_aa.h	/^        struct draw_vars$/;"	s	class:agg::rasterizer_outline_aa
dump_path	examples/freetype_test.cpp	/^template<class VS> void dump_path(VS& path)$/;"	f
dx	examples/gouraud_mesh.cpp	/^        double dx,dy;$/;"	m	struct:agg::mesh_point	file:
dx	gpc/gpc.c	/^  double              dx;           \/* Change in x for a unit y increase *\/$/;"	m	struct:edge_shape	file:
dx	gpc/gpc.c	/^  double              dx;           \/* Change in x for a unit y increase *\/$/;"	m	struct:st_shape	file:
dx	include/agg_ellipse_bresenham.h	/^        int dx() const { return m_dx; }$/;"	f	class:agg::ellipse_bresenham_interpolator
dx	include/agg_glyph_raster_bin.h	/^            double dx, dy;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
dx	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
dx	include/agg_renderer_outline_aa.h	/^        int dx()       const { return m_dx;       }$/;"	f	class:agg::distance_interpolator2
dx	include/agg_renderer_outline_aa.h	/^        int dx()       const { return m_dx;       }$/;"	f	class:agg::distance_interpolator3
dx	include/agg_renderer_outline_aa.h	/^        int dx()   const { return m_dx;   }$/;"	f	class:agg::distance_interpolator1
dx	include/agg_renderer_outline_image.h	/^        int dx()       const { return m_dx;       }$/;"	f	class:agg::distance_interpolator4
dx_end	include/agg_renderer_outline_aa.h	/^        int dx_end()   const { return m_dx_end;   }$/;"	f	class:agg::distance_interpolator3
dx_end	include/agg_renderer_outline_aa.h	/^        int dx_end()   const { return m_dx_start; }$/;"	f	class:agg::distance_interpolator2
dx_end	include/agg_renderer_outline_image.h	/^        int dx_end()   const { return m_dx_end;   }$/;"	f	class:agg::distance_interpolator4
dx_pict	include/agg_renderer_outline_image.h	/^        int dx_pict()  const { return m_dx_pict;  }$/;"	f	class:agg::distance_interpolator4
dx_start	include/agg_renderer_outline_aa.h	/^        int dx_start() const { return m_dx_start; }$/;"	f	class:agg::distance_interpolator2
dx_start	include/agg_renderer_outline_aa.h	/^        int dx_start() const { return m_dx_start; }$/;"	f	class:agg::distance_interpolator3
dx_start	include/agg_renderer_outline_image.h	/^        int dx_start() const { return m_dx_start; }$/;"	f	class:agg::distance_interpolator4
dy	examples/gouraud_mesh.cpp	/^        double dx,dy;$/;"	m	struct:agg::mesh_point	file:
dy	include/agg_dda_line.h	/^        int dy() const { return m_dy; }$/;"	f	class:agg::dda_line_interpolator
dy	include/agg_ellipse_bresenham.h	/^        int dy() const { return m_dy; }$/;"	f	class:agg::ellipse_bresenham_interpolator
dy	include/agg_glyph_raster_bin.h	/^            double dx, dy;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
dy	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
dy	include/agg_renderer_outline_aa.h	/^        int dy()       const { return m_dy;       }$/;"	f	class:agg::distance_interpolator2
dy	include/agg_renderer_outline_aa.h	/^        int dy()       const { return m_dy;       }$/;"	f	class:agg::distance_interpolator3
dy	include/agg_renderer_outline_aa.h	/^        int dy()   const { return m_dy;   }$/;"	f	class:agg::distance_interpolator1
dy	include/agg_renderer_outline_image.h	/^        int dy()       const { return m_dy;       }$/;"	f	class:agg::distance_interpolator4
dy_end	include/agg_renderer_outline_aa.h	/^        int dy_end()   const { return m_dy_end;   }$/;"	f	class:agg::distance_interpolator3
dy_end	include/agg_renderer_outline_aa.h	/^        int dy_end()   const { return m_dy_start; }$/;"	f	class:agg::distance_interpolator2
dy_end	include/agg_renderer_outline_image.h	/^        int dy_end()   const { return m_dy_end;   }$/;"	f	class:agg::distance_interpolator4
dy_pict	include/agg_renderer_outline_image.h	/^        int dy_pict()  const { return m_dy_pict;  }$/;"	f	class:agg::distance_interpolator4
dy_start	include/agg_renderer_outline_aa.h	/^        int dy_start() const { return m_dy_start; }$/;"	f	class:agg::distance_interpolator2
dy_start	include/agg_renderer_outline_aa.h	/^        int dy_start() const { return m_dy_start; }$/;"	f	class:agg::distance_interpolator3
dy_start	include/agg_renderer_outline_image.h	/^        int dy_start() const { return m_dy_start; }$/;"	f	class:agg::distance_interpolator4
edge	examples/gouraud_mesh.cpp	/^              mesh_edge& edge(unsigned i)       { return m_edges[i]; }$/;"	f	class:agg::mesh_ctrl
edge	examples/gouraud_mesh.cpp	/^        const mesh_edge& edge(unsigned i) const { return m_edges[i]; }$/;"	f	class:agg::mesh_ctrl
edge	examples/graph_test.cpp	/^        edge() {}$/;"	f	struct:graph::edge
edge	examples/graph_test.cpp	/^        edge(int n1, int n2) : node1(n1), node2(n2) {}$/;"	f	struct:graph::edge
edge	examples/graph_test.cpp	/^    struct edge$/;"	s	class:graph	file:
edge	gpc/gpc.c	/^  edge_node          *edge;         \/* Pointer to AET edge               *\/$/;"	m	struct:st_shape	file:
edge	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::edge(int x1, int y1, int x2, int y2)$/;"	f	class:agg::rasterizer_compound_aa
edge	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::edge(int x1, int y1, int x2, int y2)$/;"	f	class:agg::rasterizer_scanline_aa
edge_d	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::edge_d(double x1, double y1, $/;"	f	class:agg::rasterizer_compound_aa
edge_d	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::edge_d(double x1, double y1, $/;"	f	class:agg::rasterizer_scanline_aa
edge_node	gpc/gpc.c	/^} edge_node;$/;"	t	typeref:struct:edge_shape	file:
edge_shape	gpc/gpc.c	/^typedef struct edge_shape$/;"	s	file:
elapsed_time	src/platform/AmigaOS/agg_platform_support.cpp	/^	double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
elapsed_time	src/platform/BeOS/agg_platform_support.cpp	/^    double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
elapsed_time	src/platform/X11/agg_platform_support.cpp	/^    double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
elapsed_time	src/platform/mac/agg_platform_support.cpp	/^    double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
elapsed_time	src/platform/sdl/agg_platform_support.cpp	/^    double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
elapsed_time	src/platform/win32/agg_platform_support.cpp	/^    double platform_support::elapsed_time() const$/;"	f	class:agg::platform_support
ellipse	include/agg_ellipse.h	/^        ellipse() : $/;"	f	class:agg::ellipse
ellipse	include/agg_ellipse.h	/^        ellipse(double x, double y, double rx, double ry, $/;"	f	class:agg::ellipse
ellipse	include/agg_ellipse.h	/^    class ellipse$/;"	c	namespace:agg
ellipse	include/agg_renderer_primitives.h	/^        void ellipse(int x, int y, int rx, int ry)$/;"	f	class:agg::renderer_primitives
ellipse_bresenham_interpolator	include/agg_ellipse_bresenham.h	/^        ellipse_bresenham_interpolator(int rx, int ry) :$/;"	f	class:agg::ellipse_bresenham_interpolator
ellipse_bresenham_interpolator	include/agg_ellipse_bresenham.h	/^    class ellipse_bresenham_interpolator$/;"	c	namespace:agg
embedded_scanline	include/agg_scanline_storage_aa.h	/^            embedded_scanline() : m_ptr(0), m_y(0), m_num_spans(0) {}$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
embedded_scanline	include/agg_scanline_storage_aa.h	/^            embedded_scanline(const scanline_storage_aa& storage) :$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
embedded_scanline	include/agg_scanline_storage_aa.h	/^        class embedded_scanline$/;"	c	class:agg::scanline_storage_aa
embedded_scanline	include/agg_scanline_storage_aa.h	/^        class embedded_scanline$/;"	c	class:agg::serialized_scanlines_adaptor_aa
embedded_scanline	include/agg_scanline_storage_bin.h	/^            embedded_scanline() : m_ptr(0), m_y(0), m_num_spans(0) {}$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
embedded_scanline	include/agg_scanline_storage_bin.h	/^            embedded_scanline(const scanline_storage_bin& storage) :$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
embedded_scanline	include/agg_scanline_storage_bin.h	/^        class embedded_scanline$/;"	c	class:agg::scanline_storage_bin
embedded_scanline	include/agg_scanline_storage_bin.h	/^        class embedded_scanline$/;"	c	class:agg::serialized_scanlines_adaptor_bin
end	include/agg_gamma_functions.h	/^        double end() const { return m_end; }$/;"	f	class:agg::gamma_linear
end	include/agg_gamma_functions.h	/^        void end(double e) { m_end = e; }$/;"	f	class:agg::gamma_linear
end_contour	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::end_contour(unsigned orientation)$/;"	f	class:agg::conv_gpc
end_element	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::end_element(void* data, const char* el)$/;"	f	class:agg::svg::parser
end_of_atom_colors	examples/mol_view.cpp	/^    end_of_atom_colors$/;"	e	enum:atom_color_e	file:
end_of_comp_op_e	include/agg_pixfmt_rgba.h	/^        end_of_comp_op_e$/;"	e	enum:agg::comp_op_e
end_of_key_codes	include/platform/agg_platform_support.h	/^        end_of_key_codes$/;"	e	enum:agg::key_code_e
end_of_markers	include/agg_renderer_markers.h	/^        end_of_markers$/;"	e	enum:agg::marker_e
end_of_pix_formats	include/platform/agg_platform_support.h	/^        end_of_pix_formats$/;"	e	enum:agg::pix_format_e
end_path	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::end_path()$/;"	f	class:agg::svg::path_renderer
end_poly	include/agg_path_storage.h	/^    inline void path_base<VC>::end_poly(unsigned flags)$/;"	f	class:agg::path_base
end_poly	include/agg_vcgen_bspline.h	/^            end_poly,$/;"	e	enum:agg::vcgen_bspline::status_e
end_poly	include/agg_vcgen_contour.h	/^            end_poly,$/;"	e	enum:agg::vcgen_contour::status_e
end_poly	include/agg_vcgen_smooth_poly1.h	/^            end_poly,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
end_poly1	include/agg_vcgen_stroke.h	/^            end_poly1,$/;"	e	enum:agg::vcgen_stroke::status_e
end_poly2	include/agg_vcgen_stroke.h	/^            end_poly2,$/;"	e	enum:agg::vcgen_stroke::status_e
epsilon	include/agg_image_filters.h	/^        double epsilon;$/;"	m	class:agg::image_filter_kaiser
even_odd	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::even_odd(bool flag)$/;"	f	class:agg::svg::path_renderer
even_odd_flag	examples/svg_viewer/agg_svg_path_renderer.h	/^        bool         even_odd_flag;$/;"	m	struct:agg::svg::path_attributes
exception	examples/svg_viewer/agg_svg_exception.h	/^        exception() : m_msg(0) {}$/;"	f	class:agg::svg::exception
exception	examples/svg_viewer/agg_svg_exception.h	/^        exception(const char* fmt, ...) :$/;"	f	class:agg::svg::exception
exception	examples/svg_viewer/agg_svg_exception.h	/^        exception(const exception& exc) :$/;"	f	class:agg::svg::exception
exception	examples/svg_viewer/agg_svg_exception.h	/^    class exception$/;"	c	namespace:agg::svg
expand	examples/svg_viewer/agg_svg_path_renderer.h	/^        void expand(double value)$/;"	f	class:agg::svg::path_renderer
extra_span	include/agg_scanline_storage_aa.h	/^        struct extra_span$/;"	s	class:agg::scanline_cell_storage
extrapolation_left	src/agg_bspline.cpp	/^    double bspline::extrapolation_left(double x) const$/;"	f	class:agg::bspline
extrapolation_right	src/agg_bspline.cpp	/^    double bspline::extrapolation_right(double x) const$/;"	f	class:agg::bspline
f	examples/graph_test.cpp	/^    int f;$/;"	m	struct:line	file:
fAGG	src/platform/BeOS/agg_platform_support.cpp	/^    agg::platform_support*  fAGG;$/;"	m	class:AGGView	file:
fAGG	src/platform/BeOS/agg_platform_support.cpp	/^    agg::platform_support*  fAGG;$/;"	m	class:agg::platform_specific	file:
fApp	src/platform/BeOS/agg_platform_support.cpp	/^    AGGApplication*     fApp;$/;"	m	class:agg::platform_specific	file:
fAppPath	src/platform/BeOS/agg_platform_support.cpp	/^    char                fAppPath[B_PATH_NAME_LENGTH];$/;"	m	class:agg::platform_specific	file:
fBitmap	src/platform/BeOS/agg_platform_support.cpp	/^    BBitmap*                fBitmap;$/;"	m	class:AGGView	file:
fEnableTicks	src/platform/BeOS/agg_platform_support.cpp	/^    bool                    fEnableTicks;$/;"	m	class:AGGView	file:
fFilePath	src/platform/BeOS/agg_platform_support.cpp	/^    char                fFilePath[B_PATH_NAME_LENGTH];$/;"	m	class:agg::platform_specific	file:
fFlipY	src/platform/BeOS/agg_platform_support.cpp	/^    bool                    fFlipY;$/;"	m	class:AGGView	file:
fFlipY	src/platform/BeOS/agg_platform_support.cpp	/^    bool                fFlipY;$/;"	m	class:agg::platform_specific	file:
fFormat	src/platform/BeOS/agg_platform_support.cpp	/^    agg::pix_format_e       fFormat;$/;"	m	class:AGGView	file:
fFormat	src/platform/BeOS/agg_platform_support.cpp	/^    agg::pix_format_e    fFormat;$/;"	m	class:agg::platform_specific	file:
fImages	src/platform/BeOS/agg_platform_support.cpp	/^    BBitmap*            fImages[agg::platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
fLastKeyDown	src/platform/BeOS/agg_platform_support.cpp	/^    uint8                   fLastKeyDown;$/;"	m	class:AGGView	file:
fLastPulse	src/platform/BeOS/agg_platform_support.cpp	/^    bigtime_t               fLastPulse;$/;"	m	class:AGGView	file:
fMouseButtons	src/platform/BeOS/agg_platform_support.cpp	/^    uint32                  fMouseButtons;$/;"	m	class:AGGView	file:
fMouseX	src/platform/BeOS/agg_platform_support.cpp	/^    int32                   fMouseX;$/;"	m	class:AGGView	file:
fMouseY	src/platform/BeOS/agg_platform_support.cpp	/^    int32                   fMouseY;$/;"	m	class:AGGView	file:
fPulse	src/platform/BeOS/agg_platform_support.cpp	/^    BMessageRunner*         fPulse;$/;"	m	class:AGGView	file:
fRedraw	src/platform/BeOS/agg_platform_support.cpp	/^    bool                    fRedraw;$/;"	m	class:AGGView	file:
fTimerStart	src/platform/BeOS/agg_platform_support.cpp	/^    bigtime_t           fTimerStart;$/;"	m	class:agg::platform_specific	file:
fView	src/platform/BeOS/agg_platform_support.cpp	/^    AGGView*        fView;$/;"	m	class:AGGWindow	file:
fWindow	src/platform/BeOS/agg_platform_support.cpp	/^    AGGWindow*      fWindow;$/;"	m	class:AGGApplication	file:
fast_sqrt	include/agg_math.h	/^    AGG_INLINE unsigned fast_sqrt(unsigned val)$/;"	f	namespace:agg
fill	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::fill(const rgba8& f)$/;"	f	class:agg::svg::path_renderer
fill_color	examples/idea.cpp	/^    agg::rgba8 fill_color;$/;"	m	struct:path_attributes	file:
fill_color	examples/svg_viewer/agg_svg_path_renderer.h	/^        rgba8        fill_color;$/;"	m	struct:agg::svg::path_attributes
fill_color	include/agg_renderer_primitives.h	/^        const color_type& fill_color() const { return m_fill_color; }$/;"	f	class:agg::renderer_primitives
fill_color	include/agg_renderer_primitives.h	/^        void fill_color(const color_type& c) { m_fill_color = c; }$/;"	f	class:agg::renderer_primitives
fill_color_array	examples/aa_test.cpp	/^void fill_color_array(ColorArrayT& array, $/;"	f
fill_color_array	examples/alpha_gradient.cpp	/^    static void fill_color_array(ColorArrayT& array, $/;"	f	class:the_application
fill_even_odd	include/agg_basics.h	/^        fill_even_odd$/;"	e	enum:agg::filling_rule_e
fill_flag	examples/svg_viewer/agg_svg_path_renderer.h	/^        bool         fill_flag;$/;"	m	struct:agg::svg::path_attributes
fill_hspan	include/agg_alpha_mask_u8.h	/^        void fill_hspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::alpha_mask_u8
fill_hspan	include/agg_alpha_mask_u8.h	/^        void fill_hspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::amask_no_clip_u8
fill_non_zero	include/agg_basics.h	/^        fill_non_zero,$/;"	e	enum:agg::filling_rule_e
fill_none	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::fill_none()$/;"	f	class:agg::svg::path_renderer
fill_opacity	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::fill_opacity(double op)$/;"	f	class:agg::svg::path_renderer
fill_vspan	include/agg_alpha_mask_u8.h	/^        void fill_vspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::alpha_mask_u8
fill_vspan	include/agg_alpha_mask_u8.h	/^        void fill_vspan(int x, int y, cover_type* dst, int num_pix) const$/;"	f	class:agg::amask_no_clip_u8
filling_rule	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::filling_rule(filling_rule_e filling_rule) $/;"	f	class:agg::rasterizer_compound_aa
filling_rule	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::filling_rule(filling_rule_e filling_rule) $/;"	f	class:agg::rasterizer_scanline_aa
filling_rule_e	include/agg_basics.h	/^    enum filling_rule_e$/;"	g	namespace:agg
filter	include/agg_renderer_outline_image.h	/^        const filter_type& filter() const { return *m_filter; }$/;"	f	class:agg::line_image_pattern
filter	include/agg_span_image_filter.h	/^        const  image_filter_lut& filter() const { return *m_filter; }$/;"	f	class:agg::span_image_filter
filter	include/agg_span_image_filter.h	/^        void filter(const image_filter_lut& v)   { m_filter = &v; }$/;"	f	class:agg::span_image_filter
filter_base	examples/image_fltr_graph.cpp	/^struct filter_base$/;"	s	file:
filter_dx_dbl	include/agg_span_image_filter.h	/^        double filter_dx_dbl()            const { return m_dx_dbl; }$/;"	f	class:agg::span_image_filter
filter_dx_int	include/agg_span_image_filter.h	/^        int    filter_dx_int()            const { return m_dx_int; }$/;"	f	class:agg::span_image_filter
filter_dy_dbl	include/agg_span_image_filter.h	/^        double filter_dy_dbl()            const { return m_dy_dbl; }$/;"	f	class:agg::span_image_filter
filter_dy_int	include/agg_span_image_filter.h	/^        int    filter_dy_int()            const { return m_dy_int; }$/;"	f	class:agg::span_image_filter
filter_offset	include/agg_span_image_filter.h	/^        void filter_offset(double d) { filter_offset(d, d); }$/;"	f	class:agg::span_image_filter
filter_offset	include/agg_span_image_filter.h	/^        void filter_offset(double dx, double dy)$/;"	f	class:agg::span_image_filter
filter_type	include/agg_renderer_outline_image.h	/^        typedef Filter filter_type;$/;"	t	class:agg::line_image_pattern
filter_type	include/agg_renderer_outline_image.h	/^        typedef Filter filter_type;$/;"	t	class:agg::line_image_pattern_pow2
finalize	include/agg_rasterizer_cells_aa.h	/^        void finalize(int) {}$/;"	f	class:agg::scanline_hit_test
finalize	include/agg_scanline_bin.h	/^        void finalize(int y) $/;"	f	class:agg::scanline32_bin
finalize	include/agg_scanline_bin.h	/^        void finalize(int y) $/;"	f	class:agg::scanline_bin
finalize	include/agg_scanline_p.h	/^        void finalize(int y) $/;"	f	class:agg::scanline32_p8
finalize	include/agg_scanline_p.h	/^        void finalize(int y) $/;"	f	class:agg::scanline_p8
finalize	include/agg_scanline_u.h	/^        void finalize(int span_y)$/;"	f	class:agg::scanline32_u8_am
finalize	include/agg_scanline_u.h	/^        void finalize(int span_y)$/;"	f	class:agg::scanline_u8_am
finalize	include/agg_scanline_u.h	/^        void finalize(int y) $/;"	f	class:agg::scanline32_u8
finalize	include/agg_scanline_u.h	/^        void finalize(int y) $/;"	f	class:agg::scanline_u8
finalize_path	src/agg_trans_double_path.cpp	/^    double trans_double_path::finalize_path(vertex_storage& vertices)$/;"	f	class:agg::trans_double_path
finalize_path	src/agg_trans_single_path.cpp	/^    void trans_single_path::finalize_path()$/;"	f	class:agg::trans_single_path
finalize_paths	src/agg_trans_double_path.cpp	/^    void trans_double_path::finalize_paths()$/;"	f	class:agg::trans_double_path
find_face	font_freetype/agg_font_freetype.cpp	/^    int font_engine_freetype_base::find_face(const char* face_name) const$/;"	f	class:agg::font_engine_freetype_base
find_font	font_win32_tt/agg_font_win32_tt.cpp	/^    int font_engine_win32_tt_base::find_font(const char* name) const$/;"	f	class:agg::font_engine_win32_tt_base
find_font	include/agg_font_cache_manager.h	/^        int find_font(const char* font_signature)$/;"	f	class:agg::font_cache_pool
find_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache* find_glyph(unsigned glyph_code) const$/;"	f	class:agg::font_cache
find_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache* find_glyph(unsigned glyph_code) const$/;"	f	class:agg::font_cache_pool
find_point	examples/bezier_div.cpp	/^    bool find_point(const Path& path, double dist, unsigned* i, unsigned* j)$/;"	f	class:the_application
first_bound	gpc/gpc.c	/^  edge_node          *first_bound;  \/* Pointer to bound list             *\/$/;"	m	struct:lmt_shape	file:
first_clip_box	include/agg_renderer_mclip.h	/^        void first_clip_box() $/;"	f	class:agg::renderer_mclip
fix_degenerate_bisectrix_end	include/agg_line_aa_basics.h	/^    void inline fix_degenerate_bisectrix_end(const line_parameters& lp, $/;"	f	namespace:agg
fix_degenerate_bisectrix_start	include/agg_line_aa_basics.h	/^    void inline fix_degenerate_bisectrix_start(const line_parameters& lp, $/;"	f	namespace:agg
flags	include/agg_rasterizer_outline_aa.h	/^            unsigned flags;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
flip	examples/truetype_test.cpp	/^enum flip_y_e { flip = true };$/;"	e	enum:flip_y_e	file:
flip	include/agg_gsv_text.h	/^        void flip(bool flip_y) { m_flip = flip_y; }$/;"	f	class:agg::gsv_text
flip_x	include/agg_path_storage.h	/^    void path_base<VC>::flip_x(double x1, double x2)$/;"	f	class:agg::path_base
flip_x	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::flip_x()$/;"	f	class:agg::trans_affine
flip_y	examples/aa_demo.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/aa_test.cpp	/^enum flip_y_e { flip_y = false };$/;"	e	enum:flip_y_e	file:
flip_y	examples/alpha_gradient.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/alpha_mask.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/alpha_mask2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/alpha_mask3.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/bezier_div.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/blend_color.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/blur.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/bspline.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/circles.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/component_rendering.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/compositing.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/compositing2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/conv_contour.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/conv_dash_marker.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/conv_stroke.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/distortions.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/flash_rasterizer.cpp	/^enum { flip_y = false };$/;"	e	enum:__anon13	file:
flip_y	examples/flash_rasterizer2.cpp	/^enum { flip_y = false };$/;"	e	enum:__anon14	file:
flip_y	examples/freetype_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gamma_correction.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gamma_ctrl.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gamma_tuner.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gouraud.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gouraud_mesh.cpp	/^enum { flip_y = true };$/;"	e	enum:__anon17	file:
flip_y	examples/gpc_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/gradient_focal.cpp	/^enum { flip_y = true };$/;"	e	enum:__anon16	file:
flip_y	examples/gradients.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/graph_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/idea.cpp	/^enum flip_y_e { flip_y = false };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image1.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_alpha.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_filters.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_filters2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_fltr_graph.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_resample.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/image_transforms.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/line_patterns.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/line_patterns_clip.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/lion.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/lion_lens.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/lion_outline.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/mol_view.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/multi_clip.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/pattern_fill.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/pattern_perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/pattern_resample.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/polymorphic_renderer.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/raster_text.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/rasterizer_compound.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/rasterizers.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/rasterizers2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/rounded_rect.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/scanline_boolean.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/scanline_boolean2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/simple_blur.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/svg_viewer/svg_test.cpp	/^enum { flip_y = false };$/;"	e	enum:__anon15	file:
flip_y	examples/trans_curve1.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/trans_curve1_ft.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/trans_curve2.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/trans_curve2_ft.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	examples/trans_polar.cpp	/^enum flip_y_e { flip_y = true };$/;"	e	enum:flip_y_e	file:
flip_y	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::flip_y(bool f)$/;"	f	class:agg::font_engine_freetype_base
flip_y	font_freetype/agg_font_freetype.h	/^        bool        flip_y()       const { return m_flip_y;     }$/;"	f	class:agg::font_engine_freetype_base
flip_y	font_win32_tt/agg_font_win32_tt.h	/^        bool        flip_y()       const { return m_flip_y;     }$/;"	f	class:agg::font_engine_win32_tt_base
flip_y	font_win32_tt/agg_font_win32_tt.h	/^        void flip_y(bool flip)        { m_flip_y = flip;         }$/;"	f	class:agg::font_engine_win32_tt_base
flip_y	include/agg_path_storage.h	/^    void path_base<VC>::flip_y(double y1, double y2)$/;"	f	class:agg::path_base
flip_y	include/platform/agg_platform_support.h	/^        bool flip_y() const { return m_flip_y; }$/;"	f	class:agg::platform_support
flip_y	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::flip_y()$/;"	f	class:agg::trans_affine
flip_y_e	examples/aa_demo.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/aa_test.cpp	/^enum flip_y_e { flip_y = false };$/;"	g	file:
flip_y_e	examples/alpha_gradient.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/alpha_mask.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/alpha_mask2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/alpha_mask3.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/bezier_div.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/blend_color.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/blur.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/bspline.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/circles.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/component_rendering.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/compositing.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/compositing2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/conv_contour.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/conv_dash_marker.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/conv_stroke.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/distortions.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/freetype_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gamma_correction.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gamma_ctrl.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gamma_tuner.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gouraud.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gpc_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/gradients.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/graph_test.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/idea.cpp	/^enum flip_y_e { flip_y = false };$/;"	g	file:
flip_y_e	examples/image1.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_alpha.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_filters.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_filters2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_fltr_graph.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_resample.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/image_transforms.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/line_patterns.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/line_patterns_clip.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/lion.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/lion_lens.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/lion_outline.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/mol_view.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/multi_clip.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/pattern_fill.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/pattern_perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/pattern_resample.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/perspective.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/polymorphic_renderer.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/raster_text.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/rasterizer_compound.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/rasterizers.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/rasterizers2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/rounded_rect.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/scanline_boolean.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/scanline_boolean2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/simple_blur.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/trans_curve1.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/trans_curve1_ft.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/trans_curve2.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/trans_curve2_ft.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/trans_polar.cpp	/^enum flip_y_e { flip_y = true };$/;"	g	file:
flip_y_e	examples/truetype_test.cpp	/^enum flip_y_e { flip = true };$/;"	g	file:
focus_x	include/agg_span_gradient.h	/^        double focus_x() const { return double(m_fx) \/ gradient_subpixel_scale; }$/;"	f	class:agg::gradient_radial_focus
focus_y	include/agg_span_gradient.h	/^        double focus_y() const { return double(m_fy) \/ gradient_subpixel_scale; }$/;"	f	class:agg::gradient_radial_focus
font	include/agg_font_cache_manager.h	/^        const font_cache* font() const$/;"	f	class:agg::font_cache_pool
font	include/agg_font_cache_manager.h	/^        void font(const char* font_signature, bool reset_cache = false)$/;"	f	class:agg::font_cache_pool
font	include/agg_glyph_raster_bin.h	/^        const int8u* font() const { return m_font; }$/;"	f	class:agg::glyph_raster_bin
font	include/agg_glyph_raster_bin.h	/^        void font(const int8u* f) { m_font = f; }$/;"	f	class:agg::glyph_raster_bin
font	src/agg_gsv_text.cpp	/^    void gsv_text::font(const void* font)$/;"	f	class:agg::gsv_text
font_cache	include/agg_font_cache_manager.h	/^        font_cache() : $/;"	f	class:agg::font_cache
font_cache	include/agg_font_cache_manager.h	/^    class font_cache$/;"	c	namespace:agg
font_cache_manager	include/agg_font_cache_manager.h	/^        font_cache_manager(font_engine_type& engine, unsigned max_fonts=32) :$/;"	f	class:agg::font_cache_manager
font_cache_manager	include/agg_font_cache_manager.h	/^    template<class FontEngine> class font_cache_manager$/;"	c	namespace:agg
font_cache_pool	include/agg_font_cache_manager.h	/^        font_cache_pool(unsigned max_fonts=32) : $/;"	f	class:agg::font_cache_pool
font_cache_pool	include/agg_font_cache_manager.h	/^    class font_cache_pool$/;"	c	namespace:agg
font_engine_freetype_base	font_freetype/agg_font_freetype.cpp	/^    font_engine_freetype_base::font_engine_freetype_base(bool flag32, $/;"	f	class:agg::font_engine_freetype_base
font_engine_freetype_base	font_freetype/agg_font_freetype.h	/^    class font_engine_freetype_base$/;"	c	namespace:agg
font_engine_freetype_int16	font_freetype/agg_font_freetype.h	/^        font_engine_freetype_int16(unsigned max_faces = 32) : $/;"	f	class:agg::font_engine_freetype_int16
font_engine_freetype_int16	font_freetype/agg_font_freetype.h	/^    class font_engine_freetype_int16 : public font_engine_freetype_base$/;"	c	namespace:agg
font_engine_freetype_int32	font_freetype/agg_font_freetype.h	/^        font_engine_freetype_int32(unsigned max_faces = 32) : $/;"	f	class:agg::font_engine_freetype_int32
font_engine_freetype_int32	font_freetype/agg_font_freetype.h	/^    class font_engine_freetype_int32 : public font_engine_freetype_base$/;"	c	namespace:agg
font_engine_type	examples/freetype_test.cpp	/^    typedef agg::font_engine_freetype_int32 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	examples/trans_curve1.cpp	/^    typedef agg::font_engine_win32_tt_int16 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	examples/trans_curve1_ft.cpp	/^    typedef agg::font_engine_freetype_int16 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	examples/trans_curve2.cpp	/^    typedef agg::font_engine_win32_tt_int16 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	examples/trans_curve2_ft.cpp	/^    typedef agg::font_engine_freetype_int16 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	examples/truetype_test.cpp	/^    typedef agg::font_engine_win32_tt_int32 font_engine_type;$/;"	t	class:the_application	file:
font_engine_type	include/agg_font_cache_manager.h	/^        typedef FontEngine font_engine_type;$/;"	t	class:agg::font_cache_manager
font_engine_win32_tt_base	font_win32_tt/agg_font_win32_tt.cpp	/^    font_engine_win32_tt_base::font_engine_win32_tt_base(bool flag32, $/;"	f	class:agg::font_engine_win32_tt_base
font_engine_win32_tt_base	font_win32_tt/agg_font_win32_tt.h	/^    class font_engine_win32_tt_base$/;"	c	namespace:agg
font_engine_win32_tt_int16	font_win32_tt/agg_font_win32_tt.h	/^        font_engine_win32_tt_int16(HDC dc, unsigned max_fonts = 32) : $/;"	f	class:agg::font_engine_win32_tt_int16
font_engine_win32_tt_int16	font_win32_tt/agg_font_win32_tt.h	/^    class font_engine_win32_tt_int16 : public font_engine_win32_tt_base$/;"	c	namespace:agg
font_engine_win32_tt_int32	font_win32_tt/agg_font_win32_tt.h	/^        font_engine_win32_tt_int32(HDC dc, unsigned max_fonts = 32) : $/;"	f	class:agg::font_engine_win32_tt_int32
font_engine_win32_tt_int32	font_win32_tt/agg_font_win32_tt.h	/^    class font_engine_win32_tt_int32 : public font_engine_win32_tt_base$/;"	c	namespace:agg
font_flip_y	examples/freetype_test.cpp	/^bool font_flip_y = !flip_y;$/;"	v
font_is	include/agg_font_cache_manager.h	/^        bool font_is(const char* font_signature) const$/;"	f	class:agg::font_cache
font_manager_type	examples/freetype_test.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_manager_type	examples/trans_curve1.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_manager_type	examples/trans_curve1_ft.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_manager_type	examples/trans_curve2.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_manager_type	examples/trans_curve2_ft.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_manager_type	examples/truetype_test.cpp	/^    typedef agg::font_cache_manager<font_engine_type> font_manager_type;$/;"	t	class:the_application	file:
font_signature	font_freetype/agg_font_freetype.h	/^        const char*     font_signature() const { return m_signature;    }$/;"	f	class:agg::font_engine_freetype_base
font_signature	font_win32_tt/agg_font_win32_tt.h	/^        const char*     font_signature() const { return m_signature;    }$/;"	f	class:agg::font_engine_win32_tt_base
for_each_pixel	include/agg_pixfmt_gray.h	/^        template<class Function> void for_each_pixel(Function f)$/;"	f	class:agg::pixfmt_alpha_blend_gray
for_each_pixel	include/agg_pixfmt_rgb.h	/^        template<class Function> void for_each_pixel(Function f)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
for_each_pixel	include/agg_pixfmt_rgba.h	/^        template<class Function> void for_each_pixel(Function f)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
for_each_pixel	include/agg_pixfmt_rgba.h	/^        template<class Function> void for_each_pixel(Function f)$/;"	f	class:agg::pixfmt_custom_blend_rgba
force_comp_op_link	examples/compositing.cpp	/^void force_comp_op_link()$/;"	f
force_comp_op_link	examples/compositing2.cpp	/^void force_comp_op_link()$/;"	f
force_redraw	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::force_redraw()$/;"	f	class:agg::platform_support
force_redraw	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::force_redraw()$/;"	f	class:agg::platform_support
force_redraw	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::force_redraw()$/;"	f	class:agg::platform_support
force_redraw	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::force_redraw()$/;"	f	class:agg::platform_support
force_redraw	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::force_redraw()$/;"	f	class:agg::platform_support
force_redraw	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::force_redraw()$/;"	f	class:agg::platform_support
format	include/platform/agg_platform_support.h	/^        pix_format_e format() const { return m_format; }$/;"	f	class:agg::platform_support
four_rays	include/agg_renderer_markers.h	/^        void four_rays(int x, int y, int r)$/;"	f	class:agg::renderer_markers
frand	examples/aa_test.cpp	/^inline double frand(double x)$/;"	f
free_all	include/agg_array.h	/^        void free_all()   { free_tail(0); }$/;"	f	class:agg::pod_bvector
free_all	include/agg_path_storage.h	/^        void free_all()   { m_vertices.clear(); }$/;"	f	class:agg::vertex_stl_storage
free_all	include/agg_path_storage.h	/^        void free_all()   { m_vertices.free_all();   m_iterator = 0; }$/;"	f	class:agg::path_base
free_all	include/agg_path_storage.h	/^    void vertex_block_storage<T,S,P>::free_all()$/;"	f	class:agg::vertex_block_storage
free_gpc_data	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::free_gpc_data()$/;"	f	class:agg::conv_gpc
free_polygon	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::free_polygon(gpc_polygon& p)$/;"	f	class:agg::conv_gpc
free_result	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::free_result()$/;"	f	class:agg::conv_gpc
free_sbtree	gpc/gpc.c	/^static void free_sbtree(sb_tree **sbtree)$/;"	f	file:
free_tail	include/agg_array.h	/^    void pod_bvector<T, S>::free_tail(unsigned size)$/;"	f	class:agg::pod_bvector
from_affine	include/agg_trans_perspective.h	/^    trans_perspective::from_affine(const trans_affine& a)$/;"	f	class:agg::trans_perspective
from_pix	include/agg_blur.h	/^        AGG_INLINE void from_pix(const ColorT& c)$/;"	f	struct:agg::recursive_blur_calc_gray
from_pix	include/agg_blur.h	/^        AGG_INLINE void from_pix(const ColorT& c)$/;"	f	struct:agg::recursive_blur_calc_rgb
from_pix	include/agg_blur.h	/^        AGG_INLINE void from_pix(const ColorT& c)$/;"	f	struct:agg::recursive_blur_calc_rgba
from_wavelength	include/agg_color_rgba.h	/^        static self_type from_wavelength(double wl, double gamma = 1.0)$/;"	f	struct:agg::rgba16
from_wavelength	include/agg_color_rgba.h	/^        static self_type from_wavelength(double wl, double gamma = 1.0)$/;"	f	struct:agg::rgba8
from_wavelength	include/agg_color_rgba.h	/^    inline rgba rgba::from_wavelength(double wl, double gamma)$/;"	f	class:agg::rgba
full_circle	examples/trans_polar.cpp	/^        void full_circle(double v) { m_base_angle = 2.0 * pi \/ v; }$/;"	f	class:agg::trans_polar
full_file_name	src/platform/AmigaOS/agg_platform_support.cpp	/^	const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
full_file_name	src/platform/BeOS/agg_platform_support.cpp	/^    const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
full_file_name	src/platform/X11/agg_platform_support.cpp	/^    const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
full_file_name	src/platform/mac/agg_platform_support.cpp	/^    const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
full_file_name	src/platform/sdl/agg_platform_support.cpp	/^    const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
full_file_name	src/platform/win32/agg_platform_support.cpp	/^    const char* platform_support::full_file_name(const char* file_name)$/;"	f	class:agg::platform_support
fx_to_dbl	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline double fx_to_dbl(const FIXED& p)$/;"	f	namespace:agg
fx_to_int26p6	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline int fx_to_int26p6(const FIXED& p)$/;"	f	namespace:agg
fx_to_plain_int	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline int fx_to_plain_int(const FIXED& fx)$/;"	f	namespace:agg
g	examples/svg_viewer/agg_svg_parser.cpp	/^        int8u r, g, b, a;$/;"	m	struct:agg::svg::named_color	file:
g	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::recursive_blur_calc_rgba
g	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::stack_blur_calc_rgba
g	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::recursive_blur_calc_rgb
g	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::stack_blur_calc_rgb
g	include/agg_color_rgba.h	/^        double g;$/;"	m	struct:agg::rgba
g	include/agg_color_rgba.h	/^        value_type g;$/;"	m	struct:agg::rgba16
g	include/agg_color_rgba.h	/^        value_type g;$/;"	m	struct:agg::rgba8
g	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> r, g, b, a;$/;"	m	struct:agg::color_interpolator
g_alpha_mask_rbuf	examples/alpha_mask.cpp	/^agg::rendering_buffer g_alpha_mask_rbuf;$/;"	v
g_angle	examples/alpha_mask.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/alpha_mask2.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/idea.cpp	/^static double g_angle = 0.0;$/;"	v	file:
g_angle	examples/lion.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/lion_lens.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/lion_outline.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/multi_clip.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/perspective.cpp	/^double            g_angle = 0;$/;"	v
g_angle	examples/simple_blur.cpp	/^double            g_angle = 0;$/;"	v
g_attr	examples/idea.cpp	/^static path_attributes g_attr[3];$/;"	v	file:
g_base_dx	examples/alpha_mask.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/alpha_mask2.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/lion.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/lion_lens.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/lion_outline.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/multi_clip.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/perspective.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dx	examples/simple_blur.cpp	/^double            g_base_dx = 0;$/;"	v
g_base_dy	examples/alpha_mask.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/alpha_mask2.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/lion.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/lion_lens.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/lion_outline.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/multi_clip.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/perspective.cpp	/^double            g_base_dy = 0;$/;"	v
g_base_dy	examples/simple_blur.cpp	/^double            g_base_dy = 0;$/;"	v
g_colors	examples/alpha_mask.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/alpha_mask2.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/lion.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/lion_lens.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/lion_outline.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/multi_clip.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/perspective.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_colors	examples/simple_blur.cpp	/^agg::rgba8        g_colors[100];$/;"	v
g_comp_op_func	include/agg_pixfmt_rgba.h	/^        static comp_op_func_type g_comp_op_func[];$/;"	m	struct:agg::comp_op_table_rgba
g_comp_op_func	include/agg_pixfmt_rgba.h	/^    comp_op_table_rgba<ColorT, Order>::g_comp_op_func[] = $/;"	m	class:agg::comp_op_table_rgba
g_elder_bit_table	src/agg_sqrt_tables.cpp	/^    int8 g_elder_bit_table[256] =          \/\/---------g_elder_bit_table$/;"	m	namespace:agg	file:
g_gradient_colors	examples/blend_color.cpp	/^static agg::int8u g_gradient_colors[] = $/;"	v	file:
g_gradient_colors	examples/distortions.cpp	/^static agg::int8u g_gradient_colors[] = $/;"	v	file:
g_image	examples/image_filters2.cpp	/^static agg::int8u g_image[] = $/;"	v	file:
g_lion	examples/parse_lion.cpp	/^static char g_lion[] = $/;"	v	file:
g_nclick	examples/alpha_mask.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/alpha_mask2.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/lion.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/lion_lens.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/lion_outline.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/multi_clip.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/perspective.cpp	/^int               g_nclick = 0;$/;"	v
g_nclick	examples/simple_blur.cpp	/^int               g_nclick = 0;$/;"	v
g_npaths	examples/alpha_mask.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/alpha_mask2.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/idea.cpp	/^static unsigned g_npaths = 0;$/;"	v	file:
g_npaths	examples/lion.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/lion_lens.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/lion_outline.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/multi_clip.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/perspective.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_npaths	examples/simple_blur.cpp	/^unsigned          g_npaths = 0;$/;"	v
g_path	examples/alpha_mask.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/alpha_mask2.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/idea.cpp	/^static agg::path_storage g_path;$/;"	v	file:
g_path	examples/lion.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/lion_lens.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/lion_outline.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/multi_clip.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/perspective.cpp	/^agg::path_storage g_path;$/;"	v
g_path	examples/simple_blur.cpp	/^agg::path_storage g_path;$/;"	v
g_path_idx	examples/alpha_mask.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/alpha_mask2.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/lion.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/lion_lens.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/lion_outline.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/multi_clip.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/perspective.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_path_idx	examples/simple_blur.cpp	/^unsigned          g_path_idx[100];$/;"	v
g_pflag	examples/idea.cpp	/^static agg::filling_rule_e g_pflag = agg::fill_non_zero;$/;"	v	file:
g_poly_beam1	examples/idea.cpp	/^static double g_poly_beam1[] = $/;"	v	file:
g_poly_beam2	examples/idea.cpp	/^static double g_poly_beam2[] = $/;"	v	file:
g_poly_beam3	examples/idea.cpp	/^static double g_poly_beam3[] = $/;"	v	file:
g_poly_beam4	examples/idea.cpp	/^static double g_poly_beam4[] = $/;"	v	file:
g_poly_bulb	examples/idea.cpp	/^static double g_poly_bulb[] = $/;"	v	file:
g_poly_fig1	examples/idea.cpp	/^static double g_poly_fig1[] = $/;"	v	file:
g_poly_fig2	examples/idea.cpp	/^static double g_poly_fig2[] = $/;"	v	file:
g_poly_fig3	examples/idea.cpp	/^static double g_poly_fig3[] = $/;"	v	file:
g_poly_fig4	examples/idea.cpp	/^static double g_poly_fig4[] = $/;"	v	file:
g_poly_fig5	examples/idea.cpp	/^static double g_poly_fig5[] = $/;"	v	file:
g_poly_fig6	examples/idea.cpp	/^static double g_poly_fig6[] = $/;"	v	file:
g_rasterizer	examples/alpha_mask.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/alpha_mask2.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/idea.cpp	/^static agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v	file:
g_rasterizer	examples/image_perspective.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/image_resample.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/lion.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/lion_lens.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/lion_outline.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/multi_clip.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/pattern_perspective.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/pattern_resample.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_rasterizer	examples/perspective.cpp	/^agg::rasterizer_scanline_aa<> g_rasterizer;$/;"	v
g_scale	examples/alpha_mask.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/alpha_mask2.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/lion.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/lion_lens.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/lion_outline.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/multi_clip.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/perspective.cpp	/^double            g_scale = 1.0;$/;"	v
g_scale	examples/simple_blur.cpp	/^double            g_scale = 1.0;$/;"	v
g_scanline	examples/alpha_mask2.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/idea.cpp	/^static agg::scanline_p8              g_scanline;$/;"	v	file:
g_scanline	examples/image_perspective.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/image_resample.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/lion.cpp	/^agg::scanline_p8  g_scanline;$/;"	v
g_scanline	examples/lion_lens.cpp	/^agg::scanline_p8  g_scanline;$/;"	v
g_scanline	examples/lion_outline.cpp	/^agg::scanline_p8  g_scanline;$/;"	v
g_scanline	examples/multi_clip.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/pattern_perspective.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/pattern_resample.cpp	/^agg::scanline_u8  g_scanline;$/;"	v
g_scanline	examples/perspective.cpp	/^agg::scanline_p8  g_scanline;$/;"	v
g_skew_x	examples/alpha_mask.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/alpha_mask2.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/lion.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/lion_lens.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/lion_outline.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/multi_clip.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/perspective.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_x	examples/simple_blur.cpp	/^double            g_skew_x = 0;$/;"	v
g_skew_y	examples/alpha_mask.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/alpha_mask2.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/lion.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/lion_lens.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/lion_outline.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/multi_clip.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/perspective.cpp	/^double            g_skew_y = 0;$/;"	v
g_skew_y	examples/simple_blur.cpp	/^double            g_skew_y = 0;$/;"	v
g_sqrt_table	src/agg_sqrt_tables.cpp	/^    int16u g_sqrt_table[1024] =                       \/\/----------g_sqrt_table$/;"	m	namespace:agg	file:
g_stack_blur8_mul	include/agg_blur.h	/^        static int16u const g_stack_blur8_mul[255];$/;"	m	struct:agg::stack_blur_tables
g_stack_blur8_mul	include/agg_blur.h	/^    int16u const stack_blur_tables<T>::g_stack_blur8_mul[255] = $/;"	m	class:agg::stack_blur_tables
g_stack_blur8_shr	include/agg_blur.h	/^        static int8u  const g_stack_blur8_shr[255];$/;"	m	struct:agg::stack_blur_tables
g_stack_blur8_shr	include/agg_blur.h	/^    int8u const stack_blur_tables<T>::g_stack_blur8_shr[255] = $/;"	m	class:agg::stack_blur_tables
g_windows_cmd_show	src/platform/win32/agg_platform_support.cpp	/^    int       g_windows_cmd_show = 0;$/;"	m	namespace:agg	file:
g_windows_instance	src/platform/win32/agg_platform_support.cpp	/^    HINSTANCE g_windows_instance = 0;$/;"	m	namespace:agg	file:
g_x1	examples/alpha_mask.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/alpha_mask2.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/image_perspective.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/image_resample.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/lion.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/lion_lens.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/lion_outline.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/multi_clip.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/pattern_perspective.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/pattern_resample.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/perspective.cpp	/^double            g_x1 = 0;$/;"	v
g_x1	examples/simple_blur.cpp	/^double            g_x1 = 0;$/;"	v
g_x2	examples/alpha_mask.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/alpha_mask2.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/image_perspective.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/image_resample.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/lion.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/lion_lens.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/lion_outline.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/multi_clip.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/pattern_perspective.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/pattern_resample.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/perspective.cpp	/^double            g_x2 = 0;$/;"	v
g_x2	examples/simple_blur.cpp	/^double            g_x2 = 0;$/;"	v
g_y1	examples/alpha_mask.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/alpha_mask2.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/image_perspective.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/image_resample.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/lion.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/lion_lens.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/lion_outline.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/multi_clip.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/pattern_perspective.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/pattern_resample.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/perspective.cpp	/^double            g_y1 = 0;$/;"	v
g_y1	examples/simple_blur.cpp	/^double            g_y1 = 0;$/;"	v
g_y2	examples/alpha_mask.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/alpha_mask2.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/image_perspective.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/image_resample.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/lion.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/lion_lens.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/lion_outline.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/multi_clip.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/pattern_perspective.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/pattern_resample.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/perspective.cpp	/^double            g_y2 = 0;$/;"	v
g_y2	examples/simple_blur.cpp	/^double            g_y2 = 0;$/;"	v
gamma	font_freetype/agg_font_freetype.h	/^        template<class GammaF> void gamma(const GammaF& f)$/;"	f	class:agg::font_engine_freetype_base
gamma	font_win32_tt/agg_font_win32_tt.h	/^        template<class GammaF> void gamma(const GammaF& f)$/;"	f	class:agg::font_engine_win32_tt_base
gamma	include/agg_gamma_functions.h	/^        double gamma() const { return m_gamma; }$/;"	f	class:agg::gamma_power
gamma	include/agg_gamma_functions.h	/^        void gamma(double g) { m_gamma = g; }$/;"	f	class:agg::gamma_power
gamma	include/agg_gamma_lut.h	/^        double gamma() const$/;"	f	class:agg::gamma_lut
gamma	include/agg_gamma_lut.h	/^        void gamma(double g) $/;"	f	class:agg::gamma_lut
gamma	include/agg_pixfmt_rgb.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_rgb_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_bgrAAA_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_bgrABB_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_rgb555_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_rgb565_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_rgbAAA_gamma
gamma	include/agg_pixfmt_rgb_packed.h	/^        void gamma(const gamma_type& g) { m_gamma = &g; }$/;"	f	class:agg::blender_rgbBBA_gamma
gamma	include/agg_rasterizer_scanline_aa.h	/^        template<class GammaF> void gamma(const GammaF& gamma_function)$/;"	f	class:agg::rasterizer_scanline_aa
gamma	include/agg_renderer_outline_aa.h	/^        template<class GammaF> void gamma(const GammaF& gamma_function)$/;"	f	class:agg::line_profile_aa
gamma	include/ctrl/agg_gamma_ctrl.h	/^        const unsigned char* gamma() const { return m_gamma_spline.gamma(); }$/;"	f	class:agg::gamma_ctrl_impl
gamma	include/ctrl/agg_gamma_spline.h	/^        const unsigned char* gamma() const { return m_gamma; }$/;"	f	class:agg::gamma_spline
gamma_ctrl	include/ctrl/agg_gamma_ctrl.h	/^        gamma_ctrl(double x1, double y1, double x2, double y2, bool flip_y=false) :$/;"	f	class:agg::gamma_ctrl
gamma_ctrl	include/ctrl/agg_gamma_ctrl.h	/^    template<class ColorT> class gamma_ctrl : public gamma_ctrl_impl$/;"	c	namespace:agg
gamma_ctrl_impl	include/ctrl/agg_gamma_ctrl.h	/^    class gamma_ctrl_impl : public ctrl$/;"	c	namespace:agg
gamma_ctrl_impl	src/ctrl/agg_gamma_ctrl.cpp	/^    gamma_ctrl_impl::gamma_ctrl_impl(double x1, double y1, double x2, double y2, bool flip_y) :$/;"	f	class:agg::gamma_ctrl_impl
gamma_linear	include/agg_gamma_functions.h	/^        gamma_linear() : m_start(0.0), m_end(1.0) {}$/;"	f	class:agg::gamma_linear
gamma_linear	include/agg_gamma_functions.h	/^        gamma_linear(double s, double e) : m_start(s), m_end(e) {}$/;"	f	class:agg::gamma_linear
gamma_linear	include/agg_gamma_functions.h	/^    class gamma_linear$/;"	c	namespace:agg
gamma_lut	include/agg_gamma_lut.h	/^             unsigned HiResShift=8> class gamma_lut$/;"	c	namespace:agg
gamma_lut	include/agg_gamma_lut.h	/^        gamma_lut() : $/;"	f	class:agg::gamma_lut
gamma_lut	include/agg_gamma_lut.h	/^        gamma_lut(double g) :$/;"	f	class:agg::gamma_lut
gamma_lut_type	examples/aa_test.cpp	/^typedef agg::gamma_lut<agg::int8u, agg::int8u, 8, 8>        gamma_lut_type;$/;"	t	file:
gamma_lut_type	examples/gradient_focal.cpp	/^    typedef agg::gamma_lut<agg::int8u, agg::int8u> gamma_lut_type;$/;"	t	class:the_application	file:
gamma_mask	include/agg_gamma_lut.h	/^            gamma_mask  = gamma_size - 1$/;"	e	enum:agg::gamma_lut::gamma_scale_e
gamma_multiply	include/agg_gamma_functions.h	/^        gamma_multiply() : m_mul(1.0) {}$/;"	f	class:agg::gamma_multiply
gamma_multiply	include/agg_gamma_functions.h	/^        gamma_multiply(double v) : m_mul(v) {}$/;"	f	class:agg::gamma_multiply
gamma_multiply	include/agg_gamma_functions.h	/^    class gamma_multiply$/;"	c	namespace:agg
gamma_none	include/agg_gamma_functions.h	/^    struct gamma_none$/;"	s	namespace:agg
gamma_power	include/agg_gamma_functions.h	/^        gamma_power() : m_gamma(1.0) {}$/;"	f	class:agg::gamma_power
gamma_power	include/agg_gamma_functions.h	/^        gamma_power(double g) : m_gamma(g) {}$/;"	f	class:agg::gamma_power
gamma_power	include/agg_gamma_functions.h	/^    class gamma_power$/;"	c	namespace:agg
gamma_scale_e	include/agg_gamma_lut.h	/^        enum gamma_scale_e$/;"	g	class:agg::gamma_lut
gamma_shift	include/agg_gamma_lut.h	/^            gamma_shift = GammaShift,$/;"	e	enum:agg::gamma_lut::gamma_scale_e
gamma_size	include/agg_gamma_lut.h	/^            gamma_size  = 1 << gamma_shift,$/;"	e	enum:agg::gamma_lut::gamma_scale_e
gamma_spline	include/ctrl/agg_gamma_spline.h	/^    class gamma_spline$/;"	c	namespace:agg
gamma_spline	src/ctrl/agg_gamma_spline.cpp	/^    gamma_spline::gamma_spline() : $/;"	f	class:agg::gamma_spline
gamma_threshold	include/agg_gamma_functions.h	/^        gamma_threshold() : m_threshold(0.5) {}$/;"	f	class:agg::gamma_threshold
gamma_threshold	include/agg_gamma_functions.h	/^        gamma_threshold(double t) : m_threshold(t) {}$/;"	f	class:agg::gamma_threshold
gamma_threshold	include/agg_gamma_functions.h	/^    class gamma_threshold$/;"	c	namespace:agg
gamma_type	examples/truetype_test.cpp	/^    typedef agg::gamma_lut<agg::int8u, agg::int16u, 8, 16> gamma_type;$/;"	t	class:the_application	file:
gamma_type	include/agg_pixfmt_rgb.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_rgb_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_bgrAAA_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_bgrABB_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_rgb555_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_rgb565_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_rgbAAA_gamma
gamma_type	include/agg_pixfmt_rgb_packed.h	/^        typedef Gamma gamma_type;$/;"	t	class:agg::blender_rgbBBA_gamma
generate	examples/circles.cpp	/^    void generate()$/;"	f	class:the_application
generate	examples/gouraud_mesh.cpp	/^    void mesh_ctrl::generate(unsigned cols, unsigned rows, $/;"	f	class:agg::mesh_ctrl
generate	examples/image_alpha.cpp	/^        void generate(color_type* span, int x, int y, unsigned len) const$/;"	f	class:agg::span_conv_brightness_alpha_rgb8
generate	examples/simple_blur.cpp	/^        void generate(color_type* span, int x, int y, int len)$/;"	f	class:agg::span_simple_blur_rgb24
generate	include/agg_conv_adaptor_vcgen.h	/^            generate$/;"	e	enum:agg::conv_adaptor_vcgen::status
generate	include/agg_span_converter.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_converter
generate	include/agg_span_gouraud_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_gouraud_gray
generate	include/agg_span_gouraud_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_gouraud_rgba
generate	include/agg_span_gradient.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_gradient
generate	include/agg_span_gradient_alpha.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_gradient_alpha
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_gray
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_gray_2x2
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_gray_bilinear
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_gray_bilinear_clip
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_gray_nn
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_gray
generate	include/agg_span_image_filter_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_gray_affine
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgb
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgb_2x2
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgb_bilinear
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgb_bilinear_clip
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgb_nn
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_rgb
generate	include/agg_span_image_filter_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_rgb_affine
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgba
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgba_2x2
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgba_bilinear
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgba_bilinear_clip
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_filter_rgba_nn
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_rgba
generate	include/agg_span_image_filter_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_image_resample_rgba_affine
generate	include/agg_span_pattern_gray.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_pattern_gray
generate	include/agg_span_pattern_rgb.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_pattern_rgb
generate	include/agg_span_pattern_rgba.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_pattern_rgba
generate	include/agg_span_solid.h	/^        void generate(color_type* span, int x, int y, unsigned len)$/;"	f	class:agg::span_solid
generate_alpha_mask	examples/alpha_mask.cpp	/^    void generate_alpha_mask(int cx, int cy)$/;"	f	class:the_application
generate_alpha_mask	examples/alpha_mask2.cpp	/^    void generate_alpha_mask(int cx, int cy)$/;"	f	class:the_application
generate_alpha_mask	examples/alpha_mask3.cpp	/^    template<class VertexSource> void generate_alpha_mask(VertexSource& vs)$/;"	f	class:the_application
generate_circles	examples/scanline_boolean.cpp	/^void generate_circles(agg::path_storage& ps, $/;"	f
generate_color_ramp	examples/compositing2.cpp	/^void generate_color_ramp(Container& c, $/;"	f
generate_pattern	examples/pattern_fill.cpp	/^    void generate_pattern()$/;"	f	class:the_application
generate_span	examples/flash_rasterizer.cpp	/^        void generate_span(rgba8* span, int x, int y, unsigned len, unsigned style)$/;"	f	class:agg::test_styles
generate_span	examples/gouraud_mesh.cpp	/^        void generate_span(rgba8* span, int x, int y, unsigned len, unsigned style)$/;"	f	class:agg::styles_gouraud
generate_span	examples/rasterizer_compound.cpp	/^    void generate_span(agg::rgba8* span, int x, int y, unsigned len, unsigned style)$/;"	f	class:style_handler
generator	include/agg_conv_adaptor_vcgen.h	/^        Generator& generator() { return m_generator; }$/;"	f	class:agg::conv_adaptor_vcgen
generator	include/agg_conv_adaptor_vcgen.h	/^        const Generator& generator() const { return m_generator; }$/;"	f	class:agg::conv_adaptor_vcgen
get	src/agg_bspline.cpp	/^    double bspline::get(double x) const$/;"	f	class:agg::bspline
get_close_flag	include/agg_basics.h	/^    inline unsigned get_close_flag(unsigned c)$/;"	f	namespace:agg
get_dbl	examples/mol_view.cpp	/^double molecule::get_dbl(const char* buf, int pos, int len)$/;"	f	class:molecule
get_edge	examples/graph_test.cpp	/^	edge get_edge(int idx) const$/;"	f	class:graph
get_gamma_spline	include/ctrl/agg_gamma_ctrl.h	/^        const gamma_spline& get_gamma_spline() const { return m_gamma_spline; }$/;"	f	class:agg::gamma_ctrl_impl
get_int	examples/mol_view.cpp	/^int molecule::get_int(const char* buf, int pos, int len)$/;"	f	class:molecule
get_key_flags	src/platform/mac/agg_platform_support.cpp	/^    static unsigned get_key_flags(UInt32 wflags)$/;"	f	namespace:agg
get_key_flags	src/platform/win32/agg_platform_support.cpp	/^    static unsigned get_key_flags(int wflags)$/;"	f	namespace:agg
get_node	examples/graph_test.cpp	/^	node get_node(int idx, double w, double h) const$/;"	f	class:graph
get_num_edges	examples/graph_test.cpp	/^    int get_num_edges() const { return m_num_edges; } $/;"	f	class:graph
get_num_nodes	examples/graph_test.cpp	/^    int get_num_nodes() const { return m_num_nodes; } $/;"	f	class:graph
get_orientation	include/agg_basics.h	/^    inline unsigned get_orientation(unsigned c)$/;"	f	namespace:agg
get_stateful	src/agg_bspline.cpp	/^    double bspline::get_stateful(double x) const$/;"	f	class:agg::bspline
get_str	examples/mol_view.cpp	/^char* molecule::get_str(char* dst, const char* buf, int pos, int len)$/;"	f	class:molecule
global_offset	examples/image_resample.cpp	/^int global_offset = 0;$/;"	v
global_offset	examples/pattern_resample.cpp	/^int global_offset = 0;$/;"	v
glyph	include/agg_font_cache_manager.h	/^        const glyph_cache* glyph(unsigned glyph_code)$/;"	f	class:agg::font_cache_manager
glyph	include/agg_gsv_text.h	/^            glyph$/;"	e	enum:agg::gsv_text::status
glyph_cache	include/agg_font_cache_manager.h	/^    struct glyph_cache$/;"	s	namespace:agg
glyph_data_gray8	include/agg_font_cache_manager.h	/^        glyph_data_gray8   = 2,$/;"	e	enum:agg::glyph_data_type
glyph_data_invalid	include/agg_font_cache_manager.h	/^        glyph_data_invalid = 0,$/;"	e	enum:agg::glyph_data_type
glyph_data_mono	include/agg_font_cache_manager.h	/^        glyph_data_mono    = 1,$/;"	e	enum:agg::glyph_data_type
glyph_data_outline	include/agg_font_cache_manager.h	/^        glyph_data_outline = 3$/;"	e	enum:agg::glyph_data_type
glyph_data_type	include/agg_font_cache_manager.h	/^    enum glyph_data_type$/;"	g	namespace:agg
glyph_gen	examples/raster_text.cpp	/^    typedef agg::glyph_raster_bin<agg::rgba8> glyph_gen;$/;"	t	class:the_application	file:
glyph_gen_type	include/agg_renderer_raster_text.h	/^        typedef GlyphGenerator glyph_gen_type;$/;"	t	class:agg::renderer_raster_htext
glyph_gen_type	include/agg_renderer_raster_text.h	/^        typedef GlyphGenerator glyph_gen_type;$/;"	t	class:agg::renderer_raster_htext_solid
glyph_gen_type	include/agg_renderer_raster_text.h	/^        typedef GlyphGenerator glyph_gen_type;$/;"	t	class:agg::renderer_raster_vtext_solid
glyph_index	font_freetype/agg_font_freetype.h	/^        unsigned        glyph_index() const { return m_glyph_index; }$/;"	f	class:agg::font_engine_freetype_base
glyph_index	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        glyph_index() const { return m_glyph_index; }$/;"	f	class:agg::font_engine_win32_tt_base
glyph_index	include/agg_font_cache_manager.h	/^        unsigned        glyph_index;$/;"	m	struct:agg::glyph_cache
glyph_raster_bin	include/agg_glyph_raster_bin.h	/^        glyph_raster_bin(const int8u* font) :$/;"	f	class:agg::glyph_raster_bin
glyph_raster_bin	include/agg_glyph_raster_bin.h	/^    template<class ColorT> class glyph_raster_bin$/;"	c	namespace:agg
glyph_rect	include/agg_glyph_raster_bin.h	/^        struct glyph_rect$/;"	s	class:agg::glyph_raster_bin
glyph_rect	include/agg_renderer_raster_text.h	/^        typedef typename glyph_gen_type::glyph_rect glyph_rect;$/;"	t	class:agg::renderer_raster_htext
glyph_rect	include/agg_renderer_raster_text.h	/^        typedef typename glyph_gen_type::glyph_rect glyph_rect;$/;"	t	class:agg::renderer_raster_htext_solid
glyph_rect	include/agg_renderer_raster_text.h	/^        typedef typename glyph_gen_type::glyph_rect glyph_rect;$/;"	t	class:agg::renderer_raster_vtext_solid
glyph_ren_agg_gray8	include/agg_font_cache_manager.h	/^        glyph_ren_agg_gray8$/;"	e	enum:agg::glyph_rendering
glyph_ren_agg_mono	include/agg_font_cache_manager.h	/^        glyph_ren_agg_mono,$/;"	e	enum:agg::glyph_rendering
glyph_ren_native_gray8	include/agg_font_cache_manager.h	/^        glyph_ren_native_gray8,$/;"	e	enum:agg::glyph_rendering
glyph_ren_native_mono	include/agg_font_cache_manager.h	/^        glyph_ren_native_mono,$/;"	e	enum:agg::glyph_rendering
glyph_ren_outline	include/agg_font_cache_manager.h	/^        glyph_ren_outline,$/;"	e	enum:agg::glyph_rendering
glyph_rendering	include/agg_font_cache_manager.h	/^    enum glyph_rendering$/;"	g	namespace:agg
gouraud_type	examples/gouraud_mesh.cpp	/^        typedef span_gouraud_rgba<rgba8> gouraud_type;$/;"	t	class:agg::styles_gouraud	file:
gpc_a_minus_b	include/agg_conv_gpc.h	/^        gpc_a_minus_b,$/;"	e	enum:agg::gpc_op_e
gpc_add_contour	gpc/gpc.c	/^void gpc_add_contour(gpc_polygon *p, gpc_vertex_list *new_contour, int hole)$/;"	f
gpc_and	include/agg_conv_gpc.h	/^        gpc_and,$/;"	e	enum:agg::gpc_op_e
gpc_b_minus_a	include/agg_conv_gpc.h	/^        gpc_b_minus_a$/;"	e	enum:agg::gpc_op_e
gpc_free_polygon	gpc/gpc.c	/^void gpc_free_polygon(gpc_polygon *p)$/;"	f
gpc_free_tristrip	gpc/gpc.c	/^void gpc_free_tristrip(gpc_tristrip *t)$/;"	f
gpc_op	gpc/gpc.h	/^} gpc_op;$/;"	t	typeref:enum:__anon4
gpc_op_e	include/agg_conv_gpc.h	/^    enum gpc_op_e$/;"	g	namespace:agg
gpc_or	include/agg_conv_gpc.h	/^        gpc_or,$/;"	e	enum:agg::gpc_op_e
gpc_polygon	gpc/gpc.h	/^} gpc_polygon;$/;"	t	typeref:struct:__anon7
gpc_polygon_clip	gpc/gpc.c	/^void gpc_polygon_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,$/;"	f
gpc_polygon_to_tristrip	gpc/gpc.c	/^void gpc_polygon_to_tristrip(gpc_polygon *s, gpc_tristrip *t)$/;"	f
gpc_read_polygon	gpc/gpc.c	/^void gpc_read_polygon(FILE *fp, int read_hole_flags, gpc_polygon *p)$/;"	f
gpc_tristrip	gpc/gpc.h	/^} gpc_tristrip;$/;"	t	typeref:struct:__anon8
gpc_tristrip_clip	gpc/gpc.c	/^void gpc_tristrip_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,$/;"	f
gpc_vertex	gpc/gpc.h	/^} gpc_vertex;$/;"	t	typeref:struct:__anon5
gpc_vertex_list	gpc/gpc.h	/^} gpc_vertex_list;$/;"	t	typeref:struct:__anon6
gpc_write_polygon	gpc/gpc.c	/^void gpc_write_polygon(FILE *fp, int write_hole_flags, gpc_polygon *p)$/;"	f
gpc_xor	include/agg_conv_gpc.h	/^        gpc_xor,$/;"	e	enum:agg::gpc_op_e
gradient	include/agg_color_gray.h	/^        self_type gradient(self_type c, double k) const$/;"	f	struct:agg::gray16
gradient	include/agg_color_gray.h	/^        self_type gradient(self_type c, double k) const$/;"	f	struct:agg::gray8
gradient	include/agg_color_rgba.h	/^        AGG_INLINE self_type gradient(const self_type& c, double k) const$/;"	f	struct:agg::rgba16
gradient	include/agg_color_rgba.h	/^        AGG_INLINE self_type gradient(const self_type& c, double k) const$/;"	f	struct:agg::rgba8
gradient	include/agg_color_rgba.h	/^        rgba gradient(rgba c, double k) const$/;"	f	struct:agg::rgba
gradient_adaptor_type	examples/gradient_focal.cpp	/^    typedef agg::gradient_reflect_adaptor<gradient_func_type> gradient_adaptor_type;$/;"	t	class:the_application	file:
gradient_affine	examples/compositing.cpp	/^agg::trans_affine gradient_affine(double x1, double y1, double x2, double y2, $/;"	f
gradient_alpha_one_munus_x_u8	include/agg_span_gradient_alpha.h	/^    struct gradient_alpha_one_munus_x_u8$/;"	s	namespace:agg
gradient_alpha_x	include/agg_span_gradient_alpha.h	/^    template<class ColorT> struct gradient_alpha_x$/;"	s	namespace:agg
gradient_alpha_x_u8	include/agg_span_gradient_alpha.h	/^    struct gradient_alpha_x_u8$/;"	s	namespace:agg
gradient_circle	include/agg_span_gradient.h	/^    class gradient_circle$/;"	c	namespace:agg
gradient_conic	include/agg_span_gradient.h	/^    class gradient_conic$/;"	c	namespace:agg
gradient_diamond	include/agg_span_gradient.h	/^    class gradient_diamond$/;"	c	namespace:agg
gradient_func_type	examples/gradient_focal.cpp	/^    typedef agg::gradient_radial_focus gradient_func_type;$/;"	t	class:the_application	file:
gradient_function	examples/graph_test.cpp	/^typedef agg::gradient_radial_d gradient_function;$/;"	t	file:
gradient_function	include/agg_span_gradient.h	/^        const GradientF& gradient_function() const { return *m_gradient_function; }$/;"	f	class:agg::span_gradient
gradient_function	include/agg_span_gradient.h	/^        void gradient_function(const GradientF& gf) { m_gradient_function = &gf; }$/;"	f	class:agg::span_gradient
gradient_function	include/agg_span_gradient_alpha.h	/^        const GradientF& gradient_function() const { return *m_gradient_function; }$/;"	f	class:agg::span_gradient_alpha
gradient_function	include/agg_span_gradient_alpha.h	/^        void gradient_function(const GradientF& gf) { m_gradient_function = &gf; }$/;"	f	class:agg::span_gradient_alpha
gradient_linear_color	examples/alpha_mask2.cpp	/^        gradient_linear_color() {}$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/alpha_mask2.cpp	/^        gradient_linear_color(const color_type& c1, const color_type& c2) :$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/alpha_mask2.cpp	/^    template<> struct gradient_linear_color<gray8>$/;"	s	namespace:agg	file:
gradient_linear_color	examples/alpha_mask2.cpp	/^    template<> struct gradient_linear_color<rgba8>$/;"	s	namespace:agg	file:
gradient_linear_color	examples/compositing.cpp	/^        gradient_linear_color() {}$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/compositing.cpp	/^        gradient_linear_color(const color_type& c1, const color_type& c2) :$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/compositing.cpp	/^    template<> struct gradient_linear_color<color>$/;"	s	namespace:agg	file:
gradient_linear_color	examples/multi_clip.cpp	/^        gradient_linear_color() {}$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/multi_clip.cpp	/^        gradient_linear_color(const color_type& c1, const color_type& c2) :$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	examples/multi_clip.cpp	/^    template<> struct gradient_linear_color<gray8>$/;"	s	namespace:agg	file:
gradient_linear_color	examples/multi_clip.cpp	/^    template<> struct gradient_linear_color<rgba8>$/;"	s	namespace:agg	file:
gradient_linear_color	include/agg_span_gradient.h	/^        gradient_linear_color() {}$/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	include/agg_span_gradient.h	/^        gradient_linear_color(const color_type& c1, const color_type& c2, $/;"	f	struct:agg::gradient_linear_color
gradient_linear_color	include/agg_span_gradient.h	/^    struct gradient_linear_color$/;"	s	namespace:agg
gradient_lut	include/agg_gradient_lut.h	/^             unsigned ColorLutSize=256> class gradient_lut$/;"	c	namespace:agg
gradient_lut	include/agg_gradient_lut.h	/^        gradient_lut() : m_color_lut(color_lut_size) {}$/;"	f	class:agg::gradient_lut
gradient_polymorphic_wrapper	examples/gradients.cpp	/^    gradient_polymorphic_wrapper() : m_adaptor(m_gradient) {}$/;"	f	class:gradient_polymorphic_wrapper
gradient_polymorphic_wrapper	examples/gradients.cpp	/^class gradient_polymorphic_wrapper : public gradient_polymorphic_wrapper_base$/;"	c	file:
gradient_polymorphic_wrapper_base	examples/gradients.cpp	/^class gradient_polymorphic_wrapper_base$/;"	c	file:
gradient_radial	include/agg_span_gradient.h	/^    class gradient_radial$/;"	c	namespace:agg
gradient_radial_d	include/agg_span_gradient.h	/^    class gradient_radial_d$/;"	c	namespace:agg
gradient_radial_focus	include/agg_span_gradient.h	/^        gradient_radial_focus() : $/;"	f	class:agg::gradient_radial_focus
gradient_radial_focus	include/agg_span_gradient.h	/^        gradient_radial_focus(double r, double fx, double fy) : $/;"	f	class:agg::gradient_radial_focus
gradient_radial_focus	include/agg_span_gradient.h	/^    class gradient_radial_focus$/;"	c	namespace:agg
gradient_reflect_adaptor	include/agg_span_gradient.h	/^        gradient_reflect_adaptor(const GradientF& gradient) : $/;"	f	class:agg::gradient_reflect_adaptor
gradient_reflect_adaptor	include/agg_span_gradient.h	/^    template<class GradientF> class gradient_reflect_adaptor$/;"	c	namespace:agg
gradient_renderer	examples/graph_test.cpp	/^                                  gradient_span_gen> gradient_renderer;$/;"	t	file:
gradient_repeat_adaptor	include/agg_span_gradient.h	/^        gradient_repeat_adaptor(const GradientF& gradient) : $/;"	f	class:agg::gradient_repeat_adaptor
gradient_repeat_adaptor	include/agg_span_gradient.h	/^    template<class GradientF> class gradient_repeat_adaptor$/;"	c	namespace:agg
gradient_sine_repeat_adaptor	examples/raster_text.cpp	/^    gradient_sine_repeat_adaptor() : m_periods(agg::pi* 2.0) {}$/;"	f	class:gradient_sine_repeat_adaptor
gradient_sine_repeat_adaptor	examples/raster_text.cpp	/^template<class GradientF> class gradient_sine_repeat_adaptor$/;"	c	file:
gradient_span_alloc	examples/graph_test.cpp	/^typedef agg::span_allocator<color_type> gradient_span_alloc;$/;"	t	file:
gradient_span_gen	examples/graph_test.cpp	/^                           color_array_type> gradient_span_gen;$/;"	t	file:
gradient_sqrt_xy	include/agg_span_gradient.h	/^    class gradient_sqrt_xy$/;"	c	namespace:agg
gradient_subpixel_mask	include/agg_span_gradient.h	/^        gradient_subpixel_mask  = gradient_subpixel_scale - 1     \/\/-----gradient_subpixel_mask$/;"	e	enum:agg::gradient_subpixel_scale_e
gradient_subpixel_scale	include/agg_span_gradient.h	/^        gradient_subpixel_scale = 1 << gradient_subpixel_shift,   \/\/-----gradient_subpixel_scale$/;"	e	enum:agg::gradient_subpixel_scale_e
gradient_subpixel_scale_e	include/agg_span_gradient.h	/^    enum gradient_subpixel_scale_e$/;"	g	namespace:agg
gradient_subpixel_shift	include/agg_span_gradient.h	/^        gradient_subpixel_shift = 4,                              \/\/-----gradient_subpixel_shift$/;"	e	enum:agg::gradient_subpixel_scale_e
gradient_x	include/agg_span_gradient.h	/^    class gradient_x$/;"	c	namespace:agg
gradient_xy	include/agg_span_gradient.h	/^    class gradient_xy$/;"	c	namespace:agg
gradient_y	include/agg_span_gradient.h	/^    class gradient_y$/;"	c	namespace:agg
graph	examples/graph_test.cpp	/^    graph(int num_nodes, int num_edges) :$/;"	f	class:graph
graph	examples/graph_test.cpp	/^class graph$/;"	c	file:
gray16	include/agg_color_gray.h	/^        gray16() {}$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(const rgba& c) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(const rgba& c, double a_) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(const rgba8& c) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(const rgba8& c, unsigned a_) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(const self_type& c, unsigned a_) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^        gray16(unsigned v_, unsigned a_=base_mask) :$/;"	f	struct:agg::gray16
gray16	include/agg_color_gray.h	/^    struct gray16$/;"	s	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(const gray16& c, unsigned a)$/;"	f	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(const rgba& c)$/;"	f	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(const rgba& c, double a)$/;"	f	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(const rgba8& c)$/;"	f	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(const rgba8& c, unsigned a)$/;"	f	namespace:agg
gray16_pre	include/agg_color_gray.h	/^    inline gray16 gray16_pre(unsigned v, unsigned a = gray16::base_mask)$/;"	f	namespace:agg
gray8	include/agg_color_gray.h	/^        gray8() {}$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(const rgba& c) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(const rgba& c, double a_) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(const rgba8& c) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(const rgba8& c, unsigned a_) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(const self_type& c, unsigned a_) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^        gray8(unsigned v_, unsigned a_=base_mask) :$/;"	f	struct:agg::gray8
gray8	include/agg_color_gray.h	/^    struct gray8$/;"	s	namespace:agg
gray8_adaptor	include/agg_font_cache_manager.h	/^        gray8_adaptor_type&  gray8_adaptor()  { return m_gray8_adaptor;  }$/;"	f	class:agg::font_cache_manager
gray8_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::gray8_adaptor_type gray8_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int16
gray8_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::gray8_adaptor_type gray8_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int32
gray8_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef serialized_scanlines_adaptor_aa<int8u>    gray8_adaptor_type;$/;"	t	class:agg::font_engine_freetype_base
gray8_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::gray8_adaptor_type gray8_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int16
gray8_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::gray8_adaptor_type gray8_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int32
gray8_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef serialized_scanlines_adaptor_aa<int8u>    gray8_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_base
gray8_adaptor_type	include/agg_font_cache_manager.h	/^        typedef typename font_engine_type::gray8_adaptor_type  gray8_adaptor_type;$/;"	t	class:agg::font_cache_manager
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(const gray8& c, unsigned a)$/;"	f	namespace:agg
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(const rgba& c)$/;"	f	namespace:agg
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(const rgba& c, double a)$/;"	f	namespace:agg
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(const rgba8& c)$/;"	f	namespace:agg
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(const rgba8& c, unsigned a)$/;"	f	namespace:agg
gray8_pre	include/agg_color_gray.h	/^    inline gray8 gray8_pre(unsigned v, unsigned a = gray8::base_mask)$/;"	f	namespace:agg
gray8_scanline	include/agg_font_cache_manager.h	/^        gray8_scanline_type& gray8_scanline() { return m_gray8_scanline; }$/;"	f	class:agg::font_cache_manager
gray8_scanline_type	include/agg_font_cache_manager.h	/^        typedef typename gray8_adaptor_type::embedded_scanline gray8_scanline_type;$/;"	t	class:agg::font_cache_manager
gray_calc	include/agg_span_gouraud_gray.h	/^        struct gray_calc$/;"	s	class:agg::span_gouraud_gray
grid_color	include/ctrl/agg_gamma_ctrl.h	/^        void grid_color(const ColorT& c)         { m_grid_color = c; }$/;"	f	class:agg::gamma_ctrl
grid_width	include/ctrl/agg_gamma_ctrl.h	/^        void grid_width(double t)          { m_grid_width = t; }$/;"	f	class:agg::gamma_ctrl_impl
gse4x6	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse4x6[] = $/;"	m	namespace:agg	file:
gse4x8	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse4x8[] = $/;"	m	namespace:agg	file:
gse5x7	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse5x7[] = $/;"	m	namespace:agg	file:
gse5x9	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse5x9[] = $/;"	m	namespace:agg	file:
gse6x12	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse6x12[] = $/;"	m	namespace:agg	file:
gse6x9	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse6x9[] = $/;"	m	namespace:agg	file:
gse7x11	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse7x11[] = $/;"	m	namespace:agg	file:
gse7x11_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse7x11_bold[] = $/;"	m	namespace:agg	file:
gse7x15	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse7x15[] = $/;"	m	namespace:agg	file:
gse7x15_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse7x15_bold[] = $/;"	m	namespace:agg	file:
gse8x16	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse8x16[] = $/;"	m	namespace:agg	file:
gse8x16_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u gse8x16_bold[] = $/;"	m	namespace:agg	file:
gsv_default_font	src/agg_gsv_text.cpp	/^    int8u gsv_default_font[] = $/;"	m	namespace:agg	file:
gsv_text	include/agg_gsv_text.h	/^    class gsv_text$/;"	c	namespace:agg
gsv_text	src/agg_gsv_text.cpp	/^    gsv_text::gsv_text() :$/;"	f	class:agg::gsv_text
gsv_text_outline	include/agg_gsv_text.h	/^        gsv_text_outline(gsv_text& text, const Transformer& trans) :$/;"	f	class:agg::gsv_text_outline
gsv_text_outline	include/agg_gsv_text.h	/^    template<class Transformer = trans_affine> class gsv_text_outline$/;"	c	namespace:agg
hInst	examples/win32_api/pure_api/pure_api.cpp	/^HINSTANCE hInst;                                \/\/ current instance$/;"	v
h_state	gpc/gpc.c	/^} h_state;$/;"	t	typeref:enum:__anon10	file:
handle_idcmp	src/platform/AmigaOS/agg_platform_support.cpp	/^	void handle_idcmp(Hook* hook, APTR obj, IntuiMessage* msg)$/;"	f	namespace:agg
handle_input	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_specific::handle_input()$/;"	f	class:agg::platform_specific
head	include/agg_arrowhead.h	/^        void head()    { m_head_flag = true; }$/;"	f	class:agg::arrowhead
head	include/agg_arrowhead.h	/^        void head(double d1, double d2, double d3, double d4)$/;"	f	class:agg::arrowhead
height	examples/line_patterns.cpp	/^    unsigned height() const { return m_pf.height(); }$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
height	examples/line_patterns_clip.cpp	/^    unsigned height() const { return m_pf.height(); }$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
height	examples/rasterizers2.cpp	/^        unsigned height() const { return m_pixmap[1]; }$/;"	f	class:agg::pattern_pixmap_argb32
height	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::height(double h)$/;"	f	class:agg::font_engine_freetype_base
height	font_freetype/agg_font_freetype.h	/^        double      height()       const { return double(m_height) \/ 64.0;    }$/;"	f	class:agg::font_engine_freetype_base
height	font_win32_tt/agg_font_win32_tt.h	/^        double      height()       const { return m_height;     }$/;"	f	class:agg::font_engine_win32_tt_base
height	font_win32_tt/agg_font_win32_tt.h	/^        void height(double h)         { m_height = unsigned(h);  }$/;"	f	class:agg::font_engine_win32_tt_base
height	include/agg_glyph_raster_bin.h	/^        double height()    const { return m_font[0]; }$/;"	f	class:agg::glyph_raster_bin
height	include/agg_pixfmt_amask_adaptor.h	/^        unsigned height() const { return m_pixf->height(); }$/;"	f	class:agg::pixfmt_amask_adaptor
height	include/agg_pixfmt_gray.h	/^        AGG_INLINE unsigned height() const { return m_rbuf->height(); }$/;"	f	class:agg::pixfmt_alpha_blend_gray
height	include/agg_pixfmt_rgb.h	/^        AGG_INLINE unsigned height() const { return m_rbuf->height(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
height	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE unsigned height() const { return m_rbuf->height(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
height	include/agg_pixfmt_rgba.h	/^        AGG_INLINE unsigned height() const { return m_rbuf->height(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
height	include/agg_pixfmt_rgba.h	/^        AGG_INLINE unsigned height() const { return m_rbuf->height(); }$/;"	f	class:agg::pixfmt_custom_blend_rgba
height	include/agg_pixfmt_transposer.h	/^        AGG_INLINE unsigned height() const { return m_pixf->width(); }$/;"	f	class:agg::pixfmt_transposer
height	include/agg_renderer_base.h	/^        unsigned height() const { return m_ren->height(); }$/;"	f	class:agg::renderer_base
height	include/agg_renderer_mclip.h	/^        unsigned height() const { return m_ren.height(); }$/;"	f	class:agg::renderer_mclip
height	include/agg_renderer_outline_image.h	/^        double height() const { return m_height; }$/;"	f	class:agg::line_image_scale
height	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned height() const { return m_height; }$/;"	f	class:agg::row_accessor
height	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned height() const { return m_height; }$/;"	f	class:agg::row_ptr_cache
height	include/agg_rendering_buffer_dynarow.h	/^        unsigned height()     const { return m_height; }$/;"	f	class:agg::rendering_buffer_dynarow
height	include/platform/agg_platform_support.h	/^        double   height() const { return m_rbuf_window.height(); }$/;"	f	class:agg::platform_support
height	src/platform/mac/agg_mac_pmap.cpp	/^    unsigned pixel_map::height() const$/;"	f	class:agg::pixel_map
height	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::height() const$/;"	f	class:agg::pixel_map
hermite_to_bezier	include/agg_curves.h	/^    hermite_to_bezier(const curve4_points& cp)$/;"	f	namespace:agg
hermite_to_bezier	include/agg_curves.h	/^    inline curve4_points hermite_to_bezier(double x1, double y1, $/;"	f	namespace:agg
hi_res_mask	include/agg_gamma_lut.h	/^            hi_res_mask  = hi_res_size - 1$/;"	e	enum:agg::gamma_lut::hi_res_scale_e
hi_res_scale_e	include/agg_gamma_lut.h	/^        enum hi_res_scale_e$/;"	g	class:agg::gamma_lut
hi_res_shift	include/agg_gamma_lut.h	/^            hi_res_shift = HiResShift,$/;"	e	enum:agg::gamma_lut::hi_res_scale_e
hi_res_size	include/agg_gamma_lut.h	/^            hi_res_size  = 1 << hi_res_shift,$/;"	e	enum:agg::gamma_lut::hi_res_scale_e
hinting	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::hinting(bool h)$/;"	f	class:agg::font_engine_freetype_base
hinting	font_freetype/agg_font_freetype.h	/^        bool        hinting()      const { return m_hinting;    }$/;"	f	class:agg::font_engine_freetype_base
hinting	font_win32_tt/agg_font_win32_tt.h	/^        bool        hinting()      const { return m_hinting;    }$/;"	f	class:agg::font_engine_win32_tt_base
hinting	font_win32_tt/agg_font_win32_tt.h	/^        void hinting(bool h)          { m_hinting = h;           }$/;"	f	class:agg::font_engine_win32_tt_base
hit	include/agg_rasterizer_cells_aa.h	/^        bool hit() const { return m_hit; }$/;"	f	class:agg::scanline_hit_test
hit_test	examples/flash_rasterizer.cpp	/^        int hit_test(double x, double y, double r)$/;"	f	class:agg::compound_shape
hit_test	examples/flash_rasterizer2.cpp	/^        int hit_test(double x, double y, double r)$/;"	f	class:agg::compound_shape
hit_test	include/agg_basics.h	/^        bool hit_test(T x, T y) const$/;"	f	struct:agg::rect_base
hit_test	include/agg_rasterizer_compound_aa.h	/^    bool rasterizer_compound_aa<Clip>::hit_test(int tx, int ty)$/;"	f	class:agg::rasterizer_compound_aa
hit_test	include/agg_rasterizer_scanline_aa.h	/^    bool rasterizer_scanline_aa<Clip>::hit_test(int tx, int ty)$/;"	f	class:agg::rasterizer_scanline_aa
hline_rel	include/agg_path_storage.h	/^    inline void path_base<VC>::hline_rel(double dx)$/;"	f	class:agg::path_base
hline_to	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::hline_to(double x, bool rel)                   \/\/ H, h$/;"	f	class:agg::svg::path_renderer
hline_to	include/agg_path_storage.h	/^    inline void path_base<VC>::hline_to(double x)$/;"	f	class:agg::path_base
hole	gpc/gpc.c	/^  int                 hole;         \/* Hole \/ external contour flag      *\/$/;"	m	struct:p_shape	file:
hole	gpc/gpc.h	/^  int                *hole;         \/* Hole \/ external contour flags     *\/$/;"	m	struct:__anon7
hole_flag	include/agg_conv_gpc.h	/^            int hole_flag;$/;"	m	struct:agg::conv_gpc::contour_header_type
hstep	include/agg_dda_line.h	/^        void hstep()$/;"	f	class:agg::line_bresenham_interpolator
i0a	include/agg_image_filters.h	/^        double i0a;$/;"	m	class:agg::image_filter_kaiser
idx	include/agg_rasterizer_outline_aa.h	/^            unsigned idx;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
idx1	examples/mol_view.cpp	/^    unsigned idx1;$/;"	m	struct:bond_type	file:
idx2	examples/mol_view.cpp	/^    unsigned idx2;$/;"	m	struct:bond_type	file:
ie	gpc/gpc.c	/^  edge_node          *ie[2];        \/* Intersecting edge (bundle) pair   *\/$/;"	m	struct:it_shape	file:
image_accessor_clip	include/agg_image_accessors.h	/^        explicit image_accessor_clip(const pixfmt_type& pixf, $/;"	f	class:agg::image_accessor_clip
image_accessor_clip	include/agg_image_accessors.h	/^        image_accessor_clip() {}$/;"	f	class:agg::image_accessor_clip
image_accessor_clip	include/agg_image_accessors.h	/^    template<class PixFmt> class image_accessor_clip$/;"	c	namespace:agg
image_accessor_clone	include/agg_image_accessors.h	/^        explicit image_accessor_clone(const pixfmt_type& pixf) : $/;"	f	class:agg::image_accessor_clone
image_accessor_clone	include/agg_image_accessors.h	/^        image_accessor_clone() {}$/;"	f	class:agg::image_accessor_clone
image_accessor_clone	include/agg_image_accessors.h	/^    template<class PixFmt> class image_accessor_clone$/;"	c	namespace:agg
image_accessor_no_clip	include/agg_image_accessors.h	/^        explicit image_accessor_no_clip(const pixfmt_type& pixf) : $/;"	f	class:agg::image_accessor_no_clip
image_accessor_no_clip	include/agg_image_accessors.h	/^        image_accessor_no_clip() {}$/;"	f	class:agg::image_accessor_no_clip
image_accessor_no_clip	include/agg_image_accessors.h	/^    template<class PixFmt> class image_accessor_no_clip$/;"	c	namespace:agg
image_accessor_wrap	include/agg_image_accessors.h	/^        explicit image_accessor_wrap(const pixfmt_type& pixf) : $/;"	f	class:agg::image_accessor_wrap
image_accessor_wrap	include/agg_image_accessors.h	/^        image_accessor_wrap() {}$/;"	f	class:agg::image_accessor_wrap
image_accessor_wrap	include/agg_image_accessors.h	/^    template<class PixFmt, class WrapX, class WrapY> class image_accessor_wrap$/;"	c	namespace:agg
image_filter	include/agg_image_filters.h	/^        image_filter()$/;"	f	class:agg::image_filter
image_filter	include/agg_image_filters.h	/^    template<class FilterF> class image_filter : public image_filter_lut$/;"	c	namespace:agg
image_filter_2x2_type	examples/image_resample.cpp	41;"	d	file:
image_filter_bessel	include/agg_image_filters.h	/^    struct image_filter_bessel$/;"	s	namespace:agg
image_filter_bicubic	include/agg_image_filters.h	/^    class image_filter_bicubic$/;"	c	namespace:agg
image_filter_bilinear	include/agg_image_filters.h	/^    struct image_filter_bilinear$/;"	s	namespace:agg
image_filter_blackman	include/agg_image_filters.h	/^        image_filter_blackman(double r) : m_radius(r < 2.0 ? 2.0 : r) {}$/;"	f	class:agg::image_filter_blackman
image_filter_blackman	include/agg_image_filters.h	/^    class image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman100	include/agg_image_filters.h	/^    class image_filter_blackman100 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman100	include/agg_image_filters.h	/^    { public: image_filter_blackman100() : image_filter_blackman(5.0){} };$/;"	f	class:agg::image_filter_blackman100
image_filter_blackman144	include/agg_image_filters.h	/^    class image_filter_blackman144 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman144	include/agg_image_filters.h	/^    { public: image_filter_blackman144() : image_filter_blackman(6.0){} };$/;"	f	class:agg::image_filter_blackman144
image_filter_blackman196	include/agg_image_filters.h	/^    class image_filter_blackman196 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman196	include/agg_image_filters.h	/^    { public: image_filter_blackman196() : image_filter_blackman(7.0){} };$/;"	f	class:agg::image_filter_blackman196
image_filter_blackman256	include/agg_image_filters.h	/^    class image_filter_blackman256 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman256	include/agg_image_filters.h	/^    { public: image_filter_blackman256() : image_filter_blackman(8.0){} };$/;"	f	class:agg::image_filter_blackman256
image_filter_blackman36	include/agg_image_filters.h	/^    class image_filter_blackman36 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman36	include/agg_image_filters.h	/^    { public: image_filter_blackman36() : image_filter_blackman(3.0){} };$/;"	f	class:agg::image_filter_blackman36
image_filter_blackman64	include/agg_image_filters.h	/^    class image_filter_blackman64 : public image_filter_blackman$/;"	c	namespace:agg
image_filter_blackman64	include/agg_image_filters.h	/^    { public: image_filter_blackman64() : image_filter_blackman(4.0){} };$/;"	f	class:agg::image_filter_blackman64
image_filter_catrom	include/agg_image_filters.h	/^    struct image_filter_catrom$/;"	s	namespace:agg
image_filter_const_radius_adaptor	examples/image_fltr_graph.cpp	/^template<class Filter> struct image_filter_const_radius_adaptor : filter_base$/;"	s	file:
image_filter_gaussian	include/agg_image_filters.h	/^    struct image_filter_gaussian$/;"	s	namespace:agg
image_filter_hamming	include/agg_image_filters.h	/^    struct image_filter_hamming$/;"	s	namespace:agg
image_filter_hanning	include/agg_image_filters.h	/^    struct image_filter_hanning$/;"	s	namespace:agg
image_filter_hermite	include/agg_image_filters.h	/^    struct image_filter_hermite$/;"	s	namespace:agg
image_filter_kaiser	include/agg_image_filters.h	/^        image_filter_kaiser(double b = 6.33) :$/;"	f	class:agg::image_filter_kaiser
image_filter_kaiser	include/agg_image_filters.h	/^    class image_filter_kaiser$/;"	c	namespace:agg
image_filter_lanczos	include/agg_image_filters.h	/^        image_filter_lanczos(double r) : m_radius(r < 2.0 ? 2.0 : r) {}$/;"	f	class:agg::image_filter_lanczos
image_filter_lanczos	include/agg_image_filters.h	/^    class image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos100	include/agg_image_filters.h	/^    class image_filter_lanczos100 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos100	include/agg_image_filters.h	/^    { public: image_filter_lanczos100() : image_filter_lanczos(5.0){} };$/;"	f	class:agg::image_filter_lanczos100
image_filter_lanczos144	include/agg_image_filters.h	/^    class image_filter_lanczos144 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos144	include/agg_image_filters.h	/^    { public: image_filter_lanczos144() : image_filter_lanczos(6.0){} };$/;"	f	class:agg::image_filter_lanczos144
image_filter_lanczos196	include/agg_image_filters.h	/^    class image_filter_lanczos196 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos196	include/agg_image_filters.h	/^    { public: image_filter_lanczos196() : image_filter_lanczos(7.0){} };$/;"	f	class:agg::image_filter_lanczos196
image_filter_lanczos256	include/agg_image_filters.h	/^    class image_filter_lanczos256 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos256	include/agg_image_filters.h	/^    { public: image_filter_lanczos256() : image_filter_lanczos(8.0){} };$/;"	f	class:agg::image_filter_lanczos256
image_filter_lanczos36	include/agg_image_filters.h	/^    class image_filter_lanczos36 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos36	include/agg_image_filters.h	/^    { public: image_filter_lanczos36() : image_filter_lanczos(3.0){} };$/;"	f	class:agg::image_filter_lanczos36
image_filter_lanczos64	include/agg_image_filters.h	/^    class image_filter_lanczos64 : public image_filter_lanczos$/;"	c	namespace:agg
image_filter_lanczos64	include/agg_image_filters.h	/^    { public: image_filter_lanczos64() : image_filter_lanczos(4.0){} };$/;"	f	class:agg::image_filter_lanczos64
image_filter_lut	include/agg_image_filters.h	/^        image_filter_lut() : m_radius(0), m_diameter(0), m_start(0) {}$/;"	f	class:agg::image_filter_lut
image_filter_lut	include/agg_image_filters.h	/^        template<class FilterF> image_filter_lut(const FilterF& filter, $/;"	f	class:agg::image_filter_lut
image_filter_lut	include/agg_image_filters.h	/^    class image_filter_lut$/;"	c	namespace:agg
image_filter_mask	include/agg_image_filters.h	/^        image_filter_mask  = image_filter_scale - 1   \/\/----image_filter_mask $/;"	e	enum:agg::image_filter_scale_e
image_filter_mitchell	include/agg_image_filters.h	/^        image_filter_mitchell(double b = 1.0\/3.0, double c = 1.0\/3.0) :$/;"	f	class:agg::image_filter_mitchell
image_filter_mitchell	include/agg_image_filters.h	/^    class image_filter_mitchell$/;"	c	namespace:agg
image_filter_quadric	include/agg_image_filters.h	/^    struct image_filter_quadric$/;"	s	namespace:agg
image_filter_scale	include/agg_image_filters.h	/^        image_filter_scale = 1 << image_filter_shift, \/\/----image_filter_scale $/;"	e	enum:agg::image_filter_scale_e
image_filter_scale_e	include/agg_image_filters.h	/^    enum image_filter_scale_e$/;"	g	namespace:agg
image_filter_shift	include/agg_image_filters.h	/^        image_filter_shift = 14,                      \/\/----image_filter_shift$/;"	e	enum:agg::image_filter_scale_e
image_filter_sinc	include/agg_image_filters.h	/^        image_filter_sinc(double r) : m_radius(r < 2.0 ? 2.0 : r) {}$/;"	f	class:agg::image_filter_sinc
image_filter_sinc	include/agg_image_filters.h	/^    class image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc100	include/agg_image_filters.h	/^    class image_filter_sinc100 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc100	include/agg_image_filters.h	/^    { public: image_filter_sinc100() : image_filter_sinc(5.0){} };$/;"	f	class:agg::image_filter_sinc100
image_filter_sinc144	include/agg_image_filters.h	/^    class image_filter_sinc144 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc144	include/agg_image_filters.h	/^    { public: image_filter_sinc144() : image_filter_sinc(6.0){} };$/;"	f	class:agg::image_filter_sinc144
image_filter_sinc196	include/agg_image_filters.h	/^    class image_filter_sinc196 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc196	include/agg_image_filters.h	/^    { public: image_filter_sinc196() : image_filter_sinc(7.0){} };$/;"	f	class:agg::image_filter_sinc196
image_filter_sinc256	include/agg_image_filters.h	/^    class image_filter_sinc256 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc256	include/agg_image_filters.h	/^    { public: image_filter_sinc256() : image_filter_sinc(8.0){} };$/;"	f	class:agg::image_filter_sinc256
image_filter_sinc36	include/agg_image_filters.h	/^    class image_filter_sinc36 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc36	include/agg_image_filters.h	/^    { public: image_filter_sinc36() : image_filter_sinc(3.0){} };$/;"	f	class:agg::image_filter_sinc36
image_filter_sinc64	include/agg_image_filters.h	/^    class image_filter_sinc64 : public image_filter_sinc$/;"	c	namespace:agg
image_filter_sinc64	include/agg_image_filters.h	/^    { public: image_filter_sinc64() : image_filter_sinc(4.0){} };$/;"	f	class:agg::image_filter_sinc64
image_filter_spline16	include/agg_image_filters.h	/^    struct image_filter_spline16$/;"	s	namespace:agg
image_filter_spline36	include/agg_image_filters.h	/^    struct image_filter_spline36$/;"	s	namespace:agg
image_filter_variable_radius_adaptor	examples/image_fltr_graph.cpp	/^    image_filter_variable_radius_adaptor() : m_filter(2.0) {}$/;"	f	struct:image_filter_variable_radius_adaptor
image_filter_variable_radius_adaptor	examples/image_fltr_graph.cpp	/^template<class Filter> struct image_filter_variable_radius_adaptor : filter_base$/;"	s	file:
image_pattern	examples/rasterizers2.cpp	/^    typedef agg::line_image_pattern_pow2<pattern_filter> image_pattern;$/;"	t	class:the_application	file:
image_resample_affine_type	examples/image_resample.cpp	42;"	d	file:
image_resample_type	examples/image_resample.cpp	43;"	d	file:
image_subpixel_mask	include/agg_image_filters.h	/^        image_subpixel_mask  = image_subpixel_scale - 1   \/\/----image_subpixel_mask $/;"	e	enum:agg::image_subpixel_scale_e
image_subpixel_scale	include/agg_image_filters.h	/^        image_subpixel_scale = 1 << image_subpixel_shift, \/\/----image_subpixel_scale $/;"	e	enum:agg::image_subpixel_scale_e
image_subpixel_scale_e	include/agg_image_filters.h	/^    enum image_subpixel_scale_e$/;"	g	namespace:agg
image_subpixel_shift	include/agg_image_filters.h	/^        image_subpixel_shift = 8,                         \/\/----image_subpixel_shift$/;"	e	enum:agg::image_subpixel_scale_e
img_ext	src/platform/AmigaOS/agg_platform_support.cpp	/^	const char* platform_support::img_ext() const$/;"	f	class:agg::platform_support
img_ext	src/platform/BeOS/agg_platform_support.cpp	/^    const char* platform_support::img_ext() const { return ".ppm"; }$/;"	f	class:agg::platform_support
img_ext	src/platform/X11/agg_platform_support.cpp	/^    const char* platform_support::img_ext() const { return ".ppm"; }$/;"	f	class:agg::platform_support
img_ext	src/platform/mac/agg_platform_support.cpp	/^    const char* platform_support::img_ext() const { return ".bmp"; }$/;"	f	class:agg::platform_support
img_ext	src/platform/sdl/agg_platform_support.cpp	/^    const char* platform_support::img_ext() const { return ".bmp"; }$/;"	f	class:agg::platform_support
img_ext	src/platform/win32/agg_platform_support.cpp	/^    const char* platform_support::img_ext() const { return ".bmp"; }$/;"	f	class:agg::platform_support
in_polygon_check	include/ctrl/agg_polygon_ctrl.h	/^        bool in_polygon_check() const { return m_in_polygon_check; }$/;"	f	class:agg::polygon_ctrl_impl
in_polygon_check	include/ctrl/agg_polygon_ctrl.h	/^        void in_polygon_check(bool f) { m_in_polygon_check = f; }$/;"	f	class:agg::polygon_ctrl_impl
in_rect	include/platform/agg_platform_support.h	/^        bool in_rect(double x, double y)$/;"	f	class:agg::ctrl_container
in_rect	src/ctrl/agg_bezier_ctrl.cpp	/^    bool bezier_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::bezier_ctrl_impl
in_rect	src/ctrl/agg_bezier_ctrl.cpp	/^    bool curve3_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::curve3_ctrl_impl
in_rect	src/ctrl/agg_cbox_ctrl.cpp	/^    bool cbox_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::cbox_ctrl_impl
in_rect	src/ctrl/agg_gamma_ctrl.cpp	/^    bool gamma_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::gamma_ctrl_impl
in_rect	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::polygon_ctrl_impl
in_rect	src/ctrl/agg_rbox_ctrl.cpp	/^    bool rbox_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::rbox_ctrl_impl
in_rect	src/ctrl/agg_scale_ctrl.cpp	/^    bool scale_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::scale_ctrl_impl
in_rect	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::slider_ctrl_impl
in_rect	src/ctrl/agg_spline_ctrl.cpp	/^    bool spline_ctrl_impl::in_rect(double x, double y) const$/;"	f	class:agg::spline_ctrl_impl
inactive_color	include/ctrl/agg_cbox_ctrl.h	/^        void inactive_color(const ColorT& c) { m_inactive_color = c; }$/;"	f	class:agg::cbox_ctrl
inactive_color	include/ctrl/agg_rbox_ctrl.h	/^        void inactive_color(const ColorT& c) { m_inactive_color = c; }$/;"	f	class:agg::rbox_ctrl
inactive_pnt_color	include/ctrl/agg_gamma_ctrl.h	/^        void inactive_pnt_color(const ColorT& c) { m_inactive_pnt_color = c; }$/;"	f	class:agg::gamma_ctrl
inactive_pnt_color	include/ctrl/agg_spline_ctrl.h	/^        void inactive_pnt_color(const ColorT& c) { m_inactive_pnt_color = c; }$/;"	f	class:agg::spline_ctrl
inbox	include/agg_renderer_base.h	/^        bool inbox(int x, int y) const$/;"	f	class:agg::renderer_base
inc	include/agg_dda_line.h	/^        int      inc()    const { return m_inc; }$/;"	f	class:agg::line_bresenham_interpolator
inc	include/agg_line_aa_basics.h	/^        int inc;$/;"	m	struct:agg::line_parameters
inc_size	include/agg_array.h	/^        void inc_size(unsigned size) { m_size += size; }$/;"	f	class:agg::pod_auto_vector
inc_size	include/agg_array.h	/^        void inc_size(unsigned size) { m_size += size; }$/;"	f	class:agg::pod_vector
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x() { m_dist += m_dy; m_dist_start += m_dy_start; m_dist_end += m_dy_end; }$/;"	f	class:agg::distance_interpolator3
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x() { m_dist += m_dy; m_dist_start += m_dy_start; }$/;"	f	class:agg::distance_interpolator2
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x() { m_dist += m_dy; }$/;"	f	class:agg::distance_interpolator0
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x() { m_dist += m_dy; }$/;"	f	class:agg::distance_interpolator1
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x() { m_dist1 += m_dy1; m_dist2 += m_dy2; }$/;"	f	class:agg::distance_interpolator00
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x(int dy)$/;"	f	class:agg::distance_interpolator1
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x(int dy)$/;"	f	class:agg::distance_interpolator2
inc_x	include/agg_renderer_outline_aa.h	/^        void inc_x(int dy)$/;"	f	class:agg::distance_interpolator3
inc_x	include/agg_renderer_outline_image.h	/^        void inc_x() $/;"	f	class:agg::distance_interpolator4
inc_x	include/agg_renderer_outline_image.h	/^        void inc_x(int dy)$/;"	f	class:agg::distance_interpolator4
inc_x	include/agg_trans_bilinear.h	/^            double inc_x;$/;"	m	class:agg::trans_bilinear::iterator_x
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y() { m_dist -= m_dx; m_dist_start -= m_dx_start; m_dist_end -= m_dx_end; }$/;"	f	class:agg::distance_interpolator3
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y() { m_dist -= m_dx; m_dist_start -= m_dx_start; }$/;"	f	class:agg::distance_interpolator2
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y() { m_dist -= m_dx; }$/;"	f	class:agg::distance_interpolator1
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y(int dx)$/;"	f	class:agg::distance_interpolator1
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y(int dx)$/;"	f	class:agg::distance_interpolator2
inc_y	include/agg_renderer_outline_aa.h	/^        void inc_y(int dx)$/;"	f	class:agg::distance_interpolator3
inc_y	include/agg_renderer_outline_image.h	/^        void inc_y() $/;"	f	class:agg::distance_interpolator4
inc_y	include/agg_renderer_outline_image.h	/^        void inc_y(int dx)$/;"	f	class:agg::distance_interpolator4
inc_y	include/agg_trans_bilinear.h	/^            double inc_y;$/;"	m	class:agg::trans_bilinear::iterator_x
index	examples/idea.cpp	/^    unsigned   index;$/;"	m	struct:path_attributes	file:
index	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned     index;$/;"	m	struct:agg::svg::path_attributes
init	examples/aa_test.cpp	/^    void init(double x1, double y1, $/;"	f	class:simple_vertex_source
init	examples/aa_test.cpp	/^    void init(double x1, double y1, double x2, double y2)$/;"	f	class:simple_vertex_source
init	examples/mol_view.cpp	/^        void init(double x1, double y1, double x2, double y2)$/;"	f	class:agg::dashed_wedge
init	examples/mol_view.cpp	/^        void init(double x1, double y1, double x2, double y2)$/;"	f	class:agg::line
init	examples/mol_view.cpp	/^        void init(double x1, double y1, double x2, double y2)$/;"	f	class:agg::solid_wedge
init	include/agg_basics.h	/^        void init(T x1_, T y1_, T x2_, T y2_) $/;"	f	struct:agg::rect_base
init	include/agg_curves.h	/^        void init(const curve4_points& cp)$/;"	f	class:agg::curve4
init	include/agg_curves.h	/^        void init(const curve4_points& cp)$/;"	f	class:agg::curve4_div
init	include/agg_curves.h	/^        void init(const curve4_points& cp)$/;"	f	class:agg::curve4_inc
init	include/agg_curves.h	/^        void init(double x1, double y1, $/;"	f	class:agg::curve3
init	include/agg_curves.h	/^        void init(double x1, double y1, $/;"	f	class:agg::curve4
init	include/agg_curves.h	/^        void init(double x1, double y1,$/;"	f	struct:agg::curve4_points
init	include/agg_ellipse.h	/^    inline void ellipse::init(double x, double y, double rx, double ry, $/;"	f	class:agg::ellipse
init	include/agg_path_storage.h	/^        void init(const Container& data, bool closed)$/;"	f	class:agg::poly_container_adaptor
init	include/agg_path_storage.h	/^        void init(const Container& data, bool closed)$/;"	f	class:agg::poly_container_reverse_adaptor
init	include/agg_path_storage.h	/^        void init(const T* data, unsigned num_points, bool closed)$/;"	f	class:agg::poly_plain_adaptor
init	include/agg_path_storage.h	/^        void init(double x1, double y1, double x2, double y2)$/;"	f	class:agg::line_adaptor
init	include/agg_path_storage_integer.h	/^        void init(const int8u* data, unsigned size, $/;"	f	class:agg::serialized_integer_path_adaptor
init	include/agg_rendering_buffer_dynarow.h	/^        void init(unsigned width, unsigned height, unsigned byte_width)$/;"	f	class:agg::rendering_buffer_dynarow
init	include/agg_scanline_storage_aa.h	/^            void init(const int8u* ptr, int dx, int dy)$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
init	include/agg_scanline_storage_aa.h	/^            void init(unsigned scanline_idx)$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
init	include/agg_scanline_storage_aa.h	/^        void init(const int8u* data, unsigned size, double dx, double dy)$/;"	f	class:agg::serialized_scanlines_adaptor_aa
init	include/agg_scanline_storage_bin.h	/^            void init(const int8u* ptr, int dx, int dy)$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
init	include/agg_scanline_storage_bin.h	/^        void init(const int8u* data, unsigned size, double dx, double dy)$/;"	f	class:agg::serialized_scanlines_adaptor_bin
init	include/agg_span_gouraud_gray.h	/^            void init(const coord_type& c1, const coord_type& c2)$/;"	f	struct:agg::span_gouraud_gray::gray_calc
init	include/agg_span_gouraud_rgba.h	/^            void init(const coord_type& c1, const coord_type& c2)$/;"	f	struct:agg::span_gouraud_rgba::rgba_calc
init	include/agg_span_gradient.h	/^        void init(double r, double fx, double fy)$/;"	f	class:agg::gradient_radial_focus
init	src/agg_arc.cpp	/^    void arc::init(double x,  double y, $/;"	f	class:agg::arc
init	src/agg_bezier_arc.cpp	/^    void bezier_arc::init(double x,  double y, $/;"	f	class:agg::bezier_arc
init	src/agg_bezier_arc.cpp	/^    void bezier_arc_svg::init(double x0, double y0, $/;"	f	class:agg::bezier_arc_svg
init	src/agg_bspline.cpp	/^    void bspline::init(int max)$/;"	f	class:agg::bspline
init	src/agg_bspline.cpp	/^    void bspline::init(int num, const double* x, const double* y)$/;"	f	class:agg::bspline
init	src/agg_curves.cpp	/^    void curve3_div::init(double x1, double y1, $/;"	f	class:agg::curve3_div
init	src/agg_curves.cpp	/^    void curve3_inc::init(double x1, double y1, $/;"	f	class:agg::curve3_inc
init	src/agg_curves.cpp	/^    void curve4_div::init(double x1, double y1, $/;"	f	class:agg::curve4_div
init	src/agg_curves.cpp	/^    void curve4_inc::init(double x1, double y1, $/;"	f	class:agg::curve4_inc
init	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_support::init(unsigned width, unsigned height,$/;"	f	class:agg::platform_support
init	src/platform/BeOS/agg_platform_support.cpp	/^    bool platform_support::init(unsigned width, unsigned height, unsigned flags)$/;"	f	class:agg::platform_support
init	src/platform/X11/agg_platform_support.cpp	/^    bool platform_support::init(unsigned width, unsigned height, unsigned flags)$/;"	f	class:agg::platform_support
init	src/platform/mac/agg_platform_support.cpp	/^    bool platform_support::init(unsigned width, unsigned height, unsigned flags)$/;"	f	class:agg::platform_support
init	src/platform/sdl/agg_platform_support.cpp	/^    bool platform_support::init(unsigned width, unsigned height, unsigned flags)$/;"	f	class:agg::platform_support
init	src/platform/win32/agg_platform_support.cpp	/^    bool platform_support::init(unsigned width, unsigned height, unsigned flags)$/;"	f	class:agg::platform_support
init_char_mask	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    void path_tokenizer::init_char_mask(char* mask, const char* char_set)$/;"	f	class:agg::svg::path_tokenizer
init_embedded_adaptors	include/agg_font_cache_manager.h	/^        void init_embedded_adaptors(const glyph_cache* gl, $/;"	f	class:agg::font_cache_manager
init_span	include/agg_pixfmt_amask_adaptor.h	/^        void init_span(unsigned len)$/;"	f	class:agg::pixfmt_amask_adaptor
init_span	include/agg_pixfmt_amask_adaptor.h	/^        void init_span(unsigned len, const cover_type* covers)$/;"	f	class:agg::pixfmt_amask_adaptor
init_span	include/agg_scanline_storage_aa.h	/^                void init_span()$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
init_span	include/agg_scanline_storage_aa.h	/^                void init_span()$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
initial	include/agg_conv_adaptor_vcgen.h	/^            initial,$/;"	e	enum:agg::conv_adaptor_vcgen::status
initial	include/agg_conv_marker.h	/^            initial,$/;"	e	enum:agg::conv_marker::status_e
initial	include/agg_gsv_text.h	/^            initial,$/;"	e	enum:agg::gsv_text::status
initial	include/agg_rasterizer_compound_aa.h	/^        void initial()$/;"	f	struct:agg::cell_style_aa
initial	include/agg_rasterizer_scanline_aa.h	/^        void initial()$/;"	f	struct:agg::cell_aa
initial	include/agg_trans_double_path.h	/^            initial,$/;"	e	enum:agg::trans_double_path::status_e
initial	include/agg_trans_single_path.h	/^            initial,$/;"	e	enum:agg::trans_single_path::status_e
initial	include/agg_vcgen_bspline.h	/^            initial,$/;"	e	enum:agg::vcgen_bspline::status_e
initial	include/agg_vcgen_contour.h	/^            initial,$/;"	e	enum:agg::vcgen_contour::status_e
initial	include/agg_vcgen_dash.h	/^            initial,$/;"	e	enum:agg::vcgen_dash::status_e
initial	include/agg_vcgen_smooth_poly1.h	/^            initial,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
initial	include/agg_vcgen_stroke.h	/^            initial,$/;"	e	enum:agg::vcgen_stroke::status_e
initial_height	include/platform/agg_platform_support.h	/^        double   initial_height() const { return m_initial_height; }$/;"	f	class:agg::platform_support
initial_width	include/platform/agg_platform_support.h	/^        double   initial_width()  const { return m_initial_width; }$/;"	f	class:agg::platform_support
inner_bevel	include/agg_math_stroke.h	/^        inner_bevel,$/;"	e	enum:agg::inner_join_e
inner_jag	include/agg_math_stroke.h	/^        inner_jag,$/;"	e	enum:agg::inner_join_e
inner_join	include/agg_conv_contour.h	/^        inner_join_e inner_join() const { return base_type::generator().inner_join(); }$/;"	f	struct:agg::conv_contour
inner_join	include/agg_conv_contour.h	/^        void inner_join(inner_join_e ij) { base_type::generator().inner_join(ij); }$/;"	f	struct:agg::conv_contour
inner_join	include/agg_conv_stroke.h	/^        inner_join_e inner_join() const { return base_type::generator().inner_join(); }$/;"	f	struct:agg::conv_stroke
inner_join	include/agg_conv_stroke.h	/^        void inner_join(inner_join_e ij) { base_type::generator().inner_join(ij); }$/;"	f	struct:agg::conv_stroke
inner_join	include/agg_math_stroke.h	/^        inner_join_e inner_join() const { return m_inner_join; }$/;"	f	class:agg::math_stroke
inner_join	include/agg_math_stroke.h	/^        void inner_join(inner_join_e ij) { m_inner_join = ij; }$/;"	f	class:agg::math_stroke
inner_join	include/agg_vcgen_contour.h	/^        inner_join_e inner_join() const { return m_stroker.inner_join(); }$/;"	f	class:agg::vcgen_contour
inner_join	include/agg_vcgen_contour.h	/^        void inner_join(inner_join_e ij) { m_stroker.inner_join(ij); }$/;"	f	class:agg::vcgen_contour
inner_join	include/agg_vcgen_stroke.h	/^        inner_join_e inner_join() const { return m_stroker.inner_join(); }$/;"	f	class:agg::vcgen_stroke
inner_join	include/agg_vcgen_stroke.h	/^        void inner_join(inner_join_e ij) { m_stroker.inner_join(ij); }$/;"	f	class:agg::vcgen_stroke
inner_join_e	include/agg_math_stroke.h	/^    enum inner_join_e$/;"	g	namespace:agg
inner_miter	include/agg_math_stroke.h	/^        inner_miter,$/;"	e	enum:agg::inner_join_e
inner_miter_limit	include/agg_conv_contour.h	/^        double inner_miter_limit() const { return base_type::generator().inner_miter_limit(); }$/;"	f	struct:agg::conv_contour
inner_miter_limit	include/agg_conv_contour.h	/^        void inner_miter_limit(double ml) { base_type::generator().inner_miter_limit(ml); }$/;"	f	struct:agg::conv_contour
inner_miter_limit	include/agg_conv_stroke.h	/^        double inner_miter_limit() const { return base_type::generator().inner_miter_limit(); }$/;"	f	struct:agg::conv_stroke
inner_miter_limit	include/agg_conv_stroke.h	/^        void inner_miter_limit(double ml) { base_type::generator().inner_miter_limit(ml); }$/;"	f	struct:agg::conv_stroke
inner_miter_limit	include/agg_math_stroke.h	/^        double inner_miter_limit() const { return m_inner_miter_limit; }$/;"	f	class:agg::math_stroke
inner_miter_limit	include/agg_math_stroke.h	/^        void inner_miter_limit(double ml) { m_inner_miter_limit = ml; }$/;"	f	class:agg::math_stroke
inner_miter_limit	include/agg_vcgen_contour.h	/^        double inner_miter_limit() const { return m_stroker.inner_miter_limit(); }$/;"	f	class:agg::vcgen_contour
inner_miter_limit	include/agg_vcgen_contour.h	/^        void inner_miter_limit(double ml) { m_stroker.inner_miter_limit(ml); }$/;"	f	class:agg::vcgen_contour
inner_miter_limit	include/agg_vcgen_stroke.h	/^        double inner_miter_limit() const { return m_stroker.inner_miter_limit(); }$/;"	f	class:agg::vcgen_stroke
inner_miter_limit	include/agg_vcgen_stroke.h	/^        void inner_miter_limit(double ml) { m_stroker.inner_miter_limit(ml); }$/;"	f	class:agg::vcgen_stroke
inner_round	include/agg_math_stroke.h	/^        inner_round$/;"	e	enum:agg::inner_join_e
input_flag_e	include/platform/agg_platform_support.h	/^    enum input_flag_e$/;"	g	namespace:agg
insert_at	include/agg_array.h	/^    void pod_vector<T>::insert_at(unsigned pos, const T& val)$/;"	f	class:agg::pod_vector
insert_bound	gpc/gpc.c	/^static void insert_bound(edge_node **b, edge_node *e)$/;"	f	file:
int16	include/agg_basics.h	/^    typedef AGG_INT16  int16;        \/\/----int16$/;"	t	namespace:agg
int16u	include/agg_basics.h	/^    typedef AGG_INT16U int16u;       \/\/----int16u$/;"	t	namespace:agg
int26p6_to_dbl	font_freetype/agg_font_freetype.cpp	/^    static inline double int26p6_to_dbl(int p)$/;"	f	namespace:agg
int32	include/agg_basics.h	/^    typedef AGG_INT32  int32;        \/\/----int32$/;"	t	namespace:agg
int32u	include/agg_basics.h	/^    typedef AGG_INT32U int32u;       \/\/----int32u$/;"	t	namespace:agg
int64	include/agg_basics.h	/^    typedef AGG_INT64  int64;        \/\/----int64$/;"	t	namespace:agg
int64u	include/agg_basics.h	/^    typedef AGG_INT64U int64u;       \/\/----int64u$/;"	t	namespace:agg
int8	include/agg_basics.h	/^    typedef AGG_INT8   int8;         \/\/----int8$/;"	t	namespace:agg
int8u	include/agg_basics.h	/^    typedef AGG_INT8U  int8u;        \/\/----int8u$/;"	t	namespace:agg
int_greater	include/agg_array.h	/^    inline bool int_greater(int a, int b) { return a > b; }$/;"	f	namespace:agg
int_less	include/agg_array.h	/^    inline bool int_less(int a, int b) { return a < b; }$/;"	f	namespace:agg
interactive_polygon	examples/interactive_polygon.cpp	/^    interactive_polygon::interactive_polygon(unsigned np, double point_radius) :$/;"	f	class:agg::interactive_polygon
interactive_polygon	examples/interactive_polygon.h	/^    class interactive_polygon$/;"	c	namespace:agg
interpolation	src/agg_bspline.cpp	/^    double bspline::interpolation(double x, int i) const$/;"	f	class:agg::bspline
interpolation_step	include/agg_conv_bspline.h	/^        double interpolation_step() const { return base_type::generator().interpolation_step(); }$/;"	f	struct:agg::conv_bspline
interpolation_step	include/agg_conv_bspline.h	/^        void   interpolation_step(double v) { base_type::generator().interpolation_step(v); }$/;"	f	struct:agg::conv_bspline
interpolation_step	include/agg_vcgen_bspline.h	/^        double interpolation_step() const { return m_interpolation_step; }$/;"	f	class:agg::vcgen_bspline
interpolation_step	include/agg_vcgen_bspline.h	/^        void interpolation_step(double v) { m_interpolation_step = v; }$/;"	f	class:agg::vcgen_bspline
interpolator	examples/graph_test.cpp	/^typedef agg::span_interpolator_linear<> interpolator;$/;"	t	file:
interpolator	include/agg_span_gradient.h	/^        interpolator_type& interpolator() { return *m_interpolator; }$/;"	f	class:agg::span_gradient
interpolator	include/agg_span_gradient.h	/^        void interpolator(interpolator_type& i) { m_interpolator = &i; }$/;"	f	class:agg::span_gradient
interpolator	include/agg_span_gradient_alpha.h	/^        interpolator_type& interpolator() { return *m_interpolator; }$/;"	f	class:agg::span_gradient_alpha
interpolator	include/agg_span_gradient_alpha.h	/^        void interpolator(interpolator_type& i) { m_interpolator = &i; }$/;"	f	class:agg::span_gradient_alpha
interpolator	include/agg_span_image_filter.h	/^        interpolator_type& interpolator() { return *m_interpolator; }$/;"	f	class:agg::span_image_filter
interpolator	include/agg_span_image_filter.h	/^        void interpolator(interpolator_type& v)  { m_interpolator = &v; }$/;"	f	class:agg::span_image_filter
interpolator	include/agg_span_subdiv_adaptor.h	/^        const interpolator_type& interpolator() const { return *m_interpolator; }$/;"	f	class:agg::span_subdiv_adaptor
interpolator	include/agg_span_subdiv_adaptor.h	/^        void interpolator(interpolator_type& intr) { m_interpolator = &intr; }$/;"	f	class:agg::span_subdiv_adaptor
interpolator_type	examples/gradient_focal.cpp	/^    typedef agg::span_interpolator_linear<> interpolator_type;$/;"	t	class:the_application	file:
interpolator_type	include/agg_gradient_lut.h	/^        typedef ColorInterpolator interpolator_type;$/;"	t	class:agg::gradient_lut
interpolator_type	include/agg_span_gradient.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_gradient
interpolator_type	include/agg_span_gradient_alpha.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_gradient_alpha
interpolator_type	include/agg_span_image_filter.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter
interpolator_type	include/agg_span_image_filter.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_resample
interpolator_type	include/agg_span_image_filter.h	/^        typedef span_interpolator_linear<trans_affine> interpolator_type;$/;"	t	class:agg::span_image_resample_affine
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_gray
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_gray_2x2
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_gray_nn
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_resample_gray
interpolator_type	include/agg_span_image_filter_gray.h	/^        typedef typename base_type::interpolator_type interpolator_type;$/;"	t	class:agg::span_image_resample_gray_affine
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgb
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgb_nn
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_resample_rgb
interpolator_type	include/agg_span_image_filter_rgb.h	/^        typedef typename base_type::interpolator_type interpolator_type;$/;"	t	class:agg::span_image_resample_rgb_affine
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgba
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_filter_rgba_nn
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_image_resample_rgba
interpolator_type	include/agg_span_image_filter_rgba.h	/^        typedef typename base_type::interpolator_type interpolator_type;$/;"	t	class:agg::span_image_resample_rgba_affine
interpolator_type	include/agg_span_subdiv_adaptor.h	/^        typedef Interpolator interpolator_type;$/;"	t	class:agg::span_subdiv_adaptor
intersect_rectangles	include/agg_basics.h	/^    inline Rect intersect_rectangles(const Rect& r1, const Rect& r2)$/;"	f	namespace:agg
intersection_epsilon	include/agg_math.h	/^    const double intersection_epsilon = 1.0e-30;$/;"	m	namespace:agg
intersection_exists	include/agg_math.h	/^    AGG_INLINE bool intersection_exists(double x1, double y1, double x2, double y2,$/;"	f	namespace:agg
inv	include/agg_gamma_lut.h	/^        LoResT inv(HiResT v) const $/;"	f	class:agg::gamma_lut
inverse_transform	include/agg_trans_affine.h	/^    inline void trans_affine::inverse_transform(double* x, double* y) const$/;"	f	class:agg::trans_affine
inverse_transform	include/agg_trans_perspective.h	/^    inline void trans_perspective::inverse_transform(double* x, double* y) const$/;"	f	class:agg::trans_perspective
inverse_transform	include/agg_trans_viewport.h	/^        void inverse_transform(double* x, double* y) const$/;"	f	class:agg::trans_viewport
inverse_transform	src/agg_trans_warp_magnifier.cpp	/^    void trans_warp_magnifier::inverse_transform(double* x, double* y) const$/;"	f	class:agg::trans_warp_magnifier
inverse_transform_scale_only	include/agg_trans_viewport.h	/^        void inverse_transform_scale_only(double* x, double* y) const$/;"	f	class:agg::trans_viewport
inverse_transform_xy	include/ctrl/agg_ctrl.h	/^        void inverse_transform_xy(double* x, double* y) const$/;"	f	class:agg::ctrl
invert	include/agg_trans_perspective.h	/^    inline bool trans_perspective::invert()$/;"	f	class:agg::trans_perspective
invert	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::invert()$/;"	f	class:agg::trans_affine
invert_container	include/agg_array.h	/^    template<class Array> void invert_container(Array& arr)$/;"	f	namespace:agg
invert_polygon	include/agg_path_storage.h	/^    void path_base<VC>::invert_polygon(unsigned start)$/;"	f	class:agg::path_base
invert_polygon	include/agg_path_storage.h	/^    void path_base<VC>::invert_polygon(unsigned start, unsigned end)$/;"	f	class:agg::path_base
iround	include/agg_basics.h	/^        AGG_INLINE static int iround(double v)$/;"	f	struct:agg::saturation
iround	include/agg_basics.h	/^    AGG_INLINE int iround(double v)              \/\/-------iround$/;"	f	namespace:agg
iround	include/agg_basics.h	/^    AGG_INLINE int iround(double v)$/;"	f	namespace:agg
is_ccw	include/agg_basics.h	/^    inline bool is_ccw(unsigned c)$/;"	f	namespace:agg
is_close	include/agg_basics.h	/^    inline bool is_close(unsigned c)$/;"	f	namespace:agg
is_closed	include/agg_basics.h	/^    inline bool is_closed(unsigned c)$/;"	f	namespace:agg
is_command	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        bool is_command(unsigned c) const$/;"	f	class:agg::svg::path_tokenizer
is_curve	include/agg_basics.h	/^    inline bool is_curve(unsigned c)$/;"	f	namespace:agg
is_curve3	include/agg_basics.h	/^    inline bool is_curve3(unsigned c)$/;"	f	namespace:agg
is_curve4	include/agg_basics.h	/^    inline bool is_curve4(unsigned c)$/;"	f	namespace:agg
is_cw	include/agg_basics.h	/^    inline bool is_cw(unsigned c)$/;"	f	namespace:agg
is_drawing	include/agg_basics.h	/^    inline bool is_drawing(unsigned c)$/;"	f	namespace:agg
is_end_poly	include/agg_basics.h	/^    inline bool is_end_poly(unsigned c)$/;"	f	namespace:agg
is_equal	include/agg_trans_perspective.h	/^    inline bool trans_perspective::is_equal(const trans_perspective& m, $/;"	f	class:agg::trans_perspective
is_equal	src/agg_trans_affine.cpp	/^    bool trans_affine::is_equal(const trans_affine& m, double epsilon) const$/;"	f	class:agg::trans_affine
is_equal_eps	include/agg_basics.h	/^    template<class T> inline bool is_equal_eps(T v1, T v2, T epsilon)$/;"	f	namespace:agg
is_identity	include/agg_trans_perspective.h	/^    inline bool trans_perspective::is_identity(double epsilon) const$/;"	f	class:agg::trans_perspective
is_identity	src/agg_trans_affine.cpp	/^    bool trans_affine::is_identity(double epsilon) const$/;"	f	class:agg::trans_affine
is_line_to	include/agg_basics.h	/^    inline bool is_line_to(unsigned c)$/;"	f	namespace:agg
is_move_to	include/agg_basics.h	/^    inline bool is_move_to(unsigned c)$/;"	f	namespace:agg
is_next_poly	include/agg_basics.h	/^    inline bool is_next_poly(unsigned c)$/;"	f	namespace:agg
is_numeric	examples/svg_viewer/agg_svg_parser.cpp	/^    static bool is_numeric(char c)$/;"	f	namespace:agg::svg
is_numeric	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        bool is_numeric(unsigned c) const$/;"	f	class:agg::svg::path_tokenizer
is_oriented	include/agg_basics.h	/^    inline bool is_oriented(unsigned c)$/;"	f	namespace:agg
is_separator	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        bool is_separator(unsigned c) const$/;"	f	class:agg::svg::path_tokenizer
is_solid	examples/flash_rasterizer.cpp	/^        bool is_solid(unsigned style) const $/;"	f	class:agg::test_styles
is_solid	examples/gouraud_mesh.cpp	/^        bool is_solid(unsigned style) const { return false; }$/;"	f	class:agg::styles_gouraud
is_solid	examples/rasterizer_compound.cpp	/^    bool is_solid(unsigned style) const { return true; }$/;"	f	class:style_handler
is_stop	include/agg_basics.h	/^    inline bool is_stop(unsigned c)$/;"	f	namespace:agg
is_valid	include/agg_basics.h	/^        bool is_valid() const$/;"	f	struct:agg::rect_base
is_valid	include/agg_span_interpolator_persp.h	/^        bool is_valid() const { return m_trans_dir.is_valid(); }$/;"	f	class:agg::span_interpolator_persp_exact
is_valid	include/agg_span_interpolator_persp.h	/^        bool is_valid() const { return m_trans_dir.is_valid(); }$/;"	f	class:agg::span_interpolator_persp_lerp
is_valid	include/agg_trans_bilinear.h	/^        bool is_valid() const { return m_valid; }$/;"	f	class:agg::trans_bilinear
is_valid	include/agg_trans_perspective.h	/^    inline bool trans_perspective::is_valid(double epsilon) const$/;"	f	class:agg::trans_perspective
is_valid	include/agg_trans_viewport.h	/^        bool   is_valid()             const { return m_is_valid; }$/;"	f	class:agg::trans_viewport
is_valid	src/agg_trans_affine.cpp	/^    bool trans_affine::is_valid(double epsilon) const$/;"	f	class:agg::trans_affine
is_ver	include/agg_dda_line.h	/^        bool     is_ver() const { return m_ver; }$/;"	f	class:agg::line_bresenham_interpolator
is_vertex	include/agg_basics.h	/^    inline bool is_vertex(unsigned c)$/;"	f	namespace:agg
it_node	gpc/gpc.c	/^} it_node;$/;"	t	typeref:struct:it_shape	file:
it_shape	gpc/gpc.c	/^typedef struct it_shape             \/* Intersection table                *\/$/;"	s	file:
italic	font_win32_tt/agg_font_win32_tt.h	/^        bool        italic()       const { return m_italic;     }$/;"	f	class:agg::font_engine_win32_tt_base
italic	font_win32_tt/agg_font_win32_tt.h	/^        void italic(bool it)          { m_italic = it;           }$/;"	f	class:agg::font_engine_win32_tt_base
iterator	include/agg_scanline_p.h	/^        typedef span* iterator;$/;"	t	class:agg::scanline_p8
iterator	include/agg_scanline_u.h	/^            iterator(span_array_type& spans) :$/;"	f	class:agg::scanline32_u8::iterator
iterator	include/agg_scanline_u.h	/^        class iterator$/;"	c	class:agg::scanline32_u8
iterator	include/agg_scanline_u.h	/^        typedef span* iterator;$/;"	t	class:agg::scanline_u8
iterator_type	include/agg_span_interpolator_persp.h	/^        typedef trans_perspective::iterator_x iterator_type;$/;"	t	class:agg::span_interpolator_persp_exact
iterator_x	include/agg_trans_bilinear.h	/^            iterator_x() {}$/;"	f	class:agg::trans_bilinear::iterator_x
iterator_x	include/agg_trans_bilinear.h	/^            iterator_x(double tx, double ty, double step, const double m[4][2]) :$/;"	f	class:agg::trans_bilinear::iterator_x
iterator_x	include/agg_trans_bilinear.h	/^        class iterator_x$/;"	c	class:agg::trans_bilinear
iterator_x	include/agg_trans_perspective.h	/^            iterator_x() {}$/;"	f	class:agg::trans_perspective::iterator_x
iterator_x	include/agg_trans_perspective.h	/^            iterator_x(double px, double py, double step, const trans_perspective& m) :$/;"	f	class:agg::trans_perspective::iterator_x
iterator_x	include/agg_trans_perspective.h	/^        class iterator_x$/;"	c	struct:agg::trans_perspective
join_path	include/agg_path_storage.h	/^        void join_path(VertexSource& vs, unsigned path_id = 0)$/;"	f	class:agg::path_base
join_poly	include/agg_path_storage.h	/^        template<class T> void join_poly(const T* data, $/;"	f	class:agg::path_base
kbd_ctrl	include/platform/agg_platform_support.h	/^        kbd_ctrl    = 8$/;"	e	enum:agg::input_flag_e
kbd_shift	include/platform/agg_platform_support.h	/^        kbd_shift   = 4,$/;"	e	enum:agg::input_flag_e
key_backspace	include/platform/agg_platform_support.h	/^        key_backspace      = 8,$/;"	e	enum:agg::key_code_e
key_capslock	include/platform/agg_platform_support.h	/^        key_capslock       = 301,$/;"	e	enum:agg::key_code_e
key_clear	include/platform/agg_platform_support.h	/^        key_clear          = 12,$/;"	e	enum:agg::key_code_e
key_code_e	include/platform/agg_platform_support.h	/^    enum key_code_e$/;"	g	namespace:agg
key_delete	include/platform/agg_platform_support.h	/^        key_delete         = 127,$/;"	e	enum:agg::key_code_e
key_down	include/platform/agg_platform_support.h	/^        key_down           = 274,$/;"	e	enum:agg::key_code_e
key_end	include/platform/agg_platform_support.h	/^        key_end            = 279,$/;"	e	enum:agg::key_code_e
key_escape	include/platform/agg_platform_support.h	/^        key_escape         = 27,$/;"	e	enum:agg::key_code_e
key_f1	include/platform/agg_platform_support.h	/^        key_f1             = 282,$/;"	e	enum:agg::key_code_e
key_f10	include/platform/agg_platform_support.h	/^        key_f10            = 291,$/;"	e	enum:agg::key_code_e
key_f11	include/platform/agg_platform_support.h	/^        key_f11            = 292,$/;"	e	enum:agg::key_code_e
key_f12	include/platform/agg_platform_support.h	/^        key_f12            = 293,$/;"	e	enum:agg::key_code_e
key_f13	include/platform/agg_platform_support.h	/^        key_f13            = 294,$/;"	e	enum:agg::key_code_e
key_f14	include/platform/agg_platform_support.h	/^        key_f14            = 295,$/;"	e	enum:agg::key_code_e
key_f15	include/platform/agg_platform_support.h	/^        key_f15            = 296,$/;"	e	enum:agg::key_code_e
key_f2	include/platform/agg_platform_support.h	/^        key_f2             = 283,$/;"	e	enum:agg::key_code_e
key_f3	include/platform/agg_platform_support.h	/^        key_f3             = 284,$/;"	e	enum:agg::key_code_e
key_f4	include/platform/agg_platform_support.h	/^        key_f4             = 285,$/;"	e	enum:agg::key_code_e
key_f5	include/platform/agg_platform_support.h	/^        key_f5             = 286,$/;"	e	enum:agg::key_code_e
key_f6	include/platform/agg_platform_support.h	/^        key_f6             = 287,$/;"	e	enum:agg::key_code_e
key_f7	include/platform/agg_platform_support.h	/^        key_f7             = 288,$/;"	e	enum:agg::key_code_e
key_f8	include/platform/agg_platform_support.h	/^        key_f8             = 289,$/;"	e	enum:agg::key_code_e
key_f9	include/platform/agg_platform_support.h	/^        key_f9             = 290,$/;"	e	enum:agg::key_code_e
key_home	include/platform/agg_platform_support.h	/^        key_home           = 278,$/;"	e	enum:agg::key_code_e
key_insert	include/platform/agg_platform_support.h	/^        key_insert         = 277,$/;"	e	enum:agg::key_code_e
key_kp0	include/platform/agg_platform_support.h	/^        key_kp0            = 256,$/;"	e	enum:agg::key_code_e
key_kp1	include/platform/agg_platform_support.h	/^        key_kp1            = 257,$/;"	e	enum:agg::key_code_e
key_kp2	include/platform/agg_platform_support.h	/^        key_kp2            = 258,$/;"	e	enum:agg::key_code_e
key_kp3	include/platform/agg_platform_support.h	/^        key_kp3            = 259,$/;"	e	enum:agg::key_code_e
key_kp4	include/platform/agg_platform_support.h	/^        key_kp4            = 260,$/;"	e	enum:agg::key_code_e
key_kp5	include/platform/agg_platform_support.h	/^        key_kp5            = 261,$/;"	e	enum:agg::key_code_e
key_kp6	include/platform/agg_platform_support.h	/^        key_kp6            = 262,$/;"	e	enum:agg::key_code_e
key_kp7	include/platform/agg_platform_support.h	/^        key_kp7            = 263,$/;"	e	enum:agg::key_code_e
key_kp8	include/platform/agg_platform_support.h	/^        key_kp8            = 264,$/;"	e	enum:agg::key_code_e
key_kp9	include/platform/agg_platform_support.h	/^        key_kp9            = 265,$/;"	e	enum:agg::key_code_e
key_kp_divide	include/platform/agg_platform_support.h	/^        key_kp_divide      = 267,$/;"	e	enum:agg::key_code_e
key_kp_enter	include/platform/agg_platform_support.h	/^        key_kp_enter       = 271,$/;"	e	enum:agg::key_code_e
key_kp_equals	include/platform/agg_platform_support.h	/^        key_kp_equals      = 272,$/;"	e	enum:agg::key_code_e
key_kp_minus	include/platform/agg_platform_support.h	/^        key_kp_minus       = 269,$/;"	e	enum:agg::key_code_e
key_kp_multiply	include/platform/agg_platform_support.h	/^        key_kp_multiply    = 268,$/;"	e	enum:agg::key_code_e
key_kp_period	include/platform/agg_platform_support.h	/^        key_kp_period      = 266,$/;"	e	enum:agg::key_code_e
key_kp_plus	include/platform/agg_platform_support.h	/^        key_kp_plus        = 270,$/;"	e	enum:agg::key_code_e
key_left	include/platform/agg_platform_support.h	/^        key_left           = 276,$/;"	e	enum:agg::key_code_e
key_numlock	include/platform/agg_platform_support.h	/^        key_numlock        = 300,$/;"	e	enum:agg::key_code_e
key_page_down	include/platform/agg_platform_support.h	/^        key_page_down      = 281,$/;"	e	enum:agg::key_code_e
key_page_up	include/platform/agg_platform_support.h	/^        key_page_up        = 280,$/;"	e	enum:agg::key_code_e
key_pause	include/platform/agg_platform_support.h	/^        key_pause          = 19,$/;"	e	enum:agg::key_code_e
key_return	include/platform/agg_platform_support.h	/^        key_return         = 13,$/;"	e	enum:agg::key_code_e
key_right	include/platform/agg_platform_support.h	/^        key_right          = 275,$/;"	e	enum:agg::key_code_e
key_scrollock	include/platform/agg_platform_support.h	/^        key_scrollock      = 302,$/;"	e	enum:agg::key_code_e
key_tab	include/platform/agg_platform_support.h	/^        key_tab            = 9,$/;"	e	enum:agg::key_code_e
key_up	include/platform/agg_platform_support.h	/^        key_up             = 273,$/;"	e	enum:agg::key_code_e
l	examples/image_filters2.cpp	/^enum { l = 255 };$/;"	e	enum:__anon12	file:
label	examples/mol_view.cpp	/^    char     label[4];$/;"	m	struct:atom_type	file:
label	include/ctrl/agg_cbox_ctrl.h	/^        const char* label() { return m_label; }$/;"	f	class:agg::cbox_ctrl_impl
label	src/ctrl/agg_cbox_ctrl.cpp	/^    void cbox_ctrl_impl::label(const char* l)$/;"	f	class:agg::cbox_ctrl_impl
label	src/ctrl/agg_slider_ctrl.cpp	/^    void slider_ctrl_impl::label(const char* fmt)$/;"	f	class:agg::slider_ctrl_impl
last	include/agg_array.h	/^        T& last()$/;"	f	class:agg::pod_bvector
last	include/agg_array.h	/^        const T& last() const$/;"	f	class:agg::pod_bvector
last_command	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        char   last_command() const { return m_last_command; }$/;"	f	class:agg::svg::path_tokenizer
last_command	include/agg_path_storage.h	/^        unsigned last_command() const$/;"	f	class:agg::vertex_stl_storage
last_command	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::last_command() const$/;"	f	class:agg::vertex_block_storage
last_error	font_freetype/agg_font_freetype.h	/^        int         last_error()   const { return m_last_error; }$/;"	f	class:agg::font_engine_freetype_base
last_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache* last_glyph() const { return m_last_glyph; }$/;"	f	class:agg::font_cache_manager
last_number	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        double last_number() const { return m_last_number; }$/;"	f	class:agg::svg::path_tokenizer
last_vertex	include/agg_path_storage.h	/^        unsigned last_vertex(double* x, double* y) const$/;"	f	class:agg::vertex_stl_storage
last_vertex	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::last_vertex(double* x, double* y) const$/;"	f	class:agg::path_base
last_vertex	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::last_vertex(double* x, double* y) const$/;"	f	class:agg::vertex_block_storage
last_x	include/agg_path_storage.h	/^        double last_x() const$/;"	f	class:agg::vertex_stl_storage
last_x	include/agg_path_storage.h	/^    inline double path_base<VC>::last_x() const$/;"	f	class:agg::path_base
last_x	include/agg_path_storage.h	/^    inline double vertex_block_storage<T,S,P>::last_x() const$/;"	f	class:agg::vertex_block_storage
last_x	include/agg_rasterizer_compound_aa.h	/^            int      last_x;$/;"	m	struct:agg::rasterizer_compound_aa::style_info
last_y	include/agg_path_storage.h	/^        double last_y() const$/;"	f	class:agg::vertex_stl_storage
last_y	include/agg_path_storage.h	/^    inline double path_base<VC>::last_y() const$/;"	f	class:agg::path_base
last_y	include/agg_path_storage.h	/^    inline double vertex_block_storage<T,S,P>::last_y() const$/;"	f	class:agg::vertex_block_storage
layer_direct	include/agg_rasterizer_compound_aa.h	/^        layer_direct,   \/\/------layer_direct$/;"	e	enum:agg::layer_order_e
layer_inverse	include/agg_rasterizer_compound_aa.h	/^        layer_inverse   \/\/------layer_inverse$/;"	e	enum:agg::layer_order_e
layer_order	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::layer_order(layer_order_e order)$/;"	f	class:agg::rasterizer_compound_aa
layer_order_e	include/agg_rasterizer_compound_aa.h	/^    enum layer_order_e$/;"	g	namespace:agg
layer_unsorted	include/agg_rasterizer_compound_aa.h	/^        layer_unsorted, \/\/------layer_unsorted$/;"	e	enum:agg::layer_order_e
lcurr	include/agg_rasterizer_outline_aa.h	/^            int lcurr, lnext;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
left	include/agg_rasterizer_compound_aa.h	/^        int16 left, right;$/;"	m	struct:agg::cell_style_aa
left_fill	examples/flash_rasterizer.cpp	/^        int left_fill;$/;"	m	struct:agg::path_style	file:
left_fill	examples/flash_rasterizer2.cpp	/^        int left_fill;$/;"	m	struct:agg::path_style	file:
len	include/agg_dda_line.h	/^        unsigned len()    const { return m_len; }$/;"	f	class:agg::line_bresenham_interpolator
len	include/agg_line_aa_basics.h	/^        int len;$/;"	m	struct:agg::line_parameters
len	include/agg_rasterizer_outline_aa.h	/^        int len;$/;"	m	struct:agg::line_aa_vertex
len	include/agg_renderer_outline_image.h	/^        int len()      const { return m_len;      }$/;"	f	class:agg::distance_interpolator4
len	include/agg_renderer_raster_text.h	/^                unsigned len;$/;"	m	struct:agg::renderer_raster_htext::scanline_single_span::const_span
len	include/agg_scanline_bin.h	/^            coord_type len;$/;"	m	struct:agg::scanline32_bin::span
len	include/agg_scanline_bin.h	/^            int16 len;$/;"	m	struct:agg::scanline_bin::span
len	include/agg_scanline_p.h	/^            coord_type        len; \/\/ If negative, it's a solid span, covers is valid$/;"	m	struct:agg::scanline_p8::span
len	include/agg_scanline_p.h	/^            coord_type len; \/\/ If negative, it's a solid span, covers is valid$/;"	m	struct:agg::scanline32_p8::span
len	include/agg_scanline_storage_aa.h	/^                    int32    len; \/\/ If negative, it's a solid span, "covers" is valid$/;"	m	struct:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator::span
len	include/agg_scanline_storage_aa.h	/^                    int32    len; \/\/ If negative, it's a solid span, covers is valid$/;"	m	struct:agg::scanline_storage_aa::embedded_scanline::const_iterator::span
len	include/agg_scanline_storage_aa.h	/^            int32 len;       \/\/ If negative, it's a solid span, covers is valid$/;"	m	struct:agg::scanline_storage_aa::span_data
len	include/agg_scanline_storage_aa.h	/^            unsigned len;$/;"	m	struct:agg::scanline_cell_storage::extra_span
len	include/agg_scanline_storage_bin.h	/^                    int32 len;$/;"	m	struct:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator::span
len	include/agg_scanline_storage_bin.h	/^            int32 len;$/;"	m	struct:agg::scanline_storage_bin::span_data
len	include/agg_scanline_u.h	/^            coord_type  len;$/;"	m	struct:agg::scanline32_u8::span
len	include/agg_scanline_u.h	/^            coord_type  len;$/;"	m	struct:agg::scanline_u8::span
len	src/platform/win32/agg_platform_support.cpp	/^            unsigned    len;$/;"	m	struct:agg::tokenizer::token	file:
less	gpc/gpc.c	/^  struct sbt_t_shape *less;         \/* Pointer to nodes with lower y     *\/$/;"	m	struct:sbt_t_shape	typeref:struct:sbt_t_shape::sbt_t_shape	file:
lft	include/agg_dda_line.h	/^        int lft() const { return m_lft; }$/;"	f	class:agg::dda2_line_interpolator
line	examples/flash_rasterizer.cpp	/^        int line;$/;"	m	struct:agg::path_style	file:
line	examples/flash_rasterizer2.cpp	/^        int line;$/;"	m	struct:agg::path_style	file:
line	examples/graph_test.cpp	/^    line(double x1_, double y1_, double x2_, double y2_) : $/;"	f	struct:line
line	examples/graph_test.cpp	/^struct line$/;"	s	file:
line	examples/mol_view.cpp	/^        line() :$/;"	f	class:agg::line
line	examples/mol_view.cpp	/^        line(double x1, double y1, double x2, double y2, double thickness) :$/;"	f	class:agg::line
line	examples/mol_view.cpp	/^    class line$/;"	c	namespace:agg	file:
line	include/agg_rasterizer_cells_aa.h	/^    void rasterizer_cells_aa<Cell>::line(int x1, int y1, int x2, int y2)$/;"	f	class:agg::rasterizer_cells_aa
line	include/agg_renderer_primitives.h	/^        void line(int x1, int y1, int x2, int y2, bool last=false)$/;"	f	class:agg::renderer_primitives
line0	include/agg_renderer_outline_aa.h	/^        void line0(const line_parameters& lp)$/;"	f	class:agg::renderer_outline_aa
line0	include/agg_renderer_outline_image.h	/^        void line0(const line_parameters&)$/;"	f	class:agg::renderer_outline_image
line0_no_clip	include/agg_renderer_outline_aa.h	/^        void line0_no_clip(const line_parameters& lp)$/;"	f	class:agg::renderer_outline_aa
line1	include/agg_renderer_outline_aa.h	/^        void line1(const line_parameters& lp, int sx, int sy)$/;"	f	class:agg::renderer_outline_aa
line1	include/agg_renderer_outline_image.h	/^        void line1(const line_parameters&, int, int)$/;"	f	class:agg::renderer_outline_image
line1_no_clip	include/agg_renderer_outline_aa.h	/^        void line1_no_clip(const line_parameters& lp, int sx, int sy)$/;"	f	class:agg::renderer_outline_aa
line2	include/agg_renderer_outline_aa.h	/^        void line2(const line_parameters& lp, int ex, int ey)$/;"	f	class:agg::renderer_outline_aa
line2	include/agg_renderer_outline_image.h	/^        void line2(const line_parameters&, int, int)$/;"	f	class:agg::renderer_outline_image
line2_no_clip	include/agg_renderer_outline_aa.h	/^        void line2_no_clip(const line_parameters& lp, int ex, int ey)$/;"	f	class:agg::renderer_outline_aa
line3	include/agg_renderer_outline_aa.h	/^        void line3(const line_parameters& lp, $/;"	f	class:agg::renderer_outline_aa
line3	include/agg_renderer_outline_image.h	/^        void line3(const line_parameters& lp, $/;"	f	class:agg::renderer_outline_image
line3_no_clip	include/agg_renderer_outline_aa.h	/^        void line3_no_clip(const line_parameters& lp, $/;"	f	class:agg::renderer_outline_aa
line3_no_clip	include/agg_renderer_outline_image.h	/^        void line3_no_clip(const line_parameters& lp, $/;"	f	class:agg::renderer_outline_image
line_aa_vertex	include/agg_rasterizer_outline_aa.h	/^        line_aa_vertex() {}$/;"	f	struct:agg::line_aa_vertex
line_aa_vertex	include/agg_rasterizer_outline_aa.h	/^        line_aa_vertex(int x_, int y_) :$/;"	f	struct:agg::line_aa_vertex
line_aa_vertex	include/agg_rasterizer_outline_aa.h	/^    struct line_aa_vertex$/;"	s	namespace:agg
line_adaptor	include/agg_path_storage.h	/^        line_adaptor() : m_line(m_coord, 2, false) {}$/;"	f	class:agg::line_adaptor
line_adaptor	include/agg_path_storage.h	/^        line_adaptor(double x1, double y1, double x2, double y2) :$/;"	f	class:agg::line_adaptor
line_adaptor	include/agg_path_storage.h	/^    class line_adaptor$/;"	c	namespace:agg
line_bresenham_interpolator	include/agg_dda_line.h	/^        line_bresenham_interpolator(int x1, int y1, int x2, int y2) :$/;"	f	class:agg::line_bresenham_interpolator
line_bresenham_interpolator	include/agg_dda_line.h	/^    class line_bresenham_interpolator$/;"	c	namespace:agg
line_cap	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::line_cap(line_cap_e cap)$/;"	f	class:agg::svg::path_renderer
line_cap	examples/svg_viewer/agg_svg_path_renderer.h	/^        line_cap_e   line_cap;$/;"	m	struct:agg::svg::path_attributes
line_cap	include/agg_conv_stroke.h	/^        line_cap_e   line_cap()   const { return base_type::generator().line_cap();  }$/;"	f	struct:agg::conv_stroke
line_cap	include/agg_conv_stroke.h	/^        void line_cap(line_cap_e lc)     { base_type::generator().line_cap(lc);  }$/;"	f	struct:agg::conv_stroke
line_cap	include/agg_math_stroke.h	/^        line_cap_e   line_cap()   const { return m_line_cap; }$/;"	f	class:agg::math_stroke
line_cap	include/agg_math_stroke.h	/^        void line_cap(line_cap_e lc)     { m_line_cap = lc; }$/;"	f	class:agg::math_stroke
line_cap	include/agg_vcgen_contour.h	/^        line_cap_e   line_cap()   const { return m_stroker.line_cap(); }$/;"	f	class:agg::vcgen_contour
line_cap	include/agg_vcgen_contour.h	/^        void line_cap(line_cap_e lc)     { m_stroker.line_cap(lc); }$/;"	f	class:agg::vcgen_contour
line_cap	include/agg_vcgen_stroke.h	/^        line_cap_e   line_cap()   const { return m_stroker.line_cap(); }$/;"	f	class:agg::vcgen_stroke
line_cap	include/agg_vcgen_stroke.h	/^        void line_cap(line_cap_e lc)     { m_stroker.line_cap(lc); }$/;"	f	class:agg::vcgen_stroke
line_cap_e	include/agg_math_stroke.h	/^    enum line_cap_e$/;"	g	namespace:agg
line_clip_y	include/agg_rasterizer_sl_clip.h	/^        AGG_INLINE void line_clip_y(Rasterizer& ras,$/;"	f	class:agg::rasterizer_sl_clip
line_color	include/agg_renderer_primitives.h	/^        const color_type& line_color() const { return m_line_color; }$/;"	f	class:agg::renderer_primitives
line_color	include/agg_renderer_primitives.h	/^        void line_color(const color_type& c) { m_line_color = c; }$/;"	f	class:agg::renderer_primitives
line_color	include/ctrl/agg_bezier_ctrl.h	/^        void line_color(const ColorT& c) { m_color = c; }$/;"	f	class:agg::bezier_ctrl
line_color	include/ctrl/agg_bezier_ctrl.h	/^        void line_color(const ColorT& c) { m_color = c; }$/;"	f	class:agg::curve3_ctrl
line_color	include/ctrl/agg_polygon_ctrl.h	/^        void line_color(const ColorT& c) { m_color = c; }$/;"	f	class:agg::polygon_ctrl
line_coord	include/agg_line_aa_basics.h	/^    struct line_coord$/;"	s	namespace:agg
line_coord_sat	include/agg_line_aa_basics.h	/^    struct line_coord_sat$/;"	s	namespace:agg
line_dbl_hr	include/agg_line_aa_basics.h	/^    AGG_INLINE int line_dbl_hr(int x) $/;"	f	namespace:agg
line_hr	include/agg_line_aa_basics.h	/^    AGG_INLINE int line_hr(int x) $/;"	f	namespace:agg
line_image_pattern	include/agg_renderer_outline_image.h	/^        line_image_pattern(const Filter& filter) :$/;"	f	class:agg::line_image_pattern
line_image_pattern	include/agg_renderer_outline_image.h	/^        line_image_pattern(const Filter& filter, const Source& src) :$/;"	f	class:agg::line_image_pattern
line_image_pattern	include/agg_renderer_outline_image.h	/^    template<class Filter> class line_image_pattern$/;"	c	namespace:agg
line_image_pattern_pow2	include/agg_renderer_outline_image.h	/^        line_image_pattern_pow2(const Filter& filter) :$/;"	f	class:agg::line_image_pattern_pow2
line_image_pattern_pow2	include/agg_renderer_outline_image.h	/^        line_image_pattern_pow2(const Filter& filter, const Source& src) :$/;"	f	class:agg::line_image_pattern_pow2
line_image_pattern_pow2	include/agg_renderer_outline_image.h	/^    template<class Filter> class line_image_pattern_pow2 : $/;"	c	namespace:agg
line_image_scale	include/agg_renderer_outline_image.h	/^        line_image_scale(const Source& src, double height) :$/;"	f	class:agg::line_image_scale
line_image_scale	include/agg_renderer_outline_image.h	/^    template<class Source> class line_image_scale$/;"	c	namespace:agg
line_interpolator_aa0	include/agg_renderer_outline_aa.h	/^        line_interpolator_aa0(renderer_type& ren, const line_parameters& lp) :$/;"	f	class:agg::line_interpolator_aa0
line_interpolator_aa0	include/agg_renderer_outline_aa.h	/^    template<class Renderer> class line_interpolator_aa0 :$/;"	c	namespace:agg
line_interpolator_aa1	include/agg_renderer_outline_aa.h	/^        line_interpolator_aa1(renderer_type& ren, const line_parameters& lp, $/;"	f	class:agg::line_interpolator_aa1
line_interpolator_aa1	include/agg_renderer_outline_aa.h	/^    template<class Renderer> class line_interpolator_aa1 :$/;"	c	namespace:agg
line_interpolator_aa2	include/agg_renderer_outline_aa.h	/^        line_interpolator_aa2(renderer_type& ren, const line_parameters& lp, $/;"	f	class:agg::line_interpolator_aa2
line_interpolator_aa2	include/agg_renderer_outline_aa.h	/^    template<class Renderer> class line_interpolator_aa2 :$/;"	c	namespace:agg
line_interpolator_aa3	include/agg_renderer_outline_aa.h	/^        line_interpolator_aa3(renderer_type& ren, const line_parameters& lp, $/;"	f	class:agg::line_interpolator_aa3
line_interpolator_aa3	include/agg_renderer_outline_aa.h	/^    template<class Renderer> class line_interpolator_aa3 :$/;"	c	namespace:agg
line_interpolator_aa_base	include/agg_renderer_outline_aa.h	/^        line_interpolator_aa_base(renderer_type& ren, const line_parameters& lp) :$/;"	f	class:agg::line_interpolator_aa_base
line_interpolator_aa_base	include/agg_renderer_outline_aa.h	/^    template<class Renderer> class line_interpolator_aa_base$/;"	c	namespace:agg
line_interpolator_image	include/agg_renderer_outline_image.h	/^        line_interpolator_image(renderer_type& ren, const line_parameters& lp,$/;"	f	class:agg::line_interpolator_image
line_interpolator_image	include/agg_renderer_outline_image.h	/^    template<class Renderer> class line_interpolator_image$/;"	c	namespace:agg
line_join	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::line_join(line_join_e join)$/;"	f	class:agg::svg::path_renderer
line_join	examples/svg_viewer/agg_svg_path_renderer.h	/^        line_join_e  line_join;$/;"	m	struct:agg::svg::path_attributes
line_join	include/agg_conv_contour.h	/^        line_join_e line_join() const { return base_type::generator().line_join(); }$/;"	f	struct:agg::conv_contour
line_join	include/agg_conv_contour.h	/^        void line_join(line_join_e lj) { base_type::generator().line_join(lj); }$/;"	f	struct:agg::conv_contour
line_join	include/agg_conv_stroke.h	/^        line_join_e  line_join()  const { return base_type::generator().line_join(); }$/;"	f	struct:agg::conv_stroke
line_join	include/agg_conv_stroke.h	/^        void line_join(line_join_e lj)   { base_type::generator().line_join(lj); }$/;"	f	struct:agg::conv_stroke
line_join	include/agg_math_stroke.h	/^        line_join_e  line_join()  const { return m_line_join; }$/;"	f	class:agg::math_stroke
line_join	include/agg_math_stroke.h	/^        void line_join(line_join_e lj)   { m_line_join = lj; }$/;"	f	class:agg::math_stroke
line_join	include/agg_rasterizer_outline_aa.h	/^        bool line_join() const { return m_line_join; }$/;"	f	class:agg::rasterizer_outline_aa
line_join	include/agg_rasterizer_outline_aa.h	/^        void line_join(outline_aa_join_e join) $/;"	f	class:agg::rasterizer_outline_aa
line_join	include/agg_vcgen_contour.h	/^        line_join_e  line_join()  const { return m_stroker.line_join(); }$/;"	f	class:agg::vcgen_contour
line_join	include/agg_vcgen_contour.h	/^        void line_join(line_join_e lj)   { m_stroker.line_join(lj); }$/;"	f	class:agg::vcgen_contour
line_join	include/agg_vcgen_stroke.h	/^        line_join_e  line_join()  const { return m_stroker.line_join(); }$/;"	f	class:agg::vcgen_stroke
line_join	include/agg_vcgen_stroke.h	/^        void line_join(line_join_e lj)   { m_stroker.line_join(lj); }$/;"	f	class:agg::vcgen_stroke
line_join_e	include/agg_math_stroke.h	/^    enum line_join_e$/;"	g	namespace:agg
line_lr	include/agg_dda_line.h	/^        static int line_lr(int v) { return v >> subpixel_shift; }$/;"	f	class:agg::line_bresenham_interpolator
line_max_coord	include/agg_line_aa_basics.h	/^        line_max_coord      = (1 << 28) - 1,              \/\/----line_max_coord$/;"	e	enum:agg::line_subpixel_scale_e
line_max_length	include/agg_line_aa_basics.h	/^        line_max_length = 1 << (line_subpixel_shift + 10) \/\/----line_max_length$/;"	e	enum:agg::line_subpixel_scale_e
line_mr	include/agg_line_aa_basics.h	/^    AGG_INLINE int line_mr(int x) $/;"	f	namespace:agg
line_mr_subpixel_mask	include/agg_line_aa_basics.h	/^        line_mr_subpixel_mask  = line_mr_subpixel_scale - 1   \/\/----line_mr_subpixel_mask $/;"	e	enum:agg::line_mr_subpixel_scale_e
line_mr_subpixel_scale	include/agg_line_aa_basics.h	/^        line_mr_subpixel_scale = 1 << line_mr_subpixel_shift, \/\/----line_mr_subpixel_scale $/;"	e	enum:agg::line_mr_subpixel_scale_e
line_mr_subpixel_scale_e	include/agg_line_aa_basics.h	/^    enum line_mr_subpixel_scale_e$/;"	g	namespace:agg
line_mr_subpixel_shift	include/agg_line_aa_basics.h	/^        line_mr_subpixel_shift = 4,                           \/\/----line_mr_subpixel_shift$/;"	e	enum:agg::line_mr_subpixel_scale_e
line_parameters	include/agg_line_aa_basics.h	/^        line_parameters() {}$/;"	f	struct:agg::line_parameters
line_parameters	include/agg_line_aa_basics.h	/^        line_parameters(int x1_, int y1_, int x2_, int y2_, int len_) :$/;"	f	struct:agg::line_parameters
line_parameters	include/agg_line_aa_basics.h	/^    struct line_parameters$/;"	s	namespace:agg
line_profile_aa	include/agg_renderer_outline_aa.h	/^        line_profile_aa() : $/;"	f	class:agg::line_profile_aa
line_profile_aa	include/agg_renderer_outline_aa.h	/^        line_profile_aa(double w, const GammaF& gamma_function) : $/;"	f	class:agg::line_profile_aa
line_profile_aa	include/agg_renderer_outline_aa.h	/^    class line_profile_aa$/;"	c	namespace:agg
line_rel	include/agg_path_storage.h	/^    inline void path_base<VC>::line_rel(double dx, double dy)$/;"	f	class:agg::path_base
line_space	src/agg_gsv_text.cpp	/^    void gsv_text::line_space(double line_space)$/;"	f	class:agg::gsv_text
line_subpixel_mask	include/agg_line_aa_basics.h	/^        line_subpixel_mask  = line_subpixel_scale - 1,    \/\/----line_subpixel_mask$/;"	e	enum:agg::line_subpixel_scale_e
line_subpixel_scale	include/agg_line_aa_basics.h	/^        line_subpixel_scale  = 1 << line_subpixel_shift,  \/\/----line_subpixel_scale$/;"	e	enum:agg::line_subpixel_scale_e
line_subpixel_scale_e	include/agg_line_aa_basics.h	/^    enum line_subpixel_scale_e$/;"	g	namespace:agg
line_subpixel_shift	include/agg_line_aa_basics.h	/^        line_subpixel_shift = 8,                          \/\/----line_subpixel_shift$/;"	e	enum:agg::line_subpixel_scale_e
line_to	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::line_to(double x,  double y, bool rel)         \/\/ L, l$/;"	f	class:agg::svg::path_renderer
line_to	include/agg_path_storage.h	/^    inline void path_base<VC>::line_to(double x, double y)$/;"	f	class:agg::path_base
line_to	include/agg_path_storage_integer.h	/^        void line_to(T x, T y)$/;"	f	class:agg::path_storage_integer
line_to	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::line_to(int x, int y)$/;"	f	class:agg::rasterizer_compound_aa
line_to	include/agg_rasterizer_outline.h	/^        void line_to(int x, int y)$/;"	f	class:agg::rasterizer_outline
line_to	include/agg_rasterizer_outline_aa.h	/^        void line_to(int x, int y)$/;"	f	class:agg::rasterizer_outline_aa
line_to	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::line_to(int x, int y)$/;"	f	class:agg::rasterizer_scanline_aa
line_to	include/agg_rasterizer_sl_clip.h	/^        void line_to(Rasterizer& ras, coord_type x2, coord_type y2) $/;"	f	class:agg::rasterizer_sl_no_clip
line_to	include/agg_rasterizer_sl_clip.h	/^        void line_to(Rasterizer& ras, coord_type x2, coord_type y2)$/;"	f	class:agg::rasterizer_sl_clip
line_to	include/agg_renderer_primitives.h	/^        void line_to(int x, int y, bool last=false)$/;"	f	class:agg::renderer_primitives
line_to	src/agg_trans_single_path.cpp	/^    void trans_single_path::line_to(double x, double y)$/;"	f	class:agg::trans_single_path
line_to	src/agg_vpgen_clip_polygon.cpp	/^    void vpgen_clip_polygon::line_to(double x, double y)$/;"	f	class:agg::vpgen_clip_polygon
line_to	src/agg_vpgen_clip_polyline.cpp	/^    void vpgen_clip_polyline::line_to(double x, double y)$/;"	f	class:agg::vpgen_clip_polyline
line_to	src/agg_vpgen_segmentator.cpp	/^    void vpgen_segmentator::line_to(double x, double y)$/;"	f	class:agg::vpgen_segmentator
line_to1	src/agg_trans_double_path.cpp	/^    void trans_double_path::line_to1(double x, double y)$/;"	f	class:agg::trans_double_path
line_to2	src/agg_trans_double_path.cpp	/^    void trans_double_path::line_to2(double x, double y)$/;"	f	class:agg::trans_double_path
line_to_d	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::line_to_d(double x, double y) $/;"	f	class:agg::rasterizer_compound_aa
line_to_d	include/agg_rasterizer_outline.h	/^        void line_to_d(double x, double y)$/;"	f	class:agg::rasterizer_outline
line_to_d	include/agg_rasterizer_outline_aa.h	/^        void line_to_d(double x, double y)$/;"	f	class:agg::rasterizer_outline_aa
line_to_d	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::line_to_d(double x, double y) $/;"	f	class:agg::rasterizer_scanline_aa
line_width	include/agg_renderer_outline_image.h	/^        int line_width()    const { return m_half_height_hr; }$/;"	f	class:agg::line_image_pattern
line_width	include/ctrl/agg_bezier_ctrl.h	/^        double line_width() const   { return m_stroke.width(); }$/;"	f	class:agg::bezier_ctrl_impl
line_width	include/ctrl/agg_bezier_ctrl.h	/^        double line_width() const   { return m_stroke.width(); }$/;"	f	class:agg::curve3_ctrl_impl
line_width	include/ctrl/agg_bezier_ctrl.h	/^        void   line_width(double w) { m_stroke.width(w); }$/;"	f	class:agg::bezier_ctrl_impl
line_width	include/ctrl/agg_bezier_ctrl.h	/^        void   line_width(double w) { m_stroke.width(w); }$/;"	f	class:agg::curve3_ctrl_impl
line_width	include/ctrl/agg_polygon_ctrl.h	/^        double line_width() const   { return m_stroke.width(); }$/;"	f	class:agg::polygon_ctrl_impl
line_width	include/ctrl/agg_polygon_ctrl.h	/^        void   line_width(double w) { m_stroke.width(w); }$/;"	f	class:agg::polygon_ctrl_impl
lmt_node	gpc/gpc.c	/^} lmt_node;$/;"	t	typeref:struct:lmt_shape	file:
lmt_shape	gpc/gpc.c	/^typedef struct lmt_shape            \/* Local minima table                *\/$/;"	s	file:
lnext	include/agg_rasterizer_outline_aa.h	/^            int lcurr, lnext;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
load	include/agg_dda_line.h	/^        void load(const save_data_type* data)$/;"	f	class:agg::dda2_line_interpolator
load_font	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::load_font(const char* font_name, $/;"	f	class:agg::font_engine_freetype_base
load_font	src/agg_gsv_text.cpp	/^    void gsv_text::load_font(const char* file)$/;"	f	class:agg::gsv_text
load_from	include/agg_trans_affine.h	/^        const trans_affine& load_from(const double* m)$/;"	f	struct:agg::trans_affine
load_from	include/agg_trans_perspective.h	/^    inline const trans_perspective& trans_perspective::load_from(const double* m)$/;"	f	class:agg::trans_perspective
load_from_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    bool pixel_map::load_from_bmp(FILE *fd)$/;"	f	class:agg::pixel_map
load_from_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    bool pixel_map::load_from_bmp(const char *filename)$/;"	f	class:agg::pixel_map
load_from_qt	src/platform/mac/agg_mac_pmap.cpp	/^    bool pixel_map::load_from_qt(const char *filename)$/;"	f	class:agg::pixel_map
load_img	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_specific::load_img(const char* file, unsigned idx,$/;"	f	class:agg::platform_specific
load_img	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_img	src/platform/BeOS/agg_platform_support.cpp	/^    bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_img	src/platform/X11/agg_platform_support.cpp	/^    bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_img	src/platform/mac/agg_platform_support.cpp	/^    bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_img	src/platform/sdl/agg_platform_support.cpp	/^    bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_img	src/platform/win32/agg_platform_support.cpp	/^    bool platform_support::load_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
load_kerning_pairs	font_win32_tt/agg_font_win32_tt.cpp	/^    void font_engine_win32_tt_base::load_kerning_pairs()$/;"	f	class:agg::font_engine_win32_tt_base
load_pmap	src/platform/mac/agg_platform_support.cpp	/^    bool platform_specific::load_pmap(const char* fn, unsigned idx, $/;"	f	class:agg::platform_specific
load_pmap	src/platform/win32/agg_platform_support.cpp	/^    bool platform_specific::load_pmap(const char* fn, unsigned idx, $/;"	f	class:agg::platform_specific
local_scale	include/agg_span_interpolator_persp.h	/^        void local_scale(int* x, int* y)$/;"	f	class:agg::span_interpolator_persp_exact
local_scale	include/agg_span_interpolator_persp.h	/^        void local_scale(int* x, int* y)$/;"	f	class:agg::span_interpolator_persp_lerp
local_scale	include/agg_span_subdiv_adaptor.h	/^        void local_scale(int* x, int* y) const$/;"	f	class:agg::span_subdiv_adaptor
long_type	include/agg_color_gray.h	/^        typedef int32  long_type;$/;"	t	struct:agg::gray8
long_type	include/agg_color_gray.h	/^        typedef int64  long_type;$/;"	t	struct:agg::gray16
long_type	include/agg_color_rgba.h	/^        typedef int32  long_type;$/;"	t	struct:agg::rgba8
long_type	include/agg_color_rgba.h	/^        typedef int64  long_type;$/;"	t	struct:agg::rgba16
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_color_burn
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_color_dodge
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_contrast
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_difference
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_exclusion
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_hard_light
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_invert
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_invert_rgb
long_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	struct:agg::comp_op_rgba_soft_light
long_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_gray
long_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_gray_affine
long_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_rgb
long_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_rgb_affine
long_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_rgba
long_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::long_type long_type;$/;"	t	class:agg::span_image_resample_rgba_affine
m	examples/graph_test.cpp	/^    marker_type    m;$/;"	m	struct:dash_stroke_draft_arrow	file:
m	examples/graph_test.cpp	/^    marker_type    m;$/;"	m	struct:dash_stroke_fine_arrow	file:
m	examples/graph_test.cpp	/^    marker_type    m;$/;"	m	struct:stroke_draft_arrow	file:
m	examples/graph_test.cpp	/^    marker_type    m;$/;"	m	struct:stroke_fine_arrow	file:
m_1dy	include/agg_span_gouraud_gray.h	/^            double m_1dy;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_1dy	include/agg_span_gouraud_rgba.h	/^            double m_1dy;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_a	include/agg_span_gouraud_gray.h	/^            int    m_a;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_a	include/agg_span_gouraud_rgba.h	/^            int    m_a;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_a1	include/agg_span_gouraud_gray.h	/^            int    m_a1;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_a1	include/agg_span_gouraud_rgba.h	/^            int    m_a1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_accurate_joins	examples/rasterizers2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_accurate_joins;$/;"	m	class:the_application	file:
m_active_color	include/ctrl/agg_cbox_ctrl.h	/^        ColorT m_active_color;$/;"	m	class:agg::cbox_ctrl
m_active_color	include/ctrl/agg_rbox_ctrl.h	/^        ColorT m_active_color;$/;"	m	class:agg::rbox_ctrl
m_active_pnt	include/ctrl/agg_spline_ctrl.h	/^        int      m_active_pnt;$/;"	m	class:agg::spline_ctrl_impl
m_active_pnt_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_active_pnt_color;$/;"	m	class:agg::gamma_ctrl
m_active_pnt_color	include/ctrl/agg_spline_ctrl.h	/^        ColorT  m_active_pnt_color;$/;"	m	class:agg::spline_ctrl
m_adaptor	examples/gradients.cpp	/^    agg::gradient_reflect_adaptor<GradientF> m_adaptor;$/;"	m	class:gradient_polymorphic_wrapper	file:
m_add	include/agg_image_accessors.h	/^        unsigned m_add;$/;"	m	class:agg::wrap_mode_reflect
m_add	include/agg_image_accessors.h	/^        unsigned m_add;$/;"	m	class:agg::wrap_mode_reflect_auto_pow2
m_add	include/agg_image_accessors.h	/^        unsigned m_add;$/;"	m	class:agg::wrap_mode_repeat
m_add	include/agg_image_accessors.h	/^        unsigned m_add;$/;"	m	class:agg::wrap_mode_repeat_auto_pow2
m_advance_x	font_freetype/agg_font_freetype.h	/^        double          m_advance_x;$/;"	m	class:agg::font_engine_freetype_base
m_advance_x	font_win32_tt/agg_font_win32_tt.h	/^        double          m_advance_x;$/;"	m	class:agg::font_engine_win32_tt_base
m_advance_y	font_freetype/agg_font_freetype.h	/^        double          m_advance_y;$/;"	m	class:agg::font_engine_freetype_base
m_advance_y	font_win32_tt/agg_font_win32_tt.h	/^        double          m_advance_y;$/;"	m	class:agg::font_engine_win32_tt_base
m_affine	examples/flash_rasterizer.cpp	/^        trans_affine                              m_affine;$/;"	m	class:agg::compound_shape	file:
m_affine	examples/flash_rasterizer2.cpp	/^        trans_affine                              m_affine;$/;"	m	class:agg::compound_shape	file:
m_affine	font_freetype/agg_font_freetype.h	/^        trans_affine    m_affine;$/;"	m	class:agg::font_engine_freetype_base
m_affine	font_win32_tt/agg_font_win32_tt.h	/^        trans_affine    m_affine;$/;"	m	class:agg::font_engine_win32_tt_base
m_align_x	include/agg_trans_viewport.h	/^        double         m_align_x;$/;"	m	class:agg::trans_viewport
m_align_y	include/agg_trans_viewport.h	/^        double         m_align_y;$/;"	m	class:agg::trans_viewport
m_alloc	examples/gradient_focal.cpp	/^    span_allocator_type             m_alloc;$/;"	m	class:the_application	file:
m_alloc	include/agg_renderer_scanline.h	/^        alloc_type*    m_alloc;$/;"	m	class:agg::renderer_scanline_aa
m_alloc	include/agg_renderer_scanline.h	/^        alloc_type*    m_alloc;$/;"	m	class:agg::renderer_scanline_bin
m_allocator	include/agg_font_cache_manager.h	/^        block_allocator m_allocator;$/;"	m	class:agg::font_cache
m_alpha	examples/alpha_gradient.cpp	/^    agg::spline_ctrl<color_type> m_alpha;$/;"	m	class:the_application	file:
m_alpha	examples/component_rendering.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha;$/;"	m	class:the_application	file:
m_alpha	examples/gouraud.cpp	/^    agg::slider_ctrl<agg::rgba> m_alpha;$/;"	m	class:the_application	file:
m_alpha	examples/image_alpha.cpp	/^    agg::spline_ctrl<agg::rgba8> m_alpha;$/;"	m	class:the_application	file:
m_alpha	examples/rasterizers.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_alpha;$/;"	m	class:the_application	file:
m_alpha	include/agg_span_pattern_gray.h	/^        value_type   m_alpha;$/;"	m	class:agg::span_pattern_gray
m_alpha	include/agg_span_pattern_rgb.h	/^        value_type   m_alpha;$/;"	m	class:agg::span_pattern_rgb
m_alpha1	examples/rasterizer_compound.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha1;$/;"	m	class:the_application	file:
m_alpha2	examples/rasterizer_compound.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha2;$/;"	m	class:the_application	file:
m_alpha3	examples/rasterizer_compound.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha3;$/;"	m	class:the_application	file:
m_alpha4	examples/rasterizer_compound.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha4;$/;"	m	class:the_application	file:
m_alpha_array	examples/image_alpha.cpp	/^        const alpha_type* m_alpha_array;$/;"	m	class:agg::span_conv_brightness_alpha_rgb8	file:
m_alpha_buf	examples/alpha_mask.cpp	/^    unsigned char* m_alpha_buf;$/;"	m	class:the_application	file:
m_alpha_buf	examples/alpha_mask2.cpp	/^    unsigned char* m_alpha_buf;$/;"	m	class:the_application	file:
m_alpha_buf	examples/alpha_mask3.cpp	/^    unsigned char* m_alpha_buf;$/;"	m	class:the_application	file:
m_alpha_dst	examples/compositing.cpp	/^    agg::slider_ctrl<color>    m_alpha_dst;$/;"	m	class:the_application	file:
m_alpha_dst	examples/compositing2.cpp	/^    agg::slider_ctrl<color>    m_alpha_dst;$/;"	m	class:the_application	file:
m_alpha_function	include/agg_span_gradient_alpha.h	/^        const AlphaF*      m_alpha_function;$/;"	m	class:agg::span_gradient_alpha
m_alpha_mask	examples/alpha_mask2.cpp	/^    alpha_mask_type m_alpha_mask;$/;"	m	class:the_application	file:
m_alpha_mask	examples/alpha_mask3.cpp	/^    alpha_mask_type m_alpha_mask;$/;"	m	class:the_application	file:
m_alpha_mask	include/agg_scanline_u.h	/^        const AlphaMask* m_alpha_mask;$/;"	m	class:agg::scanline32_u8_am
m_alpha_mask	include/agg_scanline_u.h	/^        const AlphaMask* m_alpha_mask;$/;"	m	class:agg::scanline_u8_am
m_alpha_mask_rbuf	examples/alpha_mask2.cpp	/^    agg::rendering_buffer m_alpha_mask_rbuf;$/;"	m	class:the_application	file:
m_alpha_mask_rbuf	examples/alpha_mask3.cpp	/^    agg::rendering_buffer m_alpha_mask_rbuf;$/;"	m	class:the_application	file:
m_alpha_rbuf	examples/alpha_mask.cpp	/^    agg::rendering_buffer m_alpha_rbuf;$/;"	m	class:the_application	file:
m_alpha_slider	examples/lion.cpp	/^    agg::slider_ctrl<agg::rgba8> m_alpha_slider;$/;"	m	class:the_application	file:
m_alpha_src	examples/compositing.cpp	/^    agg::slider_ctrl<color>    m_alpha_src;$/;"	m	class:the_application	file:
m_alpha_src	examples/compositing2.cpp	/^    agg::slider_ctrl<color>    m_alpha_src;$/;"	m	class:the_application	file:
m_am	include/agg_bspline.h	/^        pod_array<double> m_am;$/;"	m	class:agg::bspline
m_amask	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_amask;$/;"	m	class:agg::platform_specific	file:
m_amplitude	examples/distortions.cpp	/^    agg::slider_ctrl<agg::rgba8> m_amplitude;$/;"	m	class:the_application	file:
m_amplitude	examples/distortions.cpp	/^    double m_amplitude;$/;"	m	class:periodic_distortion	file:
m_angle	examples/alpha_mask3.cpp	/^    double m_angle;$/;"	m	class:spiral	file:
m_angle	examples/distortions.cpp	/^    agg::slider_ctrl<agg::rgba8> m_angle;$/;"	m	class:the_application	file:
m_angle	examples/gpc_test.cpp	/^    double m_angle;$/;"	m	class:spiral	file:
m_angle	examples/gradients.cpp	/^    double m_angle;$/;"	m	class:the_application	file:
m_angle	examples/image1.cpp	/^    agg::slider_ctrl<agg::rgba8> m_angle;$/;"	m	class:the_application	file:
m_angle	examples/mol_view.cpp	/^    double     m_angle;$/;"	m	class:the_application	file:
m_angle	examples/rasterizers2.cpp	/^    double m_angle;$/;"	m	class:spiral	file:
m_angle	examples/scanline_boolean2.cpp	/^    double m_angle;$/;"	m	class:spiral	file:
m_angle	include/agg_arc.h	/^        double   m_angle;$/;"	m	class:agg::arc
m_angle_delta	examples/idea.cpp	/^    agg::slider_ctrl<agg::rgba8> m_angle_delta;$/;"	m	class:the_application	file:
m_angle_tolerance	examples/bezier_div.cpp	/^    agg::slider_ctrl<agg::rgba8> m_angle_tolerance;$/;"	m	class:the_application	file:
m_angle_tolerance	include/agg_curves.h	/^        double               m_angle_tolerance;$/;"	m	class:agg::curve3_div
m_angle_tolerance	include/agg_curves.h	/^        double               m_angle_tolerance;$/;"	m	class:agg::curve4_div
m_animate	examples/trans_curve1.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_animate;$/;"	m	class:the_application	file:
m_animate	examples/trans_curve1_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_animate;$/;"	m	class:the_application	file:
m_animate	examples/trans_curve2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_animate;$/;"	m	class:the_application	file:
m_animate	examples/trans_curve2_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_animate;$/;"	m	class:the_application	file:
m_approx_scale	include/agg_math_stroke.h	/^        double       m_approx_scale;$/;"	m	class:agg::math_stroke
m_approximation_method	include/agg_curves.h	/^        curve_approximation_method_e m_approximation_method;$/;"	m	class:agg::curve3
m_approximation_method	include/agg_curves.h	/^        curve_approximation_method_e m_approximation_method;$/;"	m	class:agg::curve4
m_approximation_scale	examples/bezier_div.cpp	/^    agg::slider_ctrl<agg::rgba8> m_approximation_scale;$/;"	m	class:the_application	file:
m_approximation_scale	include/agg_curves.h	/^        double               m_approximation_scale;$/;"	m	class:agg::curve3_div
m_approximation_scale	include/agg_curves.h	/^        double               m_approximation_scale;$/;"	m	class:agg::curve4_div
m_approximation_scale	include/agg_vpgen_segmentator.h	/^        double   m_approximation_scale;$/;"	m	class:agg::vpgen_segmentator
m_arc	include/agg_bezier_arc.h	/^        bezier_arc m_arc;$/;"	m	class:agg::bezier_arc_svg
m_arc	include/agg_rounded_rect.h	/^        arc      m_arc;$/;"	m	class:agg::rounded_rect
m_array	include/agg_array.h	/^        Array& m_array;$/;"	m	class:agg::range_adaptor
m_array	include/agg_array.h	/^        T m_array[Size];$/;"	m	class:agg::pod_auto_array
m_array	include/agg_array.h	/^        T m_array[Size];$/;"	m	class:agg::pod_auto_vector
m_array	include/agg_array.h	/^        T*       m_array;$/;"	m	class:agg::pod_array
m_array	include/agg_array.h	/^        T*       m_array;$/;"	m	class:agg::pod_array_adaptor
m_array	include/agg_array.h	/^        T*       m_array;$/;"	m	class:agg::pod_vector
m_asm	include/agg_rasterizer_compound_aa.h	/^        pod_vector<int8u>      m_asm;     \/\/ Active Style Mask $/;"	m	class:agg::rasterizer_compound_aa
m_aspect	include/agg_trans_viewport.h	/^        aspect_ratio_e m_aspect;$/;"	m	class:agg::trans_viewport
m_ast	include/agg_rasterizer_compound_aa.h	/^        pod_vector<unsigned>   m_ast;     \/\/ Active Style Table (unique values)$/;"	m	class:agg::rasterizer_compound_aa
m_atom_colors	examples/mol_view.cpp	/^    agg::rgba8 m_atom_colors[end_of_atom_colors];$/;"	m	class:the_application	file:
m_atoms	examples/mol_view.cpp	/^    atom_type* m_atoms;$/;"	m	class:molecule	file:
m_attr_name	examples/svg_viewer/agg_svg_parser.h	/^        char*          m_attr_name;$/;"	m	class:agg::svg::parser
m_attr_name_len	examples/svg_viewer/agg_svg_parser.h	/^        unsigned       m_attr_name_len;$/;"	m	class:agg::svg::parser
m_attr_stack	examples/svg_viewer/agg_svg_path_renderer.h	/^        attr_storage   m_attr_stack;$/;"	m	class:agg::svg::path_renderer
m_attr_storage	examples/svg_viewer/agg_svg_path_renderer.h	/^        attr_storage   m_attr_storage;$/;"	m	class:agg::svg::path_renderer
m_attr_value	examples/svg_viewer/agg_svg_parser.h	/^        char*          m_attr_value;$/;"	m	class:agg::svg::parser
m_attr_value_len	examples/svg_viewer/agg_svg_parser.h	/^        unsigned       m_attr_value_len;$/;"	m	class:agg::svg::parser
m_auto_close	include/agg_rasterizer_scanline_aa.h	/^        bool           m_auto_close;$/;"	m	class:agg::rasterizer_scanline_aa
m_auto_detect	examples/conv_contour.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_auto_detect;$/;"	m	class:the_application	file:
m_auto_detect	include/agg_vcgen_contour.h	/^        bool                       m_auto_detect;$/;"	m	class:agg::vcgen_contour
m_avr_len	examples/mol_view.cpp	/^    double     m_avr_len;$/;"	m	class:molecule	file:
m_b	examples/gamma_tuner.cpp	/^    agg::slider_ctrl<agg::rgba8> m_b;$/;"	m	class:the_application	file:
m_b	include/agg_span_gouraud_rgba.h	/^            int    m_b;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_b1	include/agg_span_gouraud_rgba.h	/^            int    m_b1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_back_color	include/agg_span_image_filter_gray.h	/^        color_type m_back_color;$/;"	m	class:agg::span_image_filter_gray_bilinear_clip
m_back_color	include/agg_span_image_filter_rgb.h	/^        color_type m_back_color;$/;"	m	class:agg::span_image_filter_rgb_bilinear_clip
m_back_color	include/agg_span_image_filter_rgba.h	/^        color_type m_back_color;$/;"	m	class:agg::span_image_filter_rgba_bilinear_clip
m_background_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_background_color;$/;"	m	class:agg::gamma_ctrl
m_background_color	include/ctrl/agg_rbox_ctrl.h	/^        ColorT m_background_color;$/;"	m	class:agg::rbox_ctrl
m_background_color	include/ctrl/agg_scale_ctrl.h	/^        ColorT m_background_color;$/;"	m	class:agg::scale_ctrl
m_background_color	include/ctrl/agg_slider_ctrl.h	/^        ColorT m_background_color;$/;"	m	class:agg::slider_ctrl
m_background_color	include/ctrl/agg_spline_ctrl.h	/^        ColorT  m_background_color;$/;"	m	class:agg::spline_ctrl
m_base_angle	examples/trans_polar.cpp	/^        double m_base_angle;$/;"	m	class:agg::trans_polar	file:
m_base_height	include/agg_trans_double_path.h	/^        double         m_base_height;$/;"	m	class:agg::trans_double_path
m_base_length	include/agg_trans_double_path.h	/^        double         m_base_length;$/;"	m	class:agg::trans_double_path
m_base_length	include/agg_trans_single_path.h	/^        double         m_base_length;$/;"	m	class:agg::trans_single_path
m_base_scale	examples/trans_polar.cpp	/^        double m_base_scale;$/;"	m	class:agg::trans_polar	file:
m_base_x	examples/trans_polar.cpp	/^        double m_base_x;$/;"	m	class:agg::trans_polar	file:
m_base_y	examples/trans_polar.cpp	/^        double m_base_y;$/;"	m	class:agg::trans_polar	file:
m_benchmark	examples/graph_test.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_benchmark;$/;"	m	class:the_application	file:
m_bessel	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_bessel;$/;"	m	class:the_application	file:
m_bglyph	include/agg_gsv_text.h	/^        int8*           m_bglyph;$/;"	m	class:agg::gsv_text
m_bicubic	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_bicubic;$/;"	m	class:the_application	file:
m_big_endian	include/agg_glyph_raster_bin.h	/^        bool m_big_endian;$/;"	m	class:agg::glyph_raster_bin
m_big_endian	include/agg_gsv_text.h	/^        bool            m_big_endian;$/;"	m	class:agg::gsv_text
m_bilinear	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_bilinear;$/;"	m	class:the_application	file:
m_bitmap	src/platform/AmigaOS/agg_platform_support.cpp	/^		BitMap* m_bitmap;$/;"	m	class:agg::platform_specific	file:
m_bits	include/agg_bitset_iterator.h	/^        const int8u* m_bits;$/;"	m	class:agg::bitset_iterator
m_bits	include/agg_glyph_raster_bin.h	/^        const int8u* m_bits;$/;"	m	class:agg::glyph_raster_bin
m_bk_buf	include/agg_image_accessors.h	/^        int8u              m_bk_buf[4];$/;"	m	class:agg::image_accessor_clip
m_blackman	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_blackman;$/;"	m	class:the_application	file:
m_blender	include/agg_pixfmt_rgb.h	/^        Blender    m_blender;$/;"	m	class:agg::pixfmt_alpha_blend_rgb
m_blender	include/agg_pixfmt_rgb_packed.h	/^        Blender    m_blender;$/;"	m	class:agg::pixfmt_alpha_blend_rgb_packed
m_block_ptr_inc	include/agg_array.h	/^        unsigned        m_block_ptr_inc;$/;"	m	class:agg::pod_bvector
m_block_ptr_inc	include/agg_array.h	/^        unsigned    m_block_ptr_inc;$/;"	m	class:agg::block_allocator
m_block_size	include/agg_array.h	/^        unsigned    m_block_size;$/;"	m	class:agg::block_allocator
m_blocks	include/agg_array.h	/^        T**             m_blocks;$/;"	m	class:agg::pod_bvector
m_blocks	include/agg_array.h	/^        block_type* m_blocks;$/;"	m	class:agg::block_allocator
m_blur	examples/image_resample.cpp	/^    agg::slider_ctrl<agg::rgba>  m_blur;$/;"	m	class:the_application	file:
m_blur	examples/pattern_resample.cpp	/^    agg::slider_ctrl<agg::rgba>  m_blur;$/;"	m	class:the_application	file:
m_blur_x	include/agg_span_image_filter.h	/^        double m_blur_x;$/;"	m	class:agg::span_image_resample_affine
m_blur_x	include/agg_span_image_filter.h	/^        int m_blur_x;$/;"	m	class:agg::span_image_resample
m_blur_y	include/agg_span_image_filter.h	/^        double m_blur_y;$/;"	m	class:agg::span_image_resample_affine
m_blur_y	include/agg_span_image_filter.h	/^        int m_blur_y;$/;"	m	class:agg::span_image_resample
m_bmask	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_bmask;$/;"	m	class:agg::platform_specific	file:
m_bmp	include/platform/win32/agg_win32_bmp.h	/^        BITMAPINFO*    m_bmp;$/;"	m	class:agg::pixel_map
m_bond	examples/mol_view.cpp	/^    const bond_type& m_bond;$/;"	m	class:bond_vertex_generator	file:
m_bonds	examples/mol_view.cpp	/^    bond_type* m_bonds;$/;"	m	class:molecule	file:
m_border_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_border_color;$/;"	m	class:agg::gamma_ctrl
m_border_color	include/ctrl/agg_rbox_ctrl.h	/^        ColorT m_border_color;$/;"	m	class:agg::rbox_ctrl
m_border_color	include/ctrl/agg_scale_ctrl.h	/^        ColorT m_border_color;$/;"	m	class:agg::scale_ctrl
m_border_color	include/ctrl/agg_spline_ctrl.h	/^        ColorT  m_border_color;$/;"	m	class:agg::spline_ctrl
m_border_extra	include/ctrl/agg_gamma_ctrl.h	/^        double m_border_extra;$/;"	m	class:agg::gamma_ctrl_impl
m_border_extra	include/ctrl/agg_rbox_ctrl.h	/^        double          m_border_extra;$/;"	m	class:agg::rbox_ctrl_impl
m_border_extra	include/ctrl/agg_scale_ctrl.h	/^        double   m_border_extra;$/;"	m	class:agg::scale_ctrl_impl
m_border_extra	include/ctrl/agg_slider_ctrl.h	/^        double   m_border_extra;$/;"	m	class:agg::slider_ctrl_impl
m_border_extra	include/ctrl/agg_spline_ctrl.h	/^        double   m_border_extra;$/;"	m	class:agg::spline_ctrl_impl
m_border_thickness	include/ctrl/agg_scale_ctrl.h	/^        double   m_border_thickness;$/;"	m	class:agg::scale_ctrl_impl
m_border_width	include/ctrl/agg_gamma_ctrl.h	/^        double m_border_width;$/;"	m	class:agg::gamma_ctrl_impl
m_border_width	include/ctrl/agg_rbox_ctrl.h	/^        double          m_border_width;$/;"	m	class:agg::rbox_ctrl_impl
m_border_width	include/ctrl/agg_slider_ctrl.h	/^        double   m_border_width;$/;"	m	class:agg::slider_ctrl_impl
m_border_width	include/ctrl/agg_spline_ctrl.h	/^        double   m_border_width;$/;"	m	class:agg::spline_ctrl_impl
m_bounds	font_freetype/agg_font_freetype.h	/^        rect_i          m_bounds;$/;"	m	class:agg::font_engine_freetype_base
m_bounds	font_win32_tt/agg_font_win32_tt.h	/^        rect_i          m_bounds;$/;"	m	class:agg::font_engine_win32_tt_base
m_bounds	include/agg_renderer_mclip.h	/^        rect_i                 m_bounds;$/;"	m	class:agg::renderer_mclip
m_bpp	include/platform/agg_platform_support.h	/^        unsigned         m_bpp;$/;"	m	class:agg::platform_support
m_bpp	include/platform/mac/agg_mac_pmap.h	/^        unsigned       m_bpp;$/;"	m	class:agg::pixel_map
m_bpp	include/platform/win32/agg_win32_bmp.h	/^        unsigned       m_bpp;$/;"	m	class:agg::pixel_map
m_bpp	src/platform/AmigaOS/agg_platform_support.cpp	/^		unsigned m_bpp;$/;"	m	class:agg::platform_specific	file:
m_bpp	src/platform/X11/agg_platform_support.cpp	/^        unsigned             m_bpp;$/;"	m	class:agg::platform_specific	file:
m_bpp	src/platform/mac/agg_platform_support.cpp	/^        unsigned         m_bpp;$/;"	m	class:agg::platform_specific	file:
m_bpp	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_bpp;$/;"	m	class:agg::platform_specific	file:
m_bpp	src/platform/win32/agg_platform_support.cpp	/^        unsigned      m_bpp;$/;"	m	class:agg::platform_specific	file:
m_buf	examples/svg_viewer/agg_svg_parser.h	/^        char*          m_buf;$/;"	m	class:agg::svg::parser
m_buf	include/agg_blur.h	/^        agg::pod_vector<color_type>      m_buf;$/;"	m	class:agg::recursive_blur
m_buf	include/agg_blur.h	/^        pod_vector<color_type> m_buf;$/;"	m	class:agg::stack_blur
m_buf	include/agg_renderer_outline_image.h	/^        row_ptr_cache<color_type> m_buf;$/;"	m	class:agg::line_image_pattern
m_buf	include/agg_rendering_buffer.h	/^        T*            m_buf;        \/\/ Pointer to renrdering buffer$/;"	m	class:agg::row_ptr_cache
m_buf	include/agg_rendering_buffer.h	/^        T*            m_buf;    \/\/ Pointer to renrdering buffer$/;"	m	class:agg::row_accessor
m_buf	include/platform/mac/agg_mac_pmap.h	/^        unsigned char* m_buf;$/;"	m	class:agg::pixel_map
m_buf	include/platform/win32/agg_win32_bmp.h	/^        unsigned char* m_buf;$/;"	m	class:agg::pixel_map
m_buf_img	src/platform/X11/agg_platform_support.cpp	/^        unsigned char*       m_buf_img[platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
m_buf_ptr	include/agg_array.h	/^        int8u*      m_buf_ptr;$/;"	m	class:agg::block_allocator
m_buf_window	src/platform/X11/agg_platform_support.cpp	/^        unsigned char*       m_buf_window;$/;"	m	class:agg::platform_specific	file:
m_byte_order	src/platform/X11/agg_platform_support.cpp	/^        int                  m_byte_order;$/;"	m	class:agg::platform_specific	file:
m_byte_width	include/agg_rendering_buffer_dynarow.h	/^        unsigned            m_byte_width; \/\/ Width in bytes$/;"	m	class:agg::rendering_buffer_dynarow
m_c1	examples/alpha_mask2.cpp	/^        color_type m_c1;$/;"	m	struct:agg::gradient_linear_color	file:
m_c1	examples/compositing.cpp	/^        color_type m_c1;$/;"	m	struct:agg::gradient_linear_color	file:
m_c1	examples/multi_clip.cpp	/^        color_type m_c1;$/;"	m	struct:agg::gradient_linear_color	file:
m_c1	include/agg_gradient_lut.h	/^        color_type m_c1;$/;"	m	struct:agg::color_interpolator
m_c1	include/agg_span_gouraud_gray.h	/^        gray_calc m_c1;$/;"	m	class:agg::span_gouraud_gray
m_c1	include/agg_span_gradient.h	/^        color_type m_c1;$/;"	m	struct:agg::gradient_linear_color
m_c2	examples/alpha_mask2.cpp	/^        color_type m_c2;$/;"	m	struct:agg::gradient_linear_color	file:
m_c2	examples/compositing.cpp	/^        color_type m_c2;$/;"	m	struct:agg::gradient_linear_color	file:
m_c2	examples/multi_clip.cpp	/^        color_type m_c2;$/;"	m	struct:agg::gradient_linear_color	file:
m_c2	include/agg_gradient_lut.h	/^        color_type m_c2;$/;"	m	struct:agg::color_interpolator
m_c2	include/agg_span_gouraud_gray.h	/^        gray_calc m_c2;$/;"	m	class:agg::span_gouraud_gray
m_c2	include/agg_span_gradient.h	/^        color_type m_c2;$/;"	m	struct:agg::gradient_linear_color
m_c3	include/agg_span_gouraud_gray.h	/^        gray_calc m_c3;$/;"	m	class:agg::span_gouraud_gray
m_cap	examples/conv_dash_marker.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_cap;$/;"	m	class:the_application	file:
m_cap	examples/conv_stroke.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_cap;$/;"	m	class:the_application	file:
m_capacity	include/agg_array.h	/^        unsigned m_capacity;$/;"	m	class:agg::pod_vector
m_caption	include/platform/agg_platform_support.h	/^        char             m_caption[256];$/;"	m	class:agg::platform_support
m_case_type	examples/bezier_div.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_case_type;$/;"	m	class:the_application	file:
m_catrom	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_catrom;$/;"	m	class:the_application	file:
m_ccw	include/agg_arc.h	/^        bool     m_ccw;$/;"	m	class:agg::arc
m_cell_h	examples/gouraud_mesh.cpp	/^        double   m_cell_h;$/;"	m	class:agg::mesh_ctrl	file:
m_cell_w	examples/gouraud_mesh.cpp	/^        double   m_cell_w;$/;"	m	class:agg::mesh_ctrl	file:
m_cells	include/agg_rasterizer_cells_aa.h	/^        cell_type**             m_cells;$/;"	m	class:agg::rasterizer_cells_aa
m_cells	include/agg_rasterizer_compound_aa.h	/^        pod_vector<cell_info>  m_cells;$/;"	m	class:agg::rasterizer_compound_aa
m_cells	include/agg_scanline_storage_aa.h	/^        pod_bvector<T, 12>         m_cells;$/;"	m	class:agg::scanline_cell_storage
m_center_x	examples/distortions.cpp	/^    double m_center_x;$/;"	m	class:the_application	file:
m_center_x	examples/gradients.cpp	/^    double m_center_x;$/;"	m	class:the_application	file:
m_center_x	examples/mol_view.cpp	/^    double     m_center_x;$/;"	m	class:the_application	file:
m_center_y	examples/distortions.cpp	/^    double m_center_y;$/;"	m	class:the_application	file:
m_center_y	examples/gradients.cpp	/^    double m_center_y;$/;"	m	class:the_application	file:
m_center_y	examples/mol_view.cpp	/^    double     m_center_y;$/;"	m	class:the_application	file:
m_change_stamp	font_freetype/agg_font_freetype.h	/^        int             m_change_stamp;$/;"	m	class:agg::font_engine_freetype_base
m_change_stamp	font_win32_tt/agg_font_win32_tt.h	/^        int             m_change_stamp;$/;"	m	class:agg::font_engine_win32_tt_base
m_change_stamp	include/agg_font_cache_manager.h	/^        int                 m_change_stamp;$/;"	m	class:agg::font_cache_manager
m_channel_b	examples/blur.cpp	/^    agg::cbox_ctrl<agg::rgba8>    m_channel_b;$/;"	m	class:the_application	file:
m_channel_g	examples/blur.cpp	/^    agg::cbox_ctrl<agg::rgba8>    m_channel_g;$/;"	m	class:the_application	file:
m_channel_r	examples/blur.cpp	/^    agg::cbox_ctrl<agg::rgba8>    m_channel_r;$/;"	m	class:the_application	file:
m_char_map	font_freetype/agg_font_freetype.h	/^        FT_Encoding     m_char_map;$/;"	m	class:agg::font_engine_freetype_base
m_char_set	font_win32_tt/agg_font_win32_tt.h	/^        DWORD           m_char_set;$/;"	m	class:agg::font_engine_win32_tt_base
m_chr	include/agg_gsv_text.h	/^        char            m_chr[2];$/;"	m	class:agg::gsv_text
m_clip	include/agg_renderer_mclip.h	/^        pod_bvector<rect_i, 4> m_clip;$/;"	m	class:agg::renderer_mclip
m_clip_box	include/agg_rasterizer_sl_clip.h	/^        rect_type        m_clip_box;$/;"	m	class:agg::rasterizer_sl_clip
m_clip_box	include/agg_renderer_base.h	/^        rect_i       m_clip_box;$/;"	m	class:agg::renderer_base
m_clip_box	include/agg_renderer_outline_aa.h	/^        rect_i                 m_clip_box;$/;"	m	class:agg::renderer_outline_aa
m_clip_box	include/agg_renderer_outline_image.h	/^        rect_i              m_clip_box;$/;"	m	class:agg::renderer_outline_image
m_clip_box	include/agg_vpgen_clip_polygon.h	/^        rect_d        m_clip_box;$/;"	m	class:agg::vpgen_clip_polygon
m_clip_box	include/agg_vpgen_clip_polyline.h	/^        rect_d        m_clip_box;$/;"	m	class:agg::vpgen_clip_polyline
m_clip_flags	include/agg_vpgen_clip_polygon.h	/^        unsigned      m_clip_flags;$/;"	m	class:agg::vpgen_clip_polygon
m_clipper	include/agg_rasterizer_compound_aa.h	/^        clip_type              m_clipper;$/;"	m	class:agg::rasterizer_compound_aa
m_clipper	include/agg_rasterizer_scanline_aa.h	/^        clip_type      m_clipper;$/;"	m	class:agg::rasterizer_scanline_aa
m_clipping	include/agg_rasterizer_sl_clip.h	/^        bool             m_clipping;$/;"	m	class:agg::rasterizer_sl_clip
m_clipping	include/agg_renderer_outline_aa.h	/^        bool                   m_clipping;$/;"	m	class:agg::renderer_outline_aa
m_clipping	include/agg_renderer_outline_image.h	/^        bool                m_clipping;$/;"	m	class:agg::renderer_outline_image
m_close	examples/bspline.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_close;$/;"	m	class:the_application	file:
m_close	examples/conv_contour.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_close;$/;"	m	class:the_application	file:
m_close	examples/conv_dash_marker.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_close;$/;"	m	class:the_application	file:
m_close	examples/interactive_polygon.h	/^        bool     m_close;$/;"	m	class:agg::simple_polygon_vertex_source
m_close	examples/trans_curve1.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_close;$/;"	m	class:the_application	file:
m_close	examples/trans_curve1_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_close;$/;"	m	class:the_application	file:
m_close	include/ctrl/agg_polygon_ctrl.h	/^        bool     m_close;$/;"	m	class:agg::simple_polygon_vertex_source
m_close_atom	src/platform/X11/agg_platform_support.cpp	/^        Atom                 m_close_atom;$/;"	m	class:agg::platform_specific	file:
m_closed	include/agg_path_storage.h	/^        bool     m_closed;$/;"	m	class:agg::poly_container_adaptor
m_closed	include/agg_path_storage.h	/^        bool     m_closed;$/;"	m	class:agg::poly_plain_adaptor
m_closed	include/agg_path_storage.h	/^        bool m_closed;$/;"	m	class:agg::poly_container_reverse_adaptor
m_closed	include/agg_path_storage_integer.h	/^        bool                                m_closed;$/;"	m	class:agg::path_storage_integer
m_closed	include/agg_vcgen_bspline.h	/^        unsigned       m_closed;$/;"	m	class:agg::vcgen_bspline
m_closed	include/agg_vcgen_contour.h	/^        unsigned                   m_closed;$/;"	m	class:agg::vcgen_contour
m_closed	include/agg_vcgen_dash.h	/^        unsigned       m_closed;$/;"	m	class:agg::vcgen_dash
m_closed	include/agg_vcgen_smooth_poly1.h	/^        unsigned       m_closed;$/;"	m	class:agg::vcgen_smooth_poly1
m_closed	include/agg_vcgen_stroke.h	/^        unsigned                   m_closed;$/;"	m	class:agg::vcgen_stroke
m_cmd	examples/aa_test.cpp	/^    unsigned m_cmd[8];$/;"	m	class:simple_vertex_source	file:
m_cmd	include/agg_arrowhead.h	/^        unsigned m_cmd[8];$/;"	m	class:agg::arrowhead
m_cmd	include/agg_bezier_arc.h	/^        unsigned m_cmd;$/;"	m	class:agg::bezier_arc
m_cmd	include/agg_conv_close_polygon.h	/^        unsigned      m_cmd[2];$/;"	m	class:agg::conv_close_polygon
m_cmd	include/agg_span_gouraud.h	/^        unsigned m_cmd[8];$/;"	m	class:agg::span_gouraud
m_cmd	include/agg_vpgen_clip_polygon.h	/^        unsigned      m_cmd;$/;"	m	class:agg::vpgen_clip_polygon
m_cmd	include/agg_vpgen_clip_polyline.h	/^        unsigned      m_cmd[2];$/;"	m	class:agg::vpgen_clip_polyline
m_cmd	include/agg_vpgen_segmentator.h	/^        unsigned m_cmd;$/;"	m	class:agg::vpgen_segmentator
m_cmd_blocks	include/agg_path_storage.h	/^        int8u**  m_cmd_blocks;$/;"	m	class:agg::vertex_block_storage
m_cnt	include/agg_dda_line.h	/^        int m_cnt;$/;"	m	class:agg::dda2_line_interpolator
m_color	examples/aa_demo.cpp	/^        rgba8       m_color;$/;"	m	class:agg::renderer_enlarged	file:
m_color	include/agg_renderer_outline_aa.h	/^        color_type             m_color;$/;"	m	class:agg::renderer_outline_aa
m_color	include/agg_renderer_raster_text.h	/^        color_type m_color;$/;"	m	class:agg::renderer_raster_htext_solid
m_color	include/agg_renderer_raster_text.h	/^        color_type m_color;$/;"	m	class:agg::renderer_raster_vtext_solid
m_color	include/agg_renderer_scanline.h	/^        color_type m_color;$/;"	m	class:agg::renderer_scanline_aa_solid
m_color	include/agg_renderer_scanline.h	/^        color_type m_color;$/;"	m	class:agg::renderer_scanline_bin_solid
m_color	include/agg_span_solid.h	/^        color_type m_color;$/;"	m	class:agg::span_solid
m_color	include/ctrl/agg_bezier_ctrl.h	/^        ColorT m_color;$/;"	m	class:agg::bezier_ctrl
m_color	include/ctrl/agg_bezier_ctrl.h	/^        ColorT m_color;$/;"	m	class:agg::curve3_ctrl
m_color	include/ctrl/agg_polygon_ctrl.h	/^        ColorT m_color;$/;"	m	class:agg::polygon_ctrl
m_color_function	include/agg_span_gradient.h	/^        const ColorF*      m_color_function;$/;"	m	class:agg::span_gradient
m_color_lut	examples/blend_color.cpp	/^    agg::pod_array<color_type> m_color_lut;$/;"	m	class:the_application	file:
m_color_lut	include/agg_gradient_lut.h	/^        color_lut_type      m_color_lut;$/;"	m	class:agg::gradient_lut
m_color_profile	include/agg_gradient_lut.h	/^        color_profile_type  m_color_profile;$/;"	m	class:agg::gradient_lut
m_colors	examples/flash_rasterizer.cpp	/^    agg::rgba8                 m_colors[100];$/;"	m	class:the_application	file:
m_colors	examples/flash_rasterizer2.cpp	/^    agg::rgba8                 m_colors[100];$/;"	m	class:the_application	file:
m_colors	examples/gradients.cpp	/^    const color_type* m_colors;$/;"	m	struct:color_function_profile	file:
m_colors	examples/image_alpha.cpp	/^    agg::rgba8 m_colors[50];$/;"	m	class:the_application	file:
m_colors	include/agg_renderer_outline_image.h	/^        color_type m_colors[max_half_width * 2 + 4];$/;"	m	class:agg::line_interpolator_image
m_colors	include/ctrl/agg_cbox_ctrl.h	/^        ColorT* m_colors[3];$/;"	m	class:agg::cbox_ctrl
m_colors	include/ctrl/agg_gamma_ctrl.h	/^        ColorT* m_colors[7];$/;"	m	class:agg::gamma_ctrl
m_colors	include/ctrl/agg_rbox_ctrl.h	/^        ColorT* m_colors[5];$/;"	m	class:agg::rbox_ctrl
m_colors	include/ctrl/agg_scale_ctrl.h	/^        ColorT* m_colors[5];$/;"	m	class:agg::scale_ctrl
m_colors	include/ctrl/agg_slider_ctrl.h	/^        ColorT* m_colors[6];$/;"	m	class:agg::slider_ctrl
m_colors	include/ctrl/agg_spline_ctrl.h	/^        ColorT* m_colors[5];$/;"	m	class:agg::spline_ctrl
m_cols	examples/gouraud_mesh.cpp	/^        unsigned m_cols;$/;"	m	class:agg::mesh_ctrl	file:
m_commands_mask	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        char m_commands_mask[256\/8];$/;"	m	class:agg::svg::path_tokenizer
m_comp_op	examples/compositing.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_comp_op;$/;"	m	class:the_application	file:
m_comp_op	examples/compositing2.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_comp_op;$/;"	m	class:the_application	file:
m_comp_op	include/agg_pixfmt_rgba.h	/^        unsigned m_comp_op;$/;"	m	class:agg::pixfmt_custom_blend_rgba
m_container	include/agg_path_storage.h	/^        const Container* m_container;$/;"	m	class:agg::poly_container_adaptor
m_container	include/agg_path_storage.h	/^        const Container* m_container;$/;"	m	class:agg::poly_container_reverse_adaptor
m_contour	examples/freetype_test.cpp	/^    agg::conv_contour<agg::conv_curve<font_manager_type::path_adaptor_type> > m_contour;$/;"	m	class:the_application	file:
m_contour	examples/truetype_test.cpp	/^    conv_contour_type m_contour;$/;"	m	class:the_application	file:
m_contour	include/agg_conv_gpc.h	/^        int                        m_contour;$/;"	m	class:agg::conv_gpc
m_contour_accumulator	include/agg_conv_gpc.h	/^        contour_header_array_type  m_contour_accumulator;$/;"	m	class:agg::conv_gpc
m_contours	examples/gpc_test.cpp	/^        unsigned m_contours;$/;"	m	struct:agg::conv_poly_counter	file:
m_contrast	examples/gamma_correction.cpp	/^    agg::slider_ctrl<agg::rgba8> m_contrast;$/;"	m	class:the_application	file:
m_coord	include/agg_arrowhead.h	/^        double   m_coord[16];$/;"	m	class:agg::arrowhead
m_coord	include/agg_path_storage.h	/^        double                     m_coord[4];$/;"	m	class:agg::line_adaptor
m_coord	include/agg_span_gouraud.h	/^        coord_type m_coord[3];$/;"	m	class:agg::span_gouraud
m_coord_blocks	include/agg_path_storage.h	/^        T**      m_coord_blocks;$/;"	m	class:agg::vertex_block_storage
m_coord_x	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_coord_x;$/;"	m	class:agg::span_interpolator_persp_lerp
m_coord_y	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_coord_y;$/;"	m	class:agg::span_interpolator_persp_lerp
m_count	examples/aa_test.cpp	/^    unsigned m_count;$/;"	m	class:simple_vertex_source	file:
m_count	examples/rasterizer_compound.cpp	/^    unsigned            m_count;$/;"	m	class:style_handler	file:
m_count	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned m_count;$/;"	m	class:agg::svg::conv_count
m_count	include/agg_curves.h	/^        unsigned             m_count;$/;"	m	class:agg::curve3_div
m_count	include/agg_curves.h	/^        unsigned             m_count;$/;"	m	class:agg::curve4_div
m_count	include/agg_gradient_lut.h	/^        unsigned   m_count;$/;"	m	struct:agg::color_interpolator
m_count	include/agg_renderer_outline_aa.h	/^        int m_count;$/;"	m	class:agg::line_interpolator_aa_base
m_count	include/agg_renderer_outline_image.h	/^        int m_count;$/;"	m	class:agg::line_interpolator_image
m_cover_buf	include/agg_rasterizer_compound_aa.h	/^        pod_vector<cover_type> m_cover_buf;$/;"	m	class:agg::rasterizer_compound_aa
m_cover_ptr	include/agg_scanline_p.h	/^        cover_type*           m_cover_ptr;$/;"	m	class:agg::scanline32_p8
m_cover_ptr	include/agg_scanline_p.h	/^        cover_type*           m_cover_ptr;$/;"	m	class:agg::scanline_p8
m_covers	include/agg_renderer_outline_aa.h	/^        cover_type m_covers[max_half_width * 2 + 4];$/;"	m	class:agg::line_interpolator_aa_base
m_covers	include/agg_scanline_p.h	/^        pod_array<cover_type> m_covers;$/;"	m	class:agg::scanline32_p8
m_covers	include/agg_scanline_p.h	/^        pod_array<cover_type> m_covers;$/;"	m	class:agg::scanline_p8
m_covers	include/agg_scanline_storage_aa.h	/^        scanline_cell_storage<T>      m_covers;$/;"	m	class:agg::scanline_storage_aa
m_covers	include/agg_scanline_u.h	/^        pod_array<cover_type> m_covers;$/;"	m	class:agg::scanline32_u8
m_covers	include/agg_scanline_u.h	/^        pod_array<cover_type> m_covers;$/;"	m	class:agg::scanline_u8
m_ctrl	examples/trans_polar.cpp	/^        Ctrl&     m_ctrl;$/;"	m	class:agg::transformed_control	file:
m_ctrl	include/platform/agg_platform_support.h	/^        ctrl*         m_ctrl[max_ctrl];$/;"	m	class:agg::ctrl_container
m_ctrl1_x	include/agg_vcgen_smooth_poly1.h	/^        double         m_ctrl1_x;$/;"	m	class:agg::vcgen_smooth_poly1
m_ctrl1_y	include/agg_vcgen_smooth_poly1.h	/^        double         m_ctrl1_y;$/;"	m	class:agg::vcgen_smooth_poly1
m_ctrl2_x	include/agg_vcgen_smooth_poly1.h	/^        double         m_ctrl2_x;$/;"	m	class:agg::vcgen_smooth_poly1
m_ctrl2_y	include/agg_vcgen_smooth_poly1.h	/^        double         m_ctrl2_y;$/;"	m	class:agg::vcgen_smooth_poly1
m_ctrl_color	examples/bezier_div.cpp	/^    agg::rgba8 m_ctrl_color;$/;"	m	class:the_application	file:
m_ctrl_color	examples/line_patterns.cpp	/^    agg::rgba8 m_ctrl_color;$/;"	m	class:the_application	file:
m_ctrl_color	examples/line_patterns_clip.cpp	/^    agg::rgba8 m_ctrl_color;$/;"	m	class:the_application	file:
m_ctrls	include/platform/agg_platform_support.h	/^        ctrl_container m_ctrls;$/;"	m	class:agg::platform_support
m_cur_abscissa	include/agg_vcgen_bspline.h	/^        double         m_cur_abscissa;$/;"	m	class:agg::vcgen_bspline
m_cur_angle	examples/image_filters.cpp	/^    double  m_cur_angle;$/;"	m	class:the_application	file:
m_cur_angle	examples/image_filters2.cpp	/^    double  m_cur_angle;$/;"	m	class:the_application	file:
m_cur_case_type	examples/bezier_div.cpp	/^    int m_cur_case_type;$/;"	m	class:the_application	file:
m_cur_chr	include/agg_gsv_text.h	/^        char*           m_cur_chr;$/;"	m	class:agg::gsv_text
m_cur_ctrl	include/platform/agg_platform_support.h	/^        int           m_cur_ctrl;$/;"	m	class:agg::ctrl_container
m_cur_f	include/agg_ellipse_bresenham.h	/^        int m_cur_f;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_cur_face	font_freetype/agg_font_freetype.h	/^        FT_Face         m_cur_face;  \/\/ handle to the current face object$/;"	m	class:agg::font_engine_freetype_base
m_cur_filter	examples/image_filters.cpp	/^    int     m_cur_filter;$/;"	m	class:the_application	file:
m_cur_filter	examples/image_filters2.cpp	/^    int     m_cur_filter;$/;"	m	class:the_application	file:
m_cur_font	font_win32_tt/agg_font_win32_tt.h	/^        HFONT           m_cur_font;$/;"	m	class:agg::font_engine_win32_tt_base
m_cur_font	include/agg_font_cache_manager.h	/^        font_cache*  m_cur_font;$/;"	m	class:agg::font_cache_pool
m_cur_item	include/ctrl/agg_rbox_ctrl.h	/^        int             m_cur_item;$/;"	m	class:agg::rbox_ctrl_impl
m_cur_molecule	examples/mol_view.cpp	/^    unsigned                     m_cur_molecule;$/;"	m	class:the_application	file:
m_cur_scanline	include/agg_scanline_storage_aa.h	/^        unsigned      m_cur_scanline;$/;"	m	class:agg::scanline_storage_aa
m_cur_scanline	include/agg_scanline_storage_bin.h	/^        unsigned      m_cur_scanline;$/;"	m	class:agg::scanline_storage_bin
m_cur_span	include/agg_scanline_bin.h	/^        span*           m_cur_span;$/;"	m	class:agg::scanline_bin
m_cur_span	include/agg_scanline_p.h	/^        span*                 m_cur_span;$/;"	m	class:agg::scanline_p8
m_cur_span	include/agg_scanline_u.h	/^        span*                 m_cur_span;$/;"	m	class:agg::scanline_u8
m_cur_vertex	include/agg_vcgen_vertex_sequence.h	/^        unsigned       m_cur_vertex;$/;"	m	class:agg::vcgen_vertex_sequence
m_cur_x	include/ctrl/agg_gamma_spline.h	/^        double        m_cur_x;$/;"	m	class:agg::gamma_spline
m_cur_x	src/platform/mac/agg_platform_support.cpp	/^        int              m_cur_x;$/;"	m	class:agg::platform_specific	file:
m_cur_x	src/platform/sdl/agg_platform_support.cpp	/^        int           m_cur_x;$/;"	m	class:agg::platform_specific	file:
m_cur_x	src/platform/win32/agg_platform_support.cpp	/^        int           m_cur_x;$/;"	m	class:agg::platform_specific	file:
m_cur_y	src/platform/mac/agg_platform_support.cpp	/^        int              m_cur_y;$/;"	m	class:agg::platform_specific	file:
m_cur_y	src/platform/sdl/agg_platform_support.cpp	/^        int           m_cur_y;$/;"	m	class:agg::platform_specific	file:
m_cur_y	src/platform/win32/agg_platform_support.cpp	/^        int           m_cur_y;$/;"	m	class:agg::platform_specific	file:
m_curr_block	include/agg_rasterizer_cells_aa.h	/^        unsigned                m_curr_block;$/;"	m	class:agg::rasterizer_cells_aa
m_curr_cb	include/agg_renderer_mclip.h	/^        unsigned               m_curr_cb;$/;"	m	class:agg::renderer_mclip
m_curr_cell	include/agg_rasterizer_cells_aa.h	/^        cell_type               m_curr_cell;$/;"	m	class:agg::rasterizer_cells_aa
m_curr_cell_ptr	include/agg_rasterizer_cells_aa.h	/^        cell_type*              m_curr_cell_ptr;$/;"	m	class:agg::rasterizer_cells_aa
m_curr_coord	include/agg_arrowhead.h	/^        unsigned m_curr_coord;$/;"	m	class:agg::arrowhead
m_curr_dash	include/agg_vcgen_dash.h	/^        unsigned           m_curr_dash;$/;"	m	class:agg::vcgen_dash
m_curr_dash_start	include/agg_vcgen_dash.h	/^        double             m_curr_dash_start;$/;"	m	class:agg::vcgen_dash
m_curr_id	include/agg_arrowhead.h	/^        unsigned m_curr_id;$/;"	m	class:agg::arrowhead
m_curr_id	include/agg_vcgen_markers_term.h	/^        unsigned      m_curr_id;$/;"	m	class:agg::vcgen_markers_term
m_curr_idx	include/agg_vcgen_markers_term.h	/^        unsigned      m_curr_idx;$/;"	m	class:agg::vcgen_markers_term
m_curr_r	examples/alpha_mask3.cpp	/^    double m_curr_r;$/;"	m	class:spiral	file:
m_curr_r	examples/gpc_test.cpp	/^    double m_curr_r;$/;"	m	class:spiral	file:
m_curr_r	examples/rasterizers2.cpp	/^    double m_curr_r;$/;"	m	class:spiral	file:
m_curr_r	examples/scanline_boolean2.cpp	/^    double m_curr_r;$/;"	m	class:spiral	file:
m_curr_rest	include/agg_vcgen_dash.h	/^        double             m_curr_rest;$/;"	m	class:agg::vcgen_dash
m_curr_x	include/agg_renderer_primitives.h	/^        int m_curr_x;$/;"	m	class:agg::renderer_primitives
m_curr_y	include/agg_renderer_primitives.h	/^        int m_curr_y;$/;"	m	class:agg::renderer_primitives
m_current_dc	src/platform/win32/agg_platform_support.cpp	/^        HDC           m_current_dc;$/;"	m	class:agg::platform_specific	file:
m_curve	examples/flash_rasterizer.cpp	/^        conv_curve<path_storage>                  m_curve;$/;"	m	class:agg::compound_shape	file:
m_curve	examples/flash_rasterizer2.cpp	/^        conv_curve<path_storage>                  m_curve;$/;"	m	class:agg::compound_shape	file:
m_curve	include/ctrl/agg_bezier_ctrl.h	/^        curve3              m_curve;$/;"	m	class:agg::curve3_ctrl_impl
m_curve	include/ctrl/agg_bezier_ctrl.h	/^        curve4              m_curve;$/;"	m	class:agg::bezier_ctrl_impl
m_curve1	examples/bezier_div.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve1;$/;"	m	class:the_application	file:
m_curve1	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve1;$/;"	m	class:the_application	file:
m_curve2	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve2;$/;"	m	class:the_application	file:
m_curve3	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve3;$/;"	m	class:the_application	file:
m_curve3	include/agg_conv_curve.h	/^        curve3_type   m_curve3;$/;"	m	class:agg::conv_curve
m_curve4	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve4;$/;"	m	class:the_application	file:
m_curve4	include/agg_conv_curve.h	/^        curve4_type   m_curve4;$/;"	m	class:agg::conv_curve
m_curve5	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve5;$/;"	m	class:the_application	file:
m_curve6	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve6;$/;"	m	class:the_application	file:
m_curve7	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve7;$/;"	m	class:the_application	file:
m_curve8	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve8;$/;"	m	class:the_application	file:
m_curve9	examples/line_patterns.cpp	/^    agg::bezier_ctrl<agg::rgba8> m_curve9;$/;"	m	class:the_application	file:
m_curve_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_curve_color;$/;"	m	class:agg::gamma_ctrl
m_curve_color	include/ctrl/agg_spline_ctrl.h	/^        ColorT  m_curve_color;$/;"	m	class:agg::spline_ctrl
m_curve_div	include/agg_curves.h	/^        curve3_div m_curve_div;$/;"	m	class:agg::curve3
m_curve_div	include/agg_curves.h	/^        curve4_div m_curve_div;$/;"	m	class:agg::curve4
m_curve_inc	include/agg_curves.h	/^        curve3_inc m_curve_inc;$/;"	m	class:agg::curve3
m_curve_inc	include/agg_curves.h	/^        curve4_inc m_curve_inc;$/;"	m	class:agg::curve4
m_curve_pnt	include/ctrl/agg_spline_ctrl.h	/^        path_storage              m_curve_pnt;$/;"	m	class:agg::spline_ctrl_impl
m_curve_poly	include/ctrl/agg_gamma_ctrl.h	/^        conv_stroke<gamma_spline> m_curve_poly;$/;"	m	class:agg::gamma_ctrl_impl
m_curve_poly	include/ctrl/agg_spline_ctrl.h	/^        conv_stroke<path_storage> m_curve_poly;$/;"	m	class:agg::spline_ctrl_impl
m_curve_type	examples/bezier_div.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_curve_type;$/;"	m	class:the_application	file:
m_curve_width	include/ctrl/agg_gamma_ctrl.h	/^        double m_curve_width;$/;"	m	class:agg::gamma_ctrl_impl
m_curve_width	include/ctrl/agg_spline_ctrl.h	/^        double   m_curve_width;$/;"	m	class:agg::spline_ctrl_impl
m_curved	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved                       m_curved;$/;"	m	class:agg::svg::path_renderer
m_curved_count	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved_count                 m_curved_count;$/;"	m	class:agg::svg::path_renderer
m_curved_stroked	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved_stroked               m_curved_stroked;$/;"	m	class:agg::svg::path_renderer
m_curved_stroked_trans	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved_stroked_trans         m_curved_stroked_trans;$/;"	m	class:agg::svg::path_renderer
m_curved_trans	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved_trans                 m_curved_trans;$/;"	m	class:agg::svg::path_renderer
m_curved_trans_contour	examples/svg_viewer/agg_svg_path_renderer.h	/^        curved_trans_contour         m_curved_trans_contour;$/;"	m	class:agg::svg::path_renderer
m_curves	examples/freetype_test.cpp	/^    agg::conv_curve<font_manager_type::path_adaptor_type> m_curves;$/;"	m	class:the_application	file:
m_curves	examples/truetype_test.cpp	/^    conv_curve_type m_curves;$/;"	m	class:the_application	file:
m_curves16	font_freetype/agg_font_freetype.h	/^        conv_curve<path_storage_integer<int16, 6> > m_curves16;$/;"	m	class:agg::font_engine_freetype_base
m_curves16	font_win32_tt/agg_font_win32_tt.h	/^        conv_curve<path_storage_integer<int16, 6> > m_curves16;$/;"	m	class:agg::font_engine_win32_tt_base
m_curves32	font_freetype/agg_font_freetype.h	/^        conv_curve<path_storage_integer<int32, 6> > m_curves32;$/;"	m	class:agg::font_engine_freetype_base
m_curves32	font_win32_tt/agg_font_win32_tt.h	/^        conv_curve<path_storage_integer<int32, 6> > m_curves32;$/;"	m	class:agg::font_engine_win32_tt_base
m_cusp_limit	examples/bezier_div.cpp	/^    agg::slider_ctrl<agg::rgba8> m_cusp_limit;$/;"	m	class:the_application	file:
m_cusp_limit	include/agg_curves.h	/^        double               m_cusp_limit;$/;"	m	class:agg::curve4_div
m_cw	include/agg_ellipse.h	/^        bool m_cw;$/;"	m	class:agg::ellipse
m_cx	examples/distortions.cpp	/^    double m_cx;$/;"	m	class:periodic_distortion	file:
m_cx	examples/simple_blur.cpp	/^    double m_cx;$/;"	m	class:the_application	file:
m_cy	examples/distortions.cpp	/^    double m_cy;$/;"	m	class:periodic_distortion	file:
m_cy	examples/simple_blur.cpp	/^    double m_cy;$/;"	m	class:the_application	file:
m_d1	include/agg_span_gradient.h	/^        int                m_d1;$/;"	m	class:agg::span_gradient
m_d1	include/agg_span_gradient_alpha.h	/^        int                m_d1;$/;"	m	class:agg::span_gradient_alpha
m_d2	include/agg_span_gradient.h	/^        int                m_d2;$/;"	m	class:agg::span_gradient
m_d2	include/agg_span_gradient_alpha.h	/^        int                m_d2;$/;"	m	class:agg::span_gradient_alpha
m_da	examples/alpha_mask3.cpp	/^    double m_da;$/;"	m	class:spiral	file:
m_da	examples/gpc_test.cpp	/^    double m_da;$/;"	m	class:spiral	file:
m_da	examples/rasterizers2.cpp	/^    double m_da;$/;"	m	class:spiral	file:
m_da	examples/scanline_boolean2.cpp	/^    double m_da;$/;"	m	class:spiral	file:
m_da	include/agg_arc.h	/^        double   m_da;$/;"	m	class:agg::arc
m_da	include/agg_span_gouraud_gray.h	/^            int    m_da;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_da	include/agg_span_gouraud_rgba.h	/^            int    m_da;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_dash	examples/aa_test.cpp	/^    agg::conv_dash<simple_vertex_source> m_dash;$/;"	m	class:dashed_line	file:
m_dash_start	include/agg_vcgen_dash.h	/^        double             m_dash_start;$/;"	m	class:agg::vcgen_dash
m_dash_stroke	examples/aa_test.cpp	/^    agg::conv_stroke<agg::conv_dash<simple_vertex_source> > m_dash_stroke;$/;"	m	class:dashed_line	file:
m_dashed_wedge	examples/mol_view.cpp	/^    agg::dashed_wedge m_dashed_wedge;$/;"	m	class:bond_vertex_generator	file:
m_dashes	include/agg_vcgen_dash.h	/^        double             m_dashes[max_dashes];$/;"	m	class:agg::vcgen_dash
m_data	include/agg_path_storage.h	/^        const T* m_data;$/;"	m	class:agg::poly_plain_adaptor
m_data	include/agg_path_storage_integer.h	/^        const int8u* m_data;$/;"	m	class:agg::serialized_integer_path_adaptor
m_data	include/agg_renderer_outline_image.h	/^        pod_array<color_type>     m_data;$/;"	m	class:agg::line_image_pattern
m_data	include/agg_scanline_storage_aa.h	/^        const int8u* m_data;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_data	include/agg_scanline_storage_bin.h	/^        const int8u* m_data;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_data_size	font_freetype/agg_font_freetype.h	/^        unsigned        m_data_size;$/;"	m	class:agg::font_engine_freetype_base
m_data_size	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_data_size;$/;"	m	class:agg::font_engine_win32_tt_base
m_data_type	font_freetype/agg_font_freetype.h	/^        glyph_data_type m_data_type;$/;"	m	class:agg::font_engine_freetype_base
m_data_type	font_win32_tt/agg_font_win32_tt.h	/^        glyph_data_type m_data_type;$/;"	m	class:agg::font_engine_win32_tt_base
m_db	include/agg_span_gouraud_rgba.h	/^            int    m_db;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_dc	font_win32_tt/agg_font_win32_tt.h	/^        HDC             m_dc;$/;"	m	class:agg::font_engine_win32_tt_base
m_dddfx	include/agg_curves.h	/^        double   m_dddfx; $/;"	m	class:agg::curve4_inc
m_dddfy	include/agg_curves.h	/^        double   m_dddfy;$/;"	m	class:agg::curve4_inc
m_ddfx	include/agg_curves.h	/^        double   m_ddfx; $/;"	m	class:agg::curve3_inc
m_ddfx	include/agg_curves.h	/^        double   m_ddfx; $/;"	m	class:agg::curve4_inc
m_ddfy	include/agg_curves.h	/^        double   m_ddfy;$/;"	m	class:agg::curve3_inc
m_ddfy	include/agg_curves.h	/^        double   m_ddfy;$/;"	m	class:agg::curve4_inc
m_ddl	include/agg_vpgen_segmentator.h	/^        double   m_ddl;$/;"	m	class:agg::vpgen_segmentator
m_depth	src/platform/X11/agg_platform_support.cpp	/^        int                  m_depth;$/;"	m	class:agg::platform_specific	file:
m_descending	include/ctrl/agg_slider_ctrl.h	/^        bool     m_descending;$/;"	m	class:agg::slider_ctrl_impl
m_device_x1	include/agg_trans_viewport.h	/^        double         m_device_x1;$/;"	m	class:agg::trans_viewport
m_device_x2	include/agg_trans_viewport.h	/^        double         m_device_x2;$/;"	m	class:agg::trans_viewport
m_device_y1	include/agg_trans_viewport.h	/^        double         m_device_y1;$/;"	m	class:agg::trans_viewport
m_device_y2	include/agg_trans_viewport.h	/^        double         m_device_y2;$/;"	m	class:agg::trans_viewport
m_dfx	include/agg_curves.h	/^        double   m_dfx; $/;"	m	class:agg::curve3_inc
m_dfx	include/agg_curves.h	/^        double   m_dfx; $/;"	m	class:agg::curve4_inc
m_dfy	include/agg_curves.h	/^        double   m_dfy;$/;"	m	class:agg::curve3_inc
m_dfy	include/agg_curves.h	/^        double   m_dfy;$/;"	m	class:agg::curve4_inc
m_dg	include/agg_span_gouraud_rgba.h	/^            int    m_dg;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_di	include/agg_renderer_outline_aa.h	/^        distance_interpolator1 m_di; $/;"	m	class:agg::line_interpolator_aa0
m_di	include/agg_renderer_outline_aa.h	/^        distance_interpolator2 m_di; $/;"	m	class:agg::line_interpolator_aa1
m_di	include/agg_renderer_outline_aa.h	/^        distance_interpolator2 m_di; $/;"	m	class:agg::line_interpolator_aa2
m_di	include/agg_renderer_outline_aa.h	/^        distance_interpolator3 m_di; $/;"	m	class:agg::line_interpolator_aa3
m_di	include/agg_renderer_outline_image.h	/^        distance_interpolator4 m_di; $/;"	m	class:agg::line_interpolator_image
m_diameter	include/agg_image_filters.h	/^        unsigned         m_diameter;$/;"	m	class:agg::image_filter_lut
m_dilation	examples/gouraud.cpp	/^    agg::slider_ctrl<agg::rgba> m_dilation;$/;"	m	class:the_application	file:
m_dilation	include/agg_renderer_outline_image.h	/^        unsigned                  m_dilation;$/;"	m	class:agg::line_image_pattern
m_dilation_hr	include/agg_renderer_outline_image.h	/^        int                       m_dilation_hr;$/;"	m	class:agg::line_image_pattern
m_dir_gamma	include/agg_gamma_lut.h	/^        HiResT* m_dir_gamma;$/;"	m	class:agg::gamma_lut
m_display	src/platform/X11/agg_platform_support.cpp	/^        Display*             m_display;$/;"	m	class:agg::platform_specific	file:
m_dist	include/agg_renderer_outline_aa.h	/^        int m_dist;$/;"	m	class:agg::distance_interpolator0
m_dist	include/agg_renderer_outline_aa.h	/^        int m_dist;$/;"	m	class:agg::distance_interpolator1
m_dist	include/agg_renderer_outline_aa.h	/^        int m_dist;$/;"	m	class:agg::distance_interpolator2
m_dist	include/agg_renderer_outline_aa.h	/^        int m_dist;$/;"	m	class:agg::distance_interpolator3
m_dist	include/agg_renderer_outline_aa.h	/^        int m_dist[max_half_width + 1];$/;"	m	class:agg::line_interpolator_aa_base
m_dist	include/agg_renderer_outline_image.h	/^        int m_dist;$/;"	m	class:agg::distance_interpolator4
m_dist1	include/agg_renderer_outline_aa.h	/^        int m_dist1;$/;"	m	class:agg::distance_interpolator00
m_dist2	include/agg_renderer_outline_aa.h	/^        int m_dist2;$/;"	m	class:agg::distance_interpolator00
m_dist_end	include/agg_renderer_outline_aa.h	/^        int m_dist_end;$/;"	m	class:agg::distance_interpolator3
m_dist_end	include/agg_renderer_outline_image.h	/^        int m_dist_end;$/;"	m	class:agg::distance_interpolator4
m_dist_pict	include/agg_renderer_outline_image.h	/^        int m_dist_pict;$/;"	m	class:agg::distance_interpolator4
m_dist_pos	include/agg_renderer_outline_image.h	/^        int m_dist_pos[max_half_width + 1];$/;"	m	class:agg::line_interpolator_image
m_dist_start	include/agg_renderer_outline_aa.h	/^        int m_dist_start;$/;"	m	class:agg::distance_interpolator2
m_dist_start	include/agg_renderer_outline_aa.h	/^        int m_dist_start;$/;"	m	class:agg::distance_interpolator3
m_dist_start	include/agg_renderer_outline_image.h	/^        int m_dist_start;$/;"	m	class:agg::distance_interpolator4
m_distance_tolerance_square	include/agg_curves.h	/^        double               m_distance_tolerance_square;$/;"	m	class:agg::curve3_div
m_distance_tolerance_square	include/agg_curves.h	/^        double               m_distance_tolerance_square;$/;"	m	class:agg::curve4_div
m_distortion	examples/distortions.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_distortion;$/;"	m	class:the_application	file:
m_distortion	include/agg_span_interpolator_adaptor.h	/^        const distortion_type* m_distortion;$/;"	m	class:agg::span_interpolator_adaptor
m_dl	include/agg_vpgen_segmentator.h	/^        double   m_dl;$/;"	m	class:agg::vpgen_segmentator
m_dr	examples/alpha_mask3.cpp	/^    double m_dr;$/;"	m	class:spiral	file:
m_dr	examples/gpc_test.cpp	/^    double m_dr;$/;"	m	class:spiral	file:
m_dr	examples/rasterizers2.cpp	/^    double m_dr;$/;"	m	class:spiral	file:
m_dr	examples/scanline_boolean2.cpp	/^    double m_dr;$/;"	m	class:spiral	file:
m_dr	include/agg_span_gouraud_rgba.h	/^            int    m_dr;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_draft	examples/graph_test.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_draft;$/;"	m	class:the_application	file:
m_draft	examples/idea.cpp	/^    agg::cbox_ctrl<agg::rgba8> m_draft;$/;"	m	class:the_application	file:
m_drag_dx	examples/gouraud_mesh.cpp	/^        double   m_drag_dx;$/;"	m	class:agg::mesh_ctrl	file:
m_drag_dy	examples/gouraud_mesh.cpp	/^        double   m_drag_dy;$/;"	m	class:agg::mesh_ctrl	file:
m_drag_flag	examples/svg_viewer/svg_test.cpp	/^    bool   m_drag_flag;$/;"	m	class:the_application	file:
m_drag_idx	examples/gouraud_mesh.cpp	/^        int      m_drag_idx;$/;"	m	class:agg::mesh_ctrl	file:
m_dragging	src/platform/AmigaOS/agg_platform_support.cpp	/^		bool m_dragging;$/;"	m	class:agg::platform_specific	file:
m_draw	examples/graph_test.cpp	/^    int                         m_draw;$/;"	m	class:the_application	file:
m_draw_edges	examples/graph_test.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_draw_edges;$/;"	m	class:the_application	file:
m_draw_item	include/ctrl/agg_rbox_ctrl.h	/^        unsigned m_draw_item;$/;"	m	class:agg::rbox_ctrl_impl
m_draw_nodes	examples/graph_test.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_draw_nodes;$/;"	m	class:the_application	file:
m_dv	include/agg_span_gouraud_gray.h	/^            int    m_dv;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_dx	examples/aa_demo.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/alpha_gradient.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/conv_dash_marker.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/conv_stroke.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/gouraud.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/idea.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/image_transforms.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/interactive_polygon.h	/^        double   m_dx;$/;"	m	class:agg::interactive_polygon
m_dx	examples/mol_view.cpp	/^        double   m_dx;$/;"	m	class:agg::line	file:
m_dx	examples/mol_view.cpp	/^        double   m_dx;$/;"	m	class:agg::solid_wedge	file:
m_dx	examples/pattern_fill.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/rasterizers.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/rounded_rect.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/svg_viewer/svg_test.cpp	/^    double m_dx;$/;"	m	class:the_application	file:
m_dx	examples/trans_curve1.cpp	/^    double                       m_dx[6];$/;"	m	class:the_application	file:
m_dx	examples/trans_curve1_ft.cpp	/^    double                       m_dx[6];$/;"	m	class:the_application	file:
m_dx	include/agg_ellipse_bresenham.h	/^        int m_dx;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_dx	include/agg_font_cache_manager.h	/^        double              m_dx;$/;"	m	class:agg::font_cache_manager
m_dx	include/agg_path_storage_integer.h	/^        double       m_dx;$/;"	m	class:agg::serialized_integer_path_adaptor
m_dx	include/agg_renderer_outline_aa.h	/^        int m_dx;$/;"	m	class:agg::distance_interpolator0
m_dx	include/agg_renderer_outline_aa.h	/^        int m_dx;$/;"	m	class:agg::distance_interpolator1
m_dx	include/agg_renderer_outline_aa.h	/^        int m_dx;$/;"	m	class:agg::distance_interpolator2
m_dx	include/agg_renderer_outline_aa.h	/^        int m_dx;$/;"	m	class:agg::distance_interpolator3
m_dx	include/agg_renderer_outline_image.h	/^        int m_dx;$/;"	m	class:agg::distance_interpolator4
m_dx	include/agg_scanline_storage_aa.h	/^                int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
m_dx	include/agg_scanline_storage_aa.h	/^            int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
m_dx	include/agg_scanline_storage_aa.h	/^        int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_dx	include/agg_scanline_storage_bin.h	/^                int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
m_dx	include/agg_scanline_storage_bin.h	/^            int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
m_dx	include/agg_scanline_storage_bin.h	/^        int          m_dx;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_dx	include/agg_span_gouraud_gray.h	/^            double m_dx;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_dx	include/agg_span_gouraud_rgba.h	/^            double m_dx;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_dx	include/agg_vpgen_segmentator.h	/^        double   m_dx;$/;"	m	class:agg::vpgen_segmentator
m_dx	include/ctrl/agg_polygon_ctrl.h	/^        double   m_dx;$/;"	m	class:agg::polygon_ctrl_impl
m_dx1	examples/trans_curve2.cpp	/^    double                       m_dx1[6];$/;"	m	class:the_application	file:
m_dx1	examples/trans_curve2_ft.cpp	/^    double                       m_dx1[6];$/;"	m	class:the_application	file:
m_dx1	include/agg_renderer_outline_aa.h	/^        int m_dx1;$/;"	m	class:agg::distance_interpolator00
m_dx1	include/agg_trans_viewport.h	/^        double         m_dx1;$/;"	m	class:agg::trans_viewport
m_dx2	examples/trans_curve2.cpp	/^    double                       m_dx2[6];$/;"	m	class:the_application	file:
m_dx2	examples/trans_curve2_ft.cpp	/^    double                       m_dx2[6];$/;"	m	class:the_application	file:
m_dx2	include/agg_renderer_outline_aa.h	/^        int m_dx2;$/;"	m	class:agg::distance_interpolator00
m_dx_dbl	include/agg_span_image_filter.h	/^        double   m_dx_dbl;$/;"	m	class:agg::span_image_filter
m_dx_end	include/agg_renderer_outline_aa.h	/^        int m_dx_end;$/;"	m	class:agg::distance_interpolator3
m_dx_end	include/agg_renderer_outline_image.h	/^        int m_dx_end;$/;"	m	class:agg::distance_interpolator4
m_dx_int	include/agg_span_image_filter.h	/^        unsigned m_dx_int;$/;"	m	class:agg::span_image_filter
m_dx_pict	include/agg_renderer_outline_image.h	/^        int m_dx_pict;$/;"	m	class:agg::distance_interpolator4
m_dx_start	include/agg_renderer_outline_aa.h	/^        int m_dx_start;$/;"	m	class:agg::distance_interpolator2
m_dx_start	include/agg_renderer_outline_aa.h	/^        int m_dx_start;$/;"	m	class:agg::distance_interpolator3
m_dx_start	include/agg_renderer_outline_image.h	/^        int m_dx_start;$/;"	m	class:agg::distance_interpolator4
m_dy	examples/aa_demo.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/alpha_gradient.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/conv_dash_marker.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/conv_stroke.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/gouraud.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/idea.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/image_transforms.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/interactive_polygon.h	/^        double   m_dy;$/;"	m	class:agg::interactive_polygon
m_dy	examples/mol_view.cpp	/^        double   m_dy;$/;"	m	class:agg::line	file:
m_dy	examples/mol_view.cpp	/^        double   m_dy;$/;"	m	class:agg::solid_wedge	file:
m_dy	examples/pattern_fill.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/rasterizers.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/rounded_rect.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/svg_viewer/svg_test.cpp	/^    double m_dy;$/;"	m	class:the_application	file:
m_dy	examples/trans_curve1.cpp	/^    double                       m_dy[6];$/;"	m	class:the_application	file:
m_dy	examples/trans_curve1_ft.cpp	/^    double                       m_dy[6];$/;"	m	class:the_application	file:
m_dy	include/agg_dda_line.h	/^        int m_dy;$/;"	m	class:agg::dda_line_interpolator
m_dy	include/agg_ellipse_bresenham.h	/^        int m_dy;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_dy	include/agg_font_cache_manager.h	/^        double              m_dy;$/;"	m	class:agg::font_cache_manager
m_dy	include/agg_path_storage_integer.h	/^        double       m_dy;$/;"	m	class:agg::serialized_integer_path_adaptor
m_dy	include/agg_renderer_outline_aa.h	/^        int m_dy;$/;"	m	class:agg::distance_interpolator0
m_dy	include/agg_renderer_outline_aa.h	/^        int m_dy;$/;"	m	class:agg::distance_interpolator1
m_dy	include/agg_renderer_outline_aa.h	/^        int m_dy;$/;"	m	class:agg::distance_interpolator2
m_dy	include/agg_renderer_outline_aa.h	/^        int m_dy;$/;"	m	class:agg::distance_interpolator3
m_dy	include/agg_renderer_outline_image.h	/^        int m_dy;$/;"	m	class:agg::distance_interpolator4
m_dy	include/agg_scanline_storage_aa.h	/^        int          m_dy;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_dy	include/agg_scanline_storage_bin.h	/^        int          m_dy;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_dy	include/agg_vpgen_segmentator.h	/^        double   m_dy;$/;"	m	class:agg::vpgen_segmentator
m_dy	include/ctrl/agg_polygon_ctrl.h	/^        double   m_dy;$/;"	m	class:agg::polygon_ctrl_impl
m_dy	include/ctrl/agg_rbox_ctrl.h	/^        double   m_dy;$/;"	m	class:agg::rbox_ctrl_impl
m_dy1	examples/trans_curve2.cpp	/^    double                       m_dy1[6];$/;"	m	class:the_application	file:
m_dy1	examples/trans_curve2_ft.cpp	/^    double                       m_dy1[6];$/;"	m	class:the_application	file:
m_dy1	include/agg_renderer_outline_aa.h	/^        int m_dy1;$/;"	m	class:agg::distance_interpolator00
m_dy1	include/agg_trans_viewport.h	/^        double         m_dy1;$/;"	m	class:agg::trans_viewport
m_dy2	examples/trans_curve2.cpp	/^    double                       m_dy2[6];$/;"	m	class:the_application	file:
m_dy2	examples/trans_curve2_ft.cpp	/^    double                       m_dy2[6];$/;"	m	class:the_application	file:
m_dy2	include/agg_renderer_outline_aa.h	/^        int m_dy2;$/;"	m	class:agg::distance_interpolator00
m_dy_dbl	include/agg_span_image_filter.h	/^        double   m_dy_dbl;$/;"	m	class:agg::span_image_filter
m_dy_end	include/agg_renderer_outline_aa.h	/^        int m_dy_end;$/;"	m	class:agg::distance_interpolator3
m_dy_end	include/agg_renderer_outline_image.h	/^        int m_dy_end;$/;"	m	class:agg::distance_interpolator4
m_dy_int	include/agg_span_image_filter.h	/^        unsigned m_dy_int;$/;"	m	class:agg::span_image_filter
m_dy_pict	include/agg_renderer_outline_image.h	/^        int m_dy_pict;$/;"	m	class:agg::distance_interpolator4
m_dy_start	include/agg_renderer_outline_aa.h	/^        int m_dy_start;$/;"	m	class:agg::distance_interpolator2
m_dy_start	include/agg_renderer_outline_aa.h	/^        int m_dy_start;$/;"	m	class:agg::distance_interpolator3
m_dy_start	include/agg_renderer_outline_image.h	/^        int m_dy_start;$/;"	m	class:agg::distance_interpolator4
m_edge	examples/interactive_polygon.h	/^        int               m_edge;$/;"	m	class:agg::interactive_polygon
m_edge	include/ctrl/agg_polygon_ctrl.h	/^        int               m_edge;$/;"	m	class:agg::polygon_ctrl_impl
m_edges	examples/gouraud_mesh.cpp	/^        pod_bvector<mesh_edge>     m_edges;$/;"	m	class:agg::mesh_ctrl	file:
m_edges	examples/graph_test.cpp	/^    edge* m_edges;$/;"	m	class:graph	file:
m_eglyph	include/agg_gsv_text.h	/^        int8*           m_eglyph;$/;"	m	class:agg::gsv_text
m_ellipse	examples/interactive_polygon.h	/^        ellipse  m_ellipse;$/;"	m	class:agg::interactive_polygon
m_ellipse	include/ctrl/agg_bezier_ctrl.h	/^        ellipse             m_ellipse;$/;"	m	class:agg::bezier_ctrl_impl
m_ellipse	include/ctrl/agg_bezier_ctrl.h	/^        ellipse             m_ellipse;$/;"	m	class:agg::curve3_ctrl_impl
m_ellipse	include/ctrl/agg_gamma_ctrl.h	/^        ellipse                   m_ellipse;$/;"	m	class:agg::gamma_ctrl_impl
m_ellipse	include/ctrl/agg_polygon_ctrl.h	/^        ellipse  m_ellipse;$/;"	m	class:agg::polygon_ctrl_impl
m_ellipse	include/ctrl/agg_rbox_ctrl.h	/^        ellipse               m_ellipse;$/;"	m	class:agg::rbox_ctrl_impl
m_ellipse	include/ctrl/agg_scale_ctrl.h	/^        ellipse  m_ellipse;$/;"	m	class:agg::scale_ctrl_impl
m_ellipse	include/ctrl/agg_slider_ctrl.h	/^        ellipse  m_ellipse;$/;"	m	class:agg::slider_ctrl_impl
m_ellipse	include/ctrl/agg_spline_ctrl.h	/^        ellipse                   m_ellipse;$/;"	m	class:agg::spline_ctrl_impl
m_ellipse_poly	include/ctrl/agg_rbox_ctrl.h	/^        conv_stroke<ellipse>  m_ellipse_poly;$/;"	m	class:agg::rbox_ctrl_impl
m_end	include/agg_arc.h	/^        double   m_end;$/;"	m	class:agg::arc
m_end	include/agg_gamma_functions.h	/^        double m_end;$/;"	m	class:agg::gamma_linear
m_end	include/agg_path_storage.h	/^        const T* m_end;$/;"	m	class:agg::poly_plain_adaptor
m_end	include/agg_path_storage_integer.h	/^        const int8u* m_end;$/;"	m	class:agg::serialized_integer_path_adaptor
m_end	include/agg_scanline_storage_aa.h	/^        const int8u* m_end;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_end	include/agg_scanline_storage_bin.h	/^        const int8u* m_end;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_end_x	include/agg_curves.h	/^        double   m_end_x; $/;"	m	class:agg::curve3_inc
m_end_x	include/agg_curves.h	/^        double   m_end_x; $/;"	m	class:agg::curve4_inc
m_end_y	include/agg_curves.h	/^        double   m_end_y;$/;"	m	class:agg::curve3_inc
m_end_y	include/agg_curves.h	/^        double   m_end_y;$/;"	m	class:agg::curve4_inc
m_engine	include/agg_font_cache_manager.h	/^        font_engine_type&   m_engine;$/;"	m	class:agg::font_cache_manager
m_even_odd	examples/conv_dash_marker.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_even_odd;$/;"	m	class:the_application	file:
m_even_odd	examples/idea.cpp	/^    agg::cbox_ctrl<agg::rgba8> m_even_odd;$/;"	m	class:the_application	file:
m_example	examples/image_transforms.cpp	/^    agg::rbox_ctrl<agg::rgba> m_example;$/;"	m	class:the_application	file:
m_expand	examples/svg_viewer/svg_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_expand;$/;"	m	class:the_application	file:
m_extra_storage	include/agg_scanline_storage_aa.h	/^        pod_bvector<extra_span, 6> m_extra_storage;$/;"	m	class:agg::scanline_cell_storage
m_f1	include/agg_rasterizer_sl_clip.h	/^        unsigned         m_f1;$/;"	m	class:agg::rasterizer_sl_clip
m_face_index	font_freetype/agg_font_freetype.h	/^        unsigned        m_face_index;$/;"	m	class:agg::font_engine_freetype_base
m_face_names	font_freetype/agg_font_freetype.h	/^        char**          m_face_names; $/;"	m	class:agg::font_engine_freetype_base
m_faces	font_freetype/agg_font_freetype.h	/^        FT_Face*        m_faces;      \/\/ A pool of font faces$/;"	m	class:agg::font_engine_freetype_base
m_fake_scanline	include/agg_scanline_storage_aa.h	/^        scanline_data m_fake_scanline;$/;"	m	class:agg::scanline_storage_aa
m_fake_scanline	include/agg_scanline_storage_bin.h	/^        scanline_data m_fake_scanline;$/;"	m	class:agg::scanline_storage_bin
m_fake_span	include/agg_scanline_storage_aa.h	/^        span_data     m_fake_span;$/;"	m	class:agg::scanline_storage_aa
m_fake_span	include/agg_scanline_storage_bin.h	/^        span_data     m_fake_span;$/;"	m	class:agg::scanline_storage_bin
m_fd	examples/flash_rasterizer.cpp	/^        FILE* m_fd;$/;"	m	class:agg::compound_shape	file:
m_fd	examples/flash_rasterizer2.cpp	/^        FILE* m_fd;$/;"	m	class:agg::compound_shape	file:
m_feng	examples/freetype_test.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_feng	examples/trans_curve1.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_feng	examples/trans_curve1_ft.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_feng	examples/trans_curve2.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_feng	examples/trans_curve2_ft.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_feng	examples/truetype_test.cpp	/^    font_engine_type             m_feng;$/;"	m	class:the_application	file:
m_fill_color	include/agg_renderer_primitives.h	/^        color_type m_fill_color;$/;"	m	class:agg::renderer_primitives
m_fill_rule	examples/scanline_boolean2.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_fill_rule;$/;"	m	class:the_application	file:
m_filling_rule	include/agg_rasterizer_compound_aa.h	/^        filling_rule_e         m_filling_rule;$/;"	m	class:agg::rasterizer_compound_aa
m_filling_rule	include/agg_rasterizer_scanline_aa.h	/^        filling_rule_e m_filling_rule;$/;"	m	class:agg::rasterizer_scanline_aa
m_filter	examples/image_fltr_graph.cpp	/^    Filter m_filter;$/;"	m	struct:image_filter_const_radius_adaptor	file:
m_filter	examples/image_fltr_graph.cpp	/^    Filter m_filter;$/;"	m	struct:image_filter_variable_radius_adaptor	file:
m_filter	include/agg_renderer_outline_image.h	/^        const filter_type*        m_filter;$/;"	m	class:agg::line_image_pattern
m_filter	include/agg_span_image_filter.h	/^        const image_filter_lut* m_filter;$/;"	m	class:agg::span_image_filter
m_filter_bessel	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_bessel>      m_filter_bessel;$/;"	m	class:the_application	file:
m_filter_bicubic	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_bicubic>     m_filter_bicubic;$/;"	m	class:the_application	file:
m_filter_bilinear	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_bilinear>    m_filter_bilinear;$/;"	m	class:the_application	file:
m_filter_blackman	examples/image_fltr_graph.cpp	/^    image_filter_variable_radius_adaptor<agg::image_filter_blackman> m_filter_blackman;$/;"	m	class:the_application	file:
m_filter_catrom	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_catrom>      m_filter_catrom;$/;"	m	class:the_application	file:
m_filter_func	examples/image_fltr_graph.cpp	/^    filter_base* m_filter_func[32];$/;"	m	class:the_application	file:
m_filter_function	include/agg_image_filters.h	/^        FilterF m_filter_function;$/;"	m	class:agg::image_filter
m_filter_gaussian	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_gaussian>    m_filter_gaussian;$/;"	m	class:the_application	file:
m_filter_hamming	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_hamming>     m_filter_hamming;$/;"	m	class:the_application	file:
m_filter_hanning	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_hanning>     m_filter_hanning;$/;"	m	class:the_application	file:
m_filter_hermite	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_hermite>     m_filter_hermite;$/;"	m	class:the_application	file:
m_filter_kaiser	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_kaiser>      m_filter_kaiser;$/;"	m	class:the_application	file:
m_filter_lanczos	examples/image_fltr_graph.cpp	/^    image_filter_variable_radius_adaptor<agg::image_filter_lanczos>  m_filter_lanczos;$/;"	m	class:the_application	file:
m_filter_mitchell	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_mitchell>    m_filter_mitchell;$/;"	m	class:the_application	file:
m_filter_quadric	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_quadric>     m_filter_quadric;$/;"	m	class:the_application	file:
m_filter_sinc	examples/image_fltr_graph.cpp	/^    image_filter_variable_radius_adaptor<agg::image_filter_sinc>     m_filter_sinc;$/;"	m	class:the_application	file:
m_filter_spline16	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_spline16>    m_filter_spline16;$/;"	m	class:the_application	file:
m_filter_spline36	examples/image_fltr_graph.cpp	/^    image_filter_const_radius_adaptor<agg::image_filter_spline36>    m_filter_spline36;$/;"	m	class:the_application	file:
m_filters	examples/image_filters.cpp	/^    agg::rbox_ctrl<agg::rgba>   m_filters;$/;"	m	class:the_application	file:
m_filters	examples/image_filters2.cpp	/^    agg::rbox_ctrl<agg::rgba>   m_filters;$/;"	m	class:the_application	file:
m_filters	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>* m_filters[32];$/;"	m	class:the_application	file:
m_fixed_len	examples/trans_curve1.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_fixed_len;$/;"	m	class:the_application	file:
m_fixed_len	examples/trans_curve1_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_fixed_len;$/;"	m	class:the_application	file:
m_fixed_len	examples/trans_curve2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_fixed_len;$/;"	m	class:the_application	file:
m_fixed_len	examples/trans_curve2_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_fixed_len;$/;"	m	class:the_application	file:
m_flag	examples/image_transforms.cpp	/^    int m_flag;$/;"	m	class:the_application	file:
m_flag	examples/pattern_fill.cpp	/^    int m_flag;$/;"	m	class:the_application	file:
m_flag32	font_freetype/agg_font_freetype.h	/^        bool            m_flag32;$/;"	m	class:agg::font_engine_freetype_base
m_flag32	font_win32_tt/agg_font_win32_tt.h	/^        bool            m_flag32;$/;"	m	class:agg::font_engine_win32_tt_base
m_flags	include/agg_vcgen_vertex_sequence.h	/^        unsigned       m_flags;$/;"	m	class:agg::vcgen_vertex_sequence
m_flip	examples/bspline.cpp	/^    int                          m_flip;$/;"	m	class:the_application	file:
m_flip	include/agg_gsv_text.h	/^        bool            m_flip;$/;"	m	class:agg::gsv_text
m_flip_y	font_freetype/agg_font_freetype.h	/^        bool            m_flip_y;$/;"	m	class:agg::font_engine_freetype_base
m_flip_y	font_win32_tt/agg_font_win32_tt.h	/^        bool            m_flip_y;$/;"	m	class:agg::font_engine_win32_tt_base
m_flip_y	include/ctrl/agg_ctrl.h	/^        bool m_flip_y;$/;"	m	class:agg::ctrl
m_flip_y	include/platform/agg_platform_support.h	/^        bool             m_flip_y;$/;"	m	class:agg::platform_support
m_flip_y	src/platform/AmigaOS/agg_platform_support.cpp	/^		bool m_flip_y;$/;"	m	class:agg::platform_specific	file:
m_flip_y	src/platform/X11/agg_platform_support.cpp	/^        bool                 m_flip_y;$/;"	m	class:agg::platform_specific	file:
m_flip_y	src/platform/mac/agg_platform_support.cpp	/^        bool             m_flip_y;$/;"	m	class:agg::platform_specific	file:
m_flip_y	src/platform/sdl/agg_platform_support.cpp	/^        bool          m_flip_y;$/;"	m	class:agg::platform_specific	file:
m_flip_y	src/platform/win32/agg_platform_support.cpp	/^        bool          m_flip_y;$/;"	m	class:agg::platform_specific	file:
m_fman	examples/freetype_test.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_fman	examples/trans_curve1.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_fman	examples/trans_curve1_ft.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_fman	examples/trans_curve2.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_fman	examples/trans_curve2_ft.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_fman	examples/truetype_test.cpp	/^    font_manager_type            m_fman;$/;"	m	class:the_application	file:
m_font	include/agg_glyph_raster_bin.h	/^        const int8u* m_font;$/;"	m	class:agg::glyph_raster_bin
m_font	include/agg_gsv_text.h	/^        const void*     m_font;$/;"	m	class:agg::gsv_text
m_font_created	font_win32_tt/agg_font_win32_tt.h	/^        bool            m_font_created;$/;"	m	class:agg::font_engine_win32_tt_base
m_font_names	font_win32_tt/agg_font_win32_tt.h	/^        char**          m_font_names;$/;"	m	class:agg::font_engine_win32_tt_base
m_font_signature	include/agg_font_cache_manager.h	/^        char*           m_font_signature;$/;"	m	class:agg::font_cache
m_fonts	font_win32_tt/agg_font_win32_tt.h	/^        HFONT*          m_fonts;$/;"	m	class:agg::font_engine_win32_tt_base
m_fonts	include/agg_font_cache_manager.h	/^        font_cache** m_fonts;$/;"	m	class:agg::font_cache_pool
m_fonts	include/agg_font_cache_manager.h	/^        font_cache_pool     m_fonts;$/;"	m	class:agg::font_cache_manager
m_format	include/platform/agg_platform_support.h	/^        pix_format_e     m_format;$/;"	m	class:agg::platform_support
m_format	src/platform/AmigaOS/agg_platform_support.cpp	/^		pix_format_e m_format;$/;"	m	class:agg::platform_specific	file:
m_format	src/platform/X11/agg_platform_support.cpp	/^        pix_format_e         m_format;$/;"	m	class:agg::platform_specific	file:
m_format	src/platform/mac/agg_platform_support.cpp	/^        pix_format_e     m_format;$/;"	m	class:agg::platform_specific	file:
m_format	src/platform/sdl/agg_platform_support.cpp	/^        pix_format_e  m_format;$/;"	m	class:agg::platform_specific	file:
m_format	src/platform/win32/agg_platform_support.cpp	/^        pix_format_e  m_format;$/;"	m	class:agg::platform_specific	file:
m_ftype	src/platform/AmigaOS/agg_platform_support.cpp	/^		RGBFTYPE m_ftype;$/;"	m	class:agg::platform_specific	file:
m_full_size	include/platform/win32/agg_win32_bmp.h	/^        unsigned       m_full_size;$/;"	m	class:agg::pixel_map
m_fx	include/agg_curves.h	/^        double   m_fx; $/;"	m	class:agg::curve3_inc
m_fx	include/agg_curves.h	/^        double   m_fx; $/;"	m	class:agg::curve4_inc
m_fx	include/agg_span_gradient.h	/^        int    m_fx;$/;"	m	class:agg::gradient_radial_focus
m_fx2	include/agg_span_gradient.h	/^        double m_fx2;$/;"	m	class:agg::gradient_radial_focus
m_fy	include/agg_curves.h	/^        double   m_fy;$/;"	m	class:agg::curve3_inc
m_fy	include/agg_curves.h	/^        double   m_fy;$/;"	m	class:agg::curve4_inc
m_fy	include/agg_span_gradient.h	/^        int    m_fy;$/;"	m	class:agg::gradient_radial_focus
m_fy2	include/agg_span_gradient.h	/^        double m_fy2;$/;"	m	class:agg::gradient_radial_focus
m_g	examples/gamma_tuner.cpp	/^    agg::slider_ctrl<agg::rgba8> m_g;$/;"	m	class:the_application	file:
m_g	include/agg_span_gouraud_rgba.h	/^            int    m_g;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_g1	include/agg_span_gouraud_rgba.h	/^            int    m_g1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_gamma	examples/aa_test.cpp	/^    gamma_lut_type              m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/flash_rasterizer.cpp	/^    agg::gamma_lut<>           m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/flash_rasterizer2.cpp	/^    agg::gamma_lut<>           m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/freetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/gamma_correction.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/gamma_tuner.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/gouraud.cpp	/^    agg::slider_ctrl<agg::rgba> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/gouraud_mesh.cpp	/^    agg::gamma_lut<>    m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/gradient_focal.cpp	/^    agg::slider_ctrl<agg::rgba8>    m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/image_filters2.cpp	/^    agg::slider_ctrl<agg::rgba> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/image_resample.cpp	/^    agg::slider_ctrl<agg::rgba>  m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/pattern_resample.cpp	/^    agg::slider_ctrl<agg::rgba>  m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/rasterizers.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/rounded_rect.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/svg_viewer/svg_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	examples/truetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_gamma;$/;"	m	class:the_application	file:
m_gamma	include/agg_gamma_functions.h	/^        double m_gamma;$/;"	m	class:agg::gamma_power
m_gamma	include/agg_gamma_lut.h	/^        double m_gamma;$/;"	m	class:agg::gamma_lut
m_gamma	include/agg_pixfmt_gray.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_dir_gray
m_gamma	include/agg_pixfmt_gray.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_inv_gray
m_gamma	include/agg_pixfmt_rgb.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_dir_rgb
m_gamma	include/agg_pixfmt_rgb.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_inv_rgb
m_gamma	include/agg_pixfmt_rgb.h	/^        const gamma_type* m_gamma;$/;"	m	class:agg::blender_rgb_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_bgrAAA_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_bgrABB_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_rgb555_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_rgb565_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_rgbAAA_gamma
m_gamma	include/agg_pixfmt_rgb_packed.h	/^        const Gamma* m_gamma;$/;"	m	class:agg::blender_rgbBBA_gamma
m_gamma	include/agg_pixfmt_rgba.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_dir_rgba
m_gamma	include/agg_pixfmt_rgba.h	/^        const GammaLut& m_gamma;$/;"	m	class:agg::apply_gamma_inv_rgba
m_gamma	include/agg_rasterizer_scanline_aa.h	/^        int            m_gamma[aa_scale];$/;"	m	class:agg::rasterizer_scanline_aa
m_gamma	include/agg_renderer_outline_aa.h	/^        value_type            m_gamma[aa_scale];$/;"	m	class:agg::line_profile_aa
m_gamma	include/ctrl/agg_gamma_spline.h	/^        unsigned char m_gamma[256];$/;"	m	class:agg::gamma_spline
m_gamma_lut	examples/gradient_focal.cpp	/^    gamma_lut_type                  m_gamma_lut;$/;"	m	class:the_application	file:
m_gamma_lut	examples/image_resample.cpp	/^    agg::gamma_lut<value_type, value_type, base_shift, base_shift> m_gamma_lut;$/;"	m	class:the_application	file:
m_gamma_lut	examples/pattern_resample.cpp	/^    agg::gamma_lut<value_type, value_type, base_shift, base_shift> m_gamma_lut;$/;"	m	class:the_application	file:
m_gamma_lut	examples/truetype_test.cpp	/^    gamma_type                   m_gamma_lut;$/;"	m	class:the_application	file:
m_gamma_spline	include/ctrl/agg_gamma_ctrl.h	/^        gamma_spline  m_gamma_spline;$/;"	m	class:agg::gamma_ctrl_impl
m_gaussian	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_gaussian;$/;"	m	class:the_application	file:
m_gbuf	font_win32_tt/agg_font_win32_tt.h	/^        char*           m_gbuf;$/;"	m	class:agg::font_engine_win32_tt_base
m_gc	src/platform/X11/agg_platform_support.cpp	/^        GC                   m_gc;$/;"	m	class:agg::platform_specific	file:
m_generator	include/agg_conv_adaptor_vcgen.h	/^        Generator     m_generator;$/;"	m	class:agg::conv_adaptor_vcgen
m_glyph	include/agg_renderer_raster_text.h	/^        glyph_gen_type* m_glyph;$/;"	m	class:agg::renderer_raster_htext
m_glyph	include/agg_renderer_raster_text.h	/^        glyph_gen_type* m_glyph;$/;"	m	class:agg::renderer_raster_htext_solid
m_glyph	include/agg_renderer_raster_text.h	/^        glyph_gen_type* m_glyph;$/;"	m	class:agg::renderer_raster_vtext_solid
m_glyph_byte_width	include/agg_glyph_raster_bin.h	/^        unsigned m_glyph_byte_width;$/;"	m	class:agg::glyph_raster_bin
m_glyph_index	font_freetype/agg_font_freetype.h	/^        unsigned        m_glyph_index;$/;"	m	class:agg::font_engine_freetype_base
m_glyph_index	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_glyph_index;$/;"	m	class:agg::font_engine_win32_tt_base
m_glyph_rendering	font_freetype/agg_font_freetype.h	/^        glyph_rendering m_glyph_rendering;$/;"	m	class:agg::font_engine_freetype_base
m_glyph_rendering	font_win32_tt/agg_font_win32_tt.h	/^        glyph_rendering m_glyph_rendering;$/;"	m	class:agg::font_engine_win32_tt_base
m_glyph_width	include/agg_glyph_raster_bin.h	/^        unsigned m_glyph_width;$/;"	m	class:agg::glyph_raster_bin
m_glyphs	include/agg_font_cache_manager.h	/^        glyph_cache**   m_glyphs[256];$/;"	m	class:agg::font_cache
m_glyphs	include/agg_gsv_text.h	/^        int8*           m_glyphs;$/;"	m	class:agg::gsv_text
m_gmask	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_gmask;$/;"	m	class:agg::platform_specific	file:
m_gradient	examples/flash_rasterizer.cpp	/^        const rgba8* m_gradient;$/;"	m	class:agg::test_styles	file:
m_gradient	examples/flash_rasterizer.cpp	/^    agg::pod_array<agg::rgba8> m_gradient;$/;"	m	class:the_application	file:
m_gradient	examples/gradients.cpp	/^    GradientF m_gradient;$/;"	m	class:gradient_polymorphic_wrapper	file:
m_gradient	examples/raster_text.cpp	/^    GradientF m_gradient;$/;"	m	class:gradient_sine_repeat_adaptor	file:
m_gradient	include/agg_span_gradient.h	/^        const GradientF* m_gradient;$/;"	m	class:agg::gradient_reflect_adaptor
m_gradient	include/agg_span_gradient.h	/^        const GradientF* m_gradient;$/;"	m	class:agg::gradient_repeat_adaptor
m_gradient_colors	examples/distortions.cpp	/^    color_array_type m_gradient_colors;$/;"	m	class:the_application	file:
m_gradient_colors	examples/graph_test.cpp	/^    color_array_type            m_gradient_colors;$/;"	m	class:the_application	file:
m_gradient_function	include/agg_span_gradient.h	/^        const GradientF*   m_gradient_function;$/;"	m	class:agg::span_gradient
m_gradient_function	include/agg_span_gradient_alpha.h	/^        const GradientF*   m_gradient_function;$/;"	m	class:agg::span_gradient_alpha
m_gradient_lut	examples/gradient_focal.cpp	/^    color_func_type                 m_gradient_lut;$/;"	m	class:the_application	file:
m_graph	examples/graph_test.cpp	/^    graph                       m_graph;$/;"	m	class:the_application	file:
m_gray8_adaptor	include/agg_font_cache_manager.h	/^        gray8_adaptor_type  m_gray8_adaptor;$/;"	m	class:agg::font_cache_manager
m_gray8_buf	examples/blend_color.cpp	/^    agg::pod_array<agg::int8u> m_gray8_buf;$/;"	m	class:the_application	file:
m_gray8_rbuf	examples/blend_color.cpp	/^    agg::rendering_buffer      m_gray8_rbuf;$/;"	m	class:the_application	file:
m_gray8_rbuf2	examples/blend_color.cpp	/^    agg::rendering_buffer      m_gray8_rbuf2;$/;"	m	class:the_application	file:
m_gray8_scanline	include/agg_font_cache_manager.h	/^        gray8_scanline_type m_gray8_scanline;$/;"	m	class:agg::font_cache_manager
m_grid_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_grid_color;$/;"	m	class:agg::gamma_ctrl
m_grid_width	include/ctrl/agg_gamma_ctrl.h	/^        double m_grid_width;$/;"	m	class:agg::gamma_ctrl_impl
m_h	include/agg_gsv_text.h	/^        double          m_h;$/;"	m	class:agg::gsv_text
m_half_height_hr	include/agg_renderer_outline_image.h	/^        int                       m_half_height_hr;$/;"	m	class:agg::line_image_pattern
m_hamming	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_hamming;$/;"	m	class:the_application	file:
m_hanning	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_hanning;$/;"	m	class:the_application	file:
m_head_d1	include/agg_arrowhead.h	/^        double   m_head_d1;$/;"	m	class:agg::arrowhead
m_head_d2	include/agg_arrowhead.h	/^        double   m_head_d2;$/;"	m	class:agg::arrowhead
m_head_d3	include/agg_arrowhead.h	/^        double   m_head_d3;$/;"	m	class:agg::arrowhead
m_head_d4	include/agg_arrowhead.h	/^        double   m_head_d4;$/;"	m	class:agg::arrowhead
m_head_flag	include/agg_arrowhead.h	/^        bool     m_head_flag;$/;"	m	class:agg::arrowhead
m_height	examples/freetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_height;$/;"	m	class:the_application	file:
m_height	examples/truetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_height;$/;"	m	class:the_application	file:
m_height	font_freetype/agg_font_freetype.h	/^        unsigned        m_height;$/;"	m	class:agg::font_engine_freetype_base
m_height	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_height;$/;"	m	class:agg::font_engine_win32_tt_base
m_height	include/agg_gsv_text.h	/^        double          m_height;$/;"	m	class:agg::gsv_text
m_height	include/agg_renderer_outline_image.h	/^        double        m_height;$/;"	m	class:agg::line_image_scale
m_height	include/agg_renderer_outline_image.h	/^        unsigned                  m_height;$/;"	m	class:agg::line_image_pattern
m_height	include/agg_rendering_buffer.h	/^        unsigned      m_height;     \/\/ Height in pixels$/;"	m	class:agg::row_ptr_cache
m_height	include/agg_rendering_buffer.h	/^        unsigned      m_height; \/\/ Height in pixels$/;"	m	class:agg::row_accessor
m_height	include/agg_rendering_buffer_dynarow.h	/^        unsigned            m_height;     \/\/ Height in pixels$/;"	m	class:agg::rendering_buffer_dynarow
m_height	src/platform/AmigaOS/agg_platform_support.cpp	/^		uint16 m_height;$/;"	m	class:agg::platform_specific	file:
m_hermite	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_hermite;$/;"	m	class:the_application	file:
m_hinting	examples/freetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_hinting;$/;"	m	class:the_application	file:
m_hinting	examples/truetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_hinting;$/;"	m	class:the_application	file:
m_hinting	font_freetype/agg_font_freetype.h	/^        bool            m_hinting;$/;"	m	class:agg::font_engine_freetype_base
m_hinting	font_win32_tt/agg_font_win32_tt.h	/^        bool            m_hinting;$/;"	m	class:agg::font_engine_win32_tt_base
m_hit	include/agg_rasterizer_cells_aa.h	/^        bool m_hit;$/;"	m	class:agg::scanline_hit_test
m_hit_x	examples/flash_rasterizer.cpp	/^    int                        m_hit_x;$/;"	m	class:the_application	file:
m_hit_y	examples/flash_rasterizer.cpp	/^    int                        m_hit_y;$/;"	m	class:the_application	file:
m_hwnd	src/platform/win32/agg_platform_support.cpp	/^        HWND          m_hwnd;$/;"	m	class:agg::platform_specific	file:
m_idcmp_hook	src/platform/AmigaOS/agg_platform_support.cpp	/^		Hook* m_idcmp_hook;$/;"	m	class:agg::platform_specific	file:
m_idx	examples/aa_demo.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/alpha_gradient.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/conv_dash_marker.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/conv_stroke.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/gouraud.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/rasterizers.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	examples/rounded_rect.cpp	/^    int    m_idx;$/;"	m	class:the_application	file:
m_idx	include/ctrl/agg_bezier_ctrl.h	/^        unsigned            m_idx;$/;"	m	class:agg::bezier_ctrl_impl
m_idx	include/ctrl/agg_bezier_ctrl.h	/^        unsigned            m_idx;$/;"	m	class:agg::curve3_ctrl_impl
m_idx	include/ctrl/agg_cbox_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::cbox_ctrl_impl
m_idx	include/ctrl/agg_gamma_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::gamma_ctrl_impl
m_idx	include/ctrl/agg_rbox_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::rbox_ctrl_impl
m_idx	include/ctrl/agg_scale_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::scale_ctrl_impl
m_idx	include/ctrl/agg_slider_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::slider_ctrl_impl
m_idx	include/ctrl/agg_spline_ctrl.h	/^        unsigned m_idx;$/;"	m	class:agg::spline_ctrl_impl
m_image_angle	examples/image_transforms.cpp	/^    agg::slider_ctrl<agg::rgba> m_image_angle;$/;"	m	class:the_application	file:
m_image_center_x	examples/image_transforms.cpp	/^    double m_image_center_x;$/;"	m	class:the_application	file:
m_image_center_y	examples/image_transforms.cpp	/^    double m_image_center_y;$/;"	m	class:the_application	file:
m_image_cx	examples/image_transforms.cpp	/^    double m_image_cx;$/;"	m	class:the_application	file:
m_image_cy	examples/image_transforms.cpp	/^    double m_image_cy;$/;"	m	class:the_application	file:
m_image_scale	examples/image_transforms.cpp	/^    agg::slider_ctrl<agg::rgba> m_image_scale;$/;"	m	class:the_application	file:
m_img_bitmaps	src/platform/AmigaOS/agg_platform_support.cpp	/^		BitMap* m_img_bitmaps[platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
m_img_size	include/platform/mac/agg_mac_pmap.h	/^        unsigned       m_img_size;$/;"	m	class:agg::pixel_map
m_img_size	include/platform/win32/agg_win32_bmp.h	/^        unsigned       m_img_size;$/;"	m	class:agg::pixel_map
m_in_polygon_check	include/ctrl/agg_polygon_ctrl.h	/^        bool     m_in_polygon_check;$/;"	m	class:agg::polygon_ctrl_impl
m_inactive_color	include/ctrl/agg_cbox_ctrl.h	/^        ColorT m_inactive_color;$/;"	m	class:agg::cbox_ctrl
m_inactive_color	include/ctrl/agg_rbox_ctrl.h	/^        ColorT m_inactive_color;$/;"	m	class:agg::rbox_ctrl
m_inactive_pnt_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_inactive_pnt_color;$/;"	m	class:agg::gamma_ctrl
m_inactive_pnt_color	include/ctrl/agg_spline_ctrl.h	/^        ColorT  m_inactive_pnt_color;$/;"	m	class:agg::spline_ctrl
m_inc	include/agg_dda_line.h	/^        int                    m_inc;$/;"	m	class:agg::line_bresenham_interpolator
m_inc	include/agg_dda_line.h	/^        int m_inc;$/;"	m	class:agg::dda_line_interpolator
m_inc_x	include/agg_ellipse_bresenham.h	/^        int m_inc_x;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_inc_y	include/agg_ellipse_bresenham.h	/^        int m_inc_y;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_index	include/agg_path_storage.h	/^        int  m_index;$/;"	m	class:agg::poly_container_reverse_adaptor
m_index	include/agg_path_storage.h	/^        unsigned m_index;$/;"	m	class:agg::poly_container_adaptor
m_indices	include/agg_gsv_text.h	/^        int8u*          m_indices;$/;"	m	class:agg::gsv_text
m_initial_height	include/platform/agg_platform_support.h	/^        int              m_initial_height;$/;"	m	class:agg::platform_support
m_initial_width	include/platform/agg_platform_support.h	/^        int              m_initial_width;$/;"	m	class:agg::platform_support
m_initialized	include/agg_arc.h	/^        bool     m_initialized;$/;"	m	class:agg::arc
m_initialized	src/platform/X11/agg_platform_support.cpp	/^        bool m_initialized;$/;"	m	class:agg::platform_specific	file:
m_initialized	src/platform/sdl/agg_platform_support.cpp	/^        bool          m_initialized;$/;"	m	class:agg::platform_specific	file:
m_inner_join	examples/bezier_div.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_inner_join;$/;"	m	class:the_application	file:
m_inner_join	include/agg_math_stroke.h	/^        inner_join_e m_inner_join;$/;"	m	class:agg::math_stroke
m_inner_miter_limit	include/agg_math_stroke.h	/^        double       m_inner_miter_limit;$/;"	m	class:agg::math_stroke
m_input_flags	src/platform/AmigaOS/agg_platform_support.cpp	/^		unsigned m_input_flags;$/;"	m	class:agg::platform_specific	file:
m_input_flags	src/platform/mac/agg_platform_support.cpp	/^        unsigned         m_input_flags;$/;"	m	class:agg::platform_specific	file:
m_input_flags	src/platform/win32/agg_platform_support.cpp	/^        unsigned      m_input_flags;$/;"	m	class:agg::platform_specific	file:
m_interpolation_step	include/agg_vcgen_bspline.h	/^        double         m_interpolation_step;$/;"	m	class:agg::vcgen_bspline
m_interpolator	include/agg_dda_line.h	/^        dda2_line_interpolator m_interpolator;$/;"	m	class:agg::line_bresenham_interpolator
m_interpolator	include/agg_span_gradient.h	/^        interpolator_type* m_interpolator;$/;"	m	class:agg::span_gradient
m_interpolator	include/agg_span_gradient_alpha.h	/^        interpolator_type* m_interpolator;$/;"	m	class:agg::span_gradient_alpha
m_interpolator	include/agg_span_image_filter.h	/^        interpolator_type*      m_interpolator;$/;"	m	class:agg::span_image_filter
m_interpolator	include/agg_span_subdiv_adaptor.h	/^        interpolator_type* m_interpolator;$/;"	m	class:agg::span_subdiv_adaptor
m_inv_gamma	include/agg_gamma_lut.h	/^        LoResT* m_inv_gamma;$/;"	m	class:agg::gamma_lut
m_invert_order	examples/rasterizer_compound.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_invert_order;$/;"	m	class:the_application	file:
m_is_internal	include/platform/win32/agg_win32_bmp.h	/^        bool           m_is_internal;$/;"	m	class:agg::pixel_map
m_is_valid	include/agg_trans_viewport.h	/^        bool           m_is_valid;$/;"	m	class:agg::trans_viewport
m_italic	font_win32_tt/agg_font_win32_tt.h	/^        bool            m_italic;$/;"	m	class:agg::font_engine_win32_tt_base
m_items	include/ctrl/agg_rbox_ctrl.h	/^        pod_array<char> m_items[32];$/;"	m	class:agg::rbox_ctrl_impl
m_iterator	include/agg_path_storage.h	/^        unsigned        m_iterator;$/;"	m	class:agg::path_base
m_iterator	include/agg_span_interpolator_persp.h	/^        iterator_type          m_iterator;$/;"	m	class:agg::span_interpolator_persp_exact
m_ix	include/agg_span_interpolator_trans.h	/^        int               m_ix;$/;"	m	class:agg::span_interpolator_trans
m_iy	include/agg_span_interpolator_trans.h	/^        int               m_iy;$/;"	m	class:agg::span_interpolator_trans
m_join	examples/conv_stroke.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_join;$/;"	m	class:the_application	file:
m_kaiser	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_kaiser;$/;"	m	class:the_application	file:
m_kerning	examples/freetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_kerning;$/;"	m	class:the_application	file:
m_kerning	examples/truetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_kerning;$/;"	m	class:the_application	file:
m_kerning_pairs	font_win32_tt/agg_font_win32_tt.h	/^        KERNINGPAIR*    m_kerning_pairs;$/;"	m	class:agg::font_engine_win32_tt_base
m_keymap	src/platform/X11/agg_platform_support.cpp	/^        unsigned             m_keymap[256];$/;"	m	class:agg::platform_specific	file:
m_keymap	src/platform/mac/agg_platform_support.cpp	/^        unsigned         m_keymap[256];$/;"	m	class:agg::platform_specific	file:
m_keymap	src/platform/win32/agg_platform_support.cpp	/^        unsigned      m_keymap[256];$/;"	m	class:agg::platform_specific	file:
m_kindex	include/agg_trans_single_path.h	/^        double         m_kindex;$/;"	m	class:agg::trans_single_path
m_kindex1	include/agg_trans_double_path.h	/^        double         m_kindex1;$/;"	m	class:agg::trans_double_path
m_kindex2	include/agg_trans_double_path.h	/^        double         m_kindex2;$/;"	m	class:agg::trans_double_path
m_kx	include/agg_trans_viewport.h	/^        double         m_kx;$/;"	m	class:agg::trans_viewport
m_ky	include/agg_trans_viewport.h	/^        double         m_ky;$/;"	m	class:agg::trans_viewport
m_label	include/ctrl/agg_cbox_ctrl.h	/^        char     m_label[128];$/;"	m	class:agg::cbox_ctrl_impl
m_label	include/ctrl/agg_slider_ctrl.h	/^        char     m_label[64];$/;"	m	class:agg::slider_ctrl_impl
m_lanczos	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_lanczos;$/;"	m	class:the_application	file:
m_last_cmd	include/agg_conv_adaptor_vcgen.h	/^        unsigned      m_last_cmd;$/;"	m	class:agg::conv_adaptor_vcgen
m_last_command	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        char   m_last_command;$/;"	m	class:agg::svg::path_tokenizer
m_last_error	font_freetype/agg_font_freetype.h	/^        int             m_last_error;$/;"	m	class:agg::font_engine_freetype_base
m_last_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache*  m_last_glyph;$/;"	m	class:agg::font_cache_manager
m_last_idx	include/agg_bspline.h	/^        mutable int       m_last_idx;$/;"	m	class:agg::bspline
m_last_key	src/platform/AmigaOS/agg_platform_support.cpp	/^		uint16 m_last_key;$/;"	m	class:agg::platform_specific	file:
m_last_number	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        double m_last_number;$/;"	m	class:agg::svg::path_tokenizer
m_last_translated_key	src/platform/mac/agg_platform_support.cpp	/^        unsigned         m_last_translated_key;$/;"	m	class:agg::platform_specific	file:
m_last_translated_key	src/platform/win32/agg_platform_support.cpp	/^        unsigned      m_last_translated_key;$/;"	m	class:agg::platform_specific	file:
m_last_x	include/agg_conv_curve.h	/^        double        m_last_x;$/;"	m	class:agg::conv_curve
m_last_x	include/agg_scanline_bin.h	/^        int             m_last_x;$/;"	m	class:agg::scanline32_bin
m_last_x	include/agg_scanline_bin.h	/^        int             m_last_x;$/;"	m	class:agg::scanline_bin
m_last_x	include/agg_scanline_p.h	/^        int                   m_last_x;$/;"	m	class:agg::scanline32_p8
m_last_x	include/agg_scanline_p.h	/^        int                   m_last_x;$/;"	m	class:agg::scanline_p8
m_last_x	include/agg_scanline_u.h	/^        int                   m_last_x;$/;"	m	class:agg::scanline32_u8
m_last_x	include/agg_scanline_u.h	/^        int                   m_last_x;$/;"	m	class:agg::scanline_u8
m_last_y	include/agg_conv_curve.h	/^        double        m_last_y;$/;"	m	class:agg::conv_curve
m_layer_order	include/agg_rasterizer_compound_aa.h	/^        layer_order_e          m_layer_order;$/;"	m	class:agg::rasterizer_compound_aa
m_len	include/agg_dda_line.h	/^        unsigned               m_len;$/;"	m	class:agg::line_bresenham_interpolator
m_len	include/agg_gradient_lut.h	/^        unsigned   m_len;$/;"	m	struct:agg::color_interpolator
m_len	include/agg_renderer_outline_aa.h	/^        int m_len;$/;"	m	class:agg::line_interpolator_aa_base
m_len	include/agg_renderer_outline_image.h	/^        int m_len;$/;"	m	class:agg::distance_interpolator4
m_len	include/agg_span_interpolator_linear.h	/^        unsigned m_len;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_len	include/agg_span_subdiv_adaptor.h	/^        unsigned m_len;$/;"	m	class:agg::span_subdiv_adaptor
m_lft	include/agg_dda_line.h	/^        int m_lft;$/;"	m	class:agg::dda2_line_interpolator
m_li	include/agg_renderer_outline_aa.h	/^        dda2_line_interpolator m_li;$/;"	m	class:agg::line_interpolator_aa_base
m_li	include/agg_renderer_outline_image.h	/^        dda2_line_interpolator m_li;$/;"	m	class:agg::line_interpolator_image
m_li_x	include/agg_span_interpolator_linear.h	/^        dda2_line_interpolator m_li_x;$/;"	m	class:agg::span_interpolator_linear
m_li_x	include/agg_span_interpolator_linear.h	/^        dda2_line_interpolator m_li_x;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_li_y	include/agg_span_interpolator_linear.h	/^        dda2_line_interpolator m_li_y;$/;"	m	class:agg::span_interpolator_linear
m_li_y	include/agg_span_interpolator_linear.h	/^        dda2_line_interpolator m_li_y;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_library	font_freetype/agg_font_freetype.h	/^        FT_Library      m_library;    \/\/ handle to library    $/;"	m	class:agg::font_engine_freetype_base
m_library_initialized	font_freetype/agg_font_freetype.h	/^        bool            m_library_initialized;$/;"	m	class:agg::font_engine_freetype_base
m_line	include/agg_path_storage.h	/^        poly_plain_adaptor<double> m_line;$/;"	m	class:agg::line_adaptor
m_line1	examples/line_patterns_clip.cpp	/^    agg::polygon_ctrl<agg::rgba8> m_line1;$/;"	m	class:the_application	file:
m_line1	examples/mol_view.cpp	/^    agg::line m_line1;$/;"	m	class:bond_vertex_generator	file:
m_line2	examples/mol_view.cpp	/^    agg::line m_line2;$/;"	m	class:bond_vertex_generator	file:
m_line3	examples/mol_view.cpp	/^    agg::line m_line3;$/;"	m	class:bond_vertex_generator	file:
m_line_cap	examples/bezier_div.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_line_cap;$/;"	m	class:the_application	file:
m_line_cap	include/agg_math_stroke.h	/^        line_cap_e   m_line_cap;$/;"	m	class:agg::math_stroke
m_line_color	include/agg_renderer_primitives.h	/^        color_type m_line_color;$/;"	m	class:agg::renderer_primitives
m_line_join	examples/bezier_div.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_line_join;$/;"	m	class:the_application	file:
m_line_join	include/agg_math_stroke.h	/^        line_join_e  m_line_join;$/;"	m	class:agg::math_stroke
m_line_join	include/agg_rasterizer_outline_aa.h	/^        outline_aa_join_e   m_line_join;$/;"	m	class:agg::rasterizer_outline_aa
m_line_space	include/agg_gsv_text.h	/^        double          m_line_space;$/;"	m	class:agg::gsv_text
m_line_to	include/agg_conv_close_polygon.h	/^        bool          m_line_to;$/;"	m	class:agg::conv_close_polygon
m_loaded_font	include/agg_gsv_text.h	/^        pod_array<char> m_loaded_font;$/;"	m	class:agg::gsv_text
m_lp	include/agg_renderer_outline_aa.h	/^        const line_parameters* m_lp;$/;"	m	class:agg::line_interpolator_aa_base
m_lp	include/agg_renderer_outline_image.h	/^        const line_parameters& m_lp;$/;"	m	class:agg::line_interpolator_image
m_magn	include/agg_trans_warp_magnifier.h	/^        double m_magn;$/;"	m	class:agg::trans_warp_magnifier
m_magn_slider	examples/lion_lens.cpp	/^    agg::slider_ctrl<agg::rgba8> m_magn_slider;$/;"	m	class:the_application	file:
m_marker	include/agg_conv_marker.h	/^        unsigned       m_marker;$/;"	m	class:agg::conv_marker
m_marker_locator	include/agg_conv_marker.h	/^        MarkerLocator* m_marker_locator;$/;"	m	class:agg::conv_marker
m_marker_shapes	include/agg_conv_marker.h	/^        MarkerShapes*  m_marker_shapes;$/;"	m	class:agg::conv_marker
m_markers	include/agg_conv_adaptor_vcgen.h	/^        Markers       m_markers;$/;"	m	class:agg::conv_adaptor_vcgen
m_markers	include/agg_vcgen_markers_term.h	/^        coord_storage m_markers;$/;"	m	class:agg::vcgen_markers_term
m_mask	include/agg_bitset_iterator.h	/^        int8u        m_mask;$/;"	m	class:agg::bitset_iterator
m_mask	include/agg_image_accessors.h	/^        unsigned m_mask;$/;"	m	class:agg::wrap_mode_reflect_auto_pow2
m_mask	include/agg_image_accessors.h	/^        unsigned m_mask;$/;"	m	class:agg::wrap_mode_reflect_pow2
m_mask	include/agg_image_accessors.h	/^        unsigned m_mask;$/;"	m	class:agg::wrap_mode_repeat_auto_pow2
m_mask	include/agg_image_accessors.h	/^        unsigned m_mask;$/;"	m	class:agg::wrap_mode_repeat_pow2
m_mask	include/agg_pixfmt_amask_adaptor.h	/^        const amask_type*     m_mask;$/;"	m	class:agg::pixfmt_amask_adaptor
m_mask	include/agg_renderer_outline_image.h	/^        unsigned m_mask;$/;"	m	class:agg::line_image_pattern_pow2
m_mask_chr	src/platform/win32/agg_platform_support.cpp	/^        char        m_mask_chr;$/;"	m	class:agg::tokenizer	file:
m_mask_function	include/agg_alpha_mask_u8.h	/^        MaskF             m_mask_function;$/;"	m	class:agg::alpha_mask_u8
m_mask_function	include/agg_alpha_mask_u8.h	/^        MaskF             m_mask_function;$/;"	m	class:agg::amask_no_clip_u8
m_master_alpha	include/agg_rasterizer_compound_aa.h	/^        pod_bvector<unsigned>  m_master_alpha;$/;"	m	class:agg::rasterizer_compound_aa
m_matrix	font_win32_tt/agg_font_win32_tt.h	/^        MAT2            m_matrix;$/;"	m	class:agg::font_engine_win32_tt_base
m_max	include/agg_bspline.h	/^        int               m_max;$/;"	m	class:agg::bspline
m_max	include/ctrl/agg_slider_ctrl.h	/^        double   m_max;$/;"	m	class:agg::slider_ctrl_impl
m_max_abscissa	include/agg_vcgen_bspline.h	/^        double         m_max_abscissa;$/;"	m	class:agg::vcgen_bspline
m_max_blocks	include/agg_array.h	/^        unsigned        m_max_blocks;$/;"	m	class:agg::pod_bvector
m_max_blocks	include/agg_array.h	/^        unsigned    m_max_blocks;$/;"	m	class:agg::block_allocator
m_max_blocks	include/agg_path_storage.h	/^        unsigned m_max_blocks;$/;"	m	class:agg::vertex_block_storage
m_max_blocks	include/agg_rasterizer_cells_aa.h	/^        unsigned                m_max_blocks;$/;"	m	class:agg::rasterizer_cells_aa
m_max_extent	include/agg_renderer_outline_aa.h	/^        int m_max_extent;$/;"	m	class:agg::line_interpolator_aa_base
m_max_extent	include/agg_renderer_outline_image.h	/^        int m_max_extent;$/;"	m	class:agg::line_interpolator_image
m_max_faces	font_freetype/agg_font_freetype.h	/^        unsigned        m_max_faces;$/;"	m	class:agg::font_engine_freetype_base
m_max_fonts	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_max_fonts;$/;"	m	class:agg::font_engine_win32_tt_base
m_max_fonts	include/agg_font_cache_manager.h	/^        unsigned     m_max_fonts;$/;"	m	class:agg::font_cache_pool
m_max_kerning_pairs	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_max_kerning_pairs;$/;"	m	class:agg::font_engine_win32_tt_base
m_max_len	include/agg_scanline_bin.h	/^        unsigned        m_max_len;$/;"	m	class:agg::scanline32_bin
m_max_len	include/agg_scanline_p.h	/^        unsigned              m_max_len;$/;"	m	class:agg::scanline32_p8
m_max_style	examples/flash_rasterizer2.cpp	/^        int                                       m_max_style;$/;"	m	class:agg::compound_shape	file:
m_max_style	include/agg_rasterizer_compound_aa.h	/^        int        m_max_style;$/;"	m	class:agg::rasterizer_compound_aa
m_max_x	examples/svg_viewer/svg_test.cpp	/^    double m_max_x;$/;"	m	class:the_application	file:
m_max_x	include/agg_rasterizer_cells_aa.h	/^        int                     m_max_x;$/;"	m	class:agg::rasterizer_cells_aa
m_max_x	include/agg_scanline_storage_aa.h	/^        int           m_max_x;$/;"	m	class:agg::scanline_storage_aa
m_max_x	include/agg_scanline_storage_aa.h	/^        int          m_max_x;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_max_x	include/agg_scanline_storage_bin.h	/^        int           m_max_x;$/;"	m	class:agg::scanline_storage_bin
m_max_x	include/agg_scanline_storage_bin.h	/^        int          m_max_x;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_max_y	examples/svg_viewer/svg_test.cpp	/^    double m_max_y;$/;"	m	class:the_application	file:
m_max_y	include/agg_rasterizer_cells_aa.h	/^        int                     m_max_y;$/;"	m	class:agg::rasterizer_cells_aa
m_max_y	include/agg_scanline_storage_aa.h	/^        int           m_max_y;$/;"	m	class:agg::scanline_storage_aa
m_max_y	include/agg_scanline_storage_aa.h	/^        int          m_max_y;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_max_y	include/agg_scanline_storage_bin.h	/^        int           m_max_y;$/;"	m	class:agg::scanline_storage_bin
m_max_y	include/agg_scanline_storage_bin.h	/^        int          m_max_y;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_mesh	examples/gouraud_mesh.cpp	/^    agg::mesh_ctrl      m_mesh;$/;"	m	class:the_application	file:
m_method	examples/blend_color.cpp	/^    agg::rbox_ctrl<agg::rgba8>    m_method;$/;"	m	class:the_application	file:
m_method	examples/blur.cpp	/^    agg::rbox_ctrl<agg::rgba8>    m_method;$/;"	m	class:the_application	file:
m_min	include/ctrl/agg_slider_ctrl.h	/^        double   m_min;$/;"	m	class:agg::slider_ctrl_impl
m_min_d	include/ctrl/agg_scale_ctrl.h	/^        double   m_min_d;$/;"	m	class:agg::scale_ctrl_impl
m_min_style	examples/flash_rasterizer2.cpp	/^        int                                       m_min_style;$/;"	m	class:agg::compound_shape	file:
m_min_style	include/agg_rasterizer_compound_aa.h	/^        int        m_min_style;$/;"	m	class:agg::rasterizer_compound_aa
m_min_width	include/agg_renderer_outline_aa.h	/^        double                m_min_width;$/;"	m	class:agg::line_profile_aa
m_min_x	examples/svg_viewer/svg_test.cpp	/^    double m_min_x;$/;"	m	class:the_application	file:
m_min_x	include/agg_rasterizer_cells_aa.h	/^        int                     m_min_x;$/;"	m	class:agg::rasterizer_cells_aa
m_min_x	include/agg_scanline_storage_aa.h	/^        int           m_min_x;$/;"	m	class:agg::scanline_storage_aa
m_min_x	include/agg_scanline_storage_aa.h	/^        int          m_min_x;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_min_x	include/agg_scanline_storage_bin.h	/^        int           m_min_x;$/;"	m	class:agg::scanline_storage_bin
m_min_x	include/agg_scanline_storage_bin.h	/^        int          m_min_x;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_min_x	include/agg_scanline_u.h	/^        int                   m_min_x;$/;"	m	class:agg::scanline32_u8
m_min_x	include/agg_scanline_u.h	/^        int                   m_min_x;$/;"	m	class:agg::scanline_u8
m_min_y	examples/svg_viewer/svg_test.cpp	/^    double m_min_y;$/;"	m	class:the_application	file:
m_min_y	include/agg_rasterizer_cells_aa.h	/^        int                     m_min_y;$/;"	m	class:agg::rasterizer_cells_aa
m_min_y	include/agg_scanline_storage_aa.h	/^        int           m_min_y;$/;"	m	class:agg::scanline_storage_aa
m_min_y	include/agg_scanline_storage_aa.h	/^        int          m_min_y;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_min_y	include/agg_scanline_storage_bin.h	/^        int           m_min_y;$/;"	m	class:agg::scanline_storage_bin
m_min_y	include/agg_scanline_storage_bin.h	/^        int          m_min_y;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_mitchell	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_mitchell;$/;"	m	class:the_application	file:
m_miter_limit	examples/conv_stroke.cpp	/^    agg::slider_ctrl<agg::rgba8> m_miter_limit;$/;"	m	class:the_application	file:
m_miter_limit	include/agg_math_stroke.h	/^        double       m_miter_limit;$/;"	m	class:agg::math_stroke
m_mod	include/agg_dda_line.h	/^        int m_mod;$/;"	m	class:agg::dda2_line_interpolator
m_molecules	examples/mol_view.cpp	/^    molecule*                    m_molecules;$/;"	m	class:the_application	file:
m_mono_adaptor	include/agg_font_cache_manager.h	/^        mono_adaptor_type   m_mono_adaptor;$/;"	m	class:agg::font_cache_manager
m_mono_scanline	include/agg_font_cache_manager.h	/^        mono_scanline_type  m_mono_scanline;$/;"	m	class:agg::font_cache_manager
m_mouse_move	examples/gradients.cpp	/^    bool m_mouse_move;$/;"	m	class:the_application	file:
m_mouse_move	examples/mol_view.cpp	/^    bool       m_mouse_move;$/;"	m	class:the_application	file:
m_mouse_move	include/ctrl/agg_slider_ctrl.h	/^        bool     m_mouse_move;$/;"	m	class:agg::slider_ctrl_impl
m_mouse_point	include/ctrl/agg_gamma_ctrl.h	/^        unsigned m_mouse_point;$/;"	m	class:agg::gamma_ctrl_impl
m_mouse_x	examples/gradient_focal.cpp	/^    double m_mouse_x, m_mouse_y;$/;"	m	class:the_application	file:
m_mouse_y	examples/gradient_focal.cpp	/^    double m_mouse_x, m_mouse_y;$/;"	m	class:the_application	file:
m_move_pnt	include/ctrl/agg_spline_ctrl.h	/^        int      m_move_pnt;$/;"	m	class:agg::spline_ctrl_impl
m_move_to	include/agg_vpgen_clip_polyline.h	/^        bool          m_move_to;$/;"	m	class:agg::vpgen_clip_polyline
m_move_what	include/ctrl/agg_scale_ctrl.h	/^        move_e   m_move_what;$/;"	m	class:agg::scale_ctrl_impl
m_msg	examples/svg_viewer/agg_svg_exception.h	/^        char* m_msg;$/;"	m	class:agg::svg::exception
m_mtx	include/agg_conv_marker.h	/^        trans_affine   m_mtx;$/;"	m	class:agg::conv_marker
m_mtx	include/agg_trans_bilinear.h	/^        double m_mtx[4][2];$/;"	m	class:agg::trans_bilinear
m_mtx	include/ctrl/agg_ctrl.h	/^        const trans_affine* m_mtx;$/;"	m	class:agg::ctrl
m_mtx	include/ctrl/agg_spline_ctrl.h	/^        const trans_affine* m_mtx;$/;"	m	class:agg::spline_ctrl_impl
m_mul	include/agg_gamma_functions.h	/^        double m_mul;$/;"	m	class:agg::gamma_multiply
m_mul	include/agg_span_gradient.h	/^        double m_mul;$/;"	m	class:agg::gradient_radial_focus
m_mul1	examples/scanline_boolean.cpp	/^    agg::slider_ctrl<agg::rgba8> m_mul1;$/;"	m	class:the_application	file:
m_mul2	examples/scanline_boolean.cpp	/^    agg::slider_ctrl<agg::rgba8> m_mul2;$/;"	m	class:the_application	file:
m_name	examples/mol_view.cpp	/^    char       m_name[128];$/;"	m	class:molecule	file:
m_name	font_freetype/agg_font_freetype.h	/^        char*           m_name;$/;"	m	class:agg::font_engine_freetype_base
m_name_len	font_freetype/agg_font_freetype.h	/^        unsigned        m_name_len;$/;"	m	class:agg::font_engine_freetype_base
m_node	examples/interactive_polygon.h	/^        int               m_node;$/;"	m	class:agg::interactive_polygon
m_node	include/ctrl/agg_polygon_ctrl.h	/^        int               m_node;$/;"	m	class:agg::polygon_ctrl_impl
m_nodes	examples/graph_test.cpp	/^    node* m_nodes;$/;"	m	class:graph	file:
m_normalize	examples/image_filters.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_normalize;$/;"	m	class:the_application	file:
m_normalize	examples/image_filters2.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_normalize;$/;"	m	class:the_application	file:
m_num	include/agg_bspline.h	/^        int               m_num;$/;"	m	class:agg::bspline
m_num	include/agg_ellipse.h	/^        unsigned m_num;$/;"	m	class:agg::ellipse
m_num_atoms	examples/mol_view.cpp	/^    unsigned   m_num_atoms;$/;"	m	class:molecule	file:
m_num_blocks	include/agg_array.h	/^        unsigned        m_num_blocks;$/;"	m	class:agg::pod_bvector
m_num_blocks	include/agg_array.h	/^        unsigned    m_num_blocks;$/;"	m	class:agg::block_allocator
m_num_blocks	include/agg_rasterizer_cells_aa.h	/^        unsigned                m_num_blocks;$/;"	m	class:agg::rasterizer_cells_aa
m_num_bonds	examples/mol_view.cpp	/^    unsigned   m_num_bonds;$/;"	m	class:molecule	file:
m_num_cb	examples/alpha_mask2.cpp	/^    agg::slider_ctrl<agg::rgba> m_num_cb;$/;"	m	class:the_application	file:
m_num_cb	examples/multi_clip.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_cb;$/;"	m	class:the_application	file:
m_num_cells	include/agg_rasterizer_cells_aa.h	/^        unsigned                m_num_cells;$/;"	m	class:agg::rasterizer_cells_aa
m_num_ctrl	include/platform/agg_platform_support.h	/^        unsigned      m_num_ctrl;$/;"	m	class:agg::ctrl_container
m_num_dashes	examples/mol_view.cpp	/^        unsigned m_num_dashes;$/;"	m	class:agg::dashed_wedge	file:
m_num_dashes	include/agg_vcgen_dash.h	/^        unsigned           m_num_dashes;$/;"	m	class:agg::vcgen_dash
m_num_edges	examples/graph_test.cpp	/^    int m_num_edges;$/;"	m	class:graph	file:
m_num_faces	font_freetype/agg_font_freetype.h	/^        unsigned        m_num_faces;$/;"	m	class:agg::font_engine_freetype_base
m_num_filters	examples/image_fltr_graph.cpp	/^    unsigned     m_num_filters;$/;"	m	class:the_application	file:
m_num_fonts	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_num_fonts;$/;"	m	class:agg::font_engine_win32_tt_base
m_num_fonts	include/agg_font_cache_manager.h	/^        unsigned     m_num_fonts;$/;"	m	class:agg::font_cache_pool
m_num_items	include/ctrl/agg_rbox_ctrl.h	/^        unsigned        m_num_items;$/;"	m	class:agg::rbox_ctrl_impl
m_num_kerning_pairs	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_num_kerning_pairs;$/;"	m	class:agg::font_engine_win32_tt_base
m_num_markers	include/agg_conv_marker.h	/^        unsigned       m_num_markers;$/;"	m	class:agg::conv_marker
m_num_molecules	examples/mol_view.cpp	/^    unsigned                     m_num_molecules;$/;"	m	class:the_application	file:
m_num_nodes	examples/graph_test.cpp	/^    int m_num_nodes;$/;"	m	class:graph	file:
m_num_pix	examples/image_filters.cpp	/^    double  m_num_pix;$/;"	m	class:the_application	file:
m_num_pix	examples/image_filters2.cpp	/^    double  m_num_pix;$/;"	m	class:the_application	file:
m_num_pnt	include/ctrl/agg_spline_ctrl.h	/^        unsigned m_num_pnt;$/;"	m	class:agg::spline_ctrl_impl
m_num_points	examples/bspline.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_points;$/;"	m	class:the_application	file:
m_num_points	examples/circles.cpp	/^    unsigned       m_num_points;$/;"	m	class:the_application	file:
m_num_points	examples/interactive_polygon.h	/^        unsigned          m_num_points;$/;"	m	class:agg::interactive_polygon
m_num_points	examples/interactive_polygon.h	/^        unsigned m_num_points;$/;"	m	class:agg::simple_polygon_vertex_source
m_num_points	examples/trans_curve1.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_points;$/;"	m	class:the_application	file:
m_num_points	examples/trans_curve1_ft.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_points;$/;"	m	class:the_application	file:
m_num_points	examples/trans_curve2.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_points;$/;"	m	class:the_application	file:
m_num_points	examples/trans_curve2_ft.cpp	/^    agg::slider_ctrl<agg::rgba8> m_num_points;$/;"	m	class:the_application	file:
m_num_points	include/ctrl/agg_polygon_ctrl.h	/^        unsigned          m_num_points;$/;"	m	class:agg::polygon_ctrl_impl
m_num_points	include/ctrl/agg_polygon_ctrl.h	/^        unsigned m_num_points;$/;"	m	class:agg::simple_polygon_vertex_source
m_num_spans	include/agg_scanline_storage_aa.h	/^            unsigned     m_num_spans;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
m_num_spans	include/agg_scanline_storage_bin.h	/^            unsigned     m_num_spans;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
m_num_steps	examples/image_filters.cpp	/^    int     m_num_steps;$/;"	m	class:the_application	file:
m_num_steps	examples/image_filters2.cpp	/^    int     m_num_steps;$/;"	m	class:the_application	file:
m_num_steps	include/agg_curves.h	/^        int      m_num_steps;$/;"	m	class:agg::curve3_inc
m_num_steps	include/agg_curves.h	/^        int      m_num_steps;$/;"	m	class:agg::curve4_inc
m_num_steps	include/ctrl/agg_slider_ctrl.h	/^        unsigned m_num_steps;$/;"	m	class:agg::slider_ctrl_impl
m_num_vertices	examples/aa_test.cpp	/^    unsigned m_num_vertices;$/;"	m	class:simple_vertex_source	file:
m_num_vertices	include/agg_bezier_arc.h	/^        unsigned m_num_vertices;$/;"	m	class:agg::bezier_arc
m_num_vertices	include/agg_vpgen_clip_polygon.h	/^        unsigned      m_num_vertices;$/;"	m	class:agg::vpgen_clip_polygon
m_num_vertices	include/agg_vpgen_clip_polyline.h	/^        unsigned      m_num_vertices;$/;"	m	class:agg::vpgen_clip_polyline
m_numeric_mask	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        char m_numeric_mask[256\/8];$/;"	m	class:agg::svg::path_tokenizer
m_offset	examples/rounded_rect.cpp	/^    agg::slider_ctrl<agg::rgba8> m_offset;$/;"	m	class:the_application	file:
m_offset_x	include/agg_span_pattern_gray.h	/^        unsigned     m_offset_x;$/;"	m	class:agg::span_pattern_gray
m_offset_x	include/agg_span_pattern_rgb.h	/^        unsigned     m_offset_x;$/;"	m	class:agg::span_pattern_rgb
m_offset_x	include/agg_span_pattern_rgba.h	/^        unsigned     m_offset_x;$/;"	m	class:agg::span_pattern_rgba
m_offset_y	include/agg_span_pattern_gray.h	/^        unsigned     m_offset_y;$/;"	m	class:agg::span_pattern_gray
m_offset_y	include/agg_span_pattern_rgb.h	/^        unsigned     m_offset_y;$/;"	m	class:agg::span_pattern_rgb
m_offset_y	include/agg_span_pattern_rgba.h	/^        unsigned     m_offset_y;$/;"	m	class:agg::span_pattern_rgba
m_offset_y_hr	include/agg_renderer_outline_image.h	/^        int                       m_offset_y_hr;$/;"	m	class:agg::line_image_pattern
m_old_font	font_win32_tt/agg_font_win32_tt.h	/^        HFONT           m_old_font;$/;"	m	class:agg::font_engine_win32_tt_base
m_old_gamma	examples/gradient_focal.cpp	/^    double m_old_gamma;$/;"	m	class:the_application	file:
m_old_gamma	examples/image_resample.cpp	/^    double m_old_gamma;$/;"	m	class:the_application	file:
m_old_gamma	examples/pattern_resample.cpp	/^    double m_old_gamma;$/;"	m	class:the_application	file:
m_old_height	examples/freetype_test.cpp	/^    double                       m_old_height;$/;"	m	class:the_application	file:
m_old_height	examples/truetype_test.cpp	/^    double                       m_old_height;$/;"	m	class:the_application	file:
m_old_x	include/agg_renderer_outline_aa.h	/^        int m_old_x;$/;"	m	class:agg::line_interpolator_aa_base
m_old_x	include/agg_renderer_outline_image.h	/^        int m_old_x;$/;"	m	class:agg::line_interpolator_image
m_old_y	include/agg_renderer_outline_aa.h	/^        int m_old_y;$/;"	m	class:agg::line_interpolator_aa_base
m_old_y	include/agg_renderer_outline_image.h	/^        int m_old_y;$/;"	m	class:agg::line_interpolator_image
m_operation	examples/alpha_mask3.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_operation;$/;"	m	class:the_application	file:
m_operation	examples/gpc_test.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_operation;$/;"	m	class:the_application	file:
m_operation	examples/scanline_boolean2.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_operation;$/;"	m	class:the_application	file:
m_operation	include/agg_conv_gpc.h	/^        gpc_op_e                   m_operation;$/;"	m	class:agg::conv_gpc
m_orientation	include/agg_vcgen_contour.h	/^        unsigned                   m_orientation;$/;"	m	class:agg::vcgen_contour
m_out_vertex	include/agg_vcgen_contour.h	/^        unsigned                   m_out_vertex;$/;"	m	class:agg::vcgen_contour
m_out_vertex	include/agg_vcgen_stroke.h	/^        unsigned                   m_out_vertex;$/;"	m	class:agg::vcgen_stroke
m_out_vertices	include/agg_vcgen_contour.h	/^        coord_storage              m_out_vertices;$/;"	m	class:agg::vcgen_contour
m_out_vertices	include/agg_vcgen_stroke.h	/^        coord_storage              m_out_vertices;$/;"	m	class:agg::vcgen_stroke
m_outline	include/agg_rasterizer_compound_aa.h	/^        rasterizer_cells_aa<cell_style_aa> m_outline;$/;"	m	class:agg::rasterizer_compound_aa
m_outline	include/agg_rasterizer_scanline_aa.h	/^        rasterizer_cells_aa<cell_aa> m_outline;$/;"	m	class:agg::rasterizer_scanline_aa
m_p1_active	include/ctrl/agg_gamma_ctrl.h	/^        bool     m_p1_active;$/;"	m	class:agg::gamma_ctrl_impl
m_path	examples/blend_color.cpp	/^    agg::path_storage             m_path;$/;"	m	class:the_application	file:
m_path	examples/blur.cpp	/^    agg::path_storage             m_path;$/;"	m	class:the_application	file:
m_path	examples/conv_contour.cpp	/^    agg::path_storage            m_path;$/;"	m	class:the_application	file:
m_path	examples/flash_rasterizer.cpp	/^        path_storage                              m_path;$/;"	m	class:agg::compound_shape	file:
m_path	examples/flash_rasterizer2.cpp	/^        path_storage                              m_path;$/;"	m	class:agg::compound_shape	file:
m_path	examples/rasterizer_compound.cpp	/^    agg::path_storage            m_path;$/;"	m	class:the_application	file:
m_path	examples/svg_viewer/agg_svg_parser.h	/^        path_renderer& m_path;$/;"	m	class:agg::svg::parser
m_path	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        const char* m_path;$/;"	m	class:agg::svg::path_tokenizer
m_path	examples/svg_viewer/svg_test.cpp	/^    agg::svg::path_renderer m_path;$/;"	m	class:the_application	file:
m_path16	font_freetype/agg_font_freetype.h	/^        path_storage_integer<int16, 6>              m_path16;$/;"	m	class:agg::font_engine_freetype_base
m_path16	font_win32_tt/agg_font_win32_tt.h	/^        path_storage_integer<int16, 6>              m_path16;$/;"	m	class:agg::font_engine_win32_tt_base
m_path32	font_freetype/agg_font_freetype.h	/^        path_storage_integer<int32, 6>              m_path32;$/;"	m	class:agg::font_engine_freetype_base
m_path32	font_win32_tt/agg_font_win32_tt.h	/^        path_storage_integer<int32, 6>              m_path32;$/;"	m	class:agg::font_engine_win32_tt_base
m_path_adaptor	include/agg_font_cache_manager.h	/^        path_adaptor_type   m_path_adaptor;$/;"	m	class:agg::font_cache_manager
m_path_cmd	include/agg_arc.h	/^        unsigned m_path_cmd;$/;"	m	class:agg::arc
m_path_flag	examples/svg_viewer/agg_svg_parser.h	/^        bool           m_path_flag;$/;"	m	class:agg::svg::parser
m_pattern	examples/gamma_tuner.cpp	/^    agg::rbox_ctrl  <agg::rgba8> m_pattern;$/;"	m	class:the_application	file:
m_pattern	examples/pattern_fill.cpp	/^    agg::int8u*           m_pattern;$/;"	m	class:the_application	file:
m_pattern	include/agg_renderer_outline_image.h	/^        const pattern_type* m_pattern;$/;"	m	class:agg::renderer_outline_image
m_pattern_alpha	examples/pattern_fill.cpp	/^    agg::slider_ctrl<agg::rgba> m_pattern_alpha;$/;"	m	class:the_application	file:
m_pattern_angle	examples/pattern_fill.cpp	/^    agg::slider_ctrl<agg::rgba> m_pattern_angle;$/;"	m	class:the_application	file:
m_pattern_rbuf	examples/pattern_fill.cpp	/^    agg::rendering_buffer m_pattern_rbuf;$/;"	m	class:the_application	file:
m_pattern_size	examples/pattern_fill.cpp	/^    agg::slider_ctrl<agg::rgba> m_pattern_size;$/;"	m	class:the_application	file:
m_pdx	examples/gradients.cpp	/^    double m_pdx;$/;"	m	class:the_application	file:
m_pdx	examples/mol_view.cpp	/^    double     m_pdx;$/;"	m	class:the_application	file:
m_pdx	include/ctrl/agg_gamma_ctrl.h	/^        double   m_pdx;$/;"	m	class:agg::gamma_ctrl_impl
m_pdx	include/ctrl/agg_scale_ctrl.h	/^        double   m_pdx;$/;"	m	class:agg::scale_ctrl_impl
m_pdx	include/ctrl/agg_slider_ctrl.h	/^        double   m_pdx;$/;"	m	class:agg::slider_ctrl_impl
m_pdx	include/ctrl/agg_spline_ctrl.h	/^        double   m_pdx;$/;"	m	class:agg::spline_ctrl_impl
m_pdy	examples/gradients.cpp	/^    double m_pdy;$/;"	m	class:the_application	file:
m_pdy	examples/mol_view.cpp	/^    double     m_pdy;$/;"	m	class:the_application	file:
m_pdy	include/ctrl/agg_gamma_ctrl.h	/^        double   m_pdy;$/;"	m	class:agg::gamma_ctrl_impl
m_pdy	include/ctrl/agg_scale_ctrl.h	/^        double   m_pdy;$/;"	m	class:agg::scale_ctrl_impl
m_pdy	include/ctrl/agg_spline_ctrl.h	/^        double   m_pdy;$/;"	m	class:agg::spline_ctrl_impl
m_performance	examples/freetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_performance;$/;"	m	class:the_application	file:
m_performance	examples/truetype_test.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_performance;$/;"	m	class:the_application	file:
m_period	examples/distortions.cpp	/^    agg::slider_ctrl<agg::rgba8> m_period;$/;"	m	class:the_application	file:
m_period	examples/distortions.cpp	/^    double m_period;$/;"	m	class:periodic_distortion	file:
m_periods	examples/raster_text.cpp	/^    double    m_periods;$/;"	m	class:gradient_sine_repeat_adaptor	file:
m_pf	examples/line_patterns.cpp	/^    pixfmt m_pf;$/;"	m	class:pattern_src_brightness_to_alpha_rgba8	file:
m_pf	examples/line_patterns_clip.cpp	/^    pixfmt m_pf;$/;"	m	class:pattern_src_brightness_to_alpha_rgba8	file:
m_phase	examples/distortions.cpp	/^    double m_phase;$/;"	m	class:periodic_distortion	file:
m_phase	examples/distortions.cpp	/^    double m_phase;$/;"	m	class:the_application	file:
m_pipeline	examples/trans_polar.cpp	/^        Pipeline& m_pipeline;$/;"	m	class:agg::transformed_control	file:
m_pitch_and_family	font_win32_tt/agg_font_win32_tt.h	/^        DWORD           m_pitch_and_family;$/;"	m	class:agg::font_engine_win32_tt_base
m_pix_ptr	include/agg_image_accessors.h	/^        const int8u*       m_pix_ptr;$/;"	m	class:agg::image_accessor_clip
m_pix_ptr	include/agg_image_accessors.h	/^        const int8u*       m_pix_ptr;$/;"	m	class:agg::image_accessor_clone
m_pix_ptr	include/agg_image_accessors.h	/^        const int8u*       m_pix_ptr;$/;"	m	class:agg::image_accessor_no_clip
m_pixf	include/agg_image_accessors.h	/^        const pixfmt_type* m_pixf;$/;"	m	class:agg::image_accessor_clip
m_pixf	include/agg_image_accessors.h	/^        const pixfmt_type* m_pixf;$/;"	m	class:agg::image_accessor_clone
m_pixf	include/agg_image_accessors.h	/^        const pixfmt_type* m_pixf;$/;"	m	class:agg::image_accessor_no_clip
m_pixf	include/agg_image_accessors.h	/^        const pixfmt_type* m_pixf;$/;"	m	class:agg::image_accessor_wrap
m_pixf	include/agg_pixfmt_amask_adaptor.h	/^        pixfmt_type*          m_pixf;$/;"	m	class:agg::pixfmt_amask_adaptor
m_pixf	include/agg_pixfmt_transposer.h	/^        pixfmt_type* m_pixf;$/;"	m	class:agg::pixfmt_transposer
m_pixfmt	examples/polymorphic_renderer.cpp	/^        PixFmt                m_pixfmt;$/;"	m	class:agg::polymorphic_renderer_solid_rgba8_adaptor	file:
m_pixmap	examples/rasterizers2.cpp	/^        const int32u* m_pixmap;$/;"	m	class:agg::pattern_pixmap_argb32	file:
m_plen	include/agg_renderer_outline_image.h	/^        int m_plen;$/;"	m	class:agg::line_interpolator_image
m_pmap	include/platform/mac/agg_mac_pmap.h	/^        GWorldPtr      m_pmap;$/;"	m	class:agg::pixel_map
m_pmap_img	src/platform/mac/agg_platform_support.cpp	/^        pixel_map        m_pmap_img[platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
m_pmap_img	src/platform/win32/agg_platform_support.cpp	/^        pixel_map     m_pmap_img[platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
m_pmap_window	src/platform/mac/agg_platform_support.cpp	/^        pixel_map   	 m_pmap_window;$/;"	m	class:agg::platform_specific	file:
m_pmap_window	src/platform/win32/agg_platform_support.cpp	/^        pixel_map     m_pmap_window;$/;"	m	class:agg::platform_specific	file:
m_point_idx	examples/flash_rasterizer.cpp	/^    int                        m_point_idx;$/;"	m	class:the_application	file:
m_point_idx	examples/flash_rasterizer2.cpp	/^    int                        m_point_idx;$/;"	m	class:the_application	file:
m_point_radius	examples/interactive_polygon.h	/^        double   m_point_radius;$/;"	m	class:agg::interactive_polygon
m_point_radius	include/ctrl/agg_polygon_ctrl.h	/^        double   m_point_radius;$/;"	m	class:agg::polygon_ctrl_impl
m_point_size	include/ctrl/agg_gamma_ctrl.h	/^        double m_point_size;$/;"	m	class:agg::gamma_ctrl_impl
m_point_size	include/ctrl/agg_spline_ctrl.h	/^        double   m_point_size;$/;"	m	class:agg::spline_ctrl_impl
m_pointer_color	include/ctrl/agg_slider_ctrl.h	/^        ColorT m_pointer_color;$/;"	m	class:agg::slider_ctrl
m_pointer_preview_color	include/ctrl/agg_slider_ctrl.h	/^        ColorT m_pointer_preview_color;$/;"	m	class:agg::slider_ctrl
m_pointers_color	include/ctrl/agg_scale_ctrl.h	/^        ColorT m_pointers_color;$/;"	m	class:agg::scale_ctrl
m_points	examples/circles.cpp	/^    scatter_point* m_points;$/;"	m	class:the_application	file:
m_points	examples/gpc_test.cpp	/^        unsigned m_points;$/;"	m	struct:agg::conv_poly_counter	file:
m_points	include/agg_curves.h	/^        pod_bvector<point_d> m_points;$/;"	m	class:agg::curve3_div
m_points	include/agg_curves.h	/^        pod_bvector<point_d> m_points;$/;"	m	class:agg::curve4_div
m_poly	examples/bspline.cpp	/^    agg::interactive_polygon     m_poly;$/;"	m	class:the_application	file:
m_poly	examples/trans_curve1.cpp	/^    agg::interactive_polygon     m_poly;$/;"	m	class:the_application	file:
m_poly	examples/trans_curve1_ft.cpp	/^    agg::interactive_polygon     m_poly;$/;"	m	class:the_application	file:
m_poly	include/ctrl/agg_bezier_ctrl.h	/^        polygon_ctrl_impl   m_poly;$/;"	m	class:agg::bezier_ctrl_impl
m_poly	include/ctrl/agg_bezier_ctrl.h	/^        polygon_ctrl_impl   m_poly;$/;"	m	class:agg::curve3_ctrl_impl
m_poly1	examples/trans_curve2.cpp	/^    agg::interactive_polygon     m_poly1;$/;"	m	class:the_application	file:
m_poly1	examples/trans_curve2_ft.cpp	/^    agg::interactive_polygon     m_poly1;$/;"	m	class:the_application	file:
m_poly2	examples/trans_curve2.cpp	/^    agg::interactive_polygon     m_poly2;$/;"	m	class:the_application	file:
m_poly2	examples/trans_curve2_ft.cpp	/^    agg::interactive_polygon     m_poly2;$/;"	m	class:the_application	file:
m_poly_a	include/agg_conv_gpc.h	/^        gpc_polygon                m_poly_a;$/;"	m	class:agg::conv_gpc
m_poly_b	include/agg_conv_gpc.h	/^        gpc_polygon                m_poly_b;$/;"	m	class:agg::conv_gpc
m_poly_flags	include/agg_conv_adaptor_vpgen.h	/^        unsigned      m_poly_flags;$/;"	m	class:agg::conv_adaptor_vpgen
m_polygon	examples/interactive_polygon.h	/^        const double* m_polygon;$/;"	m	class:agg::simple_polygon_vertex_source
m_polygon	examples/interactive_polygon.h	/^        pod_array<double> m_polygon;$/;"	m	class:agg::interactive_polygon
m_polygon	include/ctrl/agg_polygon_ctrl.h	/^        const double* m_polygon;$/;"	m	class:agg::simple_polygon_vertex_source
m_polygon	include/ctrl/agg_polygon_ctrl.h	/^        pod_array<double> m_polygon;$/;"	m	class:agg::polygon_ctrl_impl
m_polygon_angle	examples/image_transforms.cpp	/^    agg::slider_ctrl<agg::rgba> m_polygon_angle;$/;"	m	class:the_application	file:
m_polygon_angle	examples/pattern_fill.cpp	/^    agg::slider_ctrl<agg::rgba> m_polygon_angle;$/;"	m	class:the_application	file:
m_polygon_cx	examples/image_transforms.cpp	/^    double m_polygon_cx;$/;"	m	class:the_application	file:
m_polygon_cx	examples/pattern_fill.cpp	/^    double m_polygon_cx;$/;"	m	class:the_application	file:
m_polygon_cy	examples/image_transforms.cpp	/^    double m_polygon_cy;$/;"	m	class:the_application	file:
m_polygon_cy	examples/pattern_fill.cpp	/^    double m_polygon_cy;$/;"	m	class:the_application	file:
m_polygon_scale	examples/image_transforms.cpp	/^    agg::slider_ctrl<agg::rgba> m_polygon_scale;$/;"	m	class:the_application	file:
m_polygon_scale	examples/pattern_fill.cpp	/^    agg::slider_ctrl<agg::rgba> m_polygon_scale;$/;"	m	class:the_application	file:
m_polygons	examples/alpha_mask3.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_polygons;$/;"	m	class:the_application	file:
m_polygons	examples/gpc_test.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_polygons;$/;"	m	class:the_application	file:
m_polygons	examples/scanline_boolean2.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_polygons;$/;"	m	class:the_application	file:
m_polyline	include/agg_gsv_text.h	/^        conv_stroke<gsv_text> m_polyline;$/;"	m	class:agg::gsv_text_outline
m_pos	include/agg_span_interpolator_linear.h	/^        unsigned m_pos;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_pos	include/agg_span_subdiv_adaptor.h	/^        unsigned m_pos;$/;"	m	class:agg::span_subdiv_adaptor
m_preserve_x_scale	examples/trans_curve1.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_preserve_x_scale;$/;"	m	class:the_application	file:
m_preserve_x_scale	examples/trans_curve1_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_preserve_x_scale;$/;"	m	class:the_application	file:
m_preserve_x_scale	examples/trans_curve2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_preserve_x_scale;$/;"	m	class:the_application	file:
m_preserve_x_scale	examples/trans_curve2_ft.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_preserve_x_scale;$/;"	m	class:the_application	file:
m_preserve_x_scale	include/agg_trans_double_path.h	/^        bool           m_preserve_x_scale;$/;"	m	class:agg::trans_double_path
m_preserve_x_scale	include/agg_trans_single_path.h	/^        bool           m_preserve_x_scale;$/;"	m	class:agg::trans_single_path
m_prev_angle	examples/gradients.cpp	/^    double m_prev_angle;$/;"	m	class:the_application	file:
m_prev_angle	examples/mol_view.cpp	/^    double     m_prev_angle;$/;"	m	class:the_application	file:
m_prev_animate	examples/trans_curve1.cpp	/^    bool                         m_prev_animate;$/;"	m	class:the_application	file:
m_prev_animate	examples/trans_curve1_ft.cpp	/^    bool                         m_prev_animate;$/;"	m	class:the_application	file:
m_prev_animate	examples/trans_curve2.cpp	/^    bool                         m_prev_animate;$/;"	m	class:the_application	file:
m_prev_animate	examples/trans_curve2_ft.cpp	/^    bool                         m_prev_animate;$/;"	m	class:the_application	file:
m_prev_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache*  m_prev_glyph;$/;"	m	class:agg::font_cache_manager
m_prev_scale	examples/gradients.cpp	/^    double m_prev_scale;$/;"	m	class:the_application	file:
m_prev_scale	examples/mol_view.cpp	/^    double     m_prev_scale;$/;"	m	class:the_application	file:
m_prev_scale_x	examples/gradients.cpp	/^    double m_prev_scale_x;$/;"	m	class:the_application	file:
m_prev_scale_y	examples/gradients.cpp	/^    double m_prev_scale_y;$/;"	m	class:the_application	file:
m_prev_status	include/agg_vcgen_stroke.h	/^        status_e                   m_prev_status;$/;"	m	class:agg::vcgen_stroke
m_preview_value	include/ctrl/agg_slider_ctrl.h	/^        double   m_preview_value;$/;"	m	class:agg::slider_ctrl_impl
m_profile	examples/gradients.cpp	/^    agg::gamma_ctrl<agg::rgba8>  m_profile;$/;"	m	class:the_application	file:
m_profile	examples/gradients.cpp	/^    const agg::int8u* m_profile;$/;"	m	struct:color_function_profile	file:
m_profile	include/agg_renderer_outline_aa.h	/^        const line_profile_aa* m_profile; $/;"	m	class:agg::renderer_outline_aa
m_profile	include/agg_renderer_outline_aa.h	/^        pod_array<value_type> m_profile;$/;"	m	class:agg::line_profile_aa
m_ps	examples/pattern_fill.cpp	/^    agg::path_storage m_ps;$/;"	m	class:the_application	file:
m_ptr	include/agg_path_storage.h	/^        const T* m_ptr;$/;"	m	class:agg::poly_plain_adaptor
m_ptr	include/agg_path_storage_integer.h	/^        const int8u* m_ptr;$/;"	m	class:agg::serialized_integer_path_adaptor
m_ptr	include/agg_scanline_storage_aa.h	/^                const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
m_ptr	include/agg_scanline_storage_aa.h	/^            const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
m_ptr	include/agg_scanline_storage_aa.h	/^        const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_aa
m_ptr	include/agg_scanline_storage_bin.h	/^                const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
m_ptr	include/agg_scanline_storage_bin.h	/^            const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
m_ptr	include/agg_scanline_storage_bin.h	/^        const int8u* m_ptr;$/;"	m	class:agg::serialized_scanlines_adaptor_bin
m_quad	examples/image_perspective.cpp	/^    agg::interactive_polygon   m_quad;$/;"	m	class:the_application	file:
m_quad	examples/image_resample.cpp	/^    agg::interactive_polygon     m_quad;$/;"	m	class:the_application	file:
m_quad	examples/pattern_perspective.cpp	/^    agg::interactive_polygon  m_quad;$/;"	m	class:the_application	file:
m_quad	examples/pattern_resample.cpp	/^    agg::interactive_polygon     m_quad;$/;"	m	class:the_application	file:
m_quad	examples/perspective.cpp	/^    agg::interactive_polygon   m_quad;$/;"	m	class:the_application	file:
m_quad1	examples/scanline_boolean.cpp	/^    agg::interactive_polygon     m_quad1;$/;"	m	class:the_application	file:
m_quad2	examples/scanline_boolean.cpp	/^    agg::interactive_polygon     m_quad2;$/;"	m	class:the_application	file:
m_quadric	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_quadric;$/;"	m	class:the_application	file:
m_quote	src/platform/win32/agg_platform_support.cpp	/^        const char* m_quote;$/;"	m	class:agg::tokenizer	file:
m_r	examples/gamma_tuner.cpp	/^    agg::slider_ctrl<agg::rgba8> m_r;$/;"	m	class:the_application	file:
m_r	include/agg_span_gouraud_rgba.h	/^            int    m_r;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_r	include/agg_span_gradient.h	/^        int    m_r;$/;"	m	class:agg::gradient_radial_focus
m_r1	examples/alpha_mask3.cpp	/^    double m_r1;$/;"	m	class:spiral	file:
m_r1	examples/gpc_test.cpp	/^    double m_r1;$/;"	m	class:spiral	file:
m_r1	examples/rasterizers2.cpp	/^    double m_r1;$/;"	m	class:spiral	file:
m_r1	examples/scanline_boolean2.cpp	/^    double m_r1;$/;"	m	class:spiral	file:
m_r1	include/agg_span_gouraud_rgba.h	/^            int    m_r1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_r2	examples/alpha_mask3.cpp	/^    double m_r2;$/;"	m	class:spiral	file:
m_r2	examples/gpc_test.cpp	/^    double m_r2;$/;"	m	class:spiral	file:
m_r2	examples/rasterizers2.cpp	/^    double m_r2;$/;"	m	class:spiral	file:
m_r2	examples/scanline_boolean2.cpp	/^    double m_r2;$/;"	m	class:spiral	file:
m_r2	include/agg_span_gradient.h	/^        double m_r2;$/;"	m	class:agg::gradient_radial_focus
m_radii_ok	include/agg_bezier_arc.h	/^        bool       m_radii_ok;$/;"	m	class:agg::bezier_arc_svg
m_radius	examples/blend_color.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_radius;$/;"	m	class:the_application	file:
m_radius	examples/blur.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_radius;$/;"	m	class:the_application	file:
m_radius	examples/image_filters.cpp	/^    agg::slider_ctrl<agg::rgba> m_radius;$/;"	m	class:the_application	file:
m_radius	examples/image_filters2.cpp	/^    agg::slider_ctrl<agg::rgba> m_radius;$/;"	m	class:the_application	file:
m_radius	examples/image_fltr_graph.cpp	/^    agg::slider_ctrl<agg::rgba>  m_radius;$/;"	m	class:the_application	file:
m_radius	examples/rounded_rect.cpp	/^    agg::slider_ctrl<agg::rgba8> m_radius;$/;"	m	class:the_application	file:
m_radius	include/agg_image_filters.h	/^        double           m_radius;$/;"	m	class:agg::image_filter_lut
m_radius	include/agg_image_filters.h	/^        double m_radius;$/;"	m	class:agg::image_filter_blackman
m_radius	include/agg_image_filters.h	/^        double m_radius;$/;"	m	class:agg::image_filter_lanczos
m_radius	include/agg_image_filters.h	/^        double m_radius;$/;"	m	class:agg::image_filter_sinc
m_radius	include/agg_trans_warp_magnifier.h	/^        double m_radius;$/;"	m	class:agg::trans_warp_magnifier
m_radius_slider	examples/lion_lens.cpp	/^    agg::slider_ctrl<agg::rgba8> m_radius_slider;$/;"	m	class:the_application	file:
m_ramp1	examples/compositing2.cpp	/^    agg::pod_auto_array<color, 256> m_ramp1;$/;"	m	class:the_application	file:
m_ramp2	examples/compositing2.cpp	/^    agg::pod_auto_array<color, 256> m_ramp2;$/;"	m	class:the_application	file:
m_ras	examples/aa_demo.cpp	/^        rasterizer_scanline_aa<> m_ras;$/;"	m	class:agg::renderer_enlarged	file:
m_ras	examples/aa_test.cpp	/^    Ras&      m_ras;$/;"	m	class:dashed_line	file:
m_ras	examples/alpha_mask3.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_ras	examples/blend_color.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_ras	examples/blur.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_ras	examples/compositing2.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_ras	examples/pattern_fill.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_ras	examples/rasterizers.cpp	/^    agg::rasterizer_scanline_aa<> m_ras;$/;"	m	class:the_application	file:
m_rasterizer	examples/gradient_focal.cpp	/^    agg::rasterizer_scanline_aa<>   m_rasterizer;$/;"	m	class:the_application	file:
m_rasterizer	font_freetype/agg_font_freetype.h	/^        rasterizer_scanline_aa<> m_rasterizer;$/;"	m	class:agg::font_engine_freetype_base
m_rasterizer	font_win32_tt/agg_font_win32_tt.h	/^        rasterizer_scanline_aa<> m_rasterizer;$/;"	m	class:agg::font_engine_win32_tt_base
m_rb	examples/line_patterns.cpp	/^    agg::rendering_buffer* m_rb;$/;"	m	class:pattern_src_brightness_to_alpha_rgba8	file:
m_rb	examples/line_patterns_clip.cpp	/^    agg::rendering_buffer* m_rb;$/;"	m	class:pattern_src_brightness_to_alpha_rgba8	file:
m_rbox	examples/gradients.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_rbox;$/;"	m	class:the_application	file:
m_rbuf	include/agg_alpha_mask_u8.h	/^        rendering_buffer* m_rbuf;$/;"	m	class:agg::alpha_mask_u8
m_rbuf	include/agg_alpha_mask_u8.h	/^        rendering_buffer* m_rbuf;$/;"	m	class:agg::amask_no_clip_u8
m_rbuf	include/agg_pixfmt_gray.h	/^        rbuf_type* m_rbuf;$/;"	m	class:agg::pixfmt_alpha_blend_gray
m_rbuf	include/agg_pixfmt_rgb.h	/^        rbuf_type* m_rbuf;$/;"	m	class:agg::pixfmt_alpha_blend_rgb
m_rbuf	include/agg_pixfmt_rgb_packed.h	/^        rbuf_type* m_rbuf;$/;"	m	class:agg::pixfmt_alpha_blend_rgb_packed
m_rbuf	include/agg_pixfmt_rgba.h	/^        rbuf_type* m_rbuf;$/;"	m	class:agg::pixfmt_alpha_blend_rgba
m_rbuf	include/agg_pixfmt_rgba.h	/^        rbuf_type* m_rbuf;$/;"	m	class:agg::pixfmt_custom_blend_rgba
m_rbuf2	examples/blur.cpp	/^    agg::rendering_buffer         m_rbuf2;$/;"	m	class:the_application	file:
m_rbuf_img	include/platform/agg_platform_support.h	/^        rendering_buffer m_rbuf_img[max_images];$/;"	m	class:agg::platform_support
m_rbuf_window	include/platform/agg_platform_support.h	/^        rendering_buffer m_rbuf_window;$/;"	m	class:agg::platform_support
m_ready	include/agg_vcgen_vertex_sequence.h	/^        bool           m_ready;$/;"	m	class:agg::vcgen_vertex_sequence
m_recursive_blur	examples/blur.cpp	/^    agg::recursive_blur<agg::rgba8, agg::recursive_blur_calc_rgb<> > m_recursive_blur;$/;"	m	class:the_application	file:
m_redraw_flag	examples/idea.cpp	/^    bool m_redraw_flag;$/;"	m	class:the_application	file:
m_redraw_flag	src/platform/mac/agg_platform_support.cpp	/^        bool             m_redraw_flag;$/;"	m	class:agg::platform_specific	file:
m_redraw_flag	src/platform/win32/agg_platform_support.cpp	/^        bool          m_redraw_flag;$/;"	m	class:agg::platform_specific	file:
m_refresh	examples/image_filters.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_refresh;$/;"	m	class:the_application	file:
m_rem	include/agg_dda_line.h	/^        int m_rem;$/;"	m	class:agg::dda2_line_interpolator
m_ren	examples/aa_demo.cpp	/^        Renderer&   m_ren;$/;"	m	class:agg::renderer_enlarged	file:
m_ren	examples/aa_test.cpp	/^    Ren&      m_ren;$/;"	m	class:dashed_line	file:
m_ren	examples/polymorphic_renderer.cpp	/^        renderer_scanline_aa_solid<renderer_base<PixFmt> > m_ren;$/;"	m	class:agg::polymorphic_renderer_solid_rgba8_adaptor	file:
m_ren	include/agg_rasterizer_outline.h	/^        Renderer* m_ren;$/;"	m	class:agg::rasterizer_outline
m_ren	include/agg_rasterizer_outline_aa.h	/^        Renderer*           m_ren;$/;"	m	class:agg::rasterizer_outline_aa
m_ren	include/agg_renderer_base.h	/^        pixfmt_type* m_ren;$/;"	m	class:agg::renderer_base
m_ren	include/agg_renderer_mclip.h	/^        base_ren_type          m_ren;$/;"	m	class:agg::renderer_mclip
m_ren	include/agg_renderer_outline_aa.h	/^        base_ren_type*         m_ren;$/;"	m	class:agg::renderer_outline_aa
m_ren	include/agg_renderer_outline_aa.h	/^        renderer_type&         m_ren;$/;"	m	class:agg::line_interpolator_aa_base
m_ren	include/agg_renderer_outline_image.h	/^        base_ren_type*      m_ren;$/;"	m	class:agg::renderer_outline_image
m_ren	include/agg_renderer_outline_image.h	/^        renderer_type&         m_ren;$/;"	m	class:agg::line_interpolator_image
m_ren	include/agg_renderer_primitives.h	/^        base_ren_type* m_ren;$/;"	m	class:agg::renderer_primitives
m_ren	include/agg_renderer_raster_text.h	/^        ren_type* m_ren;$/;"	m	class:agg::renderer_raster_htext
m_ren	include/agg_renderer_raster_text.h	/^        ren_type* m_ren;$/;"	m	class:agg::renderer_raster_htext_solid
m_ren	include/agg_renderer_raster_text.h	/^        ren_type* m_ren;$/;"	m	class:agg::renderer_raster_vtext_solid
m_ren	include/agg_renderer_scanline.h	/^        base_ren_type* m_ren;$/;"	m	class:agg::renderer_scanline_aa
m_ren	include/agg_renderer_scanline.h	/^        base_ren_type* m_ren;$/;"	m	class:agg::renderer_scanline_aa_solid
m_ren	include/agg_renderer_scanline.h	/^        base_ren_type* m_ren;$/;"	m	class:agg::renderer_scanline_bin
m_ren	include/agg_renderer_scanline.h	/^        base_ren_type* m_ren;$/;"	m	class:agg::renderer_scanline_bin_solid
m_ren_base	examples/polymorphic_renderer.cpp	/^        renderer_base<PixFmt> m_ren_base;$/;"	m	class:agg::polymorphic_renderer_solid_rgba8_adaptor	file:
m_ren_type	examples/freetype_test.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_ren_type;$/;"	m	class:the_application	file:
m_ren_type	examples/truetype_test.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_ren_type;$/;"	m	class:the_application	file:
m_reset	examples/scanline_boolean.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_reset;$/;"	m	class:the_application	file:
m_resize_flag	src/platform/X11/agg_platform_support.cpp	/^        bool m_resize_flag;$/;"	m	class:agg::platform_specific	file:
m_resize_flag	src/platform/sdl/agg_platform_support.cpp	/^        bool          m_resize_flag;$/;"	m	class:agg::platform_specific	file:
m_resize_mtx	include/platform/agg_platform_support.h	/^        trans_affine     m_resize_mtx;$/;"	m	class:agg::platform_support
m_resolution	font_freetype/agg_font_freetype.h	/^        int             m_resolution;$/;"	m	class:agg::font_engine_freetype_base
m_resolution	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_resolution;$/;"	m	class:agg::font_engine_win32_tt_base
m_rest	include/agg_array.h	/^        unsigned    m_rest;$/;"	m	class:agg::block_allocator
m_result	include/agg_conv_gpc.h	/^        gpc_polygon                m_result;$/;"	m	class:agg::conv_gpc
m_rgba1	include/agg_span_gouraud_rgba.h	/^        rgba_calc m_rgba1;$/;"	m	class:agg::span_gouraud_rgba
m_rgba2	include/agg_span_gouraud_rgba.h	/^        rgba_calc m_rgba2;$/;"	m	class:agg::span_gouraud_rgba
m_rgba3	include/agg_span_gouraud_rgba.h	/^        rgba_calc m_rgba3;$/;"	m	class:agg::span_gouraud_rgba
m_rmask	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_rmask;$/;"	m	class:agg::platform_specific	file:
m_rotate	examples/idea.cpp	/^    agg::cbox_ctrl<agg::rgba8> m_rotate;$/;"	m	class:the_application	file:
m_rotate	examples/rasterizers2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_rotate;$/;"	m	class:the_application	file:
m_rotate	examples/svg_viewer/svg_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_rotate;$/;"	m	class:the_application	file:
m_rotate_image	examples/image_transforms.cpp	/^    agg::cbox_ctrl<agg::rgba> m_rotate_image;$/;"	m	class:the_application	file:
m_rotate_pattern	examples/pattern_fill.cpp	/^    agg::cbox_ctrl<agg::rgba> m_rotate_pattern;$/;"	m	class:the_application	file:
m_rotate_polygon	examples/image_transforms.cpp	/^    agg::cbox_ctrl<agg::rgba> m_rotate_polygon;$/;"	m	class:the_application	file:
m_rotate_polygon	examples/pattern_fill.cpp	/^    agg::cbox_ctrl<agg::rgba> m_rotate_polygon;$/;"	m	class:the_application	file:
m_round_cap	include/agg_rasterizer_outline_aa.h	/^        bool                m_round_cap;$/;"	m	class:agg::rasterizer_outline_aa
m_roundoff	examples/idea.cpp	/^    agg::cbox_ctrl<agg::rgba8> m_roundoff;$/;"	m	class:the_application	file:
m_roundoff	examples/interactive_polygon.h	/^        bool     m_roundoff;$/;"	m	class:agg::simple_polygon_vertex_source
m_roundoff	include/ctrl/agg_polygon_ctrl.h	/^        bool     m_roundoff;$/;"	m	class:agg::simple_polygon_vertex_source
m_row_ptr	include/agg_image_accessors.h	/^        const int8u*       m_row_ptr;$/;"	m	class:agg::image_accessor_wrap
m_rows	examples/gouraud_mesh.cpp	/^        unsigned m_rows;$/;"	m	class:agg::mesh_ctrl	file:
m_rows	include/agg_rendering_buffer.h	/^        pod_array<T*> m_rows;       \/\/ Pointers to each row of the buffer$/;"	m	class:agg::row_ptr_cache
m_rows	include/agg_rendering_buffer_dynarow.h	/^        pod_array<row_data> m_rows;       \/\/ Pointers to each row of the buffer$/;"	m	class:agg::rendering_buffer_dynarow
m_run	examples/image_filters.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_run;$/;"	m	class:the_application	file:
m_rx	examples/gamma_correction.cpp	/^    double m_rx;$/;"	m	class:the_application	file:
m_rx	examples/image_alpha.cpp	/^    double     m_rx[50];$/;"	m	class:the_application	file:
m_rx	include/agg_arc.h	/^        double   m_rx;$/;"	m	class:agg::arc
m_rx	include/agg_ellipse.h	/^        double m_rx;$/;"	m	class:agg::ellipse
m_rx	include/agg_span_image_filter.h	/^        int m_rx;$/;"	m	class:agg::span_image_resample_affine
m_rx1	include/agg_rounded_rect.h	/^        double m_rx1;$/;"	m	class:agg::rounded_rect
m_rx2	include/agg_ellipse_bresenham.h	/^        int m_rx2;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_rx2	include/agg_rounded_rect.h	/^        double m_rx2;$/;"	m	class:agg::rounded_rect
m_rx3	include/agg_rounded_rect.h	/^        double m_rx3;$/;"	m	class:agg::rounded_rect
m_rx4	include/agg_rounded_rect.h	/^        double m_rx4;$/;"	m	class:agg::rounded_rect
m_rx_inv	include/agg_span_image_filter.h	/^        int m_rx_inv;$/;"	m	class:agg::span_image_resample_affine
m_ry	examples/gamma_correction.cpp	/^    double m_ry;$/;"	m	class:the_application	file:
m_ry	examples/image_alpha.cpp	/^    double     m_ry[50];$/;"	m	class:the_application	file:
m_ry	include/agg_arc.h	/^        double   m_ry;$/;"	m	class:agg::arc
m_ry	include/agg_ellipse.h	/^        double m_ry;$/;"	m	class:agg::ellipse
m_ry	include/agg_span_image_filter.h	/^        int m_ry;$/;"	m	class:agg::span_image_resample_affine
m_ry1	include/agg_rounded_rect.h	/^        double m_ry1;$/;"	m	class:agg::rounded_rect
m_ry2	include/agg_ellipse_bresenham.h	/^        int m_ry2;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_ry2	include/agg_rounded_rect.h	/^        double m_ry2;$/;"	m	class:agg::rounded_rect
m_ry3	include/agg_rounded_rect.h	/^        double m_ry3;$/;"	m	class:agg::rounded_rect
m_ry4	include/agg_rounded_rect.h	/^        double m_ry4;$/;"	m	class:agg::rounded_rect
m_ry_inv	include/agg_span_image_filter.h	/^        int m_ry_inv;$/;"	m	class:agg::span_image_resample_affine
m_saved_ddfx	include/agg_curves.h	/^        double   m_saved_ddfx; $/;"	m	class:agg::curve4_inc
m_saved_ddfy	include/agg_curves.h	/^        double   m_saved_ddfy;$/;"	m	class:agg::curve4_inc
m_saved_dfx	include/agg_curves.h	/^        double   m_saved_dfx; $/;"	m	class:agg::curve3_inc
m_saved_dfx	include/agg_curves.h	/^        double   m_saved_dfx; $/;"	m	class:agg::curve4_inc
m_saved_dfy	include/agg_curves.h	/^        double   m_saved_dfy;$/;"	m	class:agg::curve3_inc
m_saved_dfy	include/agg_curves.h	/^        double   m_saved_dfy;$/;"	m	class:agg::curve4_inc
m_saved_fx	include/agg_curves.h	/^        double   m_saved_fx; $/;"	m	class:agg::curve3_inc
m_saved_fx	include/agg_curves.h	/^        double   m_saved_fx; $/;"	m	class:agg::curve4_inc
m_saved_fy	include/agg_curves.h	/^        double   m_saved_fy;$/;"	m	class:agg::curve3_inc
m_saved_fy	include/agg_curves.h	/^        double   m_saved_fy;$/;"	m	class:agg::curve4_inc
m_scale	examples/distortions.cpp	/^    agg::slider_ctrl<agg::rgba8> m_scale;$/;"	m	class:the_application	file:
m_scale	examples/flash_rasterizer.cpp	/^    agg::trans_affine          m_scale;$/;"	m	class:the_application	file:
m_scale	examples/flash_rasterizer2.cpp	/^    agg::trans_affine          m_scale;$/;"	m	class:the_application	file:
m_scale	examples/gradients.cpp	/^    double m_scale;$/;"	m	class:the_application	file:
m_scale	examples/image1.cpp	/^    agg::slider_ctrl<agg::rgba8> m_scale;$/;"	m	class:the_application	file:
m_scale	examples/line_patterns_clip.cpp	/^    agg::trans_affine             m_scale;$/;"	m	class:the_application	file:
m_scale	examples/mol_view.cpp	/^    double     m_scale;$/;"	m	class:the_application	file:
m_scale	examples/svg_viewer/svg_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_scale;$/;"	m	class:the_application	file:
m_scale	include/agg_arc.h	/^        double   m_scale;$/;"	m	class:agg::arc
m_scale	include/agg_curves.h	/^        double   m_scale;$/;"	m	class:agg::curve3_inc
m_scale	include/agg_curves.h	/^        double   m_scale;$/;"	m	class:agg::curve4_inc
m_scale	include/agg_ellipse.h	/^        double m_scale;$/;"	m	class:agg::ellipse
m_scale	include/agg_path_storage_integer.h	/^        double       m_scale;$/;"	m	class:agg::serialized_integer_path_adaptor
m_scale	include/agg_renderer_outline_image.h	/^        double        m_scale;$/;"	m	class:agg::line_image_scale
m_scale_ctrl_z	examples/circles.cpp	/^    agg::scale_ctrl<agg::rgba8>  m_scale_ctrl_z;$/;"	m	class:the_application	file:
m_scale_limit	include/agg_span_image_filter.h	/^        double m_scale_limit;$/;"	m	class:agg::span_image_resample_affine
m_scale_limit	include/agg_span_image_filter.h	/^        int m_scale_limit;$/;"	m	class:agg::span_image_resample
m_scale_pattern	examples/rasterizers2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_scale_pattern;$/;"	m	class:the_application	file:
m_scale_x	examples/gradients.cpp	/^    double m_scale_x;$/;"	m	class:the_application	file:
m_scale_x	examples/line_patterns.cpp	/^    agg::slider_ctrl<agg::rgba8> m_scale_x;$/;"	m	class:the_application	file:
m_scale_x	examples/line_patterns_clip.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_scale_x;$/;"	m	class:the_application	file:
m_scale_x	include/agg_renderer_outline_image.h	/^        double              m_scale_x;$/;"	m	class:agg::renderer_outline_image
m_scale_x	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_scale_x;$/;"	m	class:agg::span_interpolator_persp_exact
m_scale_x	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_scale_x;$/;"	m	class:agg::span_interpolator_persp_lerp
m_scale_y	examples/gradients.cpp	/^    double m_scale_y;$/;"	m	class:the_application	file:
m_scale_y	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_scale_y;$/;"	m	class:agg::span_interpolator_persp_exact
m_scale_y	include/agg_span_interpolator_persp.h	/^        dda2_line_interpolator m_scale_y;$/;"	m	class:agg::span_interpolator_persp_lerp
m_scan_y	include/agg_rasterizer_compound_aa.h	/^        int        m_scan_y;$/;"	m	class:agg::rasterizer_compound_aa
m_scan_y	include/agg_rasterizer_scanline_aa.h	/^        int            m_scan_y;$/;"	m	class:agg::rasterizer_scanline_aa
m_scanline	examples/gradient_focal.cpp	/^    agg::scanline_u8                m_scanline;$/;"	m	class:the_application	file:
m_scanline	examples/lion_outline.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_scanline;$/;"	m	class:the_application	file:
m_scanline	include/agg_scanline_storage_aa.h	/^            scanline_data              m_scanline;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline
m_scanline	include/agg_scanline_storage_bin.h	/^            scanline_data               m_scanline;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline
m_scanline_aa	font_freetype/agg_font_freetype.h	/^        scanline_u8              m_scanline_aa;$/;"	m	class:agg::font_engine_freetype_base
m_scanline_aa	font_win32_tt/agg_font_win32_tt.h	/^        scanline_u8              m_scanline_aa;$/;"	m	class:agg::font_engine_win32_tt_base
m_scanline_bin	font_freetype/agg_font_freetype.h	/^        scanline_bin             m_scanline_bin;$/;"	m	class:agg::font_engine_freetype_base
m_scanline_bin	font_win32_tt/agg_font_win32_tt.h	/^        scanline_bin             m_scanline_bin;$/;"	m	class:agg::font_engine_win32_tt_base
m_scanline_idx	include/agg_scanline_storage_aa.h	/^            unsigned                   m_scanline_idx;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline
m_scanline_idx	include/agg_scanline_storage_bin.h	/^            unsigned                    m_scanline_idx;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline
m_scanline_type	examples/scanline_boolean2.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_scanline_type;$/;"	m	class:the_application	file:
m_scanlines	include/agg_scanline_storage_aa.h	/^        pod_bvector<scanline_data, 8> m_scanlines;$/;"	m	class:agg::scanline_storage_aa
m_scanlines	include/agg_scanline_storage_bin.h	/^        pod_bvector<scanline_data, 8> m_scanlines;$/;"	m	class:agg::scanline_storage_bin
m_scanlines_aa	font_freetype/agg_font_freetype.h	/^        scanlines_aa_type        m_scanlines_aa;$/;"	m	class:agg::font_engine_freetype_base
m_scanlines_aa	font_win32_tt/agg_font_win32_tt.h	/^        scanlines_aa_type        m_scanlines_aa;$/;"	m	class:agg::font_engine_win32_tt_base
m_scanlines_bin	font_freetype/agg_font_freetype.h	/^        scanlines_bin_type       m_scanlines_bin;$/;"	m	class:agg::font_engine_freetype_base
m_scanlines_bin	font_win32_tt/agg_font_win32_tt.h	/^        scanlines_bin_type       m_scanlines_bin;$/;"	m	class:agg::font_engine_win32_tt_base
m_screen	src/platform/X11/agg_platform_support.cpp	/^        int                  m_screen;$/;"	m	class:agg::platform_specific	file:
m_sep	src/platform/win32/agg_platform_support.cpp	/^        const char* m_sep;$/;"	m	class:agg::tokenizer	file:
m_sep_flag	src/platform/win32/agg_platform_support.cpp	/^        sep_flag    m_sep_flag;$/;"	m	class:agg::tokenizer	file:
m_sep_len	src/platform/win32/agg_platform_support.cpp	/^        unsigned    m_sep_len;$/;"	m	class:agg::tokenizer	file:
m_separators_mask	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        char m_separators_mask[256\/8];$/;"	m	class:agg::svg::path_tokenizer
m_shadow_ctrl	examples/blend_color.cpp	/^    agg::polygon_ctrl<agg::rgba8> m_shadow_ctrl;$/;"	m	class:the_application	file:
m_shadow_ctrl	examples/blur.cpp	/^    agg::polygon_ctrl<agg::rgba8> m_shadow_ctrl;$/;"	m	class:the_application	file:
m_shape	examples/blend_color.cpp	/^    shape_type                    m_shape;$/;"	m	class:the_application	file:
m_shape	examples/blur.cpp	/^    shape_type                    m_shape;$/;"	m	class:the_application	file:
m_shape	examples/flash_rasterizer.cpp	/^    agg::compound_shape        m_shape;$/;"	m	class:the_application	file:
m_shape	examples/flash_rasterizer2.cpp	/^    agg::compound_shape        m_shape;$/;"	m	class:the_application	file:
m_shape_bounds	examples/blend_color.cpp	/^    agg::rect_d m_shape_bounds;$/;"	m	class:the_application	file:
m_shape_bounds	examples/blur.cpp	/^    agg::rect_d m_shape_bounds;$/;"	m	class:the_application	file:
m_shorten	include/agg_vcgen_dash.h	/^        double             m_shorten;$/;"	m	class:agg::vcgen_dash
m_shorten	include/agg_vcgen_stroke.h	/^        double                     m_shorten;$/;"	m	class:agg::vcgen_stroke
m_shorten	include/agg_vcgen_vertex_sequence.h	/^        double         m_shorten;$/;"	m	class:agg::vcgen_vertex_sequence
m_show_outline	examples/bezier_div.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_show_outline;$/;"	m	class:the_application	file:
m_show_points	examples/bezier_div.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_show_points;$/;"	m	class:the_application	file:
m_signature	font_freetype/agg_font_freetype.h	/^        char*           m_signature;$/;"	m	class:agg::font_engine_freetype_base
m_signature	font_win32_tt/agg_font_win32_tt.h	/^        char*           m_signature;$/;"	m	class:agg::font_engine_win32_tt_base
m_sinc	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_sinc;$/;"	m	class:the_application	file:
m_single_step	examples/image_filters.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_single_step;$/;"	m	class:the_application	file:
m_size	examples/aa_demo.cpp	/^        double      m_size;$/;"	m	class:agg::renderer_enlarged	file:
m_size	examples/aa_demo.cpp	/^        double m_size;$/;"	m	class:agg::square	file:
m_size	include/agg_array.h	/^        unsigned        m_size;$/;"	m	class:agg::pod_bvector
m_size	include/agg_array.h	/^        unsigned m_size;$/;"	m	class:agg::pod_array
m_size	include/agg_array.h	/^        unsigned m_size;$/;"	m	class:agg::pod_array_adaptor
m_size	include/agg_array.h	/^        unsigned m_size;$/;"	m	class:agg::pod_auto_vector
m_size	include/agg_array.h	/^        unsigned m_size;$/;"	m	class:agg::pod_vector
m_size	include/agg_array.h	/^        unsigned m_size;$/;"	m	class:agg::range_adaptor
m_size	include/agg_image_accessors.h	/^        unsigned m_size;$/;"	m	class:agg::wrap_mode_reflect
m_size	include/agg_image_accessors.h	/^        unsigned m_size;$/;"	m	class:agg::wrap_mode_reflect_auto_pow2
m_size	include/agg_image_accessors.h	/^        unsigned m_size;$/;"	m	class:agg::wrap_mode_reflect_pow2
m_size	include/agg_image_accessors.h	/^        unsigned m_size;$/;"	m	class:agg::wrap_mode_repeat
m_size	include/agg_image_accessors.h	/^        unsigned m_size;$/;"	m	class:agg::wrap_mode_repeat_auto_pow2
m_size	include/agg_span_gradient.h	/^        unsigned m_size;$/;"	m	struct:agg::gradient_linear_color
m_size2	include/agg_image_accessors.h	/^        unsigned m_size2;$/;"	m	class:agg::wrap_mode_reflect
m_size2	include/agg_image_accessors.h	/^        unsigned m_size2;$/;"	m	class:agg::wrap_mode_reflect_auto_pow2
m_sl	examples/aa_demo.cpp	/^        scanline_u8 m_sl;$/;"	m	class:agg::renderer_enlarged	file:
m_sl	examples/aa_test.cpp	/^    Scanline& m_sl;$/;"	m	class:dashed_line	file:
m_sl	examples/alpha_mask3.cpp	/^    agg::scanline_p8              m_sl;$/;"	m	class:the_application	file:
m_sl	examples/blend_color.cpp	/^    agg::scanline_p8              m_sl;$/;"	m	class:the_application	file:
m_sl	examples/blur.cpp	/^    agg::scanline_p8              m_sl;$/;"	m	class:the_application	file:
m_sl	examples/compositing2.cpp	/^    agg::scanline_u8 m_sl;$/;"	m	class:the_application	file:
m_sl	examples/graph_test.cpp	/^    agg::scanline_u8            m_sl;$/;"	m	class:the_application	file:
m_sl	examples/pattern_fill.cpp	/^    agg::scanline_p8 m_sl;$/;"	m	class:the_application	file:
m_sl_bin	examples/rasterizers.cpp	/^    agg::scanline_bin             m_sl_bin;$/;"	m	class:the_application	file:
m_sl_len	include/agg_rasterizer_compound_aa.h	/^        unsigned   m_sl_len;$/;"	m	class:agg::rasterizer_compound_aa
m_sl_p8	examples/rasterizers.cpp	/^    agg::scanline_p8              m_sl_p8;$/;"	m	class:the_application	file:
m_sl_start	include/agg_rasterizer_compound_aa.h	/^        int        m_sl_start;$/;"	m	class:agg::rasterizer_compound_aa
m_slider1	examples/aa_demo.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider1;$/;"	m	class:the_application	file:
m_slider1	examples/trans_polar.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider1;$/;"	m	class:the_application	file:
m_slider2	examples/aa_demo.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider2;$/;"	m	class:the_application	file:
m_slider_base_y	examples/trans_polar.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider_base_y;$/;"	m	class:the_application	file:
m_slider_color	include/ctrl/agg_scale_ctrl.h	/^        ColorT m_slider_color;$/;"	m	class:agg::scale_ctrl
m_slider_ctrl_sel	examples/circles.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider_ctrl_sel;$/;"	m	class:the_application	file:
m_slider_ctrl_size	examples/circles.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider_ctrl_size;$/;"	m	class:the_application	file:
m_slider_gamma	examples/aa_test.cpp	/^    agg::slider_ctrl<agg::rgba> m_slider_gamma;$/;"	m	class:the_application	file:
m_slider_spiral	examples/trans_polar.cpp	/^    agg::slider_ctrl<agg::rgba8> m_slider_spiral;$/;"	m	class:the_application	file:
m_slider_value	examples/alpha_mask2.cpp	/^    double m_slider_value;$/;"	m	class:the_application	file:
m_smooth	examples/conv_dash_marker.cpp	/^    agg::slider_ctrl<agg::rgba8> m_smooth;$/;"	m	class:the_application	file:
m_smooth	include/agg_conv_smooth_poly1.h	/^        conv_smooth_poly1<VertexSource> m_smooth;$/;"	m	struct:agg::conv_smooth_poly1_curve
m_smooth_value	include/agg_vcgen_smooth_poly1.h	/^        double         m_smooth_value;$/;"	m	class:agg::vcgen_smooth_poly1
m_smoother_width	include/agg_renderer_outline_aa.h	/^        double                m_smoother_width;$/;"	m	class:agg::line_profile_aa
m_solid_colors	examples/flash_rasterizer.cpp	/^        const rgba8* m_solid_colors;$/;"	m	class:agg::test_styles	file:
m_solid_wedge	examples/mol_view.cpp	/^    agg::solid_wedge m_solid_wedge;$/;"	m	class:bond_vertex_generator	file:
m_sorted	include/agg_rasterizer_cells_aa.h	/^        bool                    m_sorted;$/;"	m	class:agg::rasterizer_cells_aa
m_sorted_cells	include/agg_rasterizer_cells_aa.h	/^        pod_vector<cell_type*>  m_sorted_cells;$/;"	m	class:agg::rasterizer_cells_aa
m_sorted_y	include/agg_rasterizer_cells_aa.h	/^        pod_vector<sorted_y>    m_sorted_y;$/;"	m	class:agg::rasterizer_cells_aa
m_source	examples/svg_viewer/agg_svg_path_renderer.h	/^        VertexSource* m_source;$/;"	m	class:agg::svg::conv_count
m_source	include/agg_conv_adaptor_vcgen.h	/^        VertexSource* m_source;$/;"	m	class:agg::conv_adaptor_vcgen
m_source	include/agg_conv_adaptor_vpgen.h	/^        VertexSource* m_source;$/;"	m	class:agg::conv_adaptor_vpgen
m_source	include/agg_conv_close_polygon.h	/^        VertexSource* m_source;$/;"	m	class:agg::conv_close_polygon
m_source	include/agg_conv_curve.h	/^        VertexSource* m_source;$/;"	m	class:agg::conv_curve
m_source	include/agg_conv_transform.h	/^        VertexSource*      m_source;$/;"	m	class:agg::conv_transform
m_source	include/agg_conv_unclose_polygon.h	/^        VertexSource* m_source;$/;"	m	class:agg::conv_unclose_polygon
m_source	include/agg_renderer_outline_image.h	/^        const Source& m_source;$/;"	m	class:agg::line_image_scale
m_source1	include/agg_conv_concat.h	/^        VS1* m_source1;$/;"	m	class:agg::conv_concat
m_source2	include/agg_conv_concat.h	/^        VS2* m_source2;$/;"	m	class:agg::conv_concat
m_source_image	examples/simple_blur.cpp	/^        const rendering_buffer* m_source_image;$/;"	m	class:agg::span_simple_blur_rgb24	file:
m_space	include/agg_gsv_text.h	/^        double          m_space;$/;"	m	class:agg::gsv_text
m_span	include/agg_glyph_raster_bin.h	/^        cover_type m_span[32];$/;"	m	class:agg::glyph_raster_bin
m_span	include/agg_pixfmt_amask_adaptor.h	/^        pod_array<cover_type> m_span;$/;"	m	class:agg::pixfmt_amask_adaptor
m_span	include/agg_renderer_raster_text.h	/^            const_span m_span;$/;"	m	class:agg::renderer_raster_htext::scanline_single_span
m_span	include/agg_scanline_storage_aa.h	/^                span                       m_span;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
m_span	include/agg_scanline_storage_aa.h	/^                span         m_span;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
m_span	include/agg_scanline_storage_bin.h	/^                span         m_span;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
m_span	include/agg_scanline_storage_bin.h	/^                span_data                   m_span;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
m_span	include/agg_span_allocator.h	/^        pod_array<color_type> m_span;$/;"	m	class:agg::span_allocator
m_span_cnv	include/agg_span_converter.h	/^        SpanConverter* m_span_cnv;$/;"	m	class:agg::span_converter
m_span_gen	include/agg_renderer_scanline.h	/^        span_gen_type* m_span_gen;$/;"	m	class:agg::renderer_scanline_aa
m_span_gen	include/agg_renderer_scanline.h	/^        span_gen_type* m_span_gen;$/;"	m	class:agg::renderer_scanline_bin
m_span_gen	include/agg_span_converter.h	/^        SpanGenerator* m_span_gen;$/;"	m	class:agg::span_converter
m_span_idx	include/agg_scanline_bin.h	/^            unsigned               m_span_idx;$/;"	m	class:agg::scanline32_bin::const_iterator
m_span_idx	include/agg_scanline_p.h	/^            unsigned               m_span_idx;$/;"	m	class:agg::scanline32_p8::const_iterator
m_span_idx	include/agg_scanline_storage_aa.h	/^                unsigned                   m_span_idx;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
m_span_idx	include/agg_scanline_storage_bin.h	/^                unsigned                    m_span_idx;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
m_span_idx	include/agg_scanline_u.h	/^            unsigned               m_span_idx;$/;"	m	class:agg::scanline32_u8::const_iterator
m_span_idx	include/agg_scanline_u.h	/^            unsigned         m_span_idx;$/;"	m	class:agg::scanline32_u8::iterator
m_spans	include/agg_scanline_bin.h	/^            const span_array_type& m_spans;$/;"	m	class:agg::scanline32_bin::const_iterator
m_spans	include/agg_scanline_bin.h	/^        pod_array<span> m_spans;$/;"	m	class:agg::scanline_bin
m_spans	include/agg_scanline_bin.h	/^        span_array_type m_spans;$/;"	m	class:agg::scanline32_bin
m_spans	include/agg_scanline_p.h	/^            const span_array_type& m_spans;$/;"	m	class:agg::scanline32_p8::const_iterator
m_spans	include/agg_scanline_p.h	/^        pod_array<span>       m_spans;$/;"	m	class:agg::scanline_p8
m_spans	include/agg_scanline_p.h	/^        span_array_type       m_spans;$/;"	m	class:agg::scanline32_p8
m_spans	include/agg_scanline_storage_aa.h	/^        pod_bvector<span_data, 10>    m_spans;$/;"	m	class:agg::scanline_storage_aa
m_spans	include/agg_scanline_storage_bin.h	/^        pod_bvector<span_data, 10>    m_spans;$/;"	m	class:agg::scanline_storage_bin
m_spans	include/agg_scanline_u.h	/^            const span_array_type& m_spans;$/;"	m	class:agg::scanline32_u8::const_iterator
m_spans	include/agg_scanline_u.h	/^            span_array_type& m_spans;$/;"	m	class:agg::scanline32_u8::iterator
m_spans	include/agg_scanline_u.h	/^        pod_array<span>       m_spans;$/;"	m	class:agg::scanline_u8
m_spans	include/agg_scanline_u.h	/^        span_array_type       m_spans;$/;"	m	class:agg::scanline32_u8
m_specific	include/platform/agg_platform_support.h	/^        platform_specific* m_specific;$/;"	m	class:agg::platform_support
m_spiral	examples/trans_polar.cpp	/^        double m_spiral;$/;"	m	class:agg::trans_polar	file:
m_spline	include/ctrl/agg_gamma_spline.h	/^        bspline       m_spline;$/;"	m	class:agg::gamma_spline
m_spline	include/ctrl/agg_spline_ctrl.h	/^        bspline  m_spline;$/;"	m	class:agg::spline_ctrl_impl
m_spline16	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_spline16;$/;"	m	class:the_application	file:
m_spline36	examples/image_fltr_graph.cpp	/^    agg::cbox_ctrl<agg::rgba>  m_spline36;$/;"	m	class:the_application	file:
m_spline_a	examples/gradients.cpp	/^    agg::spline_ctrl<agg::rgba8> m_spline_a;$/;"	m	class:the_application	file:
m_spline_b	examples/circles.cpp	/^    agg::bspline m_spline_b;$/;"	m	class:the_application	file:
m_spline_b	examples/gradients.cpp	/^    agg::spline_ctrl<agg::rgba8> m_spline_b;$/;"	m	class:the_application	file:
m_spline_g	examples/circles.cpp	/^    agg::bspline m_spline_g;$/;"	m	class:the_application	file:
m_spline_g	examples/gradients.cpp	/^    agg::spline_ctrl<agg::rgba8> m_spline_g;$/;"	m	class:the_application	file:
m_spline_r	examples/circles.cpp	/^    agg::bspline m_spline_r;$/;"	m	class:the_application	file:
m_spline_r	examples/gradients.cpp	/^    agg::spline_ctrl<agg::rgba8> m_spline_r;$/;"	m	class:the_application	file:
m_spline_values	include/ctrl/agg_spline_ctrl.h	/^        double   m_spline_values[256];$/;"	m	class:agg::spline_ctrl_impl
m_spline_values8	include/ctrl/agg_spline_ctrl.h	/^        int8u    m_spline_values8[256];$/;"	m	class:agg::spline_ctrl_impl
m_spline_x	include/agg_vcgen_bspline.h	/^        bspline        m_spline_x;$/;"	m	class:agg::vcgen_bspline
m_spline_y	include/agg_vcgen_bspline.h	/^        bspline        m_spline_y;$/;"	m	class:agg::vcgen_bspline
m_square	examples/aa_demo.cpp	/^        square      m_square;$/;"	m	class:agg::renderer_enlarged	file:
m_src	examples/aa_test.cpp	/^    simple_vertex_source m_src;$/;"	m	class:dashed_line	file:
m_src	examples/gpc_test.cpp	/^        Src* m_src;$/;"	m	struct:agg::conv_poly_counter	file:
m_src	include/agg_span_image_filter.h	/^        source_type*            m_src;$/;"	m	class:agg::span_image_filter
m_src	include/agg_span_pattern_gray.h	/^        source_type* m_src;$/;"	m	class:agg::span_pattern_gray
m_src	include/agg_span_pattern_rgb.h	/^        source_type* m_src;$/;"	m	class:agg::span_pattern_rgb
m_src	include/agg_span_pattern_rgba.h	/^        source_type* m_src;$/;"	m	class:agg::span_pattern_rgba
m_src_a	include/agg_conv_gpc.h	/^        source_a_type*             m_src_a;$/;"	m	class:agg::conv_gpc
m_src_b	include/agg_conv_gpc.h	/^        source_b_type*             m_src_b;$/;"	m	class:agg::conv_gpc
m_src_string	src/platform/win32/agg_platform_support.cpp	/^        const char* m_src_string;$/;"	m	class:agg::tokenizer	file:
m_src_vertex	include/agg_vcgen_bspline.h	/^        unsigned       m_src_vertex;$/;"	m	class:agg::vcgen_bspline
m_src_vertex	include/agg_vcgen_contour.h	/^        unsigned                   m_src_vertex;$/;"	m	class:agg::vcgen_contour
m_src_vertex	include/agg_vcgen_dash.h	/^        unsigned       m_src_vertex;$/;"	m	class:agg::vcgen_dash
m_src_vertex	include/agg_vcgen_smooth_poly1.h	/^        unsigned       m_src_vertex;$/;"	m	class:agg::vcgen_smooth_poly1
m_src_vertex	include/agg_vcgen_stroke.h	/^        unsigned                   m_src_vertex;$/;"	m	class:agg::vcgen_stroke
m_src_vertices	include/agg_rasterizer_outline_aa.h	/^        vertex_storage_type m_src_vertices;$/;"	m	class:agg::rasterizer_outline_aa
m_src_vertices	include/agg_trans_single_path.h	/^        vertex_storage m_src_vertices;$/;"	m	class:agg::trans_single_path
m_src_vertices	include/agg_vcgen_bspline.h	/^        vertex_storage m_src_vertices;$/;"	m	class:agg::vcgen_bspline
m_src_vertices	include/agg_vcgen_contour.h	/^        vertex_storage             m_src_vertices;$/;"	m	class:agg::vcgen_contour
m_src_vertices	include/agg_vcgen_dash.h	/^        vertex_storage m_src_vertices;$/;"	m	class:agg::vcgen_dash
m_src_vertices	include/agg_vcgen_smooth_poly1.h	/^        vertex_storage m_src_vertices;$/;"	m	class:agg::vcgen_smooth_poly1
m_src_vertices	include/agg_vcgen_stroke.h	/^        vertex_storage             m_src_vertices;$/;"	m	class:agg::vcgen_stroke
m_src_vertices	include/agg_vcgen_vertex_sequence.h	/^        vertex_storage m_src_vertices;$/;"	m	class:agg::vcgen_vertex_sequence
m_src_vertices1	include/agg_trans_double_path.h	/^        vertex_storage m_src_vertices1;$/;"	m	class:agg::trans_double_path
m_src_vertices2	include/agg_trans_double_path.h	/^        vertex_storage m_src_vertices2;$/;"	m	class:agg::trans_double_path
m_src_x	include/agg_span_interpolator_linear.h	/^        int      m_src_x;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_src_x	include/agg_span_subdiv_adaptor.h	/^        int      m_src_x;$/;"	m	class:agg::span_subdiv_adaptor
m_src_y	include/agg_span_interpolator_linear.h	/^        double   m_src_y;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_src_y	include/agg_span_subdiv_adaptor.h	/^        double   m_src_y;$/;"	m	class:agg::span_subdiv_adaptor
m_stack	include/agg_blur.h	/^        pod_vector<color_type> m_stack;$/;"	m	class:agg::stack_blur
m_stack_blur	examples/blur.cpp	/^    agg::stack_blur    <agg::rgba8, agg::stack_blur_calc_rgb<> >     m_stack_blur;$/;"	m	class:the_application	file:
m_start	examples/alpha_mask3.cpp	/^    bool   m_start;$/;"	m	class:spiral	file:
m_start	examples/gpc_test.cpp	/^    bool   m_start;$/;"	m	class:spiral	file:
m_start	examples/rasterizers2.cpp	/^    bool   m_start;$/;"	m	class:spiral	file:
m_start	examples/scanline_boolean2.cpp	/^    bool   m_start;$/;"	m	class:spiral	file:
m_start	include/agg_arc.h	/^        double   m_start;$/;"	m	class:agg::arc
m_start	include/agg_array.h	/^        unsigned m_start;$/;"	m	class:agg::range_adaptor
m_start	include/agg_gamma_functions.h	/^        double m_start;$/;"	m	class:agg::gamma_linear
m_start	include/agg_image_filters.h	/^        int              m_start;$/;"	m	class:agg::image_filter_lut
m_start	include/agg_renderer_outline_image.h	/^        int                 m_start;$/;"	m	class:agg::renderer_outline_image
m_start	include/agg_renderer_outline_image.h	/^        int m_start;$/;"	m	class:agg::line_interpolator_image
m_start	include/agg_rendering_buffer.h	/^        T*            m_start;  \/\/ Pointer to first pixel depending on stride $/;"	m	class:agg::row_accessor
m_start	src/platform/win32/agg_platform_support.cpp	/^        int         m_start;$/;"	m	class:agg::tokenizer	file:
m_start_angle	examples/alpha_mask3.cpp	/^    double m_start_angle;$/;"	m	class:spiral	file:
m_start_angle	examples/gpc_test.cpp	/^    double m_start_angle;$/;"	m	class:spiral	file:
m_start_angle	examples/rasterizers2.cpp	/^    double m_start_angle;$/;"	m	class:spiral	file:
m_start_angle	examples/rasterizers2.cpp	/^    double m_start_angle;$/;"	m	class:the_application	file:
m_start_angle	examples/scanline_boolean2.cpp	/^    double m_start_angle;$/;"	m	class:spiral	file:
m_start_time	src/platform/AmigaOS/agg_platform_support.cpp	/^		double m_start_time;$/;"	m	class:agg::platform_specific	file:
m_start_x	examples/gouraud_mesh.cpp	/^        double   m_start_x;$/;"	m	class:agg::mesh_ctrl	file:
m_start_x	examples/line_patterns.cpp	/^    agg::slider_ctrl<agg::rgba8> m_start_x;$/;"	m	class:the_application	file:
m_start_x	examples/line_patterns_clip.cpp	/^    agg::slider_ctrl<agg::rgba8>  m_start_x;$/;"	m	class:the_application	file:
m_start_x	include/agg_conv_adaptor_vcgen.h	/^        double        m_start_x;$/;"	m	class:agg::conv_adaptor_vcgen
m_start_x	include/agg_conv_adaptor_vpgen.h	/^        double        m_start_x;$/;"	m	class:agg::conv_adaptor_vpgen
m_start_x	include/agg_curves.h	/^        double   m_start_x; $/;"	m	class:agg::curve3_inc
m_start_x	include/agg_curves.h	/^        double   m_start_x; $/;"	m	class:agg::curve4_inc
m_start_x	include/agg_gsv_text.h	/^        double          m_start_x;$/;"	m	class:agg::gsv_text
m_start_x	include/agg_rasterizer_compound_aa.h	/^        coord_type m_start_x;$/;"	m	class:agg::rasterizer_compound_aa
m_start_x	include/agg_rasterizer_outline.h	/^        int       m_start_x;$/;"	m	class:agg::rasterizer_outline
m_start_x	include/agg_rasterizer_outline_aa.h	/^        int                 m_start_x;$/;"	m	class:agg::rasterizer_outline_aa
m_start_x	include/agg_rasterizer_scanline_aa.h	/^        coord_type     m_start_x;$/;"	m	class:agg::rasterizer_scanline_aa
m_start_y	examples/gouraud_mesh.cpp	/^        double   m_start_y;$/;"	m	class:agg::mesh_ctrl	file:
m_start_y	include/agg_conv_adaptor_vcgen.h	/^        double        m_start_y;$/;"	m	class:agg::conv_adaptor_vcgen
m_start_y	include/agg_conv_adaptor_vpgen.h	/^        double        m_start_y;$/;"	m	class:agg::conv_adaptor_vpgen
m_start_y	include/agg_curves.h	/^        double   m_start_y;$/;"	m	class:agg::curve3_inc
m_start_y	include/agg_curves.h	/^        double   m_start_y;$/;"	m	class:agg::curve4_inc
m_start_y	include/agg_rasterizer_compound_aa.h	/^        coord_type m_start_y;$/;"	m	class:agg::rasterizer_compound_aa
m_start_y	include/agg_rasterizer_outline.h	/^        int       m_start_y;$/;"	m	class:agg::rasterizer_outline
m_start_y	include/agg_rasterizer_outline_aa.h	/^        int                 m_start_y;$/;"	m	class:agg::rasterizer_outline_aa
m_start_y	include/agg_rasterizer_scanline_aa.h	/^        coord_type     m_start_y;$/;"	m	class:agg::rasterizer_scanline_aa
m_status	examples/interactive_polygon.h	/^        unsigned m_status;$/;"	m	class:agg::interactive_polygon
m_status	examples/mol_view.cpp	/^    unsigned m_status;$/;"	m	class:bond_vertex_generator	file:
m_status	include/agg_conv_adaptor_vcgen.h	/^        status        m_status;$/;"	m	class:agg::conv_adaptor_vcgen
m_status	include/agg_conv_concat.h	/^        int  m_status;$/;"	m	class:agg::conv_concat
m_status	include/agg_conv_gpc.h	/^        status                     m_status;$/;"	m	class:agg::conv_gpc
m_status	include/agg_conv_marker.h	/^        status_e       m_status;$/;"	m	class:agg::conv_marker
m_status	include/agg_gsv_text.h	/^        status          m_status;$/;"	m	class:agg::gsv_text
m_status	include/agg_rasterizer_scanline_aa.h	/^        unsigned       m_status;$/;"	m	class:agg::rasterizer_scanline_aa
m_status	include/agg_rounded_rect.h	/^        unsigned m_status;$/;"	m	class:agg::rounded_rect
m_status	include/agg_trans_single_path.h	/^        status_e       m_status;$/;"	m	class:agg::trans_single_path
m_status	include/agg_vcgen_bspline.h	/^        status_e       m_status;$/;"	m	class:agg::vcgen_bspline
m_status	include/agg_vcgen_contour.h	/^        status_e                   m_status;$/;"	m	class:agg::vcgen_contour
m_status	include/agg_vcgen_dash.h	/^        status_e       m_status;$/;"	m	class:agg::vcgen_dash
m_status	include/agg_vcgen_smooth_poly1.h	/^        status_e       m_status;$/;"	m	class:agg::vcgen_smooth_poly1
m_status	include/agg_vcgen_stroke.h	/^        status_e                   m_status;$/;"	m	class:agg::vcgen_stroke
m_status	include/ctrl/agg_cbox_ctrl.h	/^        bool     m_status;$/;"	m	class:agg::cbox_ctrl_impl
m_status	include/ctrl/agg_polygon_ctrl.h	/^        unsigned m_status;$/;"	m	class:agg::polygon_ctrl_impl
m_status1	include/agg_trans_double_path.h	/^        status_e       m_status1;$/;"	m	class:agg::trans_double_path
m_status2	include/agg_trans_double_path.h	/^        status_e       m_status2;$/;"	m	class:agg::trans_double_path
m_step	examples/alpha_mask3.cpp	/^    double m_step;$/;"	m	class:spiral	file:
m_step	examples/gpc_test.cpp	/^    double m_step;$/;"	m	class:spiral	file:
m_step	examples/image_filters.cpp	/^    agg::slider_ctrl<agg::rgba> m_step;$/;"	m	class:the_application	file:
m_step	examples/rasterizers2.cpp	/^    agg::slider_ctrl<agg::rgba8> m_step;$/;"	m	class:the_application	file:
m_step	examples/rasterizers2.cpp	/^    double m_step;$/;"	m	class:spiral	file:
m_step	examples/scanline_boolean2.cpp	/^    double m_step;$/;"	m	class:spiral	file:
m_step	include/agg_curves.h	/^        int      m_step;$/;"	m	class:agg::curve3_inc
m_step	include/agg_curves.h	/^        int      m_step;$/;"	m	class:agg::curve4_inc
m_step	include/agg_ellipse.h	/^        unsigned m_step;$/;"	m	class:agg::ellipse
m_step	include/agg_renderer_outline_aa.h	/^        int m_step;$/;"	m	class:agg::line_interpolator_aa_base
m_step	include/agg_renderer_outline_image.h	/^        int m_step;$/;"	m	class:agg::line_interpolator_image
m_stop	include/agg_path_storage.h	/^        bool     m_stop;$/;"	m	class:agg::poly_container_adaptor
m_stop	include/agg_path_storage.h	/^        bool     m_stop;$/;"	m	class:agg::poly_plain_adaptor
m_stop	include/agg_path_storage.h	/^        bool m_stop;$/;"	m	class:agg::poly_container_reverse_adaptor
m_storage	examples/svg_viewer/agg_svg_path_renderer.h	/^        path_storage   m_storage;$/;"	m	class:agg::svg::path_renderer
m_storage	include/agg_path_storage_integer.h	/^        pod_bvector<vertex_integer_type, 6> m_storage;$/;"	m	class:agg::path_storage_integer
m_storage	include/agg_scanline_storage_aa.h	/^                const scanline_storage_aa* m_storage;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
m_storage	include/agg_scanline_storage_aa.h	/^            const scanline_storage_aa* m_storage;$/;"	m	class:agg::scanline_storage_aa::embedded_scanline
m_storage	include/agg_scanline_storage_bin.h	/^                const scanline_storage_bin* m_storage;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
m_storage	include/agg_scanline_storage_bin.h	/^            const scanline_storage_bin* m_storage;$/;"	m	class:agg::scanline_storage_bin::embedded_scanline
m_storage	include/ctrl/agg_slider_ctrl.h	/^        path_storage          m_storage;$/;"	m	class:agg::slider_ctrl_impl
m_stride	include/agg_rendering_buffer.h	/^        int           m_stride;     \/\/ Number of bytes per row. Can be < 0$/;"	m	class:agg::row_ptr_cache
m_stride	include/agg_rendering_buffer.h	/^        int           m_stride; \/\/ Number of bytes per row. Can be < 0$/;"	m	class:agg::row_accessor
m_stroke	examples/aa_test.cpp	/^    agg::conv_stroke<simple_vertex_source> m_stroke;$/;"	m	class:dashed_line	file:
m_stroke	examples/interactive_polygon.h	/^        conv_stroke<simple_polygon_vertex_source> m_stroke;$/;"	m	class:agg::interactive_polygon
m_stroke	include/ctrl/agg_bezier_ctrl.h	/^        conv_stroke<curve3> m_stroke;$/;"	m	class:agg::curve3_ctrl_impl
m_stroke	include/ctrl/agg_bezier_ctrl.h	/^        conv_stroke<curve4> m_stroke;$/;"	m	class:agg::bezier_ctrl_impl
m_stroke	include/ctrl/agg_polygon_ctrl.h	/^        conv_stroke<simple_polygon_vertex_source> m_stroke;$/;"	m	class:agg::polygon_ctrl_impl
m_stroker	include/agg_vcgen_contour.h	/^        math_stroke<coord_storage> m_stroker;$/;"	m	class:agg::vcgen_contour
m_stroker	include/agg_vcgen_stroke.h	/^        math_stroke<coord_storage> m_stroker;$/;"	m	class:agg::vcgen_stroke
m_style	examples/mol_view.cpp	/^    bond_style_e m_style;$/;"	m	class:bond_vertex_generator	file:
m_style_cell	include/agg_rasterizer_cells_aa.h	/^        cell_type               m_style_cell;$/;"	m	class:agg::rasterizer_cells_aa
m_styles	examples/flash_rasterizer.cpp	/^        pod_bvector<path_style>                   m_styles;$/;"	m	class:agg::compound_shape	file:
m_styles	examples/flash_rasterizer2.cpp	/^        pod_bvector<path_style>                   m_styles;$/;"	m	class:agg::compound_shape	file:
m_styles	examples/rasterizer_compound.cpp	/^    const agg::rgba8*   m_styles;$/;"	m	class:style_handler	file:
m_styles	include/agg_rasterizer_compound_aa.h	/^        pod_vector<style_info> m_styles;  \/\/ Active Styles$/;"	m	class:agg::rasterizer_compound_aa
m_subdiv_mask	include/agg_span_interpolator_linear.h	/^        unsigned m_subdiv_mask;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_subdiv_mask	include/agg_span_subdiv_adaptor.h	/^        unsigned m_subdiv_mask;$/;"	m	class:agg::span_subdiv_adaptor
m_subdiv_shift	include/agg_span_interpolator_linear.h	/^        unsigned m_subdiv_shift;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_subdiv_shift	include/agg_span_subdiv_adaptor.h	/^        unsigned m_subdiv_shift;$/;"	m	class:agg::span_subdiv_adaptor
m_subdiv_size	include/agg_span_interpolator_linear.h	/^        unsigned m_subdiv_size;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_subdiv_size	include/agg_span_subdiv_adaptor.h	/^        unsigned m_subdiv_size;$/;"	m	class:agg::span_subdiv_adaptor
m_subpixel_width	include/agg_renderer_outline_aa.h	/^        int                   m_subpixel_width;$/;"	m	class:agg::line_profile_aa
m_sum1	include/agg_blur.h	/^        agg::pod_vector<calculator_type> m_sum1;$/;"	m	class:agg::recursive_blur
m_sum2	include/agg_blur.h	/^        agg::pod_vector<calculator_type> m_sum2;$/;"	m	class:agg::recursive_blur
m_support	src/platform/AmigaOS/agg_platform_support.cpp	/^		platform_support& m_support;$/;"	m	class:agg::platform_specific	file:
m_surf_img	src/platform/sdl/agg_platform_support.cpp	/^        SDL_Surface*  m_surf_img[platform_support::max_images];$/;"	m	class:agg::platform_specific	file:
m_surf_screen	src/platform/sdl/agg_platform_support.cpp	/^        SDL_Surface*  m_surf_screen;$/;"	m	class:agg::platform_specific	file:
m_surf_window	src/platform/sdl/agg_platform_support.cpp	/^        SDL_Surface*  m_surf_window;$/;"	m	class:agg::platform_specific	file:
m_sw_freq	src/platform/mac/agg_platform_support.cpp	/^        UnsignedWide     m_sw_freq;$/;"	m	class:agg::platform_specific	file:
m_sw_freq	src/platform/win32/agg_platform_support.cpp	/^        LARGE_INTEGER m_sw_freq;$/;"	m	class:agg::platform_specific	file:
m_sw_start	src/platform/X11/agg_platform_support.cpp	/^        clock_t m_sw_start;$/;"	m	class:agg::platform_specific	file:
m_sw_start	src/platform/mac/agg_platform_support.cpp	/^        UnsignedWide     m_sw_start;$/;"	m	class:agg::platform_specific	file:
m_sw_start	src/platform/sdl/agg_platform_support.cpp	/^	int          m_sw_start;$/;"	m	class:agg::platform_specific	file:
m_sw_start	src/platform/win32/agg_platform_support.cpp	/^        LARGE_INTEGER m_sw_start;$/;"	m	class:agg::platform_specific	file:
m_swap	include/agg_span_gouraud_gray.h	/^        bool      m_swap;$/;"	m	class:agg::span_gouraud_gray
m_swap	include/agg_span_gouraud_rgba.h	/^        bool      m_swap;$/;"	m	class:agg::span_gouraud_rgba
m_sys_bpp	src/platform/X11/agg_platform_support.cpp	/^        unsigned             m_sys_bpp;$/;"	m	class:agg::platform_specific	file:
m_sys_bpp	src/platform/mac/agg_platform_support.cpp	/^        unsigned         m_sys_bpp;$/;"	m	class:agg::platform_specific	file:
m_sys_bpp	src/platform/sdl/agg_platform_support.cpp	/^        unsigned      m_sys_bpp;$/;"	m	class:agg::platform_specific	file:
m_sys_bpp	src/platform/win32/agg_platform_support.cpp	/^        unsigned      m_sys_bpp;$/;"	m	class:agg::platform_specific	file:
m_sys_format	src/platform/X11/agg_platform_support.cpp	/^        pix_format_e         m_sys_format;$/;"	m	class:agg::platform_specific	file:
m_sys_format	src/platform/mac/agg_platform_support.cpp	/^        pix_format_e     m_sys_format;$/;"	m	class:agg::platform_specific	file:
m_sys_format	src/platform/sdl/agg_platform_support.cpp	/^        pix_format_e  m_sys_format;$/;"	m	class:agg::platform_specific	file:
m_sys_format	src/platform/win32/agg_platform_support.cpp	/^        pix_format_e  m_sys_format;$/;"	m	class:agg::platform_specific	file:
m_tail_d1	include/agg_arrowhead.h	/^        double   m_tail_d1;$/;"	m	class:agg::arrowhead
m_tail_d2	include/agg_arrowhead.h	/^        double   m_tail_d2;$/;"	m	class:agg::arrowhead
m_tail_d3	include/agg_arrowhead.h	/^        double   m_tail_d3;$/;"	m	class:agg::arrowhead
m_tail_d4	include/agg_arrowhead.h	/^        double   m_tail_d4;$/;"	m	class:agg::arrowhead
m_tail_flag	include/agg_arrowhead.h	/^        bool     m_tail_flag;$/;"	m	class:agg::arrowhead
m_test	examples/rasterizers.cpp	/^    agg::cbox_ctrl<agg::rgba8>    m_test;$/;"	m	class:the_application	file:
m_test	examples/rasterizers2.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_test;$/;"	m	class:the_application	file:
m_test_flag	examples/pattern_perspective.cpp	/^    bool m_test_flag;$/;"	m	class:the_application	file:
m_text	include/agg_gsv_text.h	/^        char*           m_text;$/;"	m	class:agg::gsv_text
m_text	include/ctrl/agg_cbox_ctrl.h	/^        gsv_text              m_text;$/;"	m	class:agg::cbox_ctrl_impl
m_text	include/ctrl/agg_gamma_ctrl.h	/^        gsv_text                  m_text;$/;"	m	class:agg::gamma_ctrl_impl
m_text	include/ctrl/agg_rbox_ctrl.h	/^        gsv_text              m_text;$/;"	m	class:agg::rbox_ctrl_impl
m_text	include/ctrl/agg_slider_ctrl.h	/^        gsv_text              m_text;$/;"	m	class:agg::slider_ctrl_impl
m_text_buf	include/agg_gsv_text.h	/^        pod_array<char> m_text_buf;$/;"	m	class:agg::gsv_text
m_text_color	include/ctrl/agg_cbox_ctrl.h	/^        ColorT m_text_color;$/;"	m	class:agg::cbox_ctrl
m_text_color	include/ctrl/agg_gamma_ctrl.h	/^        ColorT  m_text_color;$/;"	m	class:agg::gamma_ctrl
m_text_color	include/ctrl/agg_rbox_ctrl.h	/^        ColorT m_text_color;$/;"	m	class:agg::rbox_ctrl
m_text_color	include/ctrl/agg_slider_ctrl.h	/^        ColorT m_text_color;$/;"	m	class:agg::slider_ctrl
m_text_height	include/ctrl/agg_cbox_ctrl.h	/^        double   m_text_height;$/;"	m	class:agg::cbox_ctrl_impl
m_text_height	include/ctrl/agg_gamma_ctrl.h	/^        double m_text_height;$/;"	m	class:agg::gamma_ctrl_impl
m_text_height	include/ctrl/agg_rbox_ctrl.h	/^        double          m_text_height;$/;"	m	class:agg::rbox_ctrl_impl
m_text_poly	include/ctrl/agg_cbox_ctrl.h	/^        conv_stroke<gsv_text> m_text_poly;$/;"	m	class:agg::cbox_ctrl_impl
m_text_poly	include/ctrl/agg_gamma_ctrl.h	/^        conv_stroke<gsv_text>     m_text_poly;$/;"	m	class:agg::gamma_ctrl_impl
m_text_poly	include/ctrl/agg_rbox_ctrl.h	/^        conv_stroke<gsv_text> m_text_poly;$/;"	m	class:agg::rbox_ctrl_impl
m_text_poly	include/ctrl/agg_slider_ctrl.h	/^        conv_stroke<gsv_text> m_text_poly;$/;"	m	class:agg::slider_ctrl_impl
m_text_size	examples/mol_view.cpp	/^    agg::slider_ctrl<agg::rgba8> m_text_size;$/;"	m	class:the_application	file:
m_text_thickness	include/ctrl/agg_cbox_ctrl.h	/^        double   m_text_thickness;$/;"	m	class:agg::cbox_ctrl_impl
m_text_thickness	include/ctrl/agg_gamma_ctrl.h	/^        double m_text_thickness;$/;"	m	class:agg::gamma_ctrl_impl
m_text_thickness	include/ctrl/agg_rbox_ctrl.h	/^        double          m_text_thickness;$/;"	m	class:agg::rbox_ctrl_impl
m_text_thickness	include/ctrl/agg_slider_ctrl.h	/^        double   m_text_thickness;$/;"	m	class:agg::slider_ctrl_impl
m_text_width	include/ctrl/agg_cbox_ctrl.h	/^        double   m_text_width;$/;"	m	class:agg::cbox_ctrl_impl
m_text_width	include/ctrl/agg_gamma_ctrl.h	/^        double m_text_width;$/;"	m	class:agg::gamma_ctrl_impl
m_text_width	include/ctrl/agg_rbox_ctrl.h	/^        double          m_text_width;$/;"	m	class:agg::rbox_ctrl_impl
m_thickness	examples/gamma_correction.cpp	/^    agg::slider_ctrl<agg::rgba8> m_thickness;$/;"	m	class:the_application	file:
m_thickness	examples/mol_view.cpp	/^        double   m_thickness;$/;"	m	class:agg::dashed_wedge	file:
m_thickness	examples/mol_view.cpp	/^        double   m_thickness;$/;"	m	class:agg::line	file:
m_thickness	examples/mol_view.cpp	/^        double   m_thickness;$/;"	m	class:agg::solid_wedge	file:
m_thickness	examples/mol_view.cpp	/^    agg::slider_ctrl<agg::rgba8> m_thickness;$/;"	m	class:the_application	file:
m_thickness	examples/mol_view.cpp	/^    double m_thickness;$/;"	m	class:bond_vertex_generator	file:
m_threshold	include/agg_gamma_functions.h	/^        double m_threshold;$/;"	m	class:agg::gamma_threshold
m_tie_pattern	examples/pattern_fill.cpp	/^    agg::cbox_ctrl<agg::rgba> m_tie_pattern;$/;"	m	class:the_application	file:
m_time1	examples/image_filters.cpp	/^    double  m_time1;$/;"	m	class:the_application	file:
m_time1	examples/image_filters2.cpp	/^    clock_t m_time1;$/;"	m	class:the_application	file:
m_time2	examples/image_filters.cpp	/^    double  m_time2;$/;"	m	class:the_application	file:
m_time2	examples/image_filters2.cpp	/^    clock_t m_time2;$/;"	m	class:the_application	file:
m_title	examples/svg_viewer/agg_svg_parser.h	/^        char*          m_title;$/;"	m	class:agg::svg::parser
m_title_flag	examples/svg_viewer/agg_svg_parser.h	/^        bool           m_title_flag;$/;"	m	class:agg::svg::parser
m_title_len	examples/svg_viewer/agg_svg_parser.h	/^        unsigned       m_title_len;$/;"	m	class:agg::svg::parser
m_tokenizer	examples/svg_viewer/agg_svg_parser.h	/^        path_tokenizer m_tokenizer;$/;"	m	class:agg::svg::parser
m_total_blocks	include/agg_path_storage.h	/^        unsigned m_total_blocks;$/;"	m	class:agg::vertex_block_storage
m_total_dash_len	include/agg_vcgen_dash.h	/^        double             m_total_dash_len;$/;"	m	class:agg::vcgen_dash
m_total_vertices	include/agg_path_storage.h	/^        unsigned m_total_vertices;$/;"	m	class:agg::vertex_block_storage
m_trans	examples/flash_rasterizer.cpp	/^        conv_transform<conv_curve<path_storage> > m_trans;$/;"	m	class:agg::compound_shape	file:
m_trans	examples/flash_rasterizer2.cpp	/^        conv_transform<conv_curve<path_storage> > m_trans;$/;"	m	class:agg::compound_shape	file:
m_trans	include/agg_conv_transform.h	/^        const Transformer* m_trans;$/;"	m	class:agg::conv_transform
m_trans	include/agg_gsv_text.h	/^        conv_transform<conv_stroke<gsv_text>, Transformer> m_trans;$/;"	m	class:agg::gsv_text_outline
m_trans	include/agg_span_interpolator_linear.h	/^        const trans_type* m_trans;$/;"	m	class:agg::span_interpolator_linear
m_trans	include/agg_span_interpolator_linear.h	/^        const trans_type* m_trans;$/;"	m	class:agg::span_interpolator_linear_subdiv
m_trans	include/agg_span_interpolator_trans.h	/^        const trans_type* m_trans;$/;"	m	class:agg::span_interpolator_trans
m_trans_dir	include/agg_span_interpolator_persp.h	/^        trans_type             m_trans_dir;$/;"	m	class:agg::span_interpolator_persp_exact
m_trans_dir	include/agg_span_interpolator_persp.h	/^        trans_type             m_trans_dir;$/;"	m	class:agg::span_interpolator_persp_lerp
m_trans_inv	include/agg_span_interpolator_persp.h	/^        trans_type             m_trans_inv;$/;"	m	class:agg::span_interpolator_persp_exact
m_trans_inv	include/agg_span_interpolator_persp.h	/^        trans_type             m_trans_inv;$/;"	m	class:agg::span_interpolator_persp_lerp
m_trans_type	examples/image_perspective.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_trans_type;$/;"	m	class:the_application	file:
m_trans_type	examples/image_resample.cpp	/^    agg::rbox_ctrl<agg::rgba>    m_trans_type;$/;"	m	class:the_application	file:
m_trans_type	examples/pattern_perspective.cpp	/^    agg::rbox_ctrl<agg::rgba> m_trans_type;$/;"	m	class:the_application	file:
m_trans_type	examples/pattern_resample.cpp	/^    agg::rbox_ctrl<agg::rgba>    m_trans_type;$/;"	m	class:the_application	file:
m_trans_type	examples/perspective.cpp	/^    agg::rbox_ctrl<agg::rgba8> m_trans_type;$/;"	m	class:the_application	file:
m_trans_type	examples/scanline_boolean.cpp	/^    agg::rbox_ctrl<agg::rgba8>   m_trans_type;$/;"	m	class:the_application	file:
m_transform	examples/svg_viewer/agg_svg_path_renderer.h	/^        trans_affine   m_transform;$/;"	m	class:agg::svg::path_renderer
m_transform	include/agg_conv_marker.h	/^        trans_affine   m_transform;$/;"	m	class:agg::conv_marker
m_translation_x	examples/trans_polar.cpp	/^        double m_translation_x;$/;"	m	class:agg::trans_polar	file:
m_translation_y	examples/trans_polar.cpp	/^        double m_translation_y;$/;"	m	class:agg::trans_polar	file:
m_translucent	examples/graph_test.cpp	/^    agg::cbox_ctrl<agg::rgba>   m_translucent;$/;"	m	class:the_application	file:
m_transparent	examples/rasterizer_compound.cpp	/^    agg::rgba8          m_transparent;$/;"	m	class:style_handler	file:
m_triangle_color	include/ctrl/agg_slider_ctrl.h	/^        ColorT m_triangle_color;$/;"	m	class:agg::slider_ctrl
m_triangles	examples/gouraud_mesh.cpp	/^        pod_bvector<gouraud_type> m_triangles;$/;"	m	class:agg::styles_gouraud	file:
m_triangles	examples/gouraud_mesh.cpp	/^        pod_bvector<mesh_triangle> m_triangles;$/;"	m	class:agg::mesh_ctrl	file:
m_trim	src/platform/win32/agg_platform_support.cpp	/^        const char* m_trim;$/;"	m	class:agg::tokenizer	file:
m_two_rx2	include/agg_ellipse_bresenham.h	/^        int m_two_rx2;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_two_ry2	include/agg_ellipse_bresenham.h	/^        int m_two_ry2;$/;"	m	class:agg::ellipse_bresenham_interpolator
m_type	examples/graph_test.cpp	/^    agg::rbox_ctrl<agg::rgba>   m_type;$/;"	m	class:the_application	file:
m_typeface	font_win32_tt/agg_font_win32_tt.h	/^        char*           m_typeface;$/;"	m	class:agg::font_engine_win32_tt_base
m_typeface_len	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_typeface_len;$/;"	m	class:agg::font_engine_win32_tt_base
m_update_flag	src/platform/X11/agg_platform_support.cpp	/^        bool m_update_flag;$/;"	m	class:agg::platform_specific	file:
m_update_flag	src/platform/sdl/agg_platform_support.cpp	/^        bool          m_update_flag;$/;"	m	class:agg::platform_specific	file:
m_v	include/agg_span_gouraud_gray.h	/^            int    m_v;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_v1	include/agg_span_gouraud_gray.h	/^            int    m_v1;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_v1	include/agg_vcgen_dash.h	/^        const vertex_dist* m_v1;$/;"	m	class:agg::vcgen_dash
m_v2	include/agg_vcgen_dash.h	/^        const vertex_dist* m_v2;$/;"	m	class:agg::vcgen_dash
m_valid	include/agg_trans_bilinear.h	/^        bool   m_valid;$/;"	m	class:agg::trans_bilinear
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_reflect
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_reflect_auto_pow2
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_reflect_pow2
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_repeat
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_repeat_auto_pow2
m_value	include/agg_image_accessors.h	/^        unsigned m_value;$/;"	m	class:agg::wrap_mode_repeat_pow2
m_value	include/ctrl/agg_slider_ctrl.h	/^        double   m_value;$/;"	m	class:agg::slider_ctrl_impl
m_value1	include/ctrl/agg_scale_ctrl.h	/^        double   m_value1;$/;"	m	class:agg::scale_ctrl_impl
m_value2	include/ctrl/agg_scale_ctrl.h	/^        double   m_value2;$/;"	m	class:agg::scale_ctrl_impl
m_ver	include/agg_dda_line.h	/^        bool                   m_ver;$/;"	m	class:agg::line_bresenham_interpolator
m_vertex	examples/interactive_polygon.h	/^        unsigned m_vertex;$/;"	m	class:agg::simple_polygon_vertex_source
m_vertex	examples/mol_view.cpp	/^        unsigned m_vertex;$/;"	m	class:agg::dashed_wedge	file:
m_vertex	examples/mol_view.cpp	/^        unsigned m_vertex;$/;"	m	class:agg::line	file:
m_vertex	examples/mol_view.cpp	/^        unsigned m_vertex;$/;"	m	class:agg::solid_wedge	file:
m_vertex	include/agg_bezier_arc.h	/^        unsigned m_vertex;$/;"	m	class:agg::bezier_arc
m_vertex	include/agg_conv_close_polygon.h	/^        unsigned      m_vertex;$/;"	m	class:agg::conv_close_polygon
m_vertex	include/agg_conv_gpc.h	/^        int                        m_vertex;$/;"	m	class:agg::conv_gpc
m_vertex	include/agg_span_gouraud.h	/^        unsigned m_vertex;$/;"	m	class:agg::span_gouraud
m_vertex	include/agg_vpgen_clip_polygon.h	/^        unsigned      m_vertex;$/;"	m	class:agg::vpgen_clip_polygon
m_vertex	include/agg_vpgen_clip_polyline.h	/^        unsigned      m_vertex;$/;"	m	class:agg::vpgen_clip_polyline
m_vertex	include/ctrl/agg_cbox_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::cbox_ctrl_impl
m_vertex	include/ctrl/agg_gamma_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::gamma_ctrl_impl
m_vertex	include/ctrl/agg_polygon_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::simple_polygon_vertex_source
m_vertex	include/ctrl/agg_rbox_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::rbox_ctrl_impl
m_vertex	include/ctrl/agg_scale_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::scale_ctrl_impl
m_vertex	include/ctrl/agg_slider_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::slider_ctrl_impl
m_vertex	include/ctrl/agg_spline_ctrl.h	/^        unsigned m_vertex;$/;"	m	class:agg::spline_ctrl_impl
m_vertex_accumulator	include/agg_conv_gpc.h	/^        vertex_array_type          m_vertex_accumulator;$/;"	m	class:agg::conv_gpc
m_vertex_idx	include/agg_path_storage_integer.h	/^        unsigned                            m_vertex_idx;$/;"	m	class:agg::path_storage_integer
m_vertices	examples/gouraud_mesh.cpp	/^        pod_bvector<mesh_point>    m_vertices;$/;"	m	class:agg::mesh_ctrl	file:
m_vertices	include/agg_bezier_arc.h	/^        double   m_vertices[26];$/;"	m	class:agg::bezier_arc
m_vertices	include/agg_conv_adaptor_vpgen.h	/^        int           m_vertices;$/;"	m	class:agg::conv_adaptor_vpgen
m_vertices	include/agg_path_storage.h	/^        Container m_vertices;$/;"	m	class:agg::vertex_stl_storage
m_vertices	include/agg_path_storage.h	/^        VertexContainer m_vertices;$/;"	m	class:agg::path_base
m_vertices	include/agg_path_storage_integer.h	/^        unsigned     m_vertices;$/;"	m	class:agg::serialized_integer_path_adaptor
m_vertices	include/agg_rasterizer_outline.h	/^        unsigned  m_vertices;$/;"	m	class:agg::rasterizer_outline
m_visual	src/platform/X11/agg_platform_support.cpp	/^        Visual*              m_visual;$/;"	m	class:agg::platform_specific	file:
m_vpgen	include/agg_conv_adaptor_vpgen.h	/^        VPGen         m_vpgen;$/;"	m	class:agg::conv_adaptor_vpgen
m_vs	examples/interactive_polygon.h	/^        simple_polygon_vertex_source m_vs;$/;"	m	class:agg::interactive_polygon
m_vs	include/ctrl/agg_polygon_ctrl.h	/^        simple_polygon_vertex_source              m_vs;$/;"	m	class:agg::polygon_ctrl_impl
m_vx	include/ctrl/agg_cbox_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::cbox_ctrl_impl
m_vx	include/ctrl/agg_gamma_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::gamma_ctrl_impl
m_vx	include/ctrl/agg_rbox_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::rbox_ctrl_impl
m_vx	include/ctrl/agg_scale_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::scale_ctrl_impl
m_vx	include/ctrl/agg_slider_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::slider_ctrl_impl
m_vx	include/ctrl/agg_spline_ctrl.h	/^        double   m_vx[32];$/;"	m	class:agg::spline_ctrl_impl
m_vy	include/ctrl/agg_cbox_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::cbox_ctrl_impl
m_vy	include/ctrl/agg_gamma_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::gamma_ctrl_impl
m_vy	include/ctrl/agg_rbox_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::rbox_ctrl_impl
m_vy	include/ctrl/agg_scale_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::scale_ctrl_impl
m_vy	include/ctrl/agg_slider_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::slider_ctrl_impl
m_vy	include/ctrl/agg_spline_ctrl.h	/^        double   m_vy[32];$/;"	m	class:agg::spline_ctrl_impl
m_w	include/agg_gsv_text.h	/^        double          m_w;$/;"	m	class:agg::gsv_text
m_wait_mode	include/platform/agg_platform_support.h	/^        bool             m_wait_mode;$/;"	m	class:agg::platform_support
m_weight	examples/freetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_weight;$/;"	m	class:the_application	file:
m_weight	examples/truetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_weight;$/;"	m	class:the_application	file:
m_weight	font_win32_tt/agg_font_win32_tt.h	/^        int             m_weight;$/;"	m	class:agg::font_engine_win32_tt_base
m_weight_array	include/agg_image_filters.h	/^        pod_array<int16> m_weight_array;$/;"	m	class:agg::image_filter_lut
m_white_on_black	examples/rounded_rect.cpp	/^    agg::cbox_ctrl<agg::rgba8>   m_white_on_black;$/;"	m	class:the_application	file:
m_width	examples/bezier_div.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/conv_contour.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/conv_dash_marker.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/conv_stroke.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/freetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/graph_test.cpp	/^    agg::slider_ctrl<agg::rgba> m_width;$/;"	m	class:the_application	file:
m_width	examples/rasterizer_compound.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/rasterizers2.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	examples/truetype_test.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width;$/;"	m	class:the_application	file:
m_width	font_freetype/agg_font_freetype.h	/^        unsigned        m_width;$/;"	m	class:agg::font_engine_freetype_base
m_width	font_win32_tt/agg_font_win32_tt.h	/^        unsigned        m_width;$/;"	m	class:agg::font_engine_win32_tt_base
m_width	include/agg_gsv_text.h	/^        double          m_width;$/;"	m	class:agg::gsv_text
m_width	include/agg_math_stroke.h	/^        double       m_width;$/;"	m	class:agg::math_stroke
m_width	include/agg_renderer_outline_aa.h	/^        int m_width;$/;"	m	class:agg::line_interpolator_aa_base
m_width	include/agg_renderer_outline_image.h	/^        int m_width;$/;"	m	class:agg::line_interpolator_image
m_width	include/agg_renderer_outline_image.h	/^        unsigned                  m_width;$/;"	m	class:agg::line_image_pattern
m_width	include/agg_rendering_buffer.h	/^        unsigned      m_width;      \/\/ Width in pixels$/;"	m	class:agg::row_ptr_cache
m_width	include/agg_rendering_buffer.h	/^        unsigned      m_width;  \/\/ Width in pixels$/;"	m	class:agg::row_accessor
m_width	include/agg_rendering_buffer_dynarow.h	/^        unsigned            m_width;      \/\/ Width in pixels$/;"	m	class:agg::rendering_buffer_dynarow
m_width	include/agg_vcgen_contour.h	/^        double                     m_width;$/;"	m	class:agg::vcgen_contour
m_width	src/platform/AmigaOS/agg_platform_support.cpp	/^		uint16 m_width;$/;"	m	class:agg::platform_specific	file:
m_width_abs	include/agg_math_stroke.h	/^        double       m_width_abs;$/;"	m	class:agg::math_stroke
m_width_eps	include/agg_math_stroke.h	/^        double       m_width_eps;$/;"	m	class:agg::math_stroke
m_width_hr	include/agg_renderer_outline_image.h	/^        int                       m_width_hr;$/;"	m	class:agg::line_image_pattern
m_width_sign	include/agg_math_stroke.h	/^        int          m_width_sign;$/;"	m	class:agg::math_stroke
m_width_slider	examples/lion_outline.cpp	/^    agg::slider_ctrl<agg::rgba8> m_width_slider;$/;"	m	class:the_application	file:
m_window	src/platform/AmigaOS/agg_platform_support.cpp	/^		Window* m_window;$/;"	m	class:agg::platform_specific	file:
m_window	src/platform/X11/agg_platform_support.cpp	/^        Window               m_window;$/;"	m	class:agg::platform_specific	file:
m_window	src/platform/mac/agg_platform_support.cpp	/^        WindowRef        m_window;$/;"	m	class:agg::platform_specific	file:
m_window_attributes	src/platform/X11/agg_platform_support.cpp	/^        XSetWindowAttributes m_window_attributes;$/;"	m	class:agg::platform_specific	file:
m_window_flags	include/platform/agg_platform_support.h	/^        unsigned         m_window_flags;$/;"	m	class:agg::platform_support
m_window_obj	src/platform/AmigaOS/agg_platform_support.cpp	/^		APTR m_window_obj;$/;"	m	class:agg::platform_specific	file:
m_world_x1	include/agg_trans_viewport.h	/^        double         m_world_x1;$/;"	m	class:agg::trans_viewport
m_world_x2	include/agg_trans_viewport.h	/^        double         m_world_x2;$/;"	m	class:agg::trans_viewport
m_world_y1	include/agg_trans_viewport.h	/^        double         m_world_y1;$/;"	m	class:agg::trans_viewport
m_world_y2	include/agg_trans_viewport.h	/^        double         m_world_y2;$/;"	m	class:agg::trans_viewport
m_wrap_x	include/agg_image_accessors.h	/^        WrapX              m_wrap_x;$/;"	m	class:agg::image_accessor_wrap
m_wrap_y	include/agg_image_accessors.h	/^        WrapY              m_wrap_y;$/;"	m	class:agg::image_accessor_wrap
m_wx1	include/agg_trans_viewport.h	/^        double         m_wx1;$/;"	m	class:agg::trans_viewport
m_wx2	include/agg_trans_viewport.h	/^        double         m_wx2;$/;"	m	class:agg::trans_viewport
m_wy1	include/agg_trans_viewport.h	/^        double         m_wy1;$/;"	m	class:agg::trans_viewport
m_wy2	include/agg_trans_viewport.h	/^        double         m_wy2;$/;"	m	class:agg::trans_viewport
m_x	examples/aa_demo.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/aa_test.cpp	/^    double   m_x[8];$/;"	m	class:simple_vertex_source	file:
m_x	examples/alpha_gradient.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/alpha_mask3.cpp	/^    double m_x;$/;"	m	class:spiral	file:
m_x	examples/alpha_mask3.cpp	/^    double m_x;$/;"	m	class:the_application	file:
m_x	examples/conv_dash_marker.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/conv_stroke.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/gouraud.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/gpc_test.cpp	/^    double m_x;$/;"	m	class:spiral	file:
m_x	examples/gpc_test.cpp	/^    double m_x;$/;"	m	class:the_application	file:
m_x	examples/image_alpha.cpp	/^    double     m_x[50];$/;"	m	class:the_application	file:
m_x	examples/polymorphic_renderer.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/rasterizers.cpp	/^    double m_x[3];$/;"	m	class:the_application	file:
m_x	examples/rasterizers2.cpp	/^    double m_x;$/;"	m	class:spiral	file:
m_x	examples/rounded_rect.cpp	/^    double m_x[2];$/;"	m	class:the_application	file:
m_x	examples/scanline_boolean2.cpp	/^    double m_x;$/;"	m	class:spiral	file:
m_x	examples/scanline_boolean2.cpp	/^    double m_x;$/;"	m	class:the_application	file:
m_x	examples/svg_viewer/svg_test.cpp	/^    double m_x;$/;"	m	class:the_application	file:
m_x	include/agg_arc.h	/^        double   m_x;$/;"	m	class:agg::arc
m_x	include/agg_bspline.h	/^        double*           m_x;$/;"	m	class:agg::bspline
m_x	include/agg_conv_close_polygon.h	/^        double        m_x[2];$/;"	m	class:agg::conv_close_polygon
m_x	include/agg_ellipse.h	/^        double m_x;$/;"	m	class:agg::ellipse
m_x	include/agg_gsv_text.h	/^        double          m_x;$/;"	m	class:agg::gsv_text
m_x	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clip
m_x	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clone
m_x	include/agg_image_accessors.h	/^        int                m_x, m_y;$/;"	m	class:agg::image_accessor_no_clip
m_x	include/agg_image_accessors.h	/^        int                m_x;$/;"	m	class:agg::image_accessor_wrap
m_x	include/agg_rasterizer_cells_aa.h	/^        int  m_x;$/;"	m	class:agg::scanline_hit_test
m_x	include/agg_renderer_outline_aa.h	/^        int m_x;$/;"	m	class:agg::line_interpolator_aa_base
m_x	include/agg_renderer_outline_image.h	/^        int m_x;$/;"	m	class:agg::line_interpolator_image
m_x	include/agg_span_gouraud.h	/^        double m_x[8];$/;"	m	class:agg::span_gouraud
m_x	include/agg_span_gouraud_gray.h	/^            int    m_x;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_x	include/agg_span_gouraud_rgba.h	/^            int    m_x;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_x	include/agg_span_interpolator_trans.h	/^        double            m_x;$/;"	m	class:agg::span_interpolator_trans
m_x	include/agg_vpgen_clip_polygon.h	/^        double        m_x[4];$/;"	m	class:agg::vpgen_clip_polygon
m_x	include/agg_vpgen_clip_polyline.h	/^        double        m_x[2];$/;"	m	class:agg::vpgen_clip_polyline
m_x	include/ctrl/agg_gamma_spline.h	/^        double        m_x[4];$/;"	m	class:agg::gamma_spline
m_x0	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clip
m_x0	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clone
m_x1	examples/flash_rasterizer.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_x1	examples/flash_rasterizer2.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_x1	examples/mol_view.cpp	/^        double   m_x1;$/;"	m	class:agg::dashed_wedge	file:
m_x1	examples/mol_view.cpp	/^        double   m_x1;$/;"	m	class:agg::line	file:
m_x1	examples/mol_view.cpp	/^        double   m_x1;$/;"	m	class:agg::solid_wedge	file:
m_x1	include/agg_rasterizer_sl_clip.h	/^        coord_type       m_x1;$/;"	m	class:agg::rasterizer_sl_clip
m_x1	include/agg_rasterizer_sl_clip.h	/^        int m_x1, m_y1;$/;"	m	class:agg::rasterizer_sl_no_clip
m_x1	include/agg_rounded_rect.h	/^        double m_x1;$/;"	m	class:agg::rounded_rect
m_x1	include/agg_span_gouraud_gray.h	/^            double m_x1;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_x1	include/agg_span_gouraud_rgba.h	/^            double m_x1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_x1	include/agg_vpgen_clip_polygon.h	/^        double        m_x1;$/;"	m	class:agg::vpgen_clip_polygon
m_x1	include/agg_vpgen_clip_polyline.h	/^        double        m_x1;$/;"	m	class:agg::vpgen_clip_polyline
m_x1	include/agg_vpgen_segmentator.h	/^        double   m_x1;$/;"	m	class:agg::vpgen_segmentator
m_x1	include/ctrl/agg_ctrl.h	/^        double m_x1;$/;"	m	class:agg::ctrl
m_x1	include/ctrl/agg_gamma_spline.h	/^        double        m_x1;$/;"	m	class:agg::gamma_spline
m_x1_lr	include/agg_dda_line.h	/^        int                    m_x1_lr;$/;"	m	class:agg::line_bresenham_interpolator
m_x2	examples/flash_rasterizer.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_x2	examples/flash_rasterizer2.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_x2	examples/mol_view.cpp	/^        double   m_x2;$/;"	m	class:agg::dashed_wedge	file:
m_x2	examples/mol_view.cpp	/^        double   m_x2;$/;"	m	class:agg::line	file:
m_x2	examples/mol_view.cpp	/^        double   m_x2;$/;"	m	class:agg::solid_wedge	file:
m_x2	include/agg_rounded_rect.h	/^        double m_x2;$/;"	m	class:agg::rounded_rect
m_x2	include/ctrl/agg_ctrl.h	/^        double m_x2;$/;"	m	class:agg::ctrl
m_x2	include/ctrl/agg_gamma_spline.h	/^        double        m_x2;$/;"	m	class:agg::gamma_spline
m_x2_lr	include/agg_dda_line.h	/^        int                    m_x2_lr;$/;"	m	class:agg::line_bresenham_interpolator
m_xc	include/agg_trans_warp_magnifier.h	/^        double m_xc;$/;"	m	class:agg::trans_warp_magnifier
m_xc1	include/ctrl/agg_gamma_ctrl.h	/^        double m_xc1;$/;"	m	class:agg::gamma_ctrl_impl
m_xc2	include/ctrl/agg_gamma_ctrl.h	/^        double m_xc2;$/;"	m	class:agg::gamma_ctrl_impl
m_xd	examples/mol_view.cpp	/^        double   m_xd[4];$/;"	m	class:agg::dashed_wedge	file:
m_ximg_window	src/platform/X11/agg_platform_support.cpp	/^        XImage*              m_ximg_window;$/;"	m	class:agg::platform_specific	file:
m_xp	include/ctrl/agg_spline_ctrl.h	/^        double   m_xp[32];$/;"	m	class:agg::spline_ctrl_impl
m_xp1	include/ctrl/agg_gamma_ctrl.h	/^        double   m_xp1;$/;"	m	class:agg::gamma_ctrl_impl
m_xp2	include/ctrl/agg_gamma_ctrl.h	/^        double   m_xp2;$/;"	m	class:agg::gamma_ctrl_impl
m_xs1	include/ctrl/agg_gamma_ctrl.h	/^        double m_xs1;$/;"	m	class:agg::gamma_ctrl_impl
m_xs1	include/ctrl/agg_rbox_ctrl.h	/^        double   m_xs1;$/;"	m	class:agg::rbox_ctrl_impl
m_xs1	include/ctrl/agg_scale_ctrl.h	/^        double   m_xs1;$/;"	m	class:agg::scale_ctrl_impl
m_xs1	include/ctrl/agg_slider_ctrl.h	/^        double   m_xs1;$/;"	m	class:agg::slider_ctrl_impl
m_xs1	include/ctrl/agg_spline_ctrl.h	/^        double   m_xs1;$/;"	m	class:agg::spline_ctrl_impl
m_xs2	include/ctrl/agg_gamma_ctrl.h	/^        double m_xs2;$/;"	m	class:agg::gamma_ctrl_impl
m_xs2	include/ctrl/agg_rbox_ctrl.h	/^        double   m_xs2;$/;"	m	class:agg::rbox_ctrl_impl
m_xs2	include/ctrl/agg_scale_ctrl.h	/^        double   m_xs2;$/;"	m	class:agg::scale_ctrl_impl
m_xs2	include/ctrl/agg_slider_ctrl.h	/^        double   m_xs2;$/;"	m	class:agg::slider_ctrl_impl
m_xs2	include/ctrl/agg_spline_ctrl.h	/^        double   m_xs2;$/;"	m	class:agg::spline_ctrl_impl
m_xt1	include/ctrl/agg_gamma_ctrl.h	/^        double m_xt1;$/;"	m	class:agg::gamma_ctrl_impl
m_xt2	examples/mol_view.cpp	/^        double   m_xt2;$/;"	m	class:agg::dashed_wedge	file:
m_xt2	include/ctrl/agg_gamma_ctrl.h	/^        double m_xt2;$/;"	m	class:agg::gamma_ctrl_impl
m_xt3	examples/mol_view.cpp	/^        double   m_xt3;$/;"	m	class:agg::dashed_wedge	file:
m_y	examples/aa_demo.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/aa_test.cpp	/^    double   m_y[8];$/;"	m	class:simple_vertex_source	file:
m_y	examples/alpha_gradient.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/alpha_mask3.cpp	/^    double m_y;$/;"	m	class:spiral	file:
m_y	examples/alpha_mask3.cpp	/^    double m_y;$/;"	m	class:the_application	file:
m_y	examples/conv_dash_marker.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/conv_stroke.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/gouraud.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/gpc_test.cpp	/^    double m_y;$/;"	m	class:spiral	file:
m_y	examples/gpc_test.cpp	/^    double m_y;$/;"	m	class:the_application	file:
m_y	examples/image_alpha.cpp	/^    double     m_y[50];$/;"	m	class:the_application	file:
m_y	examples/polymorphic_renderer.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/rasterizers.cpp	/^    double m_y[3];$/;"	m	class:the_application	file:
m_y	examples/rasterizers2.cpp	/^    double m_y;$/;"	m	class:spiral	file:
m_y	examples/rounded_rect.cpp	/^    double m_y[2];$/;"	m	class:the_application	file:
m_y	examples/scanline_boolean2.cpp	/^    double m_y;$/;"	m	class:spiral	file:
m_y	examples/scanline_boolean2.cpp	/^    double m_y;$/;"	m	class:the_application	file:
m_y	examples/svg_viewer/svg_test.cpp	/^    double m_y;$/;"	m	class:the_application	file:
m_y	include/agg_arc.h	/^        double   m_y;$/;"	m	class:agg::arc
m_y	include/agg_bspline.h	/^        double*           m_y;$/;"	m	class:agg::bspline
m_y	include/agg_conv_close_polygon.h	/^        double        m_y[2];$/;"	m	class:agg::conv_close_polygon
m_y	include/agg_dda_line.h	/^        int m_y;$/;"	m	class:agg::dda2_line_interpolator
m_y	include/agg_dda_line.h	/^        int m_y;$/;"	m	class:agg::dda_line_interpolator
m_y	include/agg_ellipse.h	/^        double m_y;$/;"	m	class:agg::ellipse
m_y	include/agg_gsv_text.h	/^        double          m_y;$/;"	m	class:agg::gsv_text
m_y	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clip
m_y	include/agg_image_accessors.h	/^        int                m_x, m_x0, m_y;$/;"	m	class:agg::image_accessor_clone
m_y	include/agg_image_accessors.h	/^        int                m_x, m_y;$/;"	m	class:agg::image_accessor_no_clip
m_y	include/agg_renderer_outline_aa.h	/^        int m_y;$/;"	m	class:agg::line_interpolator_aa_base
m_y	include/agg_renderer_outline_image.h	/^        int m_y;$/;"	m	class:agg::line_interpolator_image
m_y	include/agg_renderer_raster_text.h	/^            int m_y;$/;"	m	class:agg::renderer_raster_htext::scanline_single_span
m_y	include/agg_scanline_bin.h	/^        int             m_y;$/;"	m	class:agg::scanline32_bin
m_y	include/agg_scanline_bin.h	/^        int             m_y;$/;"	m	class:agg::scanline_bin
m_y	include/agg_scanline_p.h	/^        int                   m_y;$/;"	m	class:agg::scanline32_p8
m_y	include/agg_scanline_p.h	/^        int                   m_y;$/;"	m	class:agg::scanline_p8
m_y	include/agg_scanline_storage_aa.h	/^            int          m_y;$/;"	m	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
m_y	include/agg_scanline_storage_bin.h	/^            int          m_y;$/;"	m	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
m_y	include/agg_scanline_u.h	/^        int                   m_y;$/;"	m	class:agg::scanline32_u8
m_y	include/agg_scanline_u.h	/^        int                   m_y;$/;"	m	class:agg::scanline_u8
m_y	include/agg_span_gouraud.h	/^        double m_y[8];$/;"	m	class:agg::span_gouraud
m_y	include/agg_span_interpolator_trans.h	/^        double            m_y;$/;"	m	class:agg::span_interpolator_trans
m_y	include/agg_vpgen_clip_polygon.h	/^        double        m_y[4];$/;"	m	class:agg::vpgen_clip_polygon
m_y	include/agg_vpgen_clip_polyline.h	/^        double        m_y[2];$/;"	m	class:agg::vpgen_clip_polyline
m_y	include/ctrl/agg_gamma_spline.h	/^        double        m_y[4];$/;"	m	class:agg::gamma_spline
m_y1	examples/flash_rasterizer.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_y1	examples/flash_rasterizer2.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_y1	examples/mol_view.cpp	/^        double   m_y1;$/;"	m	class:agg::dashed_wedge	file:
m_y1	examples/mol_view.cpp	/^        double   m_y1;$/;"	m	class:agg::line	file:
m_y1	examples/mol_view.cpp	/^        double   m_y1;$/;"	m	class:agg::solid_wedge	file:
m_y1	include/agg_rasterizer_sl_clip.h	/^        coord_type       m_y1;$/;"	m	class:agg::rasterizer_sl_clip
m_y1	include/agg_rasterizer_sl_clip.h	/^        int m_x1, m_y1;$/;"	m	class:agg::rasterizer_sl_no_clip
m_y1	include/agg_rounded_rect.h	/^        double m_y1;$/;"	m	class:agg::rounded_rect
m_y1	include/agg_span_gouraud_gray.h	/^            double m_y1;$/;"	m	struct:agg::span_gouraud_gray::gray_calc
m_y1	include/agg_span_gouraud_rgba.h	/^            double m_y1;$/;"	m	struct:agg::span_gouraud_rgba::rgba_calc
m_y1	include/agg_vpgen_clip_polygon.h	/^        double        m_y1;$/;"	m	class:agg::vpgen_clip_polygon
m_y1	include/agg_vpgen_clip_polyline.h	/^        double        m_y1;$/;"	m	class:agg::vpgen_clip_polyline
m_y1	include/agg_vpgen_segmentator.h	/^        double   m_y1;$/;"	m	class:agg::vpgen_segmentator
m_y1	include/ctrl/agg_ctrl.h	/^        double m_y1;$/;"	m	class:agg::ctrl
m_y1	include/ctrl/agg_gamma_spline.h	/^        double        m_y1;$/;"	m	class:agg::gamma_spline
m_y1_lr	include/agg_dda_line.h	/^        int                    m_y1_lr;$/;"	m	class:agg::line_bresenham_interpolator
m_y2	examples/flash_rasterizer.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_y2	examples/flash_rasterizer2.cpp	/^        double                                    m_x1, m_y1, m_x2, m_y2;$/;"	m	class:agg::compound_shape	file:
m_y2	examples/mol_view.cpp	/^        double   m_y2;$/;"	m	class:agg::dashed_wedge	file:
m_y2	examples/mol_view.cpp	/^        double   m_y2;$/;"	m	class:agg::line	file:
m_y2	examples/mol_view.cpp	/^        double   m_y2;$/;"	m	class:agg::solid_wedge	file:
m_y2	include/agg_rounded_rect.h	/^        double m_y2;$/;"	m	class:agg::rounded_rect
m_y2	include/agg_span_gouraud_gray.h	/^        int       m_y2;$/;"	m	class:agg::span_gouraud_gray
m_y2	include/agg_span_gouraud_rgba.h	/^        int       m_y2;$/;"	m	class:agg::span_gouraud_rgba
m_y2	include/ctrl/agg_ctrl.h	/^        double m_y2;$/;"	m	class:agg::ctrl
m_y2	include/ctrl/agg_gamma_spline.h	/^        double        m_y2;$/;"	m	class:agg::gamma_spline
m_y2_lr	include/agg_dda_line.h	/^        int                    m_y2_lr;$/;"	m	class:agg::line_bresenham_interpolator
m_yc	include/agg_trans_warp_magnifier.h	/^        double m_yc;$/;"	m	class:agg::trans_warp_magnifier
m_yc1	include/ctrl/agg_gamma_ctrl.h	/^        double m_yc1;$/;"	m	class:agg::gamma_ctrl_impl
m_yc2	include/ctrl/agg_gamma_ctrl.h	/^        double m_yc2;$/;"	m	class:agg::gamma_ctrl_impl
m_yd	examples/mol_view.cpp	/^        double   m_yd[4];$/;"	m	class:agg::dashed_wedge	file:
m_yp	include/ctrl/agg_spline_ctrl.h	/^        double   m_yp[32];$/;"	m	class:agg::spline_ctrl_impl
m_yp1	include/ctrl/agg_gamma_ctrl.h	/^        double   m_yp1;$/;"	m	class:agg::gamma_ctrl_impl
m_yp2	include/ctrl/agg_gamma_ctrl.h	/^        double   m_yp2;$/;"	m	class:agg::gamma_ctrl_impl
m_ys1	include/ctrl/agg_gamma_ctrl.h	/^        double m_ys1;$/;"	m	class:agg::gamma_ctrl_impl
m_ys1	include/ctrl/agg_rbox_ctrl.h	/^        double   m_ys1;$/;"	m	class:agg::rbox_ctrl_impl
m_ys1	include/ctrl/agg_scale_ctrl.h	/^        double   m_ys1;$/;"	m	class:agg::scale_ctrl_impl
m_ys1	include/ctrl/agg_slider_ctrl.h	/^        double   m_ys1;$/;"	m	class:agg::slider_ctrl_impl
m_ys1	include/ctrl/agg_spline_ctrl.h	/^        double   m_ys1;$/;"	m	class:agg::spline_ctrl_impl
m_ys2	include/ctrl/agg_gamma_ctrl.h	/^        double m_ys2;$/;"	m	class:agg::gamma_ctrl_impl
m_ys2	include/ctrl/agg_rbox_ctrl.h	/^        double   m_ys2;$/;"	m	class:agg::rbox_ctrl_impl
m_ys2	include/ctrl/agg_scale_ctrl.h	/^        double   m_ys2;$/;"	m	class:agg::scale_ctrl_impl
m_ys2	include/ctrl/agg_slider_ctrl.h	/^        double   m_ys2;$/;"	m	class:agg::slider_ctrl_impl
m_ys2	include/ctrl/agg_spline_ctrl.h	/^        double   m_ys2;$/;"	m	class:agg::spline_ctrl_impl
m_yt1	include/ctrl/agg_gamma_ctrl.h	/^        double m_yt1;$/;"	m	class:agg::gamma_ctrl_impl
m_yt2	examples/mol_view.cpp	/^        double   m_yt2;$/;"	m	class:agg::dashed_wedge	file:
m_yt2	include/ctrl/agg_gamma_ctrl.h	/^        double m_yt2;$/;"	m	class:agg::gamma_ctrl_impl
m_yt3	examples/mol_view.cpp	/^        double   m_yt3;$/;"	m	class:agg::dashed_wedge	file:
magnification	include/agg_trans_warp_magnifier.h	/^        double magnification() const { return m_magn;   }$/;"	f	class:agg::trans_warp_magnifier
magnification	include/agg_trans_warp_magnifier.h	/^        void magnification(double m)    { m_magn = m;         }$/;"	f	class:agg::trans_warp_magnifier
main	src/platform/AmigaOS/agg_platform_support.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/platform/BeOS/agg_platform_support.cpp	/^main(int argc, char* argv[])$/;"	f
main	src/platform/X11/agg_platform_support.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/platform/mac/agg_platform_support.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/platform/sdl/agg_platform_support.cpp	/^int main(int argc, char* argv[])$/;"	f
make_arrows	examples/make_arrows.cpp	/^void make_arrows(agg::path_storage& ps)$/;"	f
make_bitmap	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_specific::make_bitmap()$/;"	f	class:agg::platform_specific
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_bgrAAA_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_bgrABB_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_rgb555_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_rgb565_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_rgbAAA_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	class:agg::blender_rgbBBA_gamma
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_bgrAAA
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_bgrAAA_pre
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_bgrABB
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_bgrABB_pre
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgb555
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgb555_pre
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgb565
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgb565_pre
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgbAAA
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgbAAA_pre
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgbBBA
make_color	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE color_type make_color(pixel_type p)$/;"	f	struct:agg::blender_rgbBBA_pre
make_gb_poly	examples/make_gb_poly.cpp	/^void make_gb_poly(agg::path_storage& ps)$/;"	f
make_pix	include/agg_pixfmt_gray.h	/^        AGG_INLINE static void make_pix(int8u* p, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_gray
make_pix	include/agg_pixfmt_rgb.h	/^        AGG_INLINE static void make_pix(int8u* p, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgb
make_pix	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE void make_pix(int8u* p, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_bgrAAA_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_bgrABB_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_rgb555_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_rgb565_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_rgbAAA_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	class:agg::blender_rgbBBA_gamma
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_bgrAAA
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_bgrAAA_pre
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_bgrABB
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_bgrABB_pre
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgb555
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgb555_pre
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgb565
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgb565_pre
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgbAAA
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgbAAA_pre
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgbBBA
make_pix	include/agg_pixfmt_rgb_packed.h	/^        static AGG_INLINE pixel_type make_pix(unsigned r, unsigned g, unsigned b)$/;"	f	struct:agg::blender_rgbBBA_pre
make_pix	include/agg_pixfmt_rgba.h	/^        AGG_INLINE static void make_pix(int8u* p, const color_type& c)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
make_pix	include/agg_pixfmt_rgba.h	/^        AGG_INLINE static void make_pix(int8u* p, const color_type& c)$/;"	f	class:agg::pixfmt_custom_blend_rgba
make_polygon	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::make_polygon(gpc_polygon& p)$/;"	f	class:agg::conv_gpc
making_path	include/agg_trans_double_path.h	/^            making_path,$/;"	e	enum:agg::trans_double_path::status_e
making_path	include/agg_trans_single_path.h	/^            making_path,$/;"	e	enum:agg::trans_single_path::status_e
marker	include/agg_renderer_markers.h	/^        void marker(int x, int y, int r, marker_e type)$/;"	f	class:agg::renderer_markers
marker_circle	include/agg_renderer_markers.h	/^        marker_circle,$/;"	e	enum:agg::marker_e
marker_cross	include/agg_renderer_markers.h	/^        marker_cross,$/;"	e	enum:agg::marker_e
marker_crossed_circle	include/agg_renderer_markers.h	/^        marker_crossed_circle,$/;"	e	enum:agg::marker_e
marker_dash	include/agg_renderer_markers.h	/^        marker_dash,$/;"	e	enum:agg::marker_e
marker_diamond	include/agg_renderer_markers.h	/^        marker_diamond,$/;"	e	enum:agg::marker_e
marker_dot	include/agg_renderer_markers.h	/^        marker_dot,$/;"	e	enum:agg::marker_e
marker_e	include/agg_renderer_markers.h	/^    enum marker_e$/;"	g	namespace:agg
marker_four_rays	include/agg_renderer_markers.h	/^        marker_four_rays,$/;"	e	enum:agg::marker_e
marker_pixel	include/agg_renderer_markers.h	/^        marker_pixel,$/;"	e	enum:agg::marker_e
marker_semiellipse_down	include/agg_renderer_markers.h	/^        marker_semiellipse_down,$/;"	e	enum:agg::marker_e
marker_semiellipse_left	include/agg_renderer_markers.h	/^        marker_semiellipse_left,$/;"	e	enum:agg::marker_e
marker_semiellipse_right	include/agg_renderer_markers.h	/^        marker_semiellipse_right,$/;"	e	enum:agg::marker_e
marker_semiellipse_up	include/agg_renderer_markers.h	/^        marker_semiellipse_up,$/;"	e	enum:agg::marker_e
marker_square	include/agg_renderer_markers.h	/^        marker_square,$/;"	e	enum:agg::marker_e
marker_triangle_down	include/agg_renderer_markers.h	/^        marker_triangle_down,$/;"	e	enum:agg::marker_e
marker_triangle_left	include/agg_renderer_markers.h	/^        marker_triangle_left,$/;"	e	enum:agg::marker_e
marker_triangle_right	include/agg_renderer_markers.h	/^        marker_triangle_right,$/;"	e	enum:agg::marker_e
marker_triangle_up	include/agg_renderer_markers.h	/^        marker_triangle_up,$/;"	e	enum:agg::marker_e
marker_type	examples/graph_test.cpp	/^    typedef agg::conv_marker<typename dash_type::marker_type, agg::arrowhead> marker_type;$/;"	t	struct:dash_stroke_draft_arrow	file:
marker_type	examples/graph_test.cpp	/^    typedef agg::conv_marker<typename dash_type::marker_type, agg::arrowhead> marker_type;$/;"	t	struct:dash_stroke_fine_arrow	file:
marker_type	examples/graph_test.cpp	/^    typedef agg::conv_marker<typename stroke_type::marker_type, agg::arrowhead> marker_type;$/;"	t	struct:stroke_draft_arrow	file:
marker_type	examples/graph_test.cpp	/^    typedef agg::conv_marker<typename stroke_type::marker_type, agg::arrowhead> marker_type;$/;"	t	struct:stroke_fine_arrow	file:
marker_type	include/agg_conv_dash.h	/^        typedef Markers marker_type;$/;"	t	struct:agg::conv_dash
marker_type	include/agg_conv_marker_adaptor.h	/^        typedef Markers marker_type;$/;"	t	struct:agg::conv_marker_adaptor
marker_type	include/agg_conv_stroke.h	/^        typedef Markers marker_type;$/;"	t	struct:agg::conv_stroke
marker_x	include/agg_renderer_markers.h	/^        marker_x,$/;"	e	enum:agg::marker_e
markers	include/agg_conv_adaptor_vcgen.h	/^        Markers& markers() { return m_markers; }$/;"	f	class:agg::conv_adaptor_vcgen
markers	include/agg_conv_adaptor_vcgen.h	/^        const Markers& markers() const { return m_markers; }$/;"	f	class:agg::conv_adaptor_vcgen
markers	include/agg_conv_marker.h	/^            markers,$/;"	e	enum:agg::conv_marker::status_e
markers	include/agg_renderer_markers.h	/^        void markers(int n, const T* x, const T* y, T r, marker_e type)$/;"	f	class:agg::renderer_markers
markers	include/agg_renderer_markers.h	/^        void markers(int n, const T* x, const T* y, const T* r, const color_type* fc, const color_type* lc, marker_e type)$/;"	f	class:agg::renderer_markers
markers	include/agg_renderer_markers.h	/^        void markers(int n, const T* x, const T* y, const T* r, const color_type* fc, marker_e type)$/;"	f	class:agg::renderer_markers
markers	include/agg_renderer_markers.h	/^        void markers(int n, const T* x, const T* y, const T* r, marker_e type)$/;"	f	class:agg::renderer_markers
mask_function	include/agg_alpha_mask_u8.h	/^        MaskF& mask_function() { return m_mask_function; }$/;"	f	class:agg::alpha_mask_u8
mask_function	include/agg_alpha_mask_u8.h	/^        MaskF& mask_function() { return m_mask_function; }$/;"	f	class:agg::amask_no_clip_u8
mask_function	include/agg_alpha_mask_u8.h	/^        const MaskF& mask_function() const { return m_mask_function; }$/;"	f	class:agg::alpha_mask_u8
mask_function	include/agg_alpha_mask_u8.h	/^        const MaskF& mask_function() const { return m_mask_function; }$/;"	f	class:agg::amask_no_clip_u8
master_alpha	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::master_alpha(int style, double alpha)$/;"	f	class:agg::rasterizer_compound_aa
math_stroke	include/agg_math_stroke.h	/^    template<class VC> math_stroke<VC>::math_stroke() :$/;"	f	class:agg::math_stroke
math_stroke	include/agg_math_stroke.h	/^    template<class VertexConsumer> class math_stroke$/;"	c	namespace:agg
matrix_pivot	include/agg_simul_eq.h	/^    struct matrix_pivot$/;"	s	namespace:agg
max_ctrl	include/platform/agg_platform_support.h	/^        enum max_ctrl_e { max_ctrl = 64 };$/;"	e	enum:agg::ctrl_container::max_ctrl_e
max_ctrl_e	include/platform/agg_platform_support.h	/^        enum max_ctrl_e { max_ctrl = 64 };$/;"	g	class:agg::ctrl_container
max_dashes	include/agg_vcgen_dash.h	/^            max_dashes = 32$/;"	e	enum:agg::vcgen_dash::max_dashes_e
max_dashes_e	include/agg_vcgen_dash.h	/^        enum max_dashes_e$/;"	g	class:agg::vcgen_dash
max_half_width	include/agg_renderer_outline_aa.h	/^            max_half_width = 64$/;"	e	enum:agg::line_interpolator_aa_base::max_half_width_e
max_half_width	include/agg_renderer_outline_image.h	/^            max_half_width = 64$/;"	e	enum:agg::line_interpolator_image::max_half_width_e
max_half_width_e	include/agg_renderer_outline_aa.h	/^        enum max_half_width_e$/;"	g	class:agg::line_interpolator_aa_base
max_half_width_e	include/agg_renderer_outline_image.h	/^        enum max_half_width_e$/;"	g	class:agg::line_interpolator_image
max_images	include/platform/agg_platform_support.h	/^        enum max_images_e { max_images = 16 };$/;"	e	enum:agg::platform_support::max_images_e
max_images_e	include/platform/agg_platform_support.h	/^        enum max_images_e { max_images = 16 };$/;"	g	class:agg::platform_support
max_span_len	include/agg_span_allocator.h	/^        AGG_INLINE unsigned    max_span_len() const { return m_span.size(); }$/;"	f	class:agg::span_allocator
max_style	examples/flash_rasterizer2.cpp	/^        int max_style() const { return m_max_style; }$/;"	f	class:agg::compound_shape
max_style	include/agg_rasterizer_compound_aa.h	/^        int max_style() const { return m_max_style; }$/;"	f	class:agg::rasterizer_compound_aa
max_x	include/agg_rasterizer_cells_aa.h	/^        int max_x() const { return m_max_x; }$/;"	f	class:agg::rasterizer_cells_aa
max_x	include/agg_rasterizer_compound_aa.h	/^        int max_x()     const { return m_outline.max_x(); }$/;"	f	class:agg::rasterizer_compound_aa
max_x	include/agg_rasterizer_scanline_aa.h	/^        int max_x() const { return m_outline.max_x(); }$/;"	f	class:agg::rasterizer_scanline_aa
max_x	include/agg_scanline_storage_aa.h	/^        int max_x() const { return m_max_x; }$/;"	f	class:agg::scanline_storage_aa
max_x	include/agg_scanline_storage_aa.h	/^        int max_x() const { return m_max_x; }$/;"	f	class:agg::serialized_scanlines_adaptor_aa
max_x	include/agg_scanline_storage_bin.h	/^        int max_x() const { return m_max_x; }$/;"	f	class:agg::scanline_storage_bin
max_x	include/agg_scanline_storage_bin.h	/^        int max_x() const { return m_max_x; }$/;"	f	class:agg::serialized_scanlines_adaptor_bin
max_y	include/agg_rasterizer_cells_aa.h	/^        int max_y() const { return m_max_y; }$/;"	f	class:agg::rasterizer_cells_aa
max_y	include/agg_rasterizer_compound_aa.h	/^        int max_y()     const { return m_outline.max_y(); }$/;"	f	class:agg::rasterizer_compound_aa
max_y	include/agg_rasterizer_scanline_aa.h	/^        int max_y() const { return m_outline.max_y(); }$/;"	f	class:agg::rasterizer_scanline_aa
max_y	include/agg_scanline_storage_aa.h	/^        int max_y() const { return m_max_y; }$/;"	f	class:agg::scanline_storage_aa
max_y	include/agg_scanline_storage_aa.h	/^        int max_y() const { return m_max_y; }$/;"	f	class:agg::serialized_scanlines_adaptor_aa
max_y	include/agg_scanline_storage_bin.h	/^        int max_y() const { return m_max_y; }$/;"	f	class:agg::scanline_storage_bin
max_y	include/agg_scanline_storage_bin.h	/^        int max_y() const { return m_max_y; }$/;"	f	class:agg::serialized_scanlines_adaptor_bin
mcs11_prop	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs11_prop[] = $/;"	m	namespace:agg	file:
mcs11_prop_condensed	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs11_prop_condensed[] = $/;"	m	namespace:agg	file:
mcs12_prop	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs12_prop[] = $/;"	m	namespace:agg	file:
mcs13_prop	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs13_prop[] = $/;"	m	namespace:agg	file:
mcs5x10_mono	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs5x10_mono[] = $/;"	m	namespace:agg	file:
mcs5x11_mono	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs5x11_mono[] = $/;"	m	namespace:agg	file:
mcs6x10_mono	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs6x10_mono[] = $/;"	m	namespace:agg	file:
mcs6x11_mono	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs6x11_mono[] = $/;"	m	namespace:agg	file:
mcs7x12_mono_high	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs7x12_mono_high[] = $/;"	m	namespace:agg	file:
mcs7x12_mono_low	src/agg_embedded_raster_fonts.cpp	/^    const int8u mcs7x12_mono_low[] = $/;"	m	namespace:agg	file:
measure_time	examples/bezier_div.cpp	/^    template<class Curve> double measure_time(Curve& curve)$/;"	f	class:the_application
merge_left	gpc/gpc.c	/^static void merge_left(polygon_node *p, polygon_node *q, polygon_node *list)$/;"	f	file:
merge_right	gpc/gpc.c	/^static void merge_right(polygon_node *p, polygon_node *q, polygon_node *list)$/;"	f	file:
mesh_ctrl	examples/gouraud_mesh.cpp	/^    class mesh_ctrl$/;"	c	namespace:agg	file:
mesh_ctrl	examples/gouraud_mesh.cpp	/^    mesh_ctrl::mesh_ctrl() :$/;"	f	class:agg::mesh_ctrl
mesh_edge	examples/gouraud_mesh.cpp	/^        mesh_edge() {}$/;"	f	struct:agg::mesh_edge
mesh_edge	examples/gouraud_mesh.cpp	/^        mesh_edge(unsigned p1_, unsigned p2_, int tl_, int tr_) :$/;"	f	struct:agg::mesh_edge
mesh_edge	examples/gouraud_mesh.cpp	/^    struct mesh_edge$/;"	s	namespace:agg	file:
mesh_point	examples/gouraud_mesh.cpp	/^        mesh_point() {}$/;"	f	struct:agg::mesh_point
mesh_point	examples/gouraud_mesh.cpp	/^        mesh_point(double x_, double y_, $/;"	f	struct:agg::mesh_point
mesh_point	examples/gouraud_mesh.cpp	/^    struct mesh_point$/;"	s	namespace:agg	file:
mesh_triangle	examples/gouraud_mesh.cpp	/^        mesh_triangle() {}$/;"	f	struct:agg::mesh_triangle
mesh_triangle	examples/gouraud_mesh.cpp	/^        mesh_triangle(unsigned i, unsigned j, unsigned k) : $/;"	f	struct:agg::mesh_triangle
mesh_triangle	examples/gouraud_mesh.cpp	/^    struct mesh_triangle$/;"	s	namespace:agg	file:
message	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
message	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
message	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
message	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
message	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
message	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::message(const char* msg)$/;"	f	class:agg::platform_support
min	examples/aa_test.cpp	/^template<class T> T min(T a, T b) { return (a < b) ? a : b; }$/;"	f
min_delta	include/ctrl/agg_scale_ctrl.h	/^        double min_delta() const { return m_min_d; }$/;"	f	class:agg::scale_ctrl_impl
min_delta	include/ctrl/agg_scale_ctrl.h	/^        void min_delta(double d) { m_min_d = d; }$/;"	f	class:agg::scale_ctrl_impl
min_style	examples/flash_rasterizer2.cpp	/^        int min_style() const { return m_min_style; }$/;"	f	class:agg::compound_shape
min_style	include/agg_rasterizer_compound_aa.h	/^        int min_style() const { return m_min_style; }$/;"	f	class:agg::rasterizer_compound_aa
min_width	include/agg_renderer_outline_aa.h	/^        double min_width() const { return m_min_width; }$/;"	f	class:agg::line_profile_aa
min_width	include/agg_renderer_outline_aa.h	/^        void min_width(double w) { m_min_width = w; }$/;"	f	class:agg::line_profile_aa
min_x	include/agg_rasterizer_cells_aa.h	/^        int min_x() const { return m_min_x; }$/;"	f	class:agg::rasterizer_cells_aa
min_x	include/agg_rasterizer_compound_aa.h	/^        int min_x()     const { return m_outline.min_x(); }$/;"	f	class:agg::rasterizer_compound_aa
min_x	include/agg_rasterizer_scanline_aa.h	/^        int min_x() const { return m_outline.min_x(); }$/;"	f	class:agg::rasterizer_scanline_aa
min_x	include/agg_scanline_storage_aa.h	/^        int min_x() const { return m_min_x; }$/;"	f	class:agg::scanline_storage_aa
min_x	include/agg_scanline_storage_aa.h	/^        int min_x() const { return m_min_x; }$/;"	f	class:agg::serialized_scanlines_adaptor_aa
min_x	include/agg_scanline_storage_bin.h	/^        int min_x() const { return m_min_x; }$/;"	f	class:agg::scanline_storage_bin
min_x	include/agg_scanline_storage_bin.h	/^        int min_x() const { return m_min_x; }$/;"	f	class:agg::serialized_scanlines_adaptor_bin
min_y	include/agg_rasterizer_cells_aa.h	/^        int min_y() const { return m_min_y; }$/;"	f	class:agg::rasterizer_cells_aa
min_y	include/agg_rasterizer_compound_aa.h	/^        int min_y()     const { return m_outline.min_y(); }$/;"	f	class:agg::rasterizer_compound_aa
min_y	include/agg_rasterizer_scanline_aa.h	/^        int min_y() const { return m_outline.min_y(); }$/;"	f	class:agg::rasterizer_scanline_aa
min_y	include/agg_scanline_storage_aa.h	/^        int min_y() const { return m_min_y; }$/;"	f	class:agg::scanline_storage_aa
min_y	include/agg_scanline_storage_aa.h	/^        int min_y() const { return m_min_y; }$/;"	f	class:agg::serialized_scanlines_adaptor_aa
min_y	include/agg_scanline_storage_bin.h	/^        int min_y() const { return m_min_y; }$/;"	f	class:agg::scanline_storage_bin
min_y	include/agg_scanline_storage_bin.h	/^        int min_y() const { return m_min_y; }$/;"	f	class:agg::serialized_scanlines_adaptor_bin
minimax_test	gpc/gpc.c	/^static void minimax_test(gpc_polygon *subj, gpc_polygon *clip, gpc_op op)$/;"	f	file:
miter_join	include/agg_math_stroke.h	/^        miter_join         = 0,$/;"	e	enum:agg::line_join_e
miter_join_revert	include/agg_math_stroke.h	/^        miter_join_revert  = 1,$/;"	e	enum:agg::line_join_e
miter_join_round	include/agg_math_stroke.h	/^        miter_join_round   = 4$/;"	e	enum:agg::line_join_e
miter_limit	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::miter_limit(double ml)$/;"	f	class:agg::svg::path_renderer
miter_limit	examples/svg_viewer/agg_svg_path_renderer.h	/^        double       miter_limit;$/;"	m	struct:agg::svg::path_attributes
miter_limit	include/agg_conv_contour.h	/^        double miter_limit() const { return base_type::generator().miter_limit(); }$/;"	f	struct:agg::conv_contour
miter_limit	include/agg_conv_contour.h	/^        void miter_limit(double ml) { base_type::generator().miter_limit(ml); }$/;"	f	struct:agg::conv_contour
miter_limit	include/agg_conv_stroke.h	/^        double miter_limit() const { return base_type::generator().miter_limit(); }$/;"	f	struct:agg::conv_stroke
miter_limit	include/agg_conv_stroke.h	/^        void miter_limit(double ml) { base_type::generator().miter_limit(ml); }$/;"	f	struct:agg::conv_stroke
miter_limit	include/agg_math_stroke.h	/^        double miter_limit() const { return m_miter_limit; }$/;"	f	class:agg::math_stroke
miter_limit	include/agg_math_stroke.h	/^        void miter_limit(double ml) { m_miter_limit = ml; }$/;"	f	class:agg::math_stroke
miter_limit	include/agg_vcgen_contour.h	/^        double miter_limit() const { return m_stroker.miter_limit(); }$/;"	f	class:agg::vcgen_contour
miter_limit	include/agg_vcgen_contour.h	/^        void miter_limit(double ml) { m_stroker.miter_limit(ml); }$/;"	f	class:agg::vcgen_contour
miter_limit	include/agg_vcgen_stroke.h	/^        double miter_limit() const { return m_stroker.miter_limit(); }$/;"	f	class:agg::vcgen_stroke
miter_limit	include/agg_vcgen_stroke.h	/^        void miter_limit(double ml) { m_stroker.miter_limit(ml); }$/;"	f	class:agg::vcgen_stroke
miter_limit_theta	include/agg_conv_contour.h	/^        void miter_limit_theta(double t) { base_type::generator().miter_limit_theta(t); }$/;"	f	struct:agg::conv_contour
miter_limit_theta	include/agg_conv_stroke.h	/^        void miter_limit_theta(double t) { base_type::generator().miter_limit_theta(t); }$/;"	f	struct:agg::conv_stroke
miter_limit_theta	include/agg_math_stroke.h	/^    template<class VC> void math_stroke<VC>::miter_limit_theta(double t)$/;"	f	class:agg::math_stroke
miter_limit_theta	include/agg_vcgen_contour.h	/^        void miter_limit_theta(double t) { m_stroker.miter_limit_theta(t); }$/;"	f	class:agg::vcgen_contour
miter_limit_theta	include/agg_vcgen_stroke.h	/^        void miter_limit_theta(double t) { m_stroker.miter_limit_theta(t); }$/;"	f	class:agg::vcgen_stroke
mod	include/agg_dda_line.h	/^        int mod() const { return m_mod; }$/;"	f	class:agg::dda2_line_interpolator
modify_command	include/agg_path_storage.h	/^        void modify_command(unsigned idx, unsigned cmd)$/;"	f	class:agg::vertex_stl_storage
modify_command	include/agg_path_storage.h	/^    inline void vertex_block_storage<T,S,P>::modify_command(unsigned idx, $/;"	f	class:agg::vertex_block_storage
modify_command	include/agg_path_storage.h	/^    void path_base<VC>::modify_command(unsigned idx, unsigned cmd)$/;"	f	class:agg::path_base
modify_last	include/agg_array.h	/^    void pod_bvector<T, S>::modify_last(const T& val)$/;"	f	class:agg::pod_bvector
modify_last	include/agg_vertex_sequence.h	/^    void vertex_sequence<T, S>::modify_last(const T& val)$/;"	f	class:agg::vertex_sequence
modify_vertex	examples/flash_rasterizer.cpp	/^        void modify_vertex(unsigned i, double x, double y)$/;"	f	class:agg::compound_shape
modify_vertex	examples/flash_rasterizer2.cpp	/^        void modify_vertex(unsigned i, double x, double y)$/;"	f	class:agg::compound_shape
modify_vertex	include/agg_path_storage.h	/^        void modify_vertex(unsigned idx, double x, double y)$/;"	f	class:agg::vertex_stl_storage
modify_vertex	include/agg_path_storage.h	/^        void modify_vertex(unsigned idx, double x, double y, unsigned cmd)$/;"	f	class:agg::vertex_stl_storage
modify_vertex	include/agg_path_storage.h	/^    inline void vertex_block_storage<T,S,P>::modify_vertex(unsigned idx, $/;"	f	class:agg::vertex_block_storage
modify_vertex	include/agg_path_storage.h	/^    void path_base<VC>::modify_vertex(unsigned idx, double x, double y)$/;"	f	class:agg::path_base
modify_vertex	include/agg_path_storage.h	/^    void path_base<VC>::modify_vertex(unsigned idx, double x, double y, unsigned cmd)$/;"	f	class:agg::path_base
molecule	examples/mol_view.cpp	/^class molecule$/;"	c	file:
molecule	examples/mol_view.cpp	/^molecule::molecule() :$/;"	f	class:molecule
mono_adaptor	include/agg_font_cache_manager.h	/^        mono_adaptor_type&   mono_adaptor()   { return m_mono_adaptor;   }$/;"	f	class:agg::font_cache_manager
mono_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::mono_adaptor_type  mono_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int16
mono_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::mono_adaptor_type  mono_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int32
mono_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef serialized_scanlines_adaptor_bin          mono_adaptor_type;$/;"	t	class:agg::font_engine_freetype_base
mono_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::mono_adaptor_type  mono_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int16
mono_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::mono_adaptor_type  mono_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int32
mono_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef serialized_scanlines_adaptor_bin          mono_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_base
mono_adaptor_type	include/agg_font_cache_manager.h	/^        typedef typename font_engine_type::mono_adaptor_type   mono_adaptor_type;$/;"	t	class:agg::font_cache_manager
mono_scanline	include/agg_font_cache_manager.h	/^        mono_scanline_type&  mono_scanline()  { return m_mono_scanline;  }$/;"	f	class:agg::font_cache_manager
mono_scanline_type	include/agg_font_cache_manager.h	/^        typedef typename mono_adaptor_type::embedded_scanline  mono_scanline_type;$/;"	t	class:agg::font_cache_manager
more	gpc/gpc.c	/^  struct sbt_t_shape *more;         \/* Pointer to nodes with higher y    *\/$/;"	m	struct:sbt_t_shape	typeref:struct:sbt_t_shape::sbt_t_shape	file:
mouse_left	include/platform/agg_platform_support.h	/^        mouse_left  = 1,$/;"	e	enum:agg::input_flag_e
mouse_right	include/platform/agg_platform_support.h	/^        mouse_right = 2,$/;"	e	enum:agg::input_flag_e
move	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::move(double d)$/;"	f	class:agg::scale_ctrl_impl
move_e	include/ctrl/agg_scale_ctrl.h	/^        enum move_e$/;"	g	class:agg::scale_ctrl_impl
move_nothing	include/ctrl/agg_scale_ctrl.h	/^            move_nothing,$/;"	e	enum:agg::scale_ctrl_impl::move_e
move_point	examples/trans_curve1.cpp	/^    void move_point(double& x, double& y, double& dx, double& dy)$/;"	f	class:the_application
move_point	examples/trans_curve1_ft.cpp	/^    void move_point(double& x, double& y, double& dx, double& dy)$/;"	f	class:the_application
move_point	examples/trans_curve2.cpp	/^    void move_point(double& x, double& y, double& dx, double& dy)$/;"	f	class:the_application
move_point	examples/trans_curve2_ft.cpp	/^    void move_point(double& x, double& y, double& dx, double& dy)$/;"	f	class:the_application
move_rel	include/agg_path_storage.h	/^    inline void path_base<VC>::move_rel(double dx, double dy)$/;"	f	class:agg::path_base
move_slider	include/ctrl/agg_scale_ctrl.h	/^            move_slider$/;"	e	enum:agg::scale_ctrl_impl::move_e
move_to	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::move_to(double x, double y, bool rel)          \/\/ M, m$/;"	f	class:agg::svg::path_renderer
move_to	include/agg_path_storage.h	/^    inline void path_base<VC>::move_to(double x, double y)$/;"	f	class:agg::path_base
move_to	include/agg_path_storage_integer.h	/^        void move_to(T x, T y)$/;"	f	class:agg::path_storage_integer
move_to	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::move_to(int x, int y)$/;"	f	class:agg::rasterizer_compound_aa
move_to	include/agg_rasterizer_outline.h	/^        void move_to(int x, int y)$/;"	f	class:agg::rasterizer_outline
move_to	include/agg_rasterizer_outline_aa.h	/^        void move_to(int x, int y)$/;"	f	class:agg::rasterizer_outline_aa
move_to	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::move_to(int x, int y)$/;"	f	class:agg::rasterizer_scanline_aa
move_to	include/agg_rasterizer_sl_clip.h	/^        void move_to(coord_type x1, coord_type y1) { m_x1 = x1; m_y1 = y1; }$/;"	f	class:agg::rasterizer_sl_no_clip
move_to	include/agg_rasterizer_sl_clip.h	/^        void move_to(coord_type x1, coord_type y1)$/;"	f	class:agg::rasterizer_sl_clip
move_to	include/agg_renderer_primitives.h	/^        void move_to(int x, int y)$/;"	f	class:agg::renderer_primitives
move_to	src/agg_trans_single_path.cpp	/^    void trans_single_path::move_to(double x, double y)$/;"	f	class:agg::trans_single_path
move_to	src/agg_vpgen_clip_polygon.cpp	/^    void vpgen_clip_polygon::move_to(double x, double y)$/;"	f	class:agg::vpgen_clip_polygon
move_to	src/agg_vpgen_clip_polyline.cpp	/^    void vpgen_clip_polyline::move_to(double x, double y)$/;"	f	class:agg::vpgen_clip_polyline
move_to	src/agg_vpgen_segmentator.cpp	/^    void vpgen_segmentator::move_to(double x, double y)$/;"	f	class:agg::vpgen_segmentator
move_to1	src/agg_trans_double_path.cpp	/^    void trans_double_path::move_to1(double x, double y)$/;"	f	class:agg::trans_double_path
move_to2	src/agg_trans_double_path.cpp	/^    void trans_double_path::move_to2(double x, double y)$/;"	f	class:agg::trans_double_path
move_to_d	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::move_to_d(double x, double y) $/;"	f	class:agg::rasterizer_compound_aa
move_to_d	include/agg_rasterizer_outline.h	/^        void move_to_d(double x, double y)$/;"	f	class:agg::rasterizer_outline
move_to_d	include/agg_rasterizer_outline_aa.h	/^        void move_to_d(double x, double y)$/;"	f	class:agg::rasterizer_outline_aa
move_to_d	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::move_to_d(double x, double y) $/;"	f	class:agg::rasterizer_scanline_aa
move_value1	include/ctrl/agg_scale_ctrl.h	/^            move_value1,$/;"	e	enum:agg::scale_ctrl_impl::move_e
move_value2	include/ctrl/agg_scale_ctrl.h	/^            move_value2,$/;"	e	enum:agg::scale_ctrl_impl::move_e
msg	examples/svg_viewer/agg_svg_exception.h	/^        const char* msg() const { return m_msg; }$/;"	f	class:agg::svg::exception
mu	examples/bezier_div.cpp	/^        double x, y, dist, mu;$/;"	m	struct:the_application::curve_point	file:
mul	include/agg_basics.h	/^        AGG_INLINE static unsigned mul(unsigned a, unsigned b)$/;"	f	struct:agg::mul_one
mul_div	include/agg_rasterizer_sl_clip.h	/^        static AGG_INLINE double mul_div(double a, double b, double c)$/;"	f	struct:agg::ras_conv_dbl
mul_div	include/agg_rasterizer_sl_clip.h	/^        static AGG_INLINE double mul_div(double a, double b, double c)$/;"	f	struct:agg::ras_conv_dbl_3x
mul_div	include/agg_rasterizer_sl_clip.h	/^        static AGG_INLINE int mul_div(double a, double b, double c)$/;"	f	struct:agg::ras_conv_int
mul_div	include/agg_rasterizer_sl_clip.h	/^        static AGG_INLINE int mul_div(double a, double b, double c)$/;"	f	struct:agg::ras_conv_int_3x
mul_div	include/agg_rasterizer_sl_clip.h	/^        static AGG_INLINE int mul_div(double a, double b, double c)$/;"	f	struct:agg::ras_conv_int_sat
mul_one	include/agg_basics.h	/^    template<unsigned Shift> struct mul_one$/;"	s	namespace:agg
multiple	src/platform/win32/agg_platform_support.cpp	/^            multiple,$/;"	e	enum:agg::tokenizer::sep_flag	file:
multiplier_rgba	include/agg_pixfmt_rgba.h	/^    template<class ColorT, class Order> struct multiplier_rgba$/;"	s	namespace:agg
multiply	include/agg_trans_perspective.h	/^    trans_perspective::multiply(const trans_affine& a)$/;"	f	class:agg::trans_perspective
multiply	include/agg_trans_perspective.h	/^    trans_perspective::multiply(const trans_perspective& a)$/;"	f	class:agg::trans_perspective
multiply	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::multiply(const trans_affine& m)$/;"	f	class:agg::trans_affine
multiply_inv	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::multiply_inv(const trans_affine& m)$/;"	f	class:agg::trans_affine
multiply_inv	include/agg_trans_perspective.h	/^    trans_perspective::multiply_inv(const trans_affine& m)$/;"	f	class:agg::trans_perspective
multiply_inv	include/agg_trans_perspective.h	/^    trans_perspective::multiply_inv(const trans_perspective& m)$/;"	f	class:agg::trans_perspective
name	examples/mol_view.cpp	/^    const char* name() const { return m_name; }$/;"	f	class:molecule
name	examples/svg_viewer/agg_svg_parser.cpp	/^        char  name[22];$/;"	m	struct:agg::svg::named_color	file:
name	font_freetype/agg_font_freetype.h	/^        const char* name()         const { return m_name;       }$/;"	f	class:agg::font_engine_freetype_base
named_color	examples/svg_viewer/agg_svg_parser.cpp	/^    struct named_color$/;"	s	namespace:agg::svg	file:
navigate_scanline	include/agg_rasterizer_compound_aa.h	/^    AGG_INLINE bool rasterizer_compound_aa<Clip>::navigate_scanline(int y)$/;"	f	class:agg::rasterizer_compound_aa
navigate_scanline	include/agg_rasterizer_scanline_aa.h	/^    AGG_INLINE bool rasterizer_scanline_aa<Clip>::navigate_scanline(int y)$/;"	f	class:agg::rasterizer_scanline_aa
negate_fx	font_win32_tt/agg_font_win32_tt.cpp	/^    static inline FIXED negate_fx(const FIXED& fx)$/;"	f	namespace:agg
new_tristrip	gpc/gpc.c	/^static void new_tristrip(polygon_node **tn, edge_node *edge,$/;"	f	file:
next	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    bool path_tokenizer::next()$/;"	f	class:agg::svg::path_tokenizer
next	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    double path_tokenizer::next(char cmd)$/;"	f	class:agg::svg::path_tokenizer
next	gpc/gpc.c	/^  struct edge_shape  *next;         \/* Next edge in the AET              *\/$/;"	m	struct:edge_shape	typeref:struct:edge_shape::edge_shape	file:
next	gpc/gpc.c	/^  struct it_shape    *next;         \/* The next intersection table node  *\/$/;"	m	struct:it_shape	typeref:struct:it_shape::it_shape	file:
next	gpc/gpc.c	/^  struct lmt_shape   *next;         \/* Pointer to next local minimum     *\/$/;"	m	struct:lmt_shape	typeref:struct:lmt_shape::lmt_shape	file:
next	gpc/gpc.c	/^  struct p_shape     *next;         \/* Pointer to next polygon contour   *\/$/;"	m	struct:p_shape	typeref:struct:p_shape::p_shape	file:
next	gpc/gpc.c	/^  struct v_shape     *next;         \/* Pointer to next vertex in list    *\/$/;"	m	struct:v_shape	typeref:struct:v_shape::v_shape	file:
next	include/agg_array.h	/^        T& next(unsigned idx)$/;"	f	class:agg::pod_bvector
next	include/agg_array.h	/^        const T& next(unsigned idx) const$/;"	f	class:agg::pod_bvector
next	include/agg_rasterizer_outline_aa.h	/^            line_parameters curr, next;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
next_bound	gpc/gpc.c	/^  struct edge_shape  *next_bound;   \/* Pointer to next bound in LMT      *\/$/;"	m	struct:edge_shape	typeref:struct:edge_shape::edge_shape	file:
next_char	include/agg_gsv_text.h	/^            next_char,$/;"	e	enum:agg::gsv_text::status
next_clip_box	include/agg_renderer_mclip.h	/^        bool next_clip_box() $/;"	f	class:agg::renderer_mclip
next_contour	include/agg_conv_gpc.h	/^    bool conv_gpc<VSA, VSB>::next_contour()$/;"	f	class:agg::conv_gpc
next_h_state	gpc/gpc.c	/^const h_state next_h_state[3][6]=$/;"	v
next_token	src/platform/win32/agg_platform_support.cpp	/^    tokenizer::token tokenizer::next_token()$/;"	f	class:agg::tokenizer
next_vertex	include/agg_conv_gpc.h	/^    inline bool conv_gpc<VSA, VSB>::next_vertex(double* x, double* y)$/;"	f	class:agg::conv_gpc
next_x	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_x()$/;"	f	class:agg::image_accessor_clip
next_x	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_x()$/;"	f	class:agg::image_accessor_clone
next_x	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_x()$/;"	f	class:agg::image_accessor_no_clip
next_x	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_x()$/;"	f	class:agg::image_accessor_wrap
next_y	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_y()$/;"	f	class:agg::image_accessor_clip
next_y	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_y()$/;"	f	class:agg::image_accessor_clone
next_y	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_y()$/;"	f	class:agg::image_accessor_no_clip
next_y	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* next_y()$/;"	f	class:agg::image_accessor_wrap
no_color	include/agg_color_gray.h	/^        static self_type no_color() { return self_type(0,0); }$/;"	f	struct:agg::gray16
no_color	include/agg_color_gray.h	/^        static self_type no_color() { return self_type(0,0); }$/;"	f	struct:agg::gray8
no_color	include/agg_color_rgba.h	/^        static rgba no_color() { return rgba(0,0,0,0); }$/;"	f	struct:agg::rgba
no_color	include/agg_color_rgba.h	/^        static self_type no_color() { return self_type(0,0,0,0); }$/;"	f	struct:agg::rgba16
no_color	include/agg_color_rgba.h	/^        static self_type no_color() { return self_type(0,0,0,0); }$/;"	f	struct:agg::rgba8
no_head	include/agg_arrowhead.h	/^        void no_head() { m_head_flag = false; }$/;"	f	class:agg::arrowhead
no_tail	include/agg_arrowhead.h	/^        void no_tail() { m_tail_flag = false; }$/;"	f	class:agg::arrowhead
no_transform	include/ctrl/agg_ctrl.h	/^        void no_transform() { m_mtx = 0; }$/;"	f	class:agg::ctrl
node	examples/graph_test.cpp	/^        node() {}$/;"	f	struct:graph::node
node	examples/graph_test.cpp	/^        node(double x_, double y_) : x(x_), y(y_) {}$/;"	f	struct:graph::node
node	examples/graph_test.cpp	/^    struct node$/;"	s	class:graph	file:
node	examples/interactive_polygon.h	/^        int  node() const { return m_node; }$/;"	f	class:agg::interactive_polygon
node	examples/interactive_polygon.h	/^        void node(int n) { m_node = n; }$/;"	f	class:agg::interactive_polygon
node1	examples/graph_test.cpp	/^        int node1;$/;"	m	struct:graph::edge	file:
node2	examples/graph_test.cpp	/^        int node2;$/;"	m	struct:graph::edge	file:
nom_x	include/agg_trans_perspective.h	/^            double nom_x;$/;"	m	class:agg::trans_perspective::iterator_x
nom_x_step	include/agg_trans_perspective.h	/^            double nom_x_step;$/;"	m	class:agg::trans_perspective::iterator_x
nom_y	include/agg_trans_perspective.h	/^            double nom_y;$/;"	m	class:agg::trans_perspective::iterator_x
nom_y_step	include/agg_trans_perspective.h	/^            double nom_y_step;$/;"	m	class:agg::trans_perspective::iterator_x
normalize	include/agg_basics.h	/^        const self_type& normalize()$/;"	f	struct:agg::rect_base
normalize	src/agg_arc.cpp	/^    void arc::normalize(double a1, double a2, bool ccw)$/;"	f	class:agg::arc
normalize	src/agg_image_filters.cpp	/^    void image_filter_lut::normalize()$/;"	f	class:agg::image_filter_lut
normalize_point	examples/trans_curve2.cpp	/^    void normalize_point(unsigned i)$/;"	f	class:the_application
normalize_point	examples/trans_curve2_ft.cpp	/^    void normalize_point(unsigned i)$/;"	f	class:the_application
normalize_radius	src/agg_rounded_rect.cpp	/^    void rounded_rect::normalize_radius()$/;"	f	class:agg::rounded_rect
normalize_value	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::normalize_value(bool preview_value_flag)$/;"	f	class:agg::slider_ctrl_impl
not_equal	include/agg_rasterizer_compound_aa.h	/^        int not_equal(int ex, int ey, const cell_style_aa& c) const$/;"	f	struct:agg::cell_style_aa
not_equal	include/agg_rasterizer_scanline_aa.h	/^        int not_equal(int ex, int ey, const cell_aa&) const$/;"	f	struct:agg::cell_aa
null_markers	include/agg_conv_adaptor_vcgen.h	/^    struct null_markers$/;"	s	namespace:agg
num	include/agg_rasterizer_cells_aa.h	/^            unsigned num;$/;"	m	struct:agg::rasterizer_cells_aa::sorted_y
num_atoms	examples/mol_view.cpp	/^    unsigned num_atoms() const { return m_num_atoms; }$/;"	f	class:molecule
num_bonds	examples/mol_view.cpp	/^    unsigned num_bonds() const { return m_num_bonds; }$/;"	f	class:molecule
num_cells	include/agg_rasterizer_compound_aa.h	/^            unsigned num_cells;$/;"	m	struct:agg::rasterizer_compound_aa::style_info
num_contours	gpc/gpc.h	/^  int                 num_contours; \/* Number of contours in polygon     *\/$/;"	m	struct:__anon7
num_dashes	examples/mol_view.cpp	/^        void num_dashes(unsigned nd)$/;"	f	class:agg::dashed_wedge
num_edges	examples/gouraud_mesh.cpp	/^        unsigned num_edges() const { return m_edges.size(); }$/;"	f	class:agg::mesh_ctrl
num_faces	font_freetype/agg_font_freetype.cpp	/^    unsigned font_engine_freetype_base::num_faces() const$/;"	f	class:agg::font_engine_freetype_base
num_paths	examples/trans_polar.cpp	/^        unsigned num_paths() { return m_ctrl.num_paths(); }$/;"	f	class:agg::transformed_control
num_paths	include/ctrl/agg_bezier_ctrl.h	/^        unsigned num_paths() { return 6; };$/;"	f	class:agg::curve3_ctrl_impl
num_paths	include/ctrl/agg_bezier_ctrl.h	/^        unsigned num_paths() { return 7; };$/;"	f	class:agg::bezier_ctrl_impl
num_paths	include/ctrl/agg_cbox_ctrl.h	/^        unsigned num_paths() { return 3; };$/;"	f	class:agg::cbox_ctrl_impl
num_paths	include/ctrl/agg_gamma_ctrl.h	/^        unsigned num_paths() { return 7; }$/;"	f	class:agg::gamma_ctrl_impl
num_paths	include/ctrl/agg_polygon_ctrl.h	/^        unsigned num_paths() { return 1; }$/;"	f	class:agg::polygon_ctrl_impl
num_paths	include/ctrl/agg_rbox_ctrl.h	/^        unsigned num_paths() { return 5; };$/;"	f	class:agg::rbox_ctrl_impl
num_paths	include/ctrl/agg_scale_ctrl.h	/^        unsigned num_paths() { return 5; };$/;"	f	class:agg::scale_ctrl_impl
num_paths	include/ctrl/agg_slider_ctrl.h	/^        unsigned num_paths() { return 6; };$/;"	f	class:agg::slider_ctrl_impl
num_paths	include/ctrl/agg_spline_ctrl.h	/^        unsigned num_paths() { return 5; }$/;"	f	class:agg::spline_ctrl_impl
num_points	examples/interactive_polygon.h	/^        unsigned num_points() const { return m_num_points; }$/;"	f	class:agg::interactive_polygon
num_points	include/ctrl/agg_polygon_ctrl.h	/^        unsigned num_points() const { return m_num_points; }$/;"	f	class:agg::polygon_ctrl_impl
num_spans	include/agg_rasterizer_cells_aa.h	/^        unsigned num_spans() const { return 1; }$/;"	f	class:agg::scanline_hit_test
num_spans	include/agg_renderer_raster_text.h	/^            unsigned num_spans()   const { return 1;   }$/;"	f	class:agg::renderer_raster_htext::scanline_single_span
num_spans	include/agg_scanline_bin.h	/^        unsigned       num_spans() const { return m_spans.size(); }$/;"	f	class:agg::scanline32_bin
num_spans	include/agg_scanline_bin.h	/^        unsigned       num_spans() const { return unsigned(m_cur_span - &m_spans[0]); }$/;"	f	class:agg::scanline_bin
num_spans	include/agg_scanline_p.h	/^        unsigned       num_spans() const { return m_spans.size(); }$/;"	f	class:agg::scanline32_p8
num_spans	include/agg_scanline_p.h	/^        unsigned       num_spans() const { return unsigned(m_cur_span - &m_spans[0]); }$/;"	f	class:agg::scanline_p8
num_spans	include/agg_scanline_storage_aa.h	/^            unsigned num_spans()   const { return m_num_spans;  }$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
num_spans	include/agg_scanline_storage_aa.h	/^            unsigned num_spans()   const { return m_scanline.num_spans;  }$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
num_spans	include/agg_scanline_storage_aa.h	/^            unsigned num_spans;$/;"	m	struct:agg::scanline_storage_aa::scanline_data
num_spans	include/agg_scanline_storage_bin.h	/^            unsigned num_spans()   const { return m_num_spans;  }$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
num_spans	include/agg_scanline_storage_bin.h	/^            unsigned num_spans()   const { return m_scanline.num_spans;  }$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
num_spans	include/agg_scanline_storage_bin.h	/^            unsigned num_spans;$/;"	m	struct:agg::scanline_storage_bin::scanline_data
num_spans	include/agg_scanline_u.h	/^        unsigned num_spans()   const { return m_spans.size(); }$/;"	f	class:agg::scanline32_u8
num_spans	include/agg_scanline_u.h	/^        unsigned num_spans()   const { return unsigned(m_cur_span - &m_spans[0]); }$/;"	f	class:agg::scanline_u8
num_steps	include/ctrl/agg_slider_ctrl.h	/^        void num_steps(unsigned num) { m_num_steps = num; }$/;"	f	class:agg::slider_ctrl_impl
num_strips	gpc/gpc.h	/^  int                 num_strips;   \/* Number of tristrips               *\/$/;"	m	struct:__anon8
num_triangles	examples/gouraud_mesh.cpp	/^        unsigned num_triangles() const { return m_triangles.size(); }$/;"	f	class:agg::mesh_ctrl
num_vertices	examples/gouraud_mesh.cpp	/^        unsigned num_vertices() const { return m_vertices.size(); }$/;"	f	class:agg::mesh_ctrl
num_vertices	gpc/gpc.h	/^  int                 num_vertices; \/* Number of vertices in list        *\/$/;"	m	struct:__anon6
num_vertices	include/agg_bezier_arc.h	/^        unsigned  num_vertices() const { return m_arc.num_vertices(); }$/;"	f	class:agg::bezier_arc_svg
num_vertices	include/agg_bezier_arc.h	/^        unsigned  num_vertices() const { return m_num_vertices; }$/;"	f	class:agg::bezier_arc
num_vertices	include/agg_conv_gpc.h	/^            int num_vertices;$/;"	m	struct:agg::conv_gpc::contour_header_type
obj_allocator	include/agg_basics.h	/^    template<class T> struct obj_allocator$/;"	s	namespace:agg
octant	include/agg_line_aa_basics.h	/^        int octant;$/;"	m	struct:agg::line_parameters
offset	include/agg_gradient_lut.h	/^            double     offset;$/;"	m	struct:agg::gradient_lut::color_point
offset_equal	include/agg_gradient_lut.h	/^        static bool offset_equal(const color_point& a, const color_point& b)$/;"	f	class:agg::gradient_lut
offset_less	include/agg_gradient_lut.h	/^        static bool offset_less(const color_point& a, const color_point& b)$/;"	f	class:agg::gradient_lut
offset_x	include/agg_span_pattern_gray.h	/^        unsigned   offset_x() const { return m_offset_x; }$/;"	f	class:agg::span_pattern_gray
offset_x	include/agg_span_pattern_gray.h	/^        void       offset_x(unsigned v) { m_offset_x = v; }$/;"	f	class:agg::span_pattern_gray
offset_x	include/agg_span_pattern_rgb.h	/^        unsigned   offset_x() const { return m_offset_x; }$/;"	f	class:agg::span_pattern_rgb
offset_x	include/agg_span_pattern_rgb.h	/^        void       offset_x(unsigned v) { m_offset_x = v; }$/;"	f	class:agg::span_pattern_rgb
offset_x	include/agg_span_pattern_rgba.h	/^        unsigned   offset_x() const { return m_offset_x; }$/;"	f	class:agg::span_pattern_rgba
offset_x	include/agg_span_pattern_rgba.h	/^        void       offset_x(unsigned v) { m_offset_x = v; }$/;"	f	class:agg::span_pattern_rgba
offset_y	include/agg_span_pattern_gray.h	/^        unsigned   offset_y() const { return m_offset_y; }$/;"	f	class:agg::span_pattern_gray
offset_y	include/agg_span_pattern_gray.h	/^        void       offset_y(unsigned v) { m_offset_y = v; }$/;"	f	class:agg::span_pattern_gray
offset_y	include/agg_span_pattern_rgb.h	/^        unsigned   offset_y() const { return m_offset_y; }$/;"	f	class:agg::span_pattern_rgb
offset_y	include/agg_span_pattern_rgb.h	/^        void       offset_y(unsigned v) { m_offset_y = v; }$/;"	f	class:agg::span_pattern_rgb
offset_y	include/agg_span_pattern_rgba.h	/^        unsigned   offset_y() const { return m_offset_y; }$/;"	f	class:agg::span_pattern_rgba
offset_y	include/agg_span_pattern_rgba.h	/^        void       offset_y(unsigned v) { m_offset_y = v; }$/;"	f	class:agg::span_pattern_rgba
on_arrow_keys	include/platform/agg_platform_support.h	/^        bool on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::ctrl_container
on_arrow_keys	src/ctrl/agg_bezier_ctrl.cpp	/^    bool bezier_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::bezier_ctrl_impl
on_arrow_keys	src/ctrl/agg_bezier_ctrl.cpp	/^    bool curve3_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::curve3_ctrl_impl
on_arrow_keys	src/ctrl/agg_cbox_ctrl.cpp	/^    bool cbox_ctrl_impl::on_arrow_keys(bool, bool, bool, bool)$/;"	f	class:agg::cbox_ctrl_impl
on_arrow_keys	src/ctrl/agg_gamma_ctrl.cpp	/^    bool gamma_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::gamma_ctrl_impl
on_arrow_keys	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::polygon_ctrl_impl
on_arrow_keys	src/ctrl/agg_rbox_ctrl.cpp	/^    bool rbox_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::rbox_ctrl_impl
on_arrow_keys	src/ctrl/agg_scale_ctrl.cpp	/^    bool scale_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::scale_ctrl_impl
on_arrow_keys	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::slider_ctrl_impl
on_arrow_keys	src/ctrl/agg_spline_ctrl.cpp	/^    bool spline_ctrl_impl::on_arrow_keys(bool left, bool right, bool down, bool up)$/;"	f	class:agg::spline_ctrl_impl
on_ctrl_change	examples/bezier_div.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/freetype_test.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/gouraud_mesh.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/graph_test.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/idea.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/image_filters.cpp	/^    void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/image_transforms.cpp	/^    virtual void on_ctrl_change() $/;"	f	class:the_application
on_ctrl_change	examples/line_patterns.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/line_patterns_clip.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/pattern_fill.cpp	/^    virtual void on_ctrl_change() $/;"	f	class:the_application
on_ctrl_change	examples/rasterizers.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/rasterizers2.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/scanline_boolean.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/trans_curve1.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/trans_curve1_ft.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/trans_curve2.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/trans_curve2_ft.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	examples/truetype_test.cpp	/^    virtual void on_ctrl_change()$/;"	f	class:the_application
on_ctrl_change	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_ctrl_change	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_ctrl_change	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_ctrl_change	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_ctrl_change	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_ctrl_change	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_ctrl_change() {}$/;"	f	class:agg::platform_support
on_draw	examples/aa_demo.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/aa_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/alpha_gradient.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/alpha_mask.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/alpha_mask2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/alpha_mask3.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/bezier_div.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/blend_color.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/blur.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/bspline.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/circles.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/component_rendering.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/compositing.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/compositing2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/conv_contour.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/conv_dash_marker.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/conv_stroke.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/distortions.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/flash_rasterizer.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/flash_rasterizer2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/freetype_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gamma_correction.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gamma_ctrl.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gamma_tuner.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gouraud.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gouraud_mesh.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gpc_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gradient_focal.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/gradients.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/graph_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/idea.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image1.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_alpha.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_filters.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_filters2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_fltr_graph.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_perspective.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_resample.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/image_transforms.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/line_patterns.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/line_patterns_clip.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/lion.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/lion_lens.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/lion_outline.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/mol_view.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/multi_clip.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/pattern_fill.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/pattern_perspective.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/pattern_resample.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/perspective.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/polymorphic_renderer.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/raster_text.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/rasterizer_compound.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/rasterizers.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/rasterizers2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/rounded_rect.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/scanline_boolean.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/scanline_boolean2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/simple_blur.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/svg_viewer/svg_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/trans_curve1.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/trans_curve1_ft.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/trans_curve2.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/trans_curve2_ft.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/trans_polar.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	examples/truetype_test.cpp	/^    virtual void on_draw()$/;"	f	class:the_application
on_draw	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_draw	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_draw	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_draw	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_draw	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_draw	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_draw() {}$/;"	f	class:agg::platform_support
on_idle	examples/circles.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/distortions.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/gouraud_mesh.cpp	/^    void on_idle() $/;"	f	class:the_application
on_idle	examples/idea.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/image_filters.cpp	/^    void on_idle()$/;"	f	class:the_application
on_idle	examples/image_transforms.cpp	/^    virtual void on_idle() $/;"	f	class:the_application
on_idle	examples/mol_view.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/pattern_fill.cpp	/^    virtual void on_idle() $/;"	f	class:the_application
on_idle	examples/rasterizers2.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/trans_curve1.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/trans_curve1_ft.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/trans_curve2.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	examples/trans_curve2_ft.cpp	/^    virtual void on_idle()$/;"	f	class:the_application
on_idle	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_idle	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_idle	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_idle	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_idle	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_idle	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_idle() {}$/;"	f	class:agg::platform_support
on_init	examples/aa_demo.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/aa_test.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/alpha_mask3.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/bspline.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/circles.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/compositing.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/conv_dash_marker.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/conv_stroke.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/distortions.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gamma_correction.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gamma_ctrl.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gamma_tuner.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gouraud_mesh.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gpc_test.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/gradient_focal.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/idea.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/image_alpha.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/image_perspective.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/image_resample.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/image_transforms.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/lion_lens.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/mol_view.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/pattern_fill.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/pattern_perspective.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/pattern_resample.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/perspective.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/scanline_boolean.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/scanline_boolean2.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/trans_curve1.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/trans_curve1_ft.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/trans_curve2.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/trans_curve2_ft.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	examples/trans_polar.cpp	/^    virtual void on_init()$/;"	f	class:the_application
on_init	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_init	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_init	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_init	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_init	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_init	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_init() {}$/;"	f	class:agg::platform_support
on_key	examples/alpha_gradient.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/bezier_div.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/bspline.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/conv_dash_marker.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/conv_stroke.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/flash_rasterizer.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/flash_rasterizer2.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/freetype_test.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/gouraud.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/gouraud_mesh.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/gradients.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags) $/;"	f	class:the_application
on_key	examples/image_alpha.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/image_resample.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags) $/;"	f	class:the_application
on_key	examples/line_patterns.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/line_patterns_clip.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/mol_view.cpp	/^    virtual void on_key(int, int, unsigned key, unsigned)$/;"	f	class:the_application
on_key	examples/pattern_resample.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags) $/;"	f	class:the_application
on_key	examples/rasterizers.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/svg_viewer/svg_test.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/trans_curve1.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/trans_curve1_ft.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/trans_curve2.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/trans_curve2_ft.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	examples/truetype_test.cpp	/^    virtual void on_key(int x, int y, unsigned key, unsigned flags)$/;"	f	class:the_application
on_key	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_key	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_key	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_key	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_key	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_key	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_key(int x, int y, unsigned key, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	examples/aa_demo.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/aa_test.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/alpha_gradient.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/alpha_mask.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/alpha_mask2.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/alpha_mask3.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/bspline.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/circles.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/compositing.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/conv_dash_marker.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/conv_stroke.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/distortions.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/flash_rasterizer.cpp	/^    void on_mouse_button_down(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_down	examples/flash_rasterizer2.cpp	/^    void on_mouse_button_down(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_down	examples/gamma_correction.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/gamma_tuner.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/gouraud.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/gouraud_mesh.cpp	/^    bool mesh_ctrl::on_mouse_button_down(double x, double y, unsigned flags)$/;"	f	class:agg::mesh_ctrl
on_mouse_button_down	examples/gouraud_mesh.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_down	examples/gpc_test.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/gradient_focal.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/gradients.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/image_perspective.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/image_resample.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/image_transforms.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/interactive_polygon.cpp	/^    bool interactive_polygon::on_mouse_button_down(double x, double y)$/;"	f	class:agg::interactive_polygon
on_mouse_button_down	examples/lion.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/lion_lens.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/lion_outline.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/mol_view.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/multi_clip.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/pattern_fill.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/pattern_perspective.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/pattern_resample.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/perspective.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/rasterizers.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/rounded_rect.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/scanline_boolean.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/scanline_boolean2.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/simple_blur.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/svg_viewer/svg_test.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/trans_curve1.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/trans_curve1_ft.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/trans_curve2.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	examples/trans_curve2_ft.cpp	/^    virtual void on_mouse_button_down(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_down	include/platform/agg_platform_support.h	/^        bool on_mouse_button_down(double x, double y)$/;"	f	class:agg::ctrl_container
on_mouse_button_down	src/ctrl/agg_bezier_ctrl.cpp	/^    bool bezier_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::bezier_ctrl_impl
on_mouse_button_down	src/ctrl/agg_bezier_ctrl.cpp	/^    bool curve3_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::curve3_ctrl_impl
on_mouse_button_down	src/ctrl/agg_cbox_ctrl.cpp	/^    bool cbox_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::cbox_ctrl_impl
on_mouse_button_down	src/ctrl/agg_gamma_ctrl.cpp	/^    bool gamma_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::gamma_ctrl_impl
on_mouse_button_down	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::polygon_ctrl_impl
on_mouse_button_down	src/ctrl/agg_rbox_ctrl.cpp	/^    bool rbox_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::rbox_ctrl_impl
on_mouse_button_down	src/ctrl/agg_scale_ctrl.cpp	/^    bool scale_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::scale_ctrl_impl
on_mouse_button_down	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::slider_ctrl_impl
on_mouse_button_down	src/ctrl/agg_spline_ctrl.cpp	/^    bool spline_ctrl_impl::on_mouse_button_down(double x, double y)$/;"	f	class:agg::spline_ctrl_impl
on_mouse_button_down	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_down	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_down(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	examples/aa_demo.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/aa_test.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/alpha_gradient.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/bspline.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/compositing.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/conv_dash_marker.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/conv_stroke.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/flash_rasterizer.cpp	/^    void on_mouse_button_up(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_up	examples/flash_rasterizer2.cpp	/^    void on_mouse_button_up(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_up	examples/gouraud.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/gouraud_mesh.cpp	/^    bool mesh_ctrl::on_mouse_button_up(double x, double y, unsigned flags)$/;"	f	class:agg::mesh_ctrl
on_mouse_button_up	examples/gouraud_mesh.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_button_up	examples/gradients.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/image_perspective.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/image_resample.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/image_transforms.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/interactive_polygon.cpp	/^    bool interactive_polygon::on_mouse_button_up(double x, double y)$/;"	f	class:agg::interactive_polygon
on_mouse_button_up	examples/mol_view.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/pattern_fill.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/pattern_perspective.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/pattern_resample.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/perspective.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/rasterizers.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/rounded_rect.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/scanline_boolean.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/svg_viewer/svg_test.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/trans_curve1.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/trans_curve1_ft.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/trans_curve2.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	examples/trans_curve2_ft.cpp	/^    virtual void on_mouse_button_up(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_button_up	include/platform/agg_platform_support.h	/^        bool on_mouse_button_up(double x, double y)$/;"	f	class:agg::ctrl_container
on_mouse_button_up	src/ctrl/agg_bezier_ctrl.cpp	/^    bool bezier_ctrl_impl::on_mouse_button_up(double x, double y)$/;"	f	class:agg::bezier_ctrl_impl
on_mouse_button_up	src/ctrl/agg_bezier_ctrl.cpp	/^    bool curve3_ctrl_impl::on_mouse_button_up(double x, double y)$/;"	f	class:agg::curve3_ctrl_impl
on_mouse_button_up	src/ctrl/agg_cbox_ctrl.cpp	/^    bool cbox_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::cbox_ctrl_impl
on_mouse_button_up	src/ctrl/agg_gamma_ctrl.cpp	/^    bool gamma_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::gamma_ctrl_impl
on_mouse_button_up	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::on_mouse_button_up(double x, double y)$/;"	f	class:agg::polygon_ctrl_impl
on_mouse_button_up	src/ctrl/agg_rbox_ctrl.cpp	/^    bool rbox_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::rbox_ctrl_impl
on_mouse_button_up	src/ctrl/agg_scale_ctrl.cpp	/^    bool scale_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::scale_ctrl_impl
on_mouse_button_up	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::slider_ctrl_impl
on_mouse_button_up	src/ctrl/agg_spline_ctrl.cpp	/^    bool spline_ctrl_impl::on_mouse_button_up(double, double)$/;"	f	class:agg::spline_ctrl_impl
on_mouse_button_up	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_button_up	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_mouse_button_up(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	examples/aa_demo.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/aa_test.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/alpha_gradient.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/alpha_mask.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/alpha_mask2.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/alpha_mask3.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/bspline.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/compositing.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/conv_dash_marker.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/conv_stroke.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/distortions.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/flash_rasterizer.cpp	/^    void on_mouse_move(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_move	examples/flash_rasterizer2.cpp	/^    void on_mouse_move(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_move	examples/gamma_correction.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/gamma_tuner.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/gouraud.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/gouraud_mesh.cpp	/^    bool mesh_ctrl::on_mouse_move(double x, double y, unsigned flags)$/;"	f	class:agg::mesh_ctrl
on_mouse_move	examples/gouraud_mesh.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags) $/;"	f	class:the_application
on_mouse_move	examples/gpc_test.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/gradient_focal.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/gradients.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/image_perspective.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/image_resample.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/image_transforms.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/interactive_polygon.cpp	/^    bool interactive_polygon::on_mouse_move(double x, double y)$/;"	f	class:agg::interactive_polygon
on_mouse_move	examples/lion.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/lion_lens.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/lion_outline.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/mol_view.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/multi_clip.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/pattern_fill.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/pattern_perspective.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/pattern_resample.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/perspective.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/rasterizers.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/rounded_rect.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/scanline_boolean.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/scanline_boolean2.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/simple_blur.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/svg_viewer/svg_test.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/trans_curve1.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/trans_curve1_ft.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/trans_curve2.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	examples/trans_curve2_ft.cpp	/^    virtual void on_mouse_move(int x, int y, unsigned flags)$/;"	f	class:the_application
on_mouse_move	include/platform/agg_platform_support.h	/^        bool on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::ctrl_container
on_mouse_move	src/ctrl/agg_bezier_ctrl.cpp	/^    bool bezier_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::bezier_ctrl_impl
on_mouse_move	src/ctrl/agg_bezier_ctrl.cpp	/^    bool curve3_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::curve3_ctrl_impl
on_mouse_move	src/ctrl/agg_cbox_ctrl.cpp	/^    bool cbox_ctrl_impl::on_mouse_move(double, double, bool)$/;"	f	class:agg::cbox_ctrl_impl
on_mouse_move	src/ctrl/agg_gamma_ctrl.cpp	/^    bool gamma_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::gamma_ctrl_impl
on_mouse_move	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::polygon_ctrl_impl
on_mouse_move	src/ctrl/agg_rbox_ctrl.cpp	/^    bool rbox_ctrl_impl::on_mouse_move(double, double, bool)$/;"	f	class:agg::rbox_ctrl_impl
on_mouse_move	src/ctrl/agg_scale_ctrl.cpp	/^    bool scale_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::scale_ctrl_impl
on_mouse_move	src/ctrl/agg_slider_ctrl.cpp	/^    bool slider_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::slider_ctrl_impl
on_mouse_move	src/ctrl/agg_spline_ctrl.cpp	/^    bool spline_ctrl_impl::on_mouse_move(double x, double y, bool button_flag)$/;"	f	class:agg::spline_ctrl_impl
on_mouse_move	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_mouse_move	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_mouse_move(int x, int y, unsigned flags) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_post_draw	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_post_draw(void* raw_handler) {}$/;"	f	class:agg::platform_support
on_resize	examples/alpha_mask.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	examples/alpha_mask2.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	examples/blend_color.cpp	/^    virtual void on_resize(int sx, int sy)$/;"	f	class:the_application
on_resize	examples/idea.cpp	/^    virtual void on_resize(int, int)$/;"	f	class:the_application
on_resize	examples/lion.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	examples/lion_lens.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	examples/simple_blur.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	examples/svg_viewer/svg_test.cpp	/^    virtual void on_resize(int cx, int cy)$/;"	f	class:the_application
on_resize	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
on_resize	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
on_resize	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
on_resize	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
on_resize	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
on_resize	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::on_resize(int sx, int sy) {}$/;"	f	class:agg::platform_support
one_component_mask_u8	include/agg_alpha_mask_u8.h	/^    struct one_component_mask_u8$/;"	s	namespace:agg
opacity	include/agg_color_gray.h	/^        double opacity() const$/;"	f	struct:agg::gray16
opacity	include/agg_color_gray.h	/^        double opacity() const$/;"	f	struct:agg::gray8
opacity	include/agg_color_gray.h	/^        void opacity(double a_)$/;"	f	struct:agg::gray16
opacity	include/agg_color_gray.h	/^        void opacity(double a_)$/;"	f	struct:agg::gray8
opacity	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& opacity(double a_)$/;"	f	struct:agg::rgba16
opacity	include/agg_color_rgba.h	/^        const rgba& opacity(double a_)$/;"	f	struct:agg::rgba
opacity	include/agg_color_rgba.h	/^        const self_type& opacity(double a_)$/;"	f	struct:agg::rgba8
opacity	include/agg_color_rgba.h	/^        double opacity() const$/;"	f	struct:agg::rgba
opacity	include/agg_color_rgba.h	/^        double opacity() const$/;"	f	struct:agg::rgba16
opacity	include/agg_color_rgba.h	/^        double opacity() const$/;"	f	struct:agg::rgba8
open	examples/flash_rasterizer.cpp	/^        bool open(const char* fname)$/;"	f	class:agg::compound_shape
open	examples/flash_rasterizer.cpp	/^    bool open(const char* fname)$/;"	f	class:the_application
open	examples/flash_rasterizer2.cpp	/^        bool open(const char* fname)$/;"	f	class:agg::compound_shape
open	examples/flash_rasterizer2.cpp	/^    bool open(const char* fname)$/;"	f	class:the_application
open_libs	src/platform/AmigaOS/agg_platform_support.cpp	/^bool open_libs()$/;"	f
operation	include/agg_conv_gpc.h	/^        void operation(gpc_op_e v) { m_operation = v; }$/;"	f	class:agg::conv_gpc
operator !=	include/agg_trans_affine.h	/^        bool operator != (const trans_affine& m) const$/;"	f	struct:agg::trans_affine
operator !=	include/agg_trans_perspective.h	/^        bool operator != (const trans_perspective& m) const$/;"	f	struct:agg::trans_perspective
operator ()	include/agg_gamma_functions.h	/^        double operator() (double x) const$/;"	f	class:agg::gamma_linear
operator ()	include/agg_gamma_functions.h	/^        double operator() (double x) const$/;"	f	class:agg::gamma_multiply
operator ()	include/agg_gamma_functions.h	/^        double operator() (double x) const$/;"	f	class:agg::gamma_power
operator ()	include/agg_gamma_functions.h	/^        double operator() (double x) const$/;"	f	class:agg::gamma_threshold
operator ()	include/agg_gamma_functions.h	/^        double operator()(double x) const { return x; }$/;"	f	struct:agg::gamma_none
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v) $/;"	f	class:agg::wrap_mode_reflect_auto_pow2
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v) $/;"	f	class:agg::wrap_mode_repeat_auto_pow2
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v)$/;"	f	class:agg::wrap_mode_reflect
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v)$/;"	f	class:agg::wrap_mode_reflect_pow2
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v)$/;"	f	class:agg::wrap_mode_repeat
operator ()	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator() (int v)$/;"	f	class:agg::wrap_mode_repeat_pow2
operator ()	include/agg_pixfmt_gray.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_dir_gray
operator ()	include/agg_pixfmt_gray.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_inv_gray
operator ()	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_dir_rgb
operator ()	include/agg_pixfmt_rgb.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_inv_rgb
operator ()	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_dir_rgba
operator ()	include/agg_pixfmt_rgba.h	/^        AGG_INLINE void operator () (value_type* p)$/;"	f	class:agg::apply_gamma_inv_rgba
operator ()	include/agg_rasterizer_outline_aa.h	/^        bool operator () (const line_aa_vertex& val)$/;"	f	struct:agg::line_aa_vertex
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator& span, $/;"	f	struct:agg::sbool_add_span_aa
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator& span1, $/;"	f	struct:agg::sbool_intersect_spans_aa
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator& span1, $/;"	f	struct:agg::sbool_subtract_spans_aa
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator& span1, $/;"	f	struct:agg::sbool_unite_spans_aa
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator& span1, $/;"	f	struct:agg::sbool_xor_spans_aa
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator&, $/;"	f	struct:agg::sbool_add_span_bin
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator&, $/;"	f	struct:agg::sbool_add_span_empty
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator&, $/;"	f	struct:agg::sbool_combine_spans_bin
operator ()	include/agg_scanline_boolean_algebra.h	/^        void operator () (const typename Scanline1::const_iterator&, $/;"	f	struct:agg::sbool_combine_spans_empty
operator ()	include/agg_vertex_sequence.h	/^        bool operator () (const vertex_dist& val)$/;"	f	struct:agg::vertex_dist
operator ()	include/ctrl/agg_gamma_ctrl.h	/^        double operator() (double x) const { return m_gamma_spline.y(x); }$/;"	f	class:agg::gamma_ctrl_impl
operator ()	include/util/agg_color_conv.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_same
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_bgrABB_rgb24
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_gray16_to_gray8
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_gray16
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_rgb48
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_rgba64
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb48_rgb24
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgbAAA_rgb24
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgbBBA_rgb24
operator ()	include/util/agg_color_conv_rgb16.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgba64_rgba32
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_gray8
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_rgb555
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_rgb565
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb24_rgba32
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb555_rgb24
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb555_rgba32
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb555_to_rgb565
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb565_rgb24
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb565_rgba32
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgb565_to_rgb555
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgba32
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgba32_rgb24
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgba32_rgb555
operator ()	include/util/agg_color_conv_rgb8.h	/^        void operator () (int8u* dst, $/;"	f	class:agg::color_conv_rgba32_rgb565
operator *	include/agg_scanline_bin.h	/^            const span& operator*()  const { return m_spans[m_span_idx];  }$/;"	f	class:agg::scanline32_bin::const_iterator
operator *	include/agg_scanline_p.h	/^            const span& operator*()  const { return m_spans[m_span_idx];  }$/;"	f	class:agg::scanline32_p8::const_iterator
operator *	include/agg_scanline_storage_aa.h	/^                const span& operator*()  const { return m_span;  }$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
operator *	include/agg_scanline_storage_aa.h	/^                const span& operator*()  const { return m_span;  }$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
operator *	include/agg_scanline_storage_bin.h	/^                const span& operator*()  const { return m_span;  }$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
operator *	include/agg_scanline_storage_bin.h	/^                const span_data& operator*()  const { return m_span;  }$/;"	f	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
operator *	include/agg_scanline_u.h	/^            const span& operator*()  const { return m_spans[m_span_idx];  }$/;"	f	class:agg::scanline32_u8::const_iterator
operator *	include/agg_scanline_u.h	/^            span& operator*()  { return m_spans[m_span_idx];  }$/;"	f	class:agg::scanline32_u8::iterator
operator *	include/agg_trans_affine.h	/^        trans_affine operator * (const trans_affine& m)$/;"	f	struct:agg::trans_affine
operator *	include/agg_trans_perspective.h	/^        trans_perspective operator * (const trans_affine& m)$/;"	f	struct:agg::trans_perspective
operator *	include/agg_trans_perspective.h	/^        trans_perspective operator * (const trans_perspective& m)$/;"	f	struct:agg::trans_perspective
operator *=	include/agg_trans_affine.h	/^        const trans_affine& operator *= (const trans_affine& m)$/;"	f	struct:agg::trans_affine
operator *=	include/agg_trans_perspective.h	/^        const trans_perspective& operator *= (const trans_affine& m)$/;"	f	struct:agg::trans_perspective
operator *=	include/agg_trans_perspective.h	/^        const trans_perspective& operator *= (const trans_perspective& m)$/;"	f	struct:agg::trans_perspective
operator ++	include/agg_bitset_iterator.h	/^        void operator ++ ()$/;"	f	class:agg::bitset_iterator
operator ++	include/agg_dda_line.h	/^        void operator ++ ()$/;"	f	class:agg::dda_line_interpolator
operator ++	include/agg_dda_line.h	/^        void operator++()$/;"	f	class:agg::dda2_line_interpolator
operator ++	include/agg_ellipse_bresenham.h	/^        void operator++ ()$/;"	f	class:agg::ellipse_bresenham_interpolator
operator ++	include/agg_gradient_lut.h	/^        void operator ++ ()$/;"	f	struct:agg::color_interpolator
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_reflect
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_reflect_auto_pow2
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_reflect_pow2
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_repeat
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_repeat_auto_pow2
operator ++	include/agg_image_accessors.h	/^        AGG_INLINE unsigned operator++ ()$/;"	f	class:agg::wrap_mode_repeat_pow2
operator ++	include/agg_scanline_bin.h	/^            void operator ++ () { ++m_span_idx; }$/;"	f	class:agg::scanline32_bin::const_iterator
operator ++	include/agg_scanline_p.h	/^            void operator ++ () { ++m_span_idx; }$/;"	f	class:agg::scanline32_p8::const_iterator
operator ++	include/agg_scanline_storage_aa.h	/^                void operator ++ ()$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
operator ++	include/agg_scanline_storage_aa.h	/^                void operator ++ ()$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
operator ++	include/agg_scanline_storage_bin.h	/^                void operator ++ ()$/;"	f	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
operator ++	include/agg_scanline_storage_bin.h	/^                void operator ++ ()$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
operator ++	include/agg_scanline_u.h	/^            void operator ++ () { ++m_span_idx; }$/;"	f	class:agg::scanline32_u8::const_iterator
operator ++	include/agg_scanline_u.h	/^            void operator ++ () { ++m_span_idx; }$/;"	f	class:agg::scanline32_u8::iterator
operator ++	include/agg_span_interpolator_linear.h	/^        void operator++()$/;"	f	class:agg::span_interpolator_linear
operator ++	include/agg_span_interpolator_linear.h	/^        void operator++()$/;"	f	class:agg::span_interpolator_linear_subdiv
operator ++	include/agg_span_interpolator_persp.h	/^        void operator++()$/;"	f	class:agg::span_interpolator_persp_exact
operator ++	include/agg_span_interpolator_persp.h	/^        void operator++()$/;"	f	class:agg::span_interpolator_persp_lerp
operator ++	include/agg_span_interpolator_trans.h	/^        void operator++()$/;"	f	class:agg::span_interpolator_trans
operator ++	include/agg_span_subdiv_adaptor.h	/^        void operator++()$/;"	f	class:agg::span_subdiv_adaptor
operator ++	include/agg_trans_bilinear.h	/^            void operator ++ ()$/;"	f	class:agg::trans_bilinear::iterator_x
operator ++	include/agg_trans_perspective.h	/^            void operator ++ ()$/;"	f	class:agg::trans_perspective::iterator_x
operator +=	include/agg_dda_line.h	/^        void operator += (unsigned n)$/;"	f	class:agg::dda_line_interpolator
operator --	include/agg_dda_line.h	/^        void operator -- ()$/;"	f	class:agg::dda_line_interpolator
operator --	include/agg_dda_line.h	/^        void operator--()$/;"	f	class:agg::dda2_line_interpolator
operator -=	include/agg_dda_line.h	/^        void operator -= (unsigned n)$/;"	f	class:agg::dda_line_interpolator
operator ->	include/agg_scanline_bin.h	/^            const span* operator->() const { return &m_spans[m_span_idx]; }$/;"	f	class:agg::scanline32_bin::const_iterator
operator ->	include/agg_scanline_p.h	/^            const span* operator->() const { return &m_spans[m_span_idx]; }$/;"	f	class:agg::scanline32_p8::const_iterator
operator ->	include/agg_scanline_storage_aa.h	/^                const span* operator->() const { return &m_span; }$/;"	f	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
operator ->	include/agg_scanline_storage_aa.h	/^                const span* operator->() const { return &m_span; }$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
operator ->	include/agg_scanline_storage_bin.h	/^                const span* operator->() const { return &m_span; }$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
operator ->	include/agg_scanline_storage_bin.h	/^                const span_data* operator->() const { return &m_span; }$/;"	f	class:agg::scanline_storage_bin::embedded_scanline::const_iterator
operator ->	include/agg_scanline_u.h	/^            const span* operator->() const { return &m_spans[m_span_idx]; }$/;"	f	class:agg::scanline32_u8::const_iterator
operator ->	include/agg_scanline_u.h	/^            span* operator->() { return &m_spans[m_span_idx]; }$/;"	f	class:agg::scanline32_u8::iterator
operator /	include/agg_trans_affine.h	/^        trans_affine operator \/ (const trans_affine& m)$/;"	f	struct:agg::trans_affine
operator /	include/agg_trans_perspective.h	/^        trans_perspective operator \/ (const trans_affine& m)$/;"	f	struct:agg::trans_perspective
operator /	include/agg_trans_perspective.h	/^        trans_perspective operator \/ (const trans_perspective& m)$/;"	f	struct:agg::trans_perspective
operator /=	include/agg_trans_affine.h	/^        const trans_affine& operator \/= (const trans_affine& m)$/;"	f	struct:agg::trans_affine
operator /=	include/agg_trans_perspective.h	/^        const trans_perspective& operator \/= (const trans_affine& m)$/;"	f	struct:agg::trans_perspective
operator /=	include/agg_trans_perspective.h	/^        const trans_perspective& operator \/= (const trans_perspective& m)$/;"	f	struct:agg::trans_perspective
operator =	include/agg_array.h	/^        const self_type& operator = (const T* c)$/;"	f	class:agg::pod_auto_array
operator =	include/agg_array.h	/^        const self_type& operator = (const self_type& v)$/;"	f	class:agg::pod_array
operator =	include/agg_array.h	/^    pod_bvector<T, S>::operator = (const pod_bvector<T, S>& v)$/;"	f	class:agg::pod_bvector
operator =	include/agg_array.h	/^    pod_vector<T>::operator = (const pod_vector<T>&v)$/;"	f	class:agg::pod_vector
operator =	include/agg_path_storage.h	/^    vertex_block_storage<T,S,P>::operator = (const vertex_block_storage<T,S,P>& v)$/;"	f	class:agg::vertex_block_storage
operator =	include/agg_scanline_storage_aa.h	/^        operator = (const scanline_cell_storage<T>& v)$/;"	f	class:agg::scanline_cell_storage
operator ==	include/agg_trans_affine.h	/^        bool operator == (const trans_affine& m) const$/;"	f	struct:agg::trans_affine
operator ==	include/agg_trans_perspective.h	/^        bool operator == (const trans_perspective& m) const$/;"	f	struct:agg::trans_perspective
operator []	examples/alpha_mask2.cpp	/^        color_type operator [] (unsigned v) const $/;"	f	struct:agg::gradient_linear_color
operator []	examples/compositing.cpp	/^        color_type operator [] (unsigned v) const $/;"	f	struct:agg::gradient_linear_color
operator []	examples/flash_rasterizer.cpp	/^        unsigned operator [] (unsigned i) const $/;"	f	class:agg::compound_shape
operator []	examples/flash_rasterizer2.cpp	/^        unsigned operator [] (unsigned i) const $/;"	f	class:agg::compound_shape
operator []	examples/gradients.cpp	/^    const color_type& operator [] (unsigned v) const$/;"	f	struct:color_function_profile
operator []	examples/multi_clip.cpp	/^        color_type operator [] (unsigned v) const $/;"	f	struct:agg::gradient_linear_color
operator []	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned operator [](unsigned idx)$/;"	f	class:agg::svg::path_renderer
operator []	include/agg_array.h	/^              T& operator [] (unsigned i)       { return m_array[i]; }$/;"	f	class:agg::pod_array
operator []	include/agg_array.h	/^              T& operator [] (unsigned i)       { return m_array[i]; }$/;"	f	class:agg::pod_array_adaptor
operator []	include/agg_array.h	/^              T& operator [] (unsigned i)       { return m_array[i]; }$/;"	f	class:agg::pod_auto_array
operator []	include/agg_array.h	/^              T& operator [] (unsigned i)       { return m_array[i]; }$/;"	f	class:agg::pod_auto_vector
operator []	include/agg_array.h	/^              T& operator [] (unsigned i)       { return m_array[i]; }$/;"	f	class:agg::pod_vector
operator []	include/agg_array.h	/^              value_type& operator [] (unsigned i)       { return m_array[m_start + i]; }$/;"	f	class:agg::range_adaptor
operator []	include/agg_array.h	/^        T& operator [] (unsigned i)$/;"	f	class:agg::pod_bvector
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const { return m_array[i]; }$/;"	f	class:agg::pod_array
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const { return m_array[i]; }$/;"	f	class:agg::pod_array_adaptor
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const { return m_array[i]; }$/;"	f	class:agg::pod_auto_array
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const { return m_array[i]; }$/;"	f	class:agg::pod_auto_vector
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const { return m_array[i]; }$/;"	f	class:agg::pod_vector
operator []	include/agg_array.h	/^        const T& operator [] (unsigned i) const$/;"	f	class:agg::pod_bvector
operator []	include/agg_array.h	/^        const value_type& operator [] (unsigned i) const { return m_array[m_start + i]; }$/;"	f	class:agg::range_adaptor
operator []	include/agg_curves.h	/^        double  operator [] (unsigned i) const { return cp[i]; }$/;"	f	struct:agg::curve4_points
operator []	include/agg_curves.h	/^        double& operator [] (unsigned i)       { return cp[i]; }$/;"	f	struct:agg::curve4_points
operator []	include/agg_gradient_lut.h	/^        const color_type& operator [] (unsigned i) const $/;"	f	class:agg::gradient_lut
operator []	include/agg_scanline_storage_aa.h	/^        T* operator [] (int idx)$/;"	f	class:agg::scanline_cell_storage
operator []	include/agg_scanline_storage_aa.h	/^        const T* operator [] (int idx) const$/;"	f	class:agg::scanline_cell_storage
operator []	include/agg_span_gradient.h	/^        color_type operator [] (unsigned v) const $/;"	f	struct:agg::gradient_linear_color
operator []	include/agg_span_gradient_alpha.h	/^        alpha_type operator [] (alpha_type x) const { return 255-x; }$/;"	f	struct:agg::gradient_alpha_one_munus_x_u8
operator []	include/agg_span_gradient_alpha.h	/^        alpha_type operator [] (alpha_type x) const { return x; }$/;"	f	struct:agg::gradient_alpha_x
operator []	include/agg_span_gradient_alpha.h	/^        alpha_type operator [] (alpha_type x) const { return x; }$/;"	f	struct:agg::gradient_alpha_x_u8
operator ~	include/agg_trans_affine.h	/^        trans_affine operator ~ () const$/;"	f	struct:agg::trans_affine
operator ~	include/agg_trans_perspective.h	/^        trans_perspective operator ~ () const$/;"	f	struct:agg::trans_perspective
order	examples/compositing.cpp	/^typedef agg::order_bgra order;$/;"	t	file:
order	examples/compositing2.cpp	/^typedef agg::order_bgra order;$/;"	t	file:
order	examples/mol_view.cpp	/^    unsigned order;$/;"	m	struct:bond_type	file:
order_abgr	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	s	namespace:agg
order_argb	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	s	namespace:agg
order_bgr	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	s	namespace:agg
order_bgra	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	s	namespace:agg
order_rgb	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	s	namespace:agg
order_rgba	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	s	namespace:agg
order_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::order_type order_type;$/;"	t	class:agg::image_accessor_clip
order_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::order_type order_type;$/;"	t	class:agg::image_accessor_clone
order_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::order_type order_type;$/;"	t	class:agg::image_accessor_no_clip
order_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::order_type order_type;$/;"	t	class:agg::image_accessor_wrap
order_type	include/agg_pixfmt_gray.h	/^        typedef int                               order_type; \/\/ A fake one$/;"	t	class:agg::pixfmt_alpha_blend_gray
order_type	include/agg_pixfmt_rgb.h	/^        typedef Order order_type;$/;"	t	class:agg::blender_rgb_gamma
order_type	include/agg_pixfmt_rgb.h	/^        typedef Order order_type;$/;"	t	struct:agg::blender_rgb
order_type	include/agg_pixfmt_rgb.h	/^        typedef Order order_type;$/;"	t	struct:agg::blender_rgb_pre
order_type	include/agg_pixfmt_rgb.h	/^        typedef typename blender_type::order_type order_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
order_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int                               order_type; \/\/ A fake one$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order  order_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order  order_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba_pre
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order  order_type;$/;"	t	struct:agg::comp_op_adaptor_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order  order_type;$/;"	t	struct:agg::comp_op_adaptor_rgba_pre
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::blender_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::blender_rgba_plain
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::blender_rgba_pre
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_clear
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_color_burn
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_color_dodge
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_contrast
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_darken
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_difference
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_dst
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_dst_atop
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_dst_in
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_dst_out
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_dst_over
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_exclusion
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_hard_light
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_invert
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_invert_rgb
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_lighten
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_minus
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_multiply
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_overlay
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_plus
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_screen
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_soft_light
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_src
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_src_atop
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_src_in
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_src_out
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_src_over
order_type	include/agg_pixfmt_rgba.h	/^        typedef Order order_type;$/;"	t	struct:agg::comp_op_rgba_xor
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename Blender::order_type order_type;$/;"	t	struct:agg::copy_or_blend_rgba_wrapper
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::order_type order_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::order_type order_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba_pre
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename BlenderPre::order_type order_type;$/;"	t	struct:agg::comp_adaptor_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename blender_type::order_type order_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
order_type	include/agg_pixfmt_rgba.h	/^        typedef typename blender_type::order_type order_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgb
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgb_nn
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_resample_rgb
order_type	include/agg_span_image_filter_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_resample_rgb_affine
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgba
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_filter_rgba_nn
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_resample_rgba
order_type	include/agg_span_image_filter_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_image_resample_rgba_affine
order_type	include/agg_span_pattern_rgb.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_pattern_rgb
order_type	include/agg_span_pattern_rgba.h	/^        typedef typename source_type::order_type order_type;$/;"	t	class:agg::span_pattern_rgba
org_color16	include/platform/mac/agg_mac_pmap.h	/^        org_color16 = 16,$/;"	e	enum:agg::org_e
org_color16	include/platform/win32/agg_win32_bmp.h	/^        org_color16 = 16,$/;"	e	enum:agg::org_e
org_color24	include/platform/mac/agg_mac_pmap.h	/^        org_color24 = 24,$/;"	e	enum:agg::org_e
org_color24	include/platform/win32/agg_win32_bmp.h	/^        org_color24 = 24,$/;"	e	enum:agg::org_e
org_color32	include/platform/mac/agg_mac_pmap.h	/^        org_color32 = 32$/;"	e	enum:agg::org_e
org_color32	include/platform/win32/agg_win32_bmp.h	/^        org_color32 = 32,$/;"	e	enum:agg::org_e
org_color48	include/platform/win32/agg_win32_bmp.h	/^        org_color48 = 48,$/;"	e	enum:agg::org_e
org_color64	include/platform/win32/agg_win32_bmp.h	/^        org_color64 = 64$/;"	e	enum:agg::org_e
org_e	include/platform/mac/agg_mac_pmap.h	/^    enum org_e$/;"	g	namespace:agg
org_e	include/platform/win32/agg_win32_bmp.h	/^    enum org_e$/;"	g	namespace:agg
org_mono8	include/platform/mac/agg_mac_pmap.h	/^        org_mono8   = 8,$/;"	e	enum:agg::org_e
org_mono8	include/platform/win32/agg_win32_bmp.h	/^        org_mono8   = 8,$/;"	e	enum:agg::org_e
orthogonal_quadrant	include/agg_line_aa_basics.h	/^        unsigned orthogonal_quadrant() const { return s_orthogonal_quadrant[octant]; }$/;"	f	struct:agg::line_parameters
out_vertices	include/agg_vcgen_contour.h	/^            out_vertices,$/;"	e	enum:agg::vcgen_contour::status_e
out_vertices	include/agg_vcgen_stroke.h	/^            out_vertices,$/;"	e	enum:agg::vcgen_stroke::status_e
outline	include/agg_vcgen_contour.h	/^            outline,$/;"	e	enum:agg::vcgen_contour::status_e
outline1	include/agg_vcgen_stroke.h	/^            outline1,$/;"	e	enum:agg::vcgen_stroke::status_e
outline2	include/agg_vcgen_stroke.h	/^            outline2,$/;"	e	enum:agg::vcgen_stroke::status_e
outline_aa_join_e	include/agg_rasterizer_outline_aa.h	/^    enum outline_aa_join_e$/;"	g	namespace:agg
outline_miter_accurate_join	include/agg_rasterizer_outline_aa.h	/^        outline_miter_accurate_join  \/\/-----outline_accurate_join$/;"	e	enum:agg::outline_aa_join_e
outline_miter_join	include/agg_rasterizer_outline_aa.h	/^        outline_miter_join,          \/\/-----outline_miter_join$/;"	e	enum:agg::outline_aa_join_e
outline_no_join	include/agg_rasterizer_outline_aa.h	/^        outline_no_join,             \/\/-----outline_no_join$/;"	e	enum:agg::outline_aa_join_e
outline_rasterizer	examples/graph_test.cpp	/^typedef agg::rasterizer_outline<primitives_renderer> outline_rasterizer;$/;"	t	file:
outline_round_join	include/agg_rasterizer_outline_aa.h	/^        outline_round_join,          \/\/-----outline_round_join$/;"	e	enum:agg::outline_aa_join_e
outlined_ellipse	include/agg_renderer_primitives.h	/^        void outlined_ellipse(int x, int y, int rx, int ry)$/;"	f	class:agg::renderer_primitives
outlined_rectangle	include/agg_renderer_primitives.h	/^        void outlined_rectangle(int x1, int y1, int x2, int y2) $/;"	f	class:agg::renderer_primitives
outp	gpc/gpc.c	/^  polygon_node       *outp[2];      \/* Output polygon \/ tristrip pointer *\/$/;"	m	struct:edge_shape	file:
p0	include/agg_image_filters.h	/^        double p0, p2, p3;$/;"	m	class:agg::image_filter_mitchell
p1	examples/gouraud_mesh.cpp	/^        unsigned p1, p2, p3;$/;"	m	struct:agg::mesh_triangle	file:
p1	examples/gouraud_mesh.cpp	/^        unsigned p1, p2;$/;"	m	struct:agg::mesh_edge	file:
p2	examples/gouraud_mesh.cpp	/^        unsigned p1, p2, p3;$/;"	m	struct:agg::mesh_triangle	file:
p2	examples/gouraud_mesh.cpp	/^        unsigned p1, p2;$/;"	m	struct:agg::mesh_edge	file:
p2	include/agg_image_filters.h	/^        double p0, p2, p3;$/;"	m	class:agg::image_filter_mitchell
p3	examples/gouraud_mesh.cpp	/^        unsigned p1, p2, p3;$/;"	m	struct:agg::mesh_triangle	file:
p3	include/agg_image_filters.h	/^        double p0, p2, p3;$/;"	m	class:agg::image_filter_mitchell
p_shape	gpc/gpc.c	/^typedef struct p_shape              \/* Internal contour \/ tristrip type  *\/$/;"	s	file:
pair_less	font_win32_tt/agg_font_win32_tt.cpp	/^    static bool pair_less(const KERNINGPAIR& v1, const KERNINGPAIR& v2)$/;"	f	namespace:agg
parl_to_parl	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::parl_to_parl(const double* src, $/;"	f	class:agg::trans_affine
parl_to_rect	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::parl_to_rect(const double* parl, $/;"	f	class:agg::trans_affine
parse	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse(const char* fname)$/;"	f	class:agg::svg::parser
parse_attr	examples/svg_viewer/agg_svg_parser.cpp	/^    bool parser::parse_attr(const char* name, const char* value)$/;"	f	class:agg::svg::parser
parse_attr	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_attr(const char** attr)$/;"	f	class:agg::svg::parser
parse_color	examples/svg_viewer/agg_svg_parser.cpp	/^    rgba8 parse_color(const char* str)$/;"	f	namespace:agg::svg
parse_double	examples/svg_viewer/agg_svg_parser.cpp	/^    double parse_double(const char* str)$/;"	f	namespace:agg::svg
parse_line	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_line(const char** attr)$/;"	f	class:agg::svg::parser
parse_lion	examples/alpha_mask.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/alpha_mask2.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/lion.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/lion_lens.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/lion_outline.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/multi_clip.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/parse_lion.cpp	/^unsigned parse_lion(agg::path_storage& path, agg::rgba8* colors, unsigned* path_idx)$/;"	f
parse_lion	examples/perspective.cpp	/^void parse_lion()$/;"	f
parse_lion	examples/simple_blur.cpp	/^void parse_lion()$/;"	f
parse_matrix	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_matrix(const char* str)$/;"	f	class:agg::svg::parser
parse_name_value	examples/svg_viewer/agg_svg_parser.cpp	/^    bool parser::parse_name_value(const char* nv_start, const char* nv_end)$/;"	f	class:agg::svg::parser
parse_number	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    bool path_tokenizer::parse_number()$/;"	f	class:agg::svg::path_tokenizer
parse_path	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_path(const char** attr)$/;"	f	class:agg::svg::parser
parse_path	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::parse_path(path_tokenizer& tok)$/;"	f	class:agg::svg::path_renderer
parse_poly	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_poly(const char** attr, bool close_flag)$/;"	f	class:agg::svg::parser
parse_rect	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_rect(const char** attr)$/;"	f	class:agg::svg::parser
parse_rotate	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_rotate(const char* str)$/;"	f	class:agg::svg::parser
parse_scale	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_scale(const char* str)$/;"	f	class:agg::svg::parser
parse_skew_x	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_skew_x(const char* str)$/;"	f	class:agg::svg::parser
parse_skew_y	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_skew_y(const char* str)$/;"	f	class:agg::svg::parser
parse_style	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_style(const char* str)$/;"	f	class:agg::svg::parser
parse_svg	examples/svg_viewer/svg_test.cpp	/^    void parse_svg(const char* fname)$/;"	f	class:the_application
parse_transform	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::parse_transform(const char* str)$/;"	f	class:agg::svg::parser
parse_transform_args	examples/svg_viewer/agg_svg_parser.cpp	/^    static unsigned parse_transform_args(const char* str, $/;"	f	namespace:agg::svg
parse_translate	examples/svg_viewer/agg_svg_parser.cpp	/^    unsigned parser::parse_translate(const char* str)$/;"	f	class:agg::svg::parser
parser	examples/svg_viewer/agg_svg_parser.cpp	/^    parser::parser(path_renderer& path) :$/;"	f	class:agg::svg::parser
parser	examples/svg_viewer/agg_svg_parser.h	/^    class parser$/;"	c	namespace:agg::svg
path_adaptor	include/agg_font_cache_manager.h	/^        path_adaptor_type&   path_adaptor()   { return m_path_adaptor;   }$/;"	f	class:agg::font_cache_manager
path_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef serialized_integer_path_adaptor<int16, 6>     path_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int16
path_adaptor_type	font_freetype/agg_font_freetype.h	/^        typedef serialized_integer_path_adaptor<int32, 6>     path_adaptor_type;$/;"	t	class:agg::font_engine_freetype_int32
path_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef serialized_integer_path_adaptor<int16, 6>     path_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int16
path_adaptor_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef serialized_integer_path_adaptor<int32, 6>     path_adaptor_type;$/;"	t	class:agg::font_engine_win32_tt_int32
path_adaptor_type	include/agg_font_cache_manager.h	/^        typedef typename font_engine_type::path_adaptor_type   path_adaptor_type;$/;"	t	class:agg::font_cache_manager
path_attributes	examples/idea.cpp	/^    path_attributes() {}$/;"	f	struct:path_attributes
path_attributes	examples/idea.cpp	/^    path_attributes(unsigned idx, $/;"	f	struct:path_attributes
path_attributes	examples/idea.cpp	/^struct path_attributes$/;"	s	file:
path_attributes	examples/svg_viewer/agg_svg_path_renderer.h	/^        path_attributes() :$/;"	f	struct:agg::svg::path_attributes
path_attributes	examples/svg_viewer/agg_svg_path_renderer.h	/^        path_attributes(const path_attributes& attr) :$/;"	f	struct:agg::svg::path_attributes
path_attributes	examples/svg_viewer/agg_svg_path_renderer.h	/^        path_attributes(const path_attributes& attr, unsigned idx) :$/;"	f	struct:agg::svg::path_attributes
path_attributes	examples/svg_viewer/agg_svg_path_renderer.h	/^    struct path_attributes$/;"	s	namespace:agg::svg
path_base	include/agg_path_storage.h	/^        path_base() : m_vertices(), m_iterator(0) {}$/;"	f	class:agg::path_base
path_base	include/agg_path_storage.h	/^    template<class VertexContainer> class path_base$/;"	c	namespace:agg
path_cmd	include/agg_path_storage_integer.h	/^        enum path_cmd$/;"	g	struct:agg::vertex_integer
path_cmd_catrom	include/agg_basics.h	/^        path_cmd_catrom   = 6,        \/\/----path_cmd_catrom$/;"	e	enum:agg::path_commands_e
path_cmd_curve3	include/agg_basics.h	/^        path_cmd_curve3   = 3,        \/\/----path_cmd_curve3  $/;"	e	enum:agg::path_commands_e
path_cmd_curve4	include/agg_basics.h	/^        path_cmd_curve4   = 4,        \/\/----path_cmd_curve4  $/;"	e	enum:agg::path_commands_e
path_cmd_curveN	include/agg_basics.h	/^        path_cmd_curveN   = 5,        \/\/----path_cmd_curveN$/;"	e	enum:agg::path_commands_e
path_cmd_end_poly	include/agg_basics.h	/^        path_cmd_end_poly = 0x0F,     \/\/----path_cmd_end_poly$/;"	e	enum:agg::path_commands_e
path_cmd_line_to	include/agg_basics.h	/^        path_cmd_line_to  = 2,        \/\/----path_cmd_line_to $/;"	e	enum:agg::path_commands_e
path_cmd_mask	include/agg_basics.h	/^        path_cmd_mask     = 0x0F      \/\/----path_cmd_mask    $/;"	e	enum:agg::path_commands_e
path_cmd_move_to	include/agg_basics.h	/^        path_cmd_move_to  = 1,        \/\/----path_cmd_move_to $/;"	e	enum:agg::path_commands_e
path_cmd_stop	include/agg_basics.h	/^        path_cmd_stop     = 0,        \/\/----path_cmd_stop    $/;"	e	enum:agg::path_commands_e
path_cmd_ubspline	include/agg_basics.h	/^        path_cmd_ubspline = 7,        \/\/----path_cmd_ubspline$/;"	e	enum:agg::path_commands_e
path_commands_e	include/agg_basics.h	/^    enum path_commands_e$/;"	g	namespace:agg
path_flags_ccw	include/agg_basics.h	/^        path_flags_ccw   = 0x10,      \/\/----path_flags_ccw  $/;"	e	enum:agg::path_flags_e
path_flags_close	include/agg_basics.h	/^        path_flags_close = 0x40,      \/\/----path_flags_close$/;"	e	enum:agg::path_flags_e
path_flags_cw	include/agg_basics.h	/^        path_flags_cw    = 0x20,      \/\/----path_flags_cw   $/;"	e	enum:agg::path_flags_e
path_flags_e	include/agg_basics.h	/^    enum path_flags_e$/;"	g	namespace:agg
path_flags_mask	include/agg_basics.h	/^        path_flags_mask  = 0xF0       \/\/----path_flags_mask $/;"	e	enum:agg::path_flags_e
path_flags_none	include/agg_basics.h	/^        path_flags_none  = 0,         \/\/----path_flags_none $/;"	e	enum:agg::path_flags_e
path_id	examples/flash_rasterizer.cpp	/^        unsigned path_id;$/;"	m	struct:agg::path_style	file:
path_id	examples/flash_rasterizer2.cpp	/^        unsigned path_id;$/;"	m	struct:agg::path_style	file:
path_length	include/agg_path_length.h	/^    double path_length(VertexSource& vs, unsigned path_id = 0)$/;"	f	namespace:agg
path_renderer	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    path_renderer::path_renderer() :$/;"	f	class:agg::svg::path_renderer
path_renderer	examples/svg_viewer/agg_svg_path_renderer.h	/^    class path_renderer$/;"	c	namespace:agg::svg
path_storage	include/agg_path_storage.h	/^    typedef path_base<vertex_block_storage<double> > path_storage;$/;"	t	namespace:agg
path_storage_integer	include/agg_path_storage_integer.h	/^        path_storage_integer() : m_storage(), m_vertex_idx(0), m_closed(true) {}$/;"	f	class:agg::path_storage_integer
path_storage_integer	include/agg_path_storage_integer.h	/^    template<class T, unsigned CoordShift=6> class path_storage_integer$/;"	c	namespace:agg
path_style	examples/flash_rasterizer.cpp	/^    struct path_style$/;"	s	namespace:agg	file:
path_style	examples/flash_rasterizer2.cpp	/^    struct path_style$/;"	s	namespace:agg	file:
path_tokenizer	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    path_tokenizer::path_tokenizer()$/;"	f	class:agg::svg::path_tokenizer
path_tokenizer	examples/svg_viewer/agg_svg_path_tokenizer.h	/^    class path_tokenizer$/;"	c	namespace:agg::svg
paths	examples/flash_rasterizer.cpp	/^        unsigned paths() const { return m_styles.size(); }$/;"	f	class:agg::compound_shape
paths	examples/flash_rasterizer2.cpp	/^        unsigned paths() const { return m_styles.size(); }$/;"	f	class:agg::compound_shape
pattern	include/agg_renderer_outline_image.h	/^        const pattern_type& pattern() const { return *m_pattern; }$/;"	f	class:agg::renderer_outline_image
pattern	include/agg_renderer_outline_image.h	/^        void pattern(const pattern_type& p) { m_pattern = &p; }$/;"	f	class:agg::renderer_outline_image
pattern_end	include/agg_renderer_outline_image.h	/^        int  pattern_end() const { return m_start + m_di.len(); }$/;"	f	class:agg::line_interpolator_image
pattern_filter	examples/rasterizers2.cpp	/^    typedef agg::pattern_filter_bilinear_rgba8 pattern_filter;$/;"	t	class:the_application	file:
pattern_filter_bilinear_rgba	include/agg_pattern_filters_rgba.h	/^    template<class ColorT> struct pattern_filter_bilinear_rgba$/;"	s	namespace:agg
pattern_filter_bilinear_rgba16	include/agg_pattern_filters_rgba.h	/^    typedef pattern_filter_bilinear_rgba<rgba16> pattern_filter_bilinear_rgba16;$/;"	t	namespace:agg
pattern_filter_bilinear_rgba8	include/agg_pattern_filters_rgba.h	/^    typedef pattern_filter_bilinear_rgba<rgba8>  pattern_filter_bilinear_rgba8;$/;"	t	namespace:agg
pattern_filter_nn	include/agg_pattern_filters_rgba.h	/^    template<class ColorT> struct pattern_filter_nn$/;"	s	namespace:agg
pattern_filter_nn_rgba16	include/agg_pattern_filters_rgba.h	/^    typedef pattern_filter_nn<rgba16> pattern_filter_nn_rgba16;$/;"	t	namespace:agg
pattern_filter_nn_rgba8	include/agg_pattern_filters_rgba.h	/^    typedef pattern_filter_nn<rgba8>  pattern_filter_nn_rgba8;$/;"	t	namespace:agg
pattern_pixmap_argb32	examples/rasterizers2.cpp	/^        pattern_pixmap_argb32(const int32u* pixmap) : m_pixmap(pixmap) {}$/;"	f	class:agg::pattern_pixmap_argb32
pattern_pixmap_argb32	examples/rasterizers2.cpp	/^    class pattern_pixmap_argb32$/;"	c	namespace:agg	file:
pattern_src_brightness_to_alpha_rgba8	examples/line_patterns.cpp	/^    pattern_src_brightness_to_alpha_rgba8(agg::rendering_buffer& rb) : $/;"	f	class:pattern_src_brightness_to_alpha_rgba8
pattern_src_brightness_to_alpha_rgba8	examples/line_patterns.cpp	/^class pattern_src_brightness_to_alpha_rgba8$/;"	c	file:
pattern_src_brightness_to_alpha_rgba8	examples/line_patterns_clip.cpp	/^    pattern_src_brightness_to_alpha_rgba8(agg::rendering_buffer& rb) : $/;"	f	class:pattern_src_brightness_to_alpha_rgba8
pattern_src_brightness_to_alpha_rgba8	examples/line_patterns_clip.cpp	/^class pattern_src_brightness_to_alpha_rgba8$/;"	c	file:
pattern_type	include/agg_renderer_outline_image.h	/^        typedef ImagePattern pattern_type;$/;"	t	class:agg::renderer_outline_image
pattern_width	include/agg_renderer_outline_image.h	/^        int pattern_width() const { return m_pattern->pattern_width(); }$/;"	f	class:agg::renderer_outline_image
pattern_width	include/agg_renderer_outline_image.h	/^        int pattern_width() const { return m_width_hr; }$/;"	f	class:agg::line_image_pattern
perceive_polygon_orientation	include/agg_path_storage.h	/^    unsigned path_base<VC>::perceive_polygon_orientation(unsigned start,$/;"	f	class:agg::path_base
perform_rendering	examples/alpha_mask3.cpp	/^    void perform_rendering(VertexSource& vs)$/;"	f	class:the_application
perform_rendering	examples/gpc_test.cpp	/^    void perform_rendering(Scanline& sl, Ras& ras, Ren& ren, Gpc& gpc)$/;"	f	class:the_application
period	examples/distortions.cpp	/^    void period(double v)           { m_period = v; }$/;"	f	class:periodic_distortion
periodic_distortion	examples/distortions.cpp	/^    periodic_distortion() :$/;"	f	class:periodic_distortion
periodic_distortion	examples/distortions.cpp	/^class periodic_distortion$/;"	c	file:
periods	examples/raster_text.cpp	/^    void periods(double p) { m_periods = p * agg::pi * 2.0; }$/;"	f	class:gradient_sine_repeat_adaptor
perv_glyph	include/agg_font_cache_manager.h	/^        const glyph_cache* perv_glyph() const { return m_prev_glyph; }$/;"	f	class:agg::font_cache_manager
phase	examples/distortions.cpp	/^    void phase(double v)            { m_phase = v; }$/;"	f	class:periodic_distortion
pi	include/agg_basics.h	/^    const double pi = 3.14159265358979323846;$/;"	m	namespace:agg
pie	include/agg_renderer_outline_aa.h	/^        void pie(int xc, int yc, int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_outline_aa
pie	include/agg_renderer_outline_image.h	/^        void pie(int, int, int, int, int, int)$/;"	f	class:agg::renderer_outline_image
pie_hline	include/agg_renderer_outline_aa.h	/^        void pie_hline(int xc, int yc, int xp1, int yp1, int xp2, int yp2, $/;"	f	class:agg::renderer_outline_aa
pitch_and_family	font_win32_tt/agg_font_win32_tt.h	/^        DWORD       pitch_and_family() const { return m_pitch_and_family; }$/;"	f	class:agg::font_engine_win32_tt_base
pitch_and_family	font_win32_tt/agg_font_win32_tt.h	/^        void pitch_and_family(DWORD p){ m_pitch_and_family = p; }$/;"	f	class:agg::font_engine_win32_tt_base
pivot	include/agg_simul_eq.h	/^        static int pivot(double m[Rows][Cols], unsigned row)$/;"	f	struct:agg::matrix_pivot
pix_fmt	examples/polymorphic_renderer.cpp	/^static int pix_fmt = agg::pix_format_rgb555;$/;"	v	file:
pix_format	examples/alpha_gradient.cpp	23;"	d	file:
pix_format	examples/compositing.cpp	25;"	d	file:
pix_format	examples/compositing2.cpp	22;"	d	file:
pix_format	examples/freetype_test.cpp	24;"	d	file:
pix_format	examples/gamma_tuner.cpp	14;"	d	file:
pix_format	examples/gradient_focal.cpp	18;"	d	file:
pix_format	examples/image_filters.cpp	28;"	d	file:
pix_format	examples/image_resample.cpp	38;"	d	file:
pix_format	examples/pattern_perspective.cpp	27;"	d	file:
pix_format	examples/pattern_resample.cpp	38;"	d	file:
pix_format	examples/pixel_formats.h	108;"	d
pix_format	examples/pixel_formats.h	117;"	d
pix_format	examples/pixel_formats.h	126;"	d
pix_format	examples/pixel_formats.h	135;"	d
pix_format	examples/pixel_formats.h	143;"	d
pix_format	examples/pixel_formats.h	151;"	d
pix_format	examples/pixel_formats.h	159;"	d
pix_format	examples/pixel_formats.h	15;"	d
pix_format	examples/pixel_formats.h	167;"	d
pix_format	examples/pixel_formats.h	175;"	d
pix_format	examples/pixel_formats.h	23;"	d
pix_format	examples/pixel_formats.h	33;"	d
pix_format	examples/pixel_formats.h	43;"	d
pix_format	examples/pixel_formats.h	53;"	d
pix_format	examples/pixel_formats.h	63;"	d
pix_format	examples/pixel_formats.h	72;"	d
pix_format	examples/pixel_formats.h	7;"	d
pix_format	examples/pixel_formats.h	81;"	d
pix_format	examples/pixel_formats.h	90;"	d
pix_format	examples/pixel_formats.h	99;"	d
pix_format_abgr32	include/platform/agg_platform_support.h	/^        pix_format_abgr32,         \/\/ A-B-G-R, one byte per color component$/;"	e	enum:agg::pix_format_e
pix_format_abgr64	include/platform/agg_platform_support.h	/^        pix_format_abgr64,         \/\/ A-B-G-R, one byte per color component$/;"	e	enum:agg::pix_format_e
pix_format_argb32	include/platform/agg_platform_support.h	/^        pix_format_argb32,         \/\/ A-R-G-B, native MAC format$/;"	e	enum:agg::pix_format_e
pix_format_argb64	include/platform/agg_platform_support.h	/^        pix_format_argb64,         \/\/ A-R-G-B, native MAC format$/;"	e	enum:agg::pix_format_e
pix_format_bgr24	include/platform/agg_platform_support.h	/^        pix_format_bgr24,          \/\/ B-G-R, native win32 BMP format.$/;"	e	enum:agg::pix_format_e
pix_format_bgr48	include/platform/agg_platform_support.h	/^        pix_format_bgr48,          \/\/ B-G-R, native win32 BMP format.$/;"	e	enum:agg::pix_format_e
pix_format_bgrAAA	include/platform/agg_platform_support.h	/^        pix_format_bgrAAA,         \/\/ 30 bit bgr. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_bgrABB	include/platform/agg_platform_support.h	/^        pix_format_bgrABB,         \/\/ 32 bit bgr. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_bgra32	include/platform/agg_platform_support.h	/^        pix_format_bgra32,         \/\/ B-G-R-A, native win32 BMP format$/;"	e	enum:agg::pix_format_e
pix_format_bgra64	include/platform/agg_platform_support.h	/^        pix_format_bgra64,         \/\/ B-G-R-A, native win32 BMP format$/;"	e	enum:agg::pix_format_e
pix_format_bw	include/platform/agg_platform_support.h	/^        pix_format_bw,             \/\/ 1 bit per color B\/W$/;"	e	enum:agg::pix_format_e
pix_format_e	include/platform/agg_platform_support.h	/^    enum pix_format_e$/;"	g	namespace:agg
pix_format_gray16	include/platform/agg_platform_support.h	/^        pix_format_gray16,         \/\/ Simple 65535 level grayscale$/;"	e	enum:agg::pix_format_e
pix_format_gray8	include/platform/agg_platform_support.h	/^        pix_format_gray8,          \/\/ Simple 256 level grayscale$/;"	e	enum:agg::pix_format_e
pix_format_rgb24	include/platform/agg_platform_support.h	/^        pix_format_rgb24,          \/\/ R-G-B, one byte per color component$/;"	e	enum:agg::pix_format_e
pix_format_rgb48	include/platform/agg_platform_support.h	/^        pix_format_rgb48,          \/\/ R-G-B, 16 bits per color component$/;"	e	enum:agg::pix_format_e
pix_format_rgb555	include/platform/agg_platform_support.h	/^        pix_format_rgb555,         \/\/ 15 bit rgb. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_rgb565	include/platform/agg_platform_support.h	/^        pix_format_rgb565,         \/\/ 16 bit rgb. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_rgbAAA	include/platform/agg_platform_support.h	/^        pix_format_rgbAAA,         \/\/ 30 bit rgb. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_rgbBBA	include/platform/agg_platform_support.h	/^        pix_format_rgbBBA,         \/\/ 32 bit rgb. Depends on the byte ordering!$/;"	e	enum:agg::pix_format_e
pix_format_rgba32	include/platform/agg_platform_support.h	/^        pix_format_rgba32,         \/\/ R-G-B-A, one byte per color component$/;"	e	enum:agg::pix_format_e
pix_format_rgba64	include/platform/agg_platform_support.h	/^        pix_format_rgba64,         \/\/ R-G-B-A, 16 bits byte per color component$/;"	e	enum:agg::pix_format_e
pix_format_to_color_space	src/platform/BeOS/agg_platform_support.cpp	/^pix_format_to_color_space(agg::pix_format_e format)$/;"	f	file:
pix_format_undefined	include/platform/agg_platform_support.h	/^        pix_format_undefined = 0,  \/\/ By default. No conversions are applied $/;"	e	enum:agg::pix_format_e
pix_offset	include/agg_pixfmt_gray.h	/^            pix_offset = Offset$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
pix_ptr	include/agg_pixfmt_gray.h	/^        const int8u* pix_ptr(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_gray
pix_ptr	include/agg_pixfmt_gray.h	/^        int8u* pix_ptr(int x, int y)$/;"	f	class:agg::pixfmt_alpha_blend_gray
pix_ptr	include/agg_pixfmt_rgb.h	/^        AGG_INLINE const int8u* pix_ptr(int x, int y) const $/;"	f	class:agg::pixfmt_alpha_blend_rgb
pix_ptr	include/agg_pixfmt_rgb.h	/^        AGG_INLINE int8u* pix_ptr(int x, int y) $/;"	f	class:agg::pixfmt_alpha_blend_rgb
pix_ptr	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE const int8u* pix_ptr(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
pix_ptr	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE int8u* pix_ptr(int x, int y)$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
pix_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE const int8u* pix_ptr(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_rgba
pix_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE const int8u* pix_ptr(int x, int y) const$/;"	f	class:agg::pixfmt_custom_blend_rgba
pix_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE int8u* pix_ptr(int x, int y)$/;"	f	class:agg::pixfmt_alpha_blend_rgba
pix_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE int8u* pix_ptr(int x, int y)$/;"	f	class:agg::pixfmt_custom_blend_rgba
pix_step	include/agg_pixfmt_gray.h	/^            pix_step   = Step,$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
pix_width	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	e	enum:agg::image_accessor_clip::pix_width_e
pix_width	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	e	enum:agg::image_accessor_clone::pix_width_e
pix_width	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	e	enum:agg::image_accessor_no_clip::pix_width_e
pix_width	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	e	enum:agg::image_accessor_wrap::pix_width_e
pix_width	include/agg_pixfmt_gray.h	/^            pix_width  = sizeof(value_type),$/;"	e	enum:agg::pixfmt_alpha_blend_gray::base_scale_e
pix_width	include/agg_pixfmt_rgb.h	/^            pix_width  = sizeof(value_type) * 3$/;"	e	enum:agg::pixfmt_alpha_blend_rgb::base_scale_e
pix_width	include/agg_pixfmt_rgb_packed.h	/^            pix_width  = sizeof(pixel_type)$/;"	e	enum:agg::pixfmt_alpha_blend_rgb_packed::base_scale_e
pix_width	include/agg_pixfmt_rgba.h	/^            pix_width  = sizeof(pixel_type)$/;"	e	enum:agg::pixfmt_alpha_blend_rgba::base_scale_e
pix_width	include/agg_pixfmt_rgba.h	/^            pix_width  = sizeof(value_type) * 4 $/;"	e	enum:agg::pixfmt_custom_blend_rgba::base_scale_e
pix_width_e	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	g	class:agg::image_accessor_clip
pix_width_e	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	g	class:agg::image_accessor_clone
pix_width_e	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	g	class:agg::image_accessor_no_clip
pix_width_e	include/agg_image_accessors.h	/^        enum pix_width_e { pix_width = pixfmt_type::pix_width };$/;"	g	class:agg::image_accessor_wrap
pixel	examples/line_patterns.cpp	/^    agg::rgba8 pixel(int x, int y) const$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
pixel	examples/line_patterns_clip.cpp	/^    agg::rgba8 pixel(int x, int y) const$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
pixel	examples/rasterizers2.cpp	/^        rgba8 pixel(int x, int y) const$/;"	f	class:agg::pattern_pixmap_argb32
pixel	include/agg_alpha_mask_u8.h	/^        cover_type pixel(int x, int y) const$/;"	f	class:agg::alpha_mask_u8
pixel	include/agg_alpha_mask_u8.h	/^        cover_type pixel(int x, int y) const$/;"	f	class:agg::amask_no_clip_u8
pixel	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* pixel() const$/;"	f	class:agg::image_accessor_clip
pixel	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* pixel() const$/;"	f	class:agg::image_accessor_clone
pixel	include/agg_pixfmt_amask_adaptor.h	/^        color_type pixel(int x, int y)$/;"	f	class:agg::pixfmt_amask_adaptor
pixel	include/agg_pixfmt_gray.h	/^        AGG_INLINE color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_gray
pixel	include/agg_pixfmt_rgb.h	/^        AGG_INLINE color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_rgb
pixel	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
pixel	include/agg_pixfmt_rgba.h	/^        AGG_INLINE color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_alpha_blend_rgba
pixel	include/agg_pixfmt_rgba.h	/^        color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_custom_blend_rgba
pixel	include/agg_pixfmt_transposer.h	/^        AGG_INLINE color_type pixel(int x, int y) const$/;"	f	class:agg::pixfmt_transposer
pixel	include/agg_renderer_base.h	/^        color_type pixel(int x, int y) const$/;"	f	class:agg::renderer_base
pixel	include/agg_renderer_markers.h	/^        void pixel(int x, int y, int)$/;"	f	class:agg::renderer_markers
pixel	include/agg_renderer_mclip.h	/^        color_type pixel(int x, int y) const$/;"	f	class:agg::renderer_mclip
pixel	include/agg_renderer_outline_image.h	/^        color_type pixel(int x, int y) const $/;"	f	class:agg::line_image_scale
pixel	include/agg_renderer_outline_image.h	/^        void pixel(color_type* p, int x, int y) const$/;"	f	class:agg::line_image_pattern
pixel	include/agg_renderer_outline_image.h	/^        void pixel(color_type* p, int x, int y) const$/;"	f	class:agg::line_image_pattern_pow2
pixel	include/agg_renderer_outline_image.h	/^        void pixel(color_type* p, int x, int y) const$/;"	f	class:agg::renderer_outline_image
pixel32_type	include/agg_pixfmt_rgba.h	/^    typedef int32u pixel32_type;$/;"	t	namespace:agg
pixel64_type	include/agg_pixfmt_rgba.h	/^    struct  pixel64_type { int16u c[4]; };$/;"	s	namespace:agg
pixel_high_res	include/agg_pattern_filters_rgba.h	/^        static AGG_INLINE void pixel_high_res(color_type const* const* buf, $/;"	f	struct:agg::pattern_filter_bilinear_rgba
pixel_high_res	include/agg_pattern_filters_rgba.h	/^        static void AGG_INLINE pixel_high_res(color_type const* const* buf, $/;"	f	struct:agg::pattern_filter_nn
pixel_low_res	include/agg_pattern_filters_rgba.h	/^        static AGG_INLINE void pixel_low_res(color_type const* const* buf, $/;"	f	struct:agg::pattern_filter_bilinear_rgba
pixel_low_res	include/agg_pattern_filters_rgba.h	/^        static void AGG_INLINE pixel_low_res(color_type const* const* buf, $/;"	f	struct:agg::pattern_filter_nn
pixel_map	include/platform/mac/agg_mac_pmap.h	/^    class pixel_map$/;"	c	namespace:agg
pixel_map	include/platform/win32/agg_win32_bmp.h	/^    class pixel_map$/;"	c	namespace:agg
pixel_map	src/platform/mac/agg_mac_pmap.cpp	/^    pixel_map::pixel_map() :$/;"	f	class:agg::pixel_map
pixel_map	src/platform/win32/agg_win32_bmp.cpp	/^    pixel_map::pixel_map() :$/;"	f	class:agg::pixel_map
pixel_type	examples/compositing.cpp	/^typedef agg::int32u pixel_type;$/;"	t	file:
pixel_type	examples/compositing2.cpp	/^typedef agg::pixel32_type pixel_type;$/;"	t	file:
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	class:agg::blender_rgb555_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	class:agg::blender_rgb565_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	struct:agg::blender_rgb555
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	struct:agg::blender_rgb555_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	struct:agg::blender_rgb565
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int16u pixel_type;$/;"	t	struct:agg::blender_rgb565_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	class:agg::blender_bgrAAA_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	class:agg::blender_bgrABB_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	class:agg::blender_rgbAAA_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	class:agg::blender_rgbBBA_gamma
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_bgrAAA
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_bgrAAA_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_bgrABB
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_bgrABB_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_rgbAAA
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_rgbAAA_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_rgbBBA
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef int32u pixel_type;$/;"	t	struct:agg::blender_rgbBBA_pre
pixel_type	include/agg_pixfmt_rgb_packed.h	/^        typedef typename blender_type::pixel_type pixel_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
pixel_type	include/agg_pixfmt_rgba.h	/^        typedef PixelT   pixel_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
pixfmt	examples/bezier_div.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/flash_rasterizer.cpp	/^typedef agg::pixfmt_bgra32_pre pixfmt;$/;"	t	file:
pixfmt	examples/flash_rasterizer2.cpp	/^typedef agg::pixfmt_bgra32_pre pixfmt;$/;"	t	file:
pixfmt	examples/gamma_tuner.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/gouraud_mesh.cpp	/^typedef agg::pixfmt_bgra32_pre pixfmt;$/;"	t	file:
pixfmt	examples/gradient_focal.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/graph_test.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/image_filters.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/image_filters2.cpp	/^    typedef agg::pixfmt_bgra32 pixfmt;$/;"	t	class:the_application	file:
pixfmt	examples/image_perspective.cpp	/^    typedef agg::pixfmt_bgra32                             pixfmt;$/;"	t	class:the_application	file:
pixfmt	examples/image_resample.cpp	/^typedef agg::pixfmt_bgra32     pixfmt;$/;"	t	file:
pixfmt	examples/line_patterns.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/line_patterns_clip.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/pattern_perspective.cpp	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	file:
pixfmt	examples/pattern_resample.cpp	/^typedef agg::pixfmt_bgr24     pixfmt;$/;"	t	file:
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_abgr32 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_abgr64 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_argb32 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_argb64 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgr24 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgr48 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgrAAA pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgrABB pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgra32 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_bgra64 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_gray16 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_gray8 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb24 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb48 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb555 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb565 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgbAAA pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgbBBA pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgba32 pixfmt;$/;"	t
pixfmt	examples/pixel_formats.h	/^typedef agg::pixfmt_rgba64 pixfmt;$/;"	t
pixfmt	examples/raster_text.cpp	/^    typedef agg::pixfmt_bgr24 pixfmt;$/;"	t	class:the_application	file:
pixfmt_abgr32	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_abgr32, rendering_buffer, pixel32_type> pixfmt_abgr32; \/\/----pixfmt_abgr32$/;"	t	namespace:agg
pixfmt_abgr32_plain	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_abgr32_plain, rendering_buffer, pixel32_type> pixfmt_abgr32_plain; \/\/----pixfmt_abgr32_plain$/;"	t	namespace:agg
pixfmt_abgr32_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_abgr32_pre, rendering_buffer, pixel32_type> pixfmt_abgr32_pre; \/\/----pixfmt_abgr32_pre$/;"	t	namespace:agg
pixfmt_abgr64	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_abgr64, rendering_buffer, pixel64_type> pixfmt_abgr64; \/\/----pixfmt_abgr64$/;"	t	namespace:agg
pixfmt_abgr64_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_abgr64_pre, rendering_buffer, pixel64_type> pixfmt_abgr64_pre; \/\/----pixfmt_abgr64_pre$/;"	t	namespace:agg
pixfmt_alpha_blend_gray	include/agg_pixfmt_gray.h	/^        explicit pixfmt_alpha_blend_gray(rbuf_type& rb) :$/;"	f	class:agg::pixfmt_alpha_blend_gray
pixfmt_alpha_blend_gray	include/agg_pixfmt_gray.h	/^    class pixfmt_alpha_blend_gray$/;"	c	namespace:agg
pixfmt_alpha_blend_rgb	include/agg_pixfmt_rgb.h	/^        explicit pixfmt_alpha_blend_rgb(rbuf_type& rb) :$/;"	f	class:agg::pixfmt_alpha_blend_rgb
pixfmt_alpha_blend_rgb	include/agg_pixfmt_rgb.h	/^    template<class Blender, class RenBuf> class pixfmt_alpha_blend_rgb$/;"	c	namespace:agg
pixfmt_alpha_blend_rgb_packed	include/agg_pixfmt_rgb_packed.h	/^        explicit pixfmt_alpha_blend_rgb_packed(rbuf_type& rb) : m_rbuf(&rb) {}$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
pixfmt_alpha_blend_rgb_packed	include/agg_pixfmt_rgb_packed.h	/^    template<class Blender,  class RenBuf> class pixfmt_alpha_blend_rgb_packed$/;"	c	namespace:agg
pixfmt_alpha_blend_rgba	include/agg_pixfmt_rgba.h	/^        explicit pixfmt_alpha_blend_rgba(rbuf_type& rb) : m_rbuf(&rb) {}$/;"	f	class:agg::pixfmt_alpha_blend_rgba
pixfmt_alpha_blend_rgba	include/agg_pixfmt_rgba.h	/^        pixfmt_alpha_blend_rgba() : m_rbuf(0) {}$/;"	f	class:agg::pixfmt_alpha_blend_rgba
pixfmt_alpha_blend_rgba	include/agg_pixfmt_rgba.h	/^    class pixfmt_alpha_blend_rgba$/;"	c	namespace:agg
pixfmt_amask_adaptor	include/agg_pixfmt_amask_adaptor.h	/^        pixfmt_amask_adaptor(pixfmt_type& pixf, const amask_type& mask) :$/;"	f	class:agg::pixfmt_amask_adaptor
pixfmt_amask_adaptor	include/agg_pixfmt_amask_adaptor.h	/^    template<class PixFmt, class AlphaMask> class pixfmt_amask_adaptor$/;"	c	namespace:agg
pixfmt_argb32	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_argb32, rendering_buffer, pixel32_type> pixfmt_argb32; \/\/----pixfmt_argb32$/;"	t	namespace:agg
pixfmt_argb32_plain	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_argb32_plain, rendering_buffer, pixel32_type> pixfmt_argb32_plain; \/\/----pixfmt_argb32_plain$/;"	t	namespace:agg
pixfmt_argb32_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_argb32_pre, rendering_buffer, pixel32_type> pixfmt_argb32_pre; \/\/----pixfmt_argb32_pre$/;"	t	namespace:agg
pixfmt_argb64	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_argb64, rendering_buffer, pixel64_type> pixfmt_argb64; \/\/----pixfmt_argb64$/;"	t	namespace:agg
pixfmt_argb64_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_argb64_pre, rendering_buffer, pixel64_type> pixfmt_argb64_pre; \/\/----pixfmt_argb64_pre$/;"	t	namespace:agg
pixfmt_bgr24	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb<rgba8,  order_bgr>, rendering_buffer> pixfmt_bgr24;    \/\/----pixfmt_bgr24$/;"	t	namespace:agg
pixfmt_bgr24_gamma	include/agg_pixfmt_rgb.h	/^        pixfmt_bgr24_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_bgr24_gamma
pixfmt_bgr24_gamma	include/agg_pixfmt_rgb.h	/^    template<class Gamma> class pixfmt_bgr24_gamma : $/;"	c	namespace:agg
pixfmt_bgr24_pre	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb_pre<rgba8,  order_bgr>, rendering_buffer> pixfmt_bgr24_pre; \/\/----pixfmt_bgr24_pre$/;"	t	namespace:agg
pixfmt_bgr48	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb<rgba16, order_bgr>, rendering_buffer> pixfmt_bgr48;    \/\/----pixfmt_bgr48$/;"	t	namespace:agg
pixfmt_bgr48_gamma	include/agg_pixfmt_rgb.h	/^        pixfmt_bgr48_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_bgr48_gamma
pixfmt_bgr48_gamma	include/agg_pixfmt_rgb.h	/^    template<class Gamma> class pixfmt_bgr48_gamma : $/;"	c	namespace:agg
pixfmt_bgr48_pre	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb_pre<rgba16, order_bgr>, rendering_buffer> pixfmt_bgr48_pre; \/\/----pixfmt_bgr48_pre$/;"	t	namespace:agg
pixfmt_bgrAAA	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_bgrAAA, rendering_buffer> pixfmt_bgrAAA; \/\/----pixfmt_bgrAAA$/;"	t	namespace:agg
pixfmt_bgrAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_bgrAAA_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_bgrAAA_gamma
pixfmt_bgrAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_bgrAAA_gamma : $/;"	c	namespace:agg
pixfmt_bgrAAA_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_bgrAAA_pre, rendering_buffer> pixfmt_bgrAAA_pre; \/\/----pixfmt_bgrAAA_pre$/;"	t	namespace:agg
pixfmt_bgrABB	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_bgrABB, rendering_buffer> pixfmt_bgrABB; \/\/----pixfmt_bgrABB$/;"	t	namespace:agg
pixfmt_bgrABB_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_bgrABB_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_bgrABB_gamma
pixfmt_bgrABB_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_bgrABB_gamma : $/;"	c	namespace:agg
pixfmt_bgrABB_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_bgrABB_pre, rendering_buffer> pixfmt_bgrABB_pre; \/\/----pixfmt_bgrABB_pre$/;"	t	namespace:agg
pixfmt_bgra32	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_bgra32, rendering_buffer, pixel32_type> pixfmt_bgra32; \/\/----pixfmt_bgra32$/;"	t	namespace:agg
pixfmt_bgra32_plain	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_bgra32_plain, rendering_buffer, pixel32_type> pixfmt_bgra32_plain; \/\/----pixfmt_bgra32_plain$/;"	t	namespace:agg
pixfmt_bgra32_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_bgra32_pre, rendering_buffer, pixel32_type> pixfmt_bgra32_pre; \/\/----pixfmt_bgra32_pre$/;"	t	namespace:agg
pixfmt_bgra64	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_bgra64, rendering_buffer, pixel64_type> pixfmt_bgra64; \/\/----pixfmt_bgra64$/;"	t	namespace:agg
pixfmt_bgra64_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_bgra64_pre, rendering_buffer, pixel64_type> pixfmt_bgra64_pre; \/\/----pixfmt_bgra64_pre$/;"	t	namespace:agg
pixfmt_custom_blend_rgba	include/agg_pixfmt_rgba.h	/^        explicit pixfmt_custom_blend_rgba(rbuf_type& rb, unsigned comp_op=3) : $/;"	f	class:agg::pixfmt_custom_blend_rgba
pixfmt_custom_blend_rgba	include/agg_pixfmt_rgba.h	/^        pixfmt_custom_blend_rgba() : m_rbuf(0), m_comp_op(3) {}$/;"	f	class:agg::pixfmt_custom_blend_rgba
pixfmt_custom_blend_rgba	include/agg_pixfmt_rgba.h	/^    template<class Blender, class RenBuf> class pixfmt_custom_blend_rgba$/;"	c	namespace:agg
pixfmt_gamma	examples/gamma_tuner.cpp	17;"	d	file:
pixfmt_gamma	examples/pixel_formats.h	26;"	d
pixfmt_gamma	examples/pixel_formats.h	36;"	d
pixfmt_gamma	examples/pixel_formats.h	46;"	d
pixfmt_gamma	examples/pixel_formats.h	56;"	d
pixfmt_gray16	include/agg_pixfmt_gray.h	/^    typedef pixfmt_alpha_blend_gray<blender_gray16,     rendering_buffer> pixfmt_gray16;     \/\/----pixfmt_gray16$/;"	t	namespace:agg
pixfmt_gray16_pre	include/agg_pixfmt_gray.h	/^    typedef pixfmt_alpha_blend_gray<blender_gray16_pre, rendering_buffer> pixfmt_gray16_pre; \/\/----pixfmt_gray16_pre$/;"	t	namespace:agg
pixfmt_gray8	include/agg_pixfmt_gray.h	/^    typedef pixfmt_alpha_blend_gray<blender_gray8,      rendering_buffer> pixfmt_gray8;      \/\/----pixfmt_gray8$/;"	t	namespace:agg
pixfmt_gray8_pre	include/agg_pixfmt_gray.h	/^    typedef pixfmt_alpha_blend_gray<blender_gray8_pre,  rendering_buffer> pixfmt_gray8_pre;  \/\/----pixfmt_gray8_pre$/;"	t	namespace:agg
pixfmt_pre	examples/gamma_tuner.cpp	/^typedef agg::pixfmt_bgr24_pre pixfmt_pre;$/;"	t	file:
pixfmt_pre	examples/image_filters.cpp	/^typedef agg::pixfmt_bgr24_pre pixfmt_pre;$/;"	t	file:
pixfmt_pre	examples/image_filters2.cpp	/^    typedef agg::pixfmt_bgra32_pre pixfmt_pre;$/;"	t	class:the_application	file:
pixfmt_pre	examples/image_perspective.cpp	/^    typedef agg::pixfmt_bgra32_pre         pixfmt_pre;$/;"	t	class:the_application	file:
pixfmt_pre	examples/image_resample.cpp	/^typedef agg::pixfmt_bgra32_pre pixfmt_pre;$/;"	t	file:
pixfmt_pre	examples/pattern_perspective.cpp	/^typedef agg::pixfmt_bgr24_pre pixfmt_pre;$/;"	t	file:
pixfmt_pre	examples/pattern_resample.cpp	/^typedef agg::pixfmt_bgr24_pre pixfmt_pre;$/;"	t	file:
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_abgr32_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_abgr64_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_argb32_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_argb64_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgr24_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgr48_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgrAAA_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgrABB_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgra32_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_bgra64_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_gray16_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_gray8_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb24_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb48_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb555_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgb565_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgbAAA_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgbBBA_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgba32_pre pixfmt_pre;$/;"	t
pixfmt_pre	examples/pixel_formats.h	/^typedef agg::pixfmt_rgba64_pre pixfmt_pre;$/;"	t
pixfmt_rgb24	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb<rgba8,  order_rgb>, rendering_buffer> pixfmt_rgb24;    \/\/----pixfmt_rgb24$/;"	t	namespace:agg
pixfmt_rgb24_gamma	include/agg_pixfmt_rgb.h	/^        pixfmt_rgb24_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgb24_gamma
pixfmt_rgb24_gamma	include/agg_pixfmt_rgb.h	/^    template<class Gamma> class pixfmt_rgb24_gamma : $/;"	c	namespace:agg
pixfmt_rgb24_pre	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb_pre<rgba8,  order_rgb>, rendering_buffer> pixfmt_rgb24_pre; \/\/----pixfmt_rgb24_pre$/;"	t	namespace:agg
pixfmt_rgb48	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb<rgba16, order_rgb>, rendering_buffer> pixfmt_rgb48;    \/\/----pixfmt_rgb48$/;"	t	namespace:agg
pixfmt_rgb48_gamma	include/agg_pixfmt_rgb.h	/^        pixfmt_rgb48_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgb48_gamma
pixfmt_rgb48_gamma	include/agg_pixfmt_rgb.h	/^    template<class Gamma> class pixfmt_rgb48_gamma : $/;"	c	namespace:agg
pixfmt_rgb48_pre	include/agg_pixfmt_rgb.h	/^    typedef pixfmt_alpha_blend_rgb<blender_rgb_pre<rgba16, order_rgb>, rendering_buffer> pixfmt_rgb48_pre; \/\/----pixfmt_rgb48_pre$/;"	t	namespace:agg
pixfmt_rgb555	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgb555, rendering_buffer> pixfmt_rgb555; \/\/----pixfmt_rgb555$/;"	t	namespace:agg
pixfmt_rgb555_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_rgb555_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgb555_gamma
pixfmt_rgb555_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_rgb555_gamma : $/;"	c	namespace:agg
pixfmt_rgb555_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgb555_pre, rendering_buffer> pixfmt_rgb555_pre; \/\/----pixfmt_rgb555_pre$/;"	t	namespace:agg
pixfmt_rgb565	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgb565, rendering_buffer> pixfmt_rgb565; \/\/----pixfmt_rgb565$/;"	t	namespace:agg
pixfmt_rgb565_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_rgb565_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgb565_gamma
pixfmt_rgb565_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_rgb565_gamma : $/;"	c	namespace:agg
pixfmt_rgb565_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgb565_pre, rendering_buffer> pixfmt_rgb565_pre; \/\/----pixfmt_rgb565_pre$/;"	t	namespace:agg
pixfmt_rgbAAA	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgbAAA, rendering_buffer> pixfmt_rgbAAA; \/\/----pixfmt_rgbAAA$/;"	t	namespace:agg
pixfmt_rgbAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_rgbAAA_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgbAAA_gamma
pixfmt_rgbAAA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_rgbAAA_gamma : $/;"	c	namespace:agg
pixfmt_rgbAAA_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgbAAA_pre, rendering_buffer> pixfmt_rgbAAA_pre; \/\/----pixfmt_rgbAAA_pre$/;"	t	namespace:agg
pixfmt_rgbBBA	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgbBBA, rendering_buffer> pixfmt_rgbBBA; \/\/----pixfmt_rgbBBA$/;"	t	namespace:agg
pixfmt_rgbBBA_gamma	include/agg_pixfmt_rgb_packed.h	/^        pixfmt_rgbBBA_gamma(rendering_buffer& rb, const Gamma& g) :$/;"	f	class:agg::pixfmt_rgbBBA_gamma
pixfmt_rgbBBA_gamma	include/agg_pixfmt_rgb_packed.h	/^    template<class Gamma> class pixfmt_rgbBBA_gamma : $/;"	c	namespace:agg
pixfmt_rgbBBA_pre	include/agg_pixfmt_rgb_packed.h	/^    typedef pixfmt_alpha_blend_rgb_packed<blender_rgbBBA_pre, rendering_buffer> pixfmt_rgbBBA_pre; \/\/----pixfmt_rgbBBA_pre$/;"	t	namespace:agg
pixfmt_rgba32	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_rgba32, rendering_buffer, pixel32_type> pixfmt_rgba32; \/\/----pixfmt_rgba32$/;"	t	namespace:agg
pixfmt_rgba32_plain	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_rgba32_plain, rendering_buffer, pixel32_type> pixfmt_rgba32_plain; \/\/----pixfmt_rgba32_plain$/;"	t	namespace:agg
pixfmt_rgba32_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_rgba32_pre, rendering_buffer, pixel32_type> pixfmt_rgba32_pre; \/\/----pixfmt_rgba32_pre$/;"	t	namespace:agg
pixfmt_rgba64	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_rgba64, rendering_buffer, pixel64_type> pixfmt_rgba64; \/\/----pixfmt_rgba64$/;"	t	namespace:agg
pixfmt_rgba64_pre	include/agg_pixfmt_rgba.h	/^    typedef pixfmt_alpha_blend_rgba<blender_rgba64_pre, rendering_buffer, pixel64_type> pixfmt_rgba64_pre; \/\/----pixfmt_rgba64_pre$/;"	t	namespace:agg
pixfmt_transposer	include/agg_pixfmt_transposer.h	/^        explicit pixfmt_transposer(pixfmt_type& pixf) : m_pixf(&pixf) {}$/;"	f	class:agg::pixfmt_transposer
pixfmt_transposer	include/agg_pixfmt_transposer.h	/^        pixfmt_transposer() : m_pixf(0) {}$/;"	f	class:agg::pixfmt_transposer
pixfmt_transposer	include/agg_pixfmt_transposer.h	/^    template<class PixFmt> class pixfmt_transposer$/;"	c	namespace:agg
pixfmt_type	examples/aa_test.cpp	/^typedef agg::pixfmt_bgr24_gamma<gamma_lut_type>             pixfmt_type;$/;"	t	file:
pixfmt_type	examples/alpha_gradient.cpp	/^typedef agg::pixfmt_bgr24 pixfmt_type;$/;"	t	file:
pixfmt_type	examples/alpha_mask3.cpp	/^    typedef agg::pixfmt_bgr24 pixfmt_type;$/;"	t	class:the_application	file:
pixfmt_type	examples/freetype_test.cpp	/^typedef agg::pixfmt_bgr24 pixfmt_type;$/;"	t	file:
pixfmt_type	examples/scanline_boolean2.cpp	/^    typedef agg::pixfmt_bgr24 pixfmt_type;$/;"	t	class:the_application	file:
pixfmt_type	examples/truetype_test.cpp	/^    typedef agg::pixfmt_bgr24_gamma<gamma_type> pixfmt_type;$/;"	t	class:the_application	file:
pixfmt_type	include/agg_image_accessors.h	/^        typedef PixFmt   pixfmt_type;$/;"	t	class:agg::image_accessor_clip
pixfmt_type	include/agg_image_accessors.h	/^        typedef PixFmt   pixfmt_type;$/;"	t	class:agg::image_accessor_clone
pixfmt_type	include/agg_image_accessors.h	/^        typedef PixFmt   pixfmt_type;$/;"	t	class:agg::image_accessor_no_clip
pixfmt_type	include/agg_image_accessors.h	/^        typedef PixFmt   pixfmt_type;$/;"	t	class:agg::image_accessor_wrap
pixfmt_type	include/agg_pixfmt_amask_adaptor.h	/^        typedef PixFmt pixfmt_type;$/;"	t	class:agg::pixfmt_amask_adaptor
pixfmt_type	include/agg_pixfmt_transposer.h	/^        typedef PixFmt pixfmt_type;$/;"	t	class:agg::pixfmt_transposer
pixfmt_type	include/agg_renderer_base.h	/^        typedef PixelFormat pixfmt_type;$/;"	t	class:agg::renderer_base
pixfmt_type	include/agg_renderer_mclip.h	/^        typedef PixelFormat pixfmt_type;$/;"	t	class:agg::renderer_mclip
pixmap_chain	examples/rasterizers2.cpp	/^static const agg::int32u pixmap_chain[] = $/;"	v	file:
platform_specific	src/platform/AmigaOS/agg_platform_support.cpp	/^	class platform_specific$/;"	c	namespace:agg	file:
platform_specific	src/platform/AmigaOS/agg_platform_support.cpp	/^	platform_specific::platform_specific(platform_support& support,$/;"	f	class:agg::platform_specific
platform_specific	src/platform/BeOS/agg_platform_support.cpp	/^                    platform_specific(agg::platform_support* agg,$/;"	f	class:agg::platform_specific
platform_specific	src/platform/BeOS/agg_platform_support.cpp	/^class platform_specific {$/;"	c	namespace:agg	file:
platform_specific	src/platform/X11/agg_platform_support.cpp	/^    class platform_specific$/;"	c	namespace:agg	file:
platform_specific	src/platform/X11/agg_platform_support.cpp	/^    platform_specific::platform_specific(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_specific
platform_specific	src/platform/mac/agg_platform_support.cpp	/^    class platform_specific$/;"	c	namespace:agg	file:
platform_specific	src/platform/mac/agg_platform_support.cpp	/^    platform_specific::platform_specific(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_specific
platform_specific	src/platform/sdl/agg_platform_support.cpp	/^    class platform_specific$/;"	c	namespace:agg	file:
platform_specific	src/platform/sdl/agg_platform_support.cpp	/^    platform_specific::platform_specific(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_specific
platform_specific	src/platform/win32/agg_platform_support.cpp	/^    class platform_specific$/;"	c	namespace:agg	file:
platform_specific	src/platform/win32/agg_platform_support.cpp	/^    platform_specific::platform_specific(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_specific
platform_support	include/platform/agg_platform_support.h	/^    class platform_support$/;"	c	namespace:agg
platform_support	src/platform/AmigaOS/agg_platform_support.cpp	/^	platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
platform_support	src/platform/BeOS/agg_platform_support.cpp	/^    platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
platform_support	src/platform/X11/agg_platform_support.cpp	/^    platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
platform_support	src/platform/mac/agg_platform_support.cpp	/^    platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
platform_support	src/platform/sdl/agg_platform_support.cpp	/^    platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
platform_support	src/platform/win32/agg_platform_support.cpp	/^    platform_support::platform_support(pix_format_e format, bool flip_y) :$/;"	f	class:agg::platform_support
pod_allocator	include/agg_basics.h	/^    template<class T> struct pod_allocator$/;"	s	namespace:agg
pod_array	include/agg_array.h	/^        pod_array() : m_array(0), m_size(0) {}$/;"	f	class:agg::pod_array
pod_array	include/agg_array.h	/^        pod_array(const self_type& v) : $/;"	f	class:agg::pod_array
pod_array	include/agg_array.h	/^        pod_array(unsigned size) : $/;"	f	class:agg::pod_array
pod_array	include/agg_array.h	/^    template<class T> class pod_array$/;"	c	namespace:agg
pod_array_adaptor	include/agg_array.h	/^        pod_array_adaptor(T* array, unsigned size) : $/;"	f	class:agg::pod_array_adaptor
pod_array_adaptor	include/agg_array.h	/^    template<class T> class pod_array_adaptor$/;"	c	namespace:agg
pod_auto_array	include/agg_array.h	/^        explicit pod_auto_array(const T* c)$/;"	f	class:agg::pod_auto_array
pod_auto_array	include/agg_array.h	/^        pod_auto_array() {}$/;"	f	class:agg::pod_auto_array
pod_auto_array	include/agg_array.h	/^    template<class T, unsigned Size> class pod_auto_array$/;"	c	namespace:agg
pod_auto_vector	include/agg_array.h	/^        pod_auto_vector() : m_size(0) {}$/;"	f	class:agg::pod_auto_vector
pod_auto_vector	include/agg_array.h	/^    template<class T, unsigned Size> class pod_auto_vector$/;"	c	namespace:agg
pod_bvector	include/agg_array.h	/^    pod_bvector<T, S>::pod_bvector(const pod_bvector<T, S>& v) :$/;"	f	class:agg::pod_bvector
pod_bvector	include/agg_array.h	/^    pod_bvector<T, S>::pod_bvector(unsigned block_ptr_inc) :$/;"	f	class:agg::pod_bvector
pod_bvector	include/agg_array.h	/^    template<class T, unsigned S=6> class pod_bvector$/;"	c	namespace:agg
pod_bvector	include/agg_array.h	/^    template<class T, unsigned S> pod_bvector<T, S>::pod_bvector() :$/;"	f	class:agg::pod_bvector
pod_vector	include/agg_array.h	/^        pod_vector() : m_size(0), m_capacity(0), m_array(0) {}$/;"	f	class:agg::pod_vector
pod_vector	include/agg_array.h	/^    template<class T> class pod_vector$/;"	c	namespace:agg
pod_vector	include/agg_array.h	/^    template<class T> pod_vector<T>::pod_vector(const pod_vector<T>& v) :$/;"	f	class:agg::pod_vector
pod_vector	include/agg_array.h	/^    template<class T> pod_vector<T>::pod_vector(unsigned cap, unsigned extra_tail) :$/;"	f	class:agg::pod_vector
point	gpc/gpc.c	/^  gpc_vertex          point;        \/* Point of intersection             *\/$/;"	m	struct:it_shape	file:
point	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::point(unsigned idx, double x, double y)$/;"	f	class:agg::spline_ctrl_impl
point_base	include/agg_basics.h	/^        point_base() {}$/;"	f	struct:agg::point_base
point_base	include/agg_basics.h	/^        point_base(T x_, T y_) : x(x_), y(y_) {}$/;"	f	struct:agg::point_base
point_base	include/agg_basics.h	/^    template<class T> struct point_base$/;"	s	namespace:agg
point_d	include/agg_basics.h	/^    typedef point_base<double> point_d; \/\/-----point_d$/;"	t	namespace:agg
point_f	include/agg_basics.h	/^    typedef point_base<float>  point_f; \/\/-----point_f$/;"	t	namespace:agg
point_i	include/agg_basics.h	/^    typedef point_base<int>    point_i; \/\/-----point_i$/;"	t	namespace:agg
point_in_polygon	examples/interactive_polygon.cpp	/^    bool interactive_polygon::point_in_polygon(double tx, double ty) const$/;"	f	class:agg::interactive_polygon
point_in_polygon	src/ctrl/agg_polygon_ctrl.cpp	/^    bool polygon_ctrl_impl::point_in_polygon(double tx, double ty) const$/;"	f	class:agg::polygon_ctrl_impl
point_in_triangle	include/agg_math.h	/^    AGG_INLINE bool point_in_triangle(double x1, double y1, $/;"	f	namespace:agg
point_radius	include/ctrl/agg_bezier_ctrl.h	/^        double point_radius() const   { return m_poly.point_radius(); }$/;"	f	class:agg::bezier_ctrl_impl
point_radius	include/ctrl/agg_bezier_ctrl.h	/^        double point_radius() const   { return m_poly.point_radius(); }$/;"	f	class:agg::curve3_ctrl_impl
point_radius	include/ctrl/agg_bezier_ctrl.h	/^        void   point_radius(double r) { m_poly.point_radius(r); }$/;"	f	class:agg::bezier_ctrl_impl
point_radius	include/ctrl/agg_bezier_ctrl.h	/^        void   point_radius(double r) { m_poly.point_radius(r); }$/;"	f	class:agg::curve3_ctrl_impl
point_radius	include/ctrl/agg_polygon_ctrl.h	/^        double point_radius() const   { return m_point_radius; }$/;"	f	class:agg::polygon_ctrl_impl
point_radius	include/ctrl/agg_polygon_ctrl.h	/^        void   point_radius(double r) { m_point_radius = r; }$/;"	f	class:agg::polygon_ctrl_impl
point_size	include/ctrl/agg_gamma_ctrl.h	/^        void point_size(double s)              { m_point_size = s; }$/;"	f	class:agg::gamma_ctrl_impl
point_size	include/ctrl/agg_spline_ctrl.h	/^        void point_size(double s)  { m_point_size = s; }$/;"	f	class:agg::spline_ctrl_impl
pointer_color	include/ctrl/agg_slider_ctrl.h	/^        void pointer_color(const ColorT& c) { m_pointer_color = c; }$/;"	f	class:agg::slider_ctrl
pointers_color	include/ctrl/agg_scale_ctrl.h	/^        void pointers_color(const ColorT& c)   { m_pointers_color = c; }$/;"	f	class:agg::scale_ctrl
poly1	examples/make_gb_poly.cpp	/^static double poly1[] = $/;"	v	file:
poly2	examples/make_gb_poly.cpp	/^static double poly2[] = $/;"	v	file:
poly_container_adaptor	include/agg_path_storage.h	/^        poly_container_adaptor() : $/;"	f	class:agg::poly_container_adaptor
poly_container_adaptor	include/agg_path_storage.h	/^        poly_container_adaptor(const Container& data, bool closed) :$/;"	f	class:agg::poly_container_adaptor
poly_container_adaptor	include/agg_path_storage.h	/^    template<class Container> class poly_container_adaptor$/;"	c	namespace:agg
poly_container_reverse_adaptor	include/agg_path_storage.h	/^        poly_container_reverse_adaptor() : $/;"	f	class:agg::poly_container_reverse_adaptor
poly_container_reverse_adaptor	include/agg_path_storage.h	/^        poly_container_reverse_adaptor(const Container& data, bool closed) :$/;"	f	class:agg::poly_container_reverse_adaptor
poly_container_reverse_adaptor	include/agg_path_storage.h	/^    template<class Container> class poly_container_reverse_adaptor$/;"	c	namespace:agg
poly_max_coord	include/agg_rasterizer_sl_clip.h	/^        poly_max_coord = (1 << 30) - 1 \/\/----poly_max_coord$/;"	e	enum:agg::poly_max_coord_e
poly_max_coord_e	include/agg_rasterizer_sl_clip.h	/^    enum poly_max_coord_e$/;"	g	namespace:agg
poly_plain_adaptor	include/agg_path_storage.h	/^        poly_plain_adaptor() : $/;"	f	class:agg::poly_plain_adaptor
poly_plain_adaptor	include/agg_path_storage.h	/^        poly_plain_adaptor(const T* data, unsigned num_points, bool closed) :$/;"	f	class:agg::poly_plain_adaptor
poly_plain_adaptor	include/agg_path_storage.h	/^    template<class T> class poly_plain_adaptor$/;"	c	namespace:agg
poly_subpixel_mask	include/agg_basics.h	/^        poly_subpixel_mask  = poly_subpixel_scale-1,  \/\/----poly_subpixel_mask $/;"	e	enum:agg::poly_subpixel_scale_e
poly_subpixel_scale	include/agg_basics.h	/^        poly_subpixel_scale = 1<<poly_subpixel_shift, \/\/----poly_subpixel_scale $/;"	e	enum:agg::poly_subpixel_scale_e
poly_subpixel_scale_e	include/agg_basics.h	/^    enum poly_subpixel_scale_e$/;"	g	namespace:agg
poly_subpixel_shift	include/agg_basics.h	/^        poly_subpixel_shift = 8,                      \/\/----poly_subpixel_shift$/;"	e	enum:agg::poly_subpixel_scale_e
polygon	examples/interactive_polygon.h	/^        const double* polygon() const { return &m_polygon[0]; }$/;"	f	class:agg::interactive_polygon
polygon	include/agg_conv_marker.h	/^            polygon,$/;"	e	enum:agg::conv_marker::status_e
polygon	include/agg_vcgen_bspline.h	/^            polygon,$/;"	e	enum:agg::vcgen_bspline::status_e
polygon	include/agg_vcgen_smooth_poly1.h	/^            polygon,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
polygon	include/ctrl/agg_polygon_ctrl.h	/^        const double* polygon() const { return &m_polygon[0]; }$/;"	f	class:agg::polygon_ctrl_impl
polygon_ctrl	include/ctrl/agg_polygon_ctrl.h	/^        polygon_ctrl(unsigned np, double point_radius=5) :$/;"	f	class:agg::polygon_ctrl
polygon_ctrl	include/ctrl/agg_polygon_ctrl.h	/^    template<class ColorT> class polygon_ctrl : public polygon_ctrl_impl$/;"	c	namespace:agg
polygon_ctrl_impl	include/ctrl/agg_polygon_ctrl.h	/^    class polygon_ctrl_impl : public ctrl$/;"	c	namespace:agg
polygon_ctrl_impl	src/ctrl/agg_polygon_ctrl.cpp	/^    polygon_ctrl_impl::polygon_ctrl_impl(unsigned np, double point_radius) :$/;"	f	class:agg::polygon_ctrl_impl
polygon_node	gpc/gpc.c	/^} polygon_node;$/;"	t	typeref:struct:p_shape	file:
polyline	include/agg_vcgen_dash.h	/^            polyline,$/;"	e	enum:agg::vcgen_dash::status_e
polymorphic_renderer_solid_rgba8_adaptor	examples/polymorphic_renderer.cpp	/^        polymorphic_renderer_solid_rgba8_adaptor(rendering_buffer& rbuf) : $/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
polymorphic_renderer_solid_rgba8_adaptor	examples/polymorphic_renderer.cpp	/^    template<class PixFmt> class polymorphic_renderer_solid_rgba8_adaptor :$/;"	c	namespace:agg	file:
polymorphic_renderer_solid_rgba8_base	examples/polymorphic_renderer.cpp	/^    class polymorphic_renderer_solid_rgba8_base$/;"	c	namespace:agg	file:
pop_attr	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::pop_attr()$/;"	f	class:agg::svg::path_renderer
pow3	include/agg_image_filters.h	/^        static double pow3(double x)$/;"	f	class:agg::image_filter_bicubic
precache	include/agg_font_cache_manager.h	/^        void precache(unsigned from, unsigned to)$/;"	f	class:agg::font_cache_manager
pred	gpc/gpc.c	/^  struct edge_shape  *pred;         \/* Edge connected at the lower end   *\/$/;"	m	struct:edge_shape	typeref:struct:edge_shape::edge_shape	file:
premultiply	include/agg_color_gray.h	/^        const self_type& premultiply()$/;"	f	struct:agg::gray16
premultiply	include/agg_color_gray.h	/^        const self_type& premultiply()$/;"	f	struct:agg::gray8
premultiply	include/agg_color_gray.h	/^        const self_type& premultiply(unsigned a_)$/;"	f	struct:agg::gray16
premultiply	include/agg_color_gray.h	/^        const self_type& premultiply(unsigned a_)$/;"	f	struct:agg::gray8
premultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& premultiply()$/;"	f	struct:agg::rgba16
premultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& premultiply()$/;"	f	struct:agg::rgba8
premultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& premultiply(unsigned a_)$/;"	f	struct:agg::rgba16
premultiply	include/agg_color_rgba.h	/^        AGG_INLINE const self_type& premultiply(unsigned a_)$/;"	f	struct:agg::rgba8
premultiply	include/agg_color_rgba.h	/^        const rgba& premultiply()$/;"	f	struct:agg::rgba
premultiply	include/agg_color_rgba.h	/^        const rgba& premultiply(double a_)$/;"	f	struct:agg::rgba
premultiply	include/agg_pixfmt_rgba.h	/^        static AGG_INLINE void premultiply(value_type* p)$/;"	f	struct:agg::multiplier_rgba
premultiply	include/agg_pixfmt_rgba.h	/^        void premultiply()$/;"	f	class:agg::pixfmt_alpha_blend_rgba
premultiply	include/agg_pixfmt_rgba.h	/^        void premultiply()$/;"	f	class:agg::pixfmt_custom_blend_rgba
premultiply	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::premultiply(const trans_affine& m)$/;"	f	class:agg::trans_affine
premultiply	include/agg_trans_perspective.h	/^    trans_perspective::premultiply(const trans_affine& b)$/;"	f	class:agg::trans_perspective
premultiply	include/agg_trans_perspective.h	/^    trans_perspective::premultiply(const trans_perspective& b)$/;"	f	class:agg::trans_perspective
premultiply_inv	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::premultiply_inv(const trans_affine& m)$/;"	f	class:agg::trans_affine
premultiply_inv	include/agg_trans_perspective.h	/^    trans_perspective::premultiply_inv(const trans_affine& m)$/;"	f	class:agg::trans_perspective
premultiply_inv	include/agg_trans_perspective.h	/^    trans_perspective::premultiply_inv(const trans_perspective& m)$/;"	f	class:agg::trans_perspective
prepare	examples/aa_demo.cpp	/^        void prepare() {}$/;"	f	class:agg::renderer_enlarged
prepare	examples/image_alpha.cpp	/^        void prepare() {}$/;"	f	class:agg::span_conv_brightness_alpha_rgb8
prepare	examples/polymorphic_renderer.cpp	/^        virtual void prepare()$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
prepare	examples/simple_blur.cpp	/^        void prepare() {}$/;"	f	class:agg::span_simple_blur_rgb24
prepare	include/agg_glyph_raster_bin.h	/^        void prepare(glyph_rect* r, double x, double y, unsigned glyph, bool flip)$/;"	f	class:agg::glyph_raster_bin
prepare	include/agg_renderer_scanline.h	/^        void prepare() { m_span_gen->prepare(); }$/;"	f	class:agg::renderer_scanline_aa
prepare	include/agg_renderer_scanline.h	/^        void prepare() { m_span_gen->prepare(); }$/;"	f	class:agg::renderer_scanline_bin
prepare	include/agg_renderer_scanline.h	/^        void prepare() {}$/;"	f	class:agg::renderer_scanline_aa_solid
prepare	include/agg_renderer_scanline.h	/^        void prepare() {}$/;"	f	class:agg::renderer_scanline_bin_solid
prepare	include/agg_scanline_storage_aa.h	/^        void prepare()$/;"	f	class:agg::scanline_storage_aa
prepare	include/agg_scanline_storage_bin.h	/^        void prepare()$/;"	f	class:agg::scanline_storage_bin
prepare	include/agg_span_converter.h	/^        void prepare() $/;"	f	class:agg::span_converter
prepare	include/agg_span_gouraud_gray.h	/^        void prepare()$/;"	f	class:agg::span_gouraud_gray
prepare	include/agg_span_gouraud_rgba.h	/^        void prepare()$/;"	f	class:agg::span_gouraud_rgba
prepare	include/agg_span_gradient.h	/^        void prepare() {}$/;"	f	class:agg::span_gradient
prepare	include/agg_span_gradient_alpha.h	/^        void prepare() {}$/;"	f	class:agg::span_gradient_alpha
prepare	include/agg_span_image_filter.h	/^        void prepare() $/;"	f	class:agg::span_image_resample_affine
prepare	include/agg_span_image_filter.h	/^        void prepare() {}$/;"	f	class:agg::span_image_filter
prepare	include/agg_span_pattern_gray.h	/^        void prepare() {}$/;"	f	class:agg::span_pattern_gray
prepare	include/agg_span_pattern_rgb.h	/^        void prepare() {}$/;"	f	class:agg::span_pattern_rgb
prepare	include/agg_span_pattern_rgba.h	/^        void prepare() {}$/;"	f	class:agg::span_pattern_rgba
prepare	include/agg_span_solid.h	/^        void prepare() {}$/;"	f	class:agg::span_solid
prepare	src/agg_bspline.cpp	/^    void bspline::prepare()$/;"	f	class:agg::bspline
prepare_glyph	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::prepare_glyph(unsigned glyph_code)$/;"	f	class:agg::font_engine_freetype_base
prepare_glyph	font_win32_tt/agg_font_win32_tt.cpp	/^    bool font_engine_win32_tt_base::prepare_glyph(unsigned glyph_code)$/;"	f	class:agg::font_engine_win32_tt_base
prepare_src	include/agg_conv_adaptor_vcgen.h	/^        void prepare_src() {}$/;"	f	struct:agg::null_markers
preserve_aspect_ratio	include/agg_trans_viewport.h	/^        void preserve_aspect_ratio(double alignx, $/;"	f	class:agg::trans_viewport
preserve_x_scale	include/agg_trans_double_path.h	/^        bool preserve_x_scale() const { return m_preserve_x_scale; }$/;"	f	class:agg::trans_double_path
preserve_x_scale	include/agg_trans_double_path.h	/^        void preserve_x_scale(bool f) { m_preserve_x_scale = f;    }$/;"	f	class:agg::trans_double_path
preserve_x_scale	include/agg_trans_single_path.h	/^        bool preserve_x_scale() const { return m_preserve_x_scale; }$/;"	f	class:agg::trans_single_path
preserve_x_scale	include/agg_trans_single_path.h	/^        void preserve_x_scale(bool f) { m_preserve_x_scale = f;    }$/;"	f	class:agg::trans_single_path
prev	gpc/gpc.c	/^  struct edge_shape  *prev;         \/* Previous edge in the AET          *\/$/;"	m	struct:edge_shape	typeref:struct:edge_shape::edge_shape	file:
prev	gpc/gpc.c	/^  struct st_shape    *prev;         \/* Previous edge in sorted list      *\/$/;"	m	struct:st_shape	typeref:struct:st_shape::st_shape	file:
prev	include/agg_array.h	/^        T& prev(unsigned idx)$/;"	f	class:agg::pod_bvector
prev	include/agg_array.h	/^        const T& prev(unsigned idx) const$/;"	f	class:agg::pod_bvector
prev_vertex	include/agg_path_storage.h	/^        unsigned prev_vertex(double* x, double* y) const$/;"	f	class:agg::vertex_stl_storage
prev_vertex	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::prev_vertex(double* x, double* y) const$/;"	f	class:agg::path_base
prev_vertex	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::prev_vertex(double* x, double* y) const$/;"	f	class:agg::vertex_block_storage
prim_blender_type	examples/compositing.cpp	/^typedef agg::blender_rgba<color, order> prim_blender_type; $/;"	t	file:
prim_blender_type	examples/compositing2.cpp	/^typedef agg::blender_rgba<color, order> prim_blender_type; $/;"	t	file:
prim_pixfmt_type	examples/compositing.cpp	/^typedef agg::pixfmt_alpha_blend_rgba<prim_blender_type, rbuf_type, pixel_type> prim_pixfmt_type;$/;"	t	file:
prim_pixfmt_type	examples/compositing2.cpp	/^typedef agg::pixfmt_alpha_blend_rgba<prim_blender_type, agg::rendering_buffer, pixel_type> prim_pixfmt_type;$/;"	t	file:
prim_ren_base_type	examples/compositing.cpp	/^typedef agg::renderer_base<prim_pixfmt_type> prim_ren_base_type;$/;"	t	file:
prim_ren_base_type	examples/compositing2.cpp	/^typedef agg::renderer_base<prim_pixfmt_type> prim_ren_base_type;$/;"	t	file:
primitives_renderer	examples/graph_test.cpp	/^typedef agg::renderer_primitives<base_renderer> primitives_renderer;$/;"	t	file:
profile	include/agg_renderer_outline_aa.h	/^        const line_profile_aa& profile() const { return *m_profile; }$/;"	f	class:agg::renderer_outline_aa
profile	include/agg_renderer_outline_aa.h	/^        line_profile_aa& profile() { return *m_profile; }$/;"	f	class:agg::renderer_outline_aa
profile	include/agg_renderer_outline_aa.h	/^        void profile(const line_profile_aa& prof) { m_profile = &prof; }$/;"	f	class:agg::renderer_outline_aa
profile	src/agg_line_profile_aa.cpp	/^    line_profile_aa::value_type* line_profile_aa::profile(double w)$/;"	f	class:agg::line_profile_aa
profile_size	include/agg_renderer_outline_aa.h	/^        unsigned profile_size() const { return m_profile.size(); }$/;"	f	class:agg::line_profile_aa
proxy	gpc/gpc.c	/^  struct p_shape     *proxy;        \/* Pointer to actual structure used  *\/$/;"	m	struct:p_shape	typeref:struct:p_shape::p_shape	file:
ptr	include/agg_basics.h	/^        T* ptr;$/;"	m	struct:agg::row_info
ptr	include/agg_basics.h	/^        const T* ptr;$/;"	m	struct:agg::const_row_info
ptr	include/agg_scanline_storage_aa.h	/^            T*       ptr;$/;"	m	struct:agg::scanline_cell_storage::extra_span
ptr	src/platform/win32/agg_platform_support.cpp	/^            const char* ptr;$/;"	m	struct:agg::tokenizer::token	file:
push_attr	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::push_attr()$/;"	f	class:agg::svg::path_renderer
push_back	include/agg_array.h	/^        void push_back(const T& v)   { m_array[m_size++] = v; }$/;"	f	class:agg::pod_auto_vector
push_back	include/agg_array.h	/^        void push_back(const T& v)   { m_array[m_size++] = v; }$/;"	f	class:agg::pod_vector
push_back	include/agg_array.h	/^        void push_back(const T& val) { add(val); }$/;"	f	class:agg::pod_bvector
put_image	src/platform/X11/agg_platform_support.cpp	/^    void platform_specific::put_image(const rendering_buffer* src)$/;"	f	class:agg::platform_specific
q0	include/agg_image_filters.h	/^        double q0, q1, q2, q3;$/;"	m	class:agg::image_filter_mitchell
q1	include/agg_image_filters.h	/^        double q0, q1, q2, q3;$/;"	m	class:agg::image_filter_mitchell
q2	include/agg_image_filters.h	/^        double q0, q1, q2, q3;$/;"	m	class:agg::image_filter_mitchell
q3	include/agg_image_filters.h	/^        double q0, q1, q2, q3;$/;"	m	class:agg::image_filter_mitchell
qsort_cells	include/agg_rasterizer_cells_aa.h	/^    void qsort_cells(Cell** start, unsigned num)$/;"	f	namespace:agg
qsort_threshold	include/agg_rasterizer_cells_aa.h	/^        qsort_threshold = 9$/;"	e	enum:agg::__anon1
quad_to_quad	include/agg_span_interpolator_persp.h	/^        void quad_to_quad(const double* src, const double* dst)$/;"	f	class:agg::span_interpolator_persp_exact
quad_to_quad	include/agg_span_interpolator_persp.h	/^        void quad_to_quad(const double* src, const double* dst)$/;"	f	class:agg::span_interpolator_persp_lerp
quad_to_quad	include/agg_trans_bilinear.h	/^        void quad_to_quad(const double* src, const double* dst)$/;"	f	class:agg::trans_bilinear
quad_to_quad	include/agg_trans_perspective.h	/^    inline bool trans_perspective::quad_to_quad(const double* qs, $/;"	f	class:agg::trans_perspective
quad_to_rect	include/agg_span_interpolator_persp.h	/^        void quad_to_rect(const double* quad, $/;"	f	class:agg::span_interpolator_persp_exact
quad_to_rect	include/agg_span_interpolator_persp.h	/^        void quad_to_rect(const double* quad, $/;"	f	class:agg::span_interpolator_persp_lerp
quad_to_rect	include/agg_trans_bilinear.h	/^        void quad_to_rect(const double* quad, $/;"	f	class:agg::trans_bilinear
quad_to_rect	include/agg_trans_perspective.h	/^    inline bool trans_perspective::quad_to_rect(const double* q,$/;"	f	class:agg::trans_perspective
quad_to_square	include/agg_trans_perspective.h	/^    inline bool trans_perspective::quad_to_square(const double* q)$/;"	f	class:agg::trans_perspective
quick_sort	include/agg_array.h	/^    void quick_sort(Array& arr, Less less)$/;"	f	namespace:agg
quick_sort_threshold	include/agg_array.h	/^        quick_sort_threshold = 9$/;"	e	enum:agg::quick_sort_threshold_e
quick_sort_threshold_e	include/agg_array.h	/^    enum quick_sort_threshold_e$/;"	g	namespace:agg
r	examples/svg_viewer/agg_svg_parser.cpp	/^        int8u r, g, b, a;$/;"	m	struct:agg::svg::named_color	file:
r	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::recursive_blur_calc_rgba
r	include/agg_blur.h	/^        value_type r,g,b,a;$/;"	m	struct:agg::stack_blur_calc_rgba
r	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::recursive_blur_calc_rgb
r	include/agg_blur.h	/^        value_type r,g,b;$/;"	m	struct:agg::stack_blur_calc_rgb
r	include/agg_color_rgba.h	/^        double r;$/;"	m	struct:agg::rgba
r	include/agg_color_rgba.h	/^        value_type r;$/;"	m	struct:agg::rgba16
r	include/agg_color_rgba.h	/^        value_type r;$/;"	m	struct:agg::rgba8
r	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> r, g, b, a;$/;"	m	struct:agg::color_interpolator
rad2deg	include/agg_basics.h	/^    inline double rad2deg(double rad)$/;"	f	namespace:agg
radial_shape	examples/compositing2.cpp	/^    void radial_shape(RenBase& rbase, const ColorRamp& colors,$/;"	f	class:the_application
radii_ok	include/agg_bezier_arc.h	/^        bool radii_ok() const { return m_radii_ok; }$/;"	f	class:agg::bezier_arc_svg
radius	examples/image_fltr_graph.cpp	/^    virtual double radius() const { return m_filter.radius(); }$/;"	f	struct:image_filter_const_radius_adaptor
radius	examples/image_fltr_graph.cpp	/^    virtual double radius() const { return m_filter.radius(); }$/;"	f	struct:image_filter_variable_radius_adaptor
radius	include/agg_image_filters.h	/^        double       radius()       const { return m_radius;   }$/;"	f	class:agg::image_filter_lut
radius	include/agg_image_filters.h	/^        double radius() const { return m_radius; }$/;"	f	class:agg::image_filter_blackman
radius	include/agg_image_filters.h	/^        double radius() const { return m_radius; }$/;"	f	class:agg::image_filter_lanczos
radius	include/agg_image_filters.h	/^        double radius() const { return m_radius; }$/;"	f	class:agg::image_filter_sinc
radius	include/agg_image_filters.h	/^        static double radius() { return 1.0; }$/;"	f	class:agg::image_filter_kaiser
radius	include/agg_image_filters.h	/^        static double radius() { return 1.0; }$/;"	f	struct:agg::image_filter_bilinear
radius	include/agg_image_filters.h	/^        static double radius() { return 1.0; }$/;"	f	struct:agg::image_filter_hamming
radius	include/agg_image_filters.h	/^        static double radius() { return 1.0; }$/;"	f	struct:agg::image_filter_hanning
radius	include/agg_image_filters.h	/^        static double radius() { return 1.0; }$/;"	f	struct:agg::image_filter_hermite
radius	include/agg_image_filters.h	/^        static double radius() { return 1.5; }$/;"	f	struct:agg::image_filter_quadric
radius	include/agg_image_filters.h	/^        static double radius() { return 2.0; }$/;"	f	class:agg::image_filter_bicubic
radius	include/agg_image_filters.h	/^        static double radius() { return 2.0; }$/;"	f	class:agg::image_filter_mitchell
radius	include/agg_image_filters.h	/^        static double radius() { return 2.0; }$/;"	f	struct:agg::image_filter_catrom
radius	include/agg_image_filters.h	/^        static double radius() { return 2.0; }$/;"	f	struct:agg::image_filter_gaussian
radius	include/agg_image_filters.h	/^        static double radius() { return 2.0; }$/;"	f	struct:agg::image_filter_spline16
radius	include/agg_image_filters.h	/^        static double radius() { return 3.0; }$/;"	f	struct:agg::image_filter_spline36
radius	include/agg_image_filters.h	/^        static double radius() { return 3.2383; } $/;"	f	struct:agg::image_filter_bessel
radius	include/agg_span_gradient.h	/^        double radius()  const { return double(m_r)  \/ gradient_subpixel_scale; }$/;"	f	class:agg::gradient_radial_focus
radius	include/agg_trans_warp_magnifier.h	/^        double radius()        const { return m_radius; }$/;"	f	class:agg::trans_warp_magnifier
radius	include/agg_trans_warp_magnifier.h	/^        void radius(double r)           { m_radius = r;       }$/;"	f	class:agg::trans_warp_magnifier
radius	src/agg_rounded_rect.cpp	/^    void rounded_rect::radius(double r)$/;"	f	class:agg::rounded_rect
radius	src/agg_rounded_rect.cpp	/^    void rounded_rect::radius(double rx, double ry)$/;"	f	class:agg::rounded_rect
radius	src/agg_rounded_rect.cpp	/^    void rounded_rect::radius(double rx1, double ry1, double rx2, double ry2, $/;"	f	class:agg::rounded_rect
radius	src/agg_rounded_rect.cpp	/^    void rounded_rect::radius(double rx_bottom, double ry_bottom, $/;"	f	class:agg::rounded_rect
random	examples/gouraud_mesh.cpp	/^    static double random(double v1, double v2)$/;"	f	namespace:agg
random_dbl	examples/circles.cpp	/^double random_dbl(double start, double end)$/;"	f
randomize_points	examples/gouraud_mesh.cpp	/^    void mesh_ctrl::randomize_points(double delta)$/;"	f	class:agg::mesh_ctrl
range	include/ctrl/agg_slider_ctrl.h	/^        void range(double min, double max) { m_min = min; m_max = max; }$/;"	f	class:agg::slider_ctrl_impl
range_adaptor	include/agg_array.h	/^        range_adaptor(Array& array, unsigned start, unsigned size) :$/;"	f	class:agg::range_adaptor
range_adaptor	include/agg_array.h	/^    template<class Array> class range_adaptor$/;"	c	namespace:agg
ras_conv_dbl	include/agg_rasterizer_sl_clip.h	/^    struct ras_conv_dbl$/;"	s	namespace:agg
ras_conv_dbl_3x	include/agg_rasterizer_sl_clip.h	/^    struct ras_conv_dbl_3x$/;"	s	namespace:agg
ras_conv_int	include/agg_rasterizer_sl_clip.h	/^    struct ras_conv_int$/;"	s	namespace:agg
ras_conv_int_3x	include/agg_rasterizer_sl_clip.h	/^    struct ras_conv_int_3x$/;"	s	namespace:agg
ras_conv_int_sat	include/agg_rasterizer_sl_clip.h	/^    struct ras_conv_int_sat$/;"	s	namespace:agg
rasterizer_cells_aa	include/agg_rasterizer_cells_aa.h	/^    rasterizer_cells_aa<Cell>::rasterizer_cells_aa() :$/;"	f	class:agg::rasterizer_cells_aa
rasterizer_cells_aa	include/agg_rasterizer_cells_aa.h	/^    template<class Cell> class rasterizer_cells_aa$/;"	c	namespace:agg
rasterizer_compound_aa	include/agg_rasterizer_compound_aa.h	/^        rasterizer_compound_aa() : $/;"	f	class:agg::rasterizer_compound_aa
rasterizer_compound_aa	include/agg_rasterizer_compound_aa.h	/^    template<class Clip=rasterizer_sl_clip_int> class rasterizer_compound_aa$/;"	c	namespace:agg
rasterizer_outline	examples/rasterizers2.cpp	/^    typedef agg::rasterizer_outline<renderer_prim> rasterizer_outline;$/;"	t	class:the_application	file:
rasterizer_outline	include/agg_rasterizer_outline.h	/^        explicit rasterizer_outline(Renderer& ren) : $/;"	f	class:agg::rasterizer_outline
rasterizer_outline	include/agg_rasterizer_outline.h	/^    template<class Renderer> class rasterizer_outline$/;"	c	namespace:agg
rasterizer_outline_aa	examples/rasterizers2.cpp	/^    typedef agg::rasterizer_outline_aa<renderer_oaa> rasterizer_outline_aa;$/;"	t	class:the_application	file:
rasterizer_outline_aa	include/agg_rasterizer_outline_aa.h	/^        explicit rasterizer_outline_aa(Renderer& ren) : $/;"	f	class:agg::rasterizer_outline_aa
rasterizer_outline_aa	include/agg_rasterizer_outline_aa.h	/^    template<class Renderer, class Coord=line_coord> class rasterizer_outline_aa$/;"	c	namespace:agg
rasterizer_outline_img	examples/rasterizers2.cpp	/^    typedef agg::rasterizer_outline_aa<renderer_img> rasterizer_outline_img;$/;"	t	class:the_application	file:
rasterizer_scanline	examples/bezier_div.cpp	/^    typedef agg::rasterizer_scanline_aa<> rasterizer_scanline;$/;"	t	class:the_application	file:
rasterizer_scanline	examples/gouraud_mesh.cpp	/^    typedef agg::rasterizer_scanline_aa<> rasterizer_scanline;$/;"	t	class:the_application	file:
rasterizer_scanline	examples/line_patterns.cpp	/^    typedef agg::rasterizer_scanline_aa<> rasterizer_scanline;$/;"	t	class:the_application	file:
rasterizer_scanline	examples/line_patterns_clip.cpp	/^    typedef agg::rasterizer_scanline_aa<agg::rasterizer_sl_clip_int_sat> rasterizer_scanline;$/;"	t	class:the_application	file:
rasterizer_scanline	examples/rasterizers2.cpp	/^    typedef agg::rasterizer_scanline_aa<> rasterizer_scanline;$/;"	t	class:the_application	file:
rasterizer_scanline_aa	include/agg_rasterizer_scanline_aa.h	/^        rasterizer_scanline_aa() : $/;"	f	class:agg::rasterizer_scanline_aa
rasterizer_scanline_aa	include/agg_rasterizer_scanline_aa.h	/^        rasterizer_scanline_aa(const GammaF& gamma_function) : $/;"	f	class:agg::rasterizer_scanline_aa
rasterizer_scanline_aa	include/agg_rasterizer_scanline_aa.h	/^    template<class Clip=rasterizer_sl_clip_int> class rasterizer_scanline_aa$/;"	c	namespace:agg
rasterizer_sl_clip	include/agg_rasterizer_sl_clip.h	/^        rasterizer_sl_clip() :  $/;"	f	class:agg::rasterizer_sl_clip
rasterizer_sl_clip	include/agg_rasterizer_sl_clip.h	/^    template<class Conv> class rasterizer_sl_clip$/;"	c	namespace:agg
rasterizer_sl_clip_dbl	include/agg_rasterizer_sl_clip.h	/^    typedef rasterizer_sl_clip<ras_conv_dbl>     rasterizer_sl_clip_dbl;$/;"	t	namespace:agg
rasterizer_sl_clip_dbl_3x	include/agg_rasterizer_sl_clip.h	/^    typedef rasterizer_sl_clip<ras_conv_dbl_3x>  rasterizer_sl_clip_dbl_3x;$/;"	t	namespace:agg
rasterizer_sl_clip_int	include/agg_rasterizer_sl_clip.h	/^    typedef rasterizer_sl_clip<ras_conv_int>     rasterizer_sl_clip_int;$/;"	t	namespace:agg
rasterizer_sl_clip_int_3x	include/agg_rasterizer_sl_clip.h	/^    typedef rasterizer_sl_clip<ras_conv_int_3x>  rasterizer_sl_clip_int_3x;$/;"	t	namespace:agg
rasterizer_sl_clip_int_sat	include/agg_rasterizer_sl_clip.h	/^    typedef rasterizer_sl_clip<ras_conv_int_sat> rasterizer_sl_clip_int_sat;$/;"	t	namespace:agg
rasterizer_sl_no_clip	include/agg_rasterizer_sl_clip.h	/^        rasterizer_sl_no_clip() : m_x1(0), m_y1(0) {}$/;"	f	class:agg::rasterizer_sl_no_clip
rasterizer_sl_no_clip	include/agg_rasterizer_sl_clip.h	/^    class rasterizer_sl_no_clip$/;"	c	namespace:agg
rasterizer_type	examples/aa_test.cpp	/^typedef agg::rasterizer_scanline_aa<>                       rasterizer_type;$/;"	t	file:
raw_display_handler	src/platform/AmigaOS/agg_platform_support.cpp	/^	void* platform_support::raw_display_handler()$/;"	f	class:agg::platform_support
raw_display_handler	src/platform/BeOS/agg_platform_support.cpp	/^    void* platform_support::raw_display_handler()$/;"	f	class:agg::platform_support
raw_display_handler	src/platform/win32/agg_platform_support.cpp	/^    void* platform_support::raw_display_handler()$/;"	f	class:agg::platform_support
rbox_ctrl	include/ctrl/agg_rbox_ctrl.h	/^        rbox_ctrl(double x1, double y1, double x2, double y2, bool flip_y=false) :$/;"	f	class:agg::rbox_ctrl
rbox_ctrl	include/ctrl/agg_rbox_ctrl.h	/^    template<class ColorT> class rbox_ctrl : public rbox_ctrl_impl$/;"	c	namespace:agg
rbox_ctrl_impl	include/ctrl/agg_rbox_ctrl.h	/^    class rbox_ctrl_impl : public ctrl$/;"	c	namespace:agg
rbox_ctrl_impl	src/ctrl/agg_rbox_ctrl.cpp	/^    rbox_ctrl_impl::rbox_ctrl_impl(double x1, double y1, $/;"	f	class:agg::rbox_ctrl_impl
rbuf	include/agg_renderer_primitives.h	/^        const rendering_buffer& rbuf() const { return m_ren->rbuf(); }$/;"	f	class:agg::renderer_primitives
rbuf	include/agg_renderer_primitives.h	/^        rendering_buffer& rbuf() { return m_ren->rbuf(); }$/;"	f	class:agg::renderer_primitives
rbuf_img	include/platform/agg_platform_support.h	/^        rendering_buffer& rbuf_img(unsigned idx) { return m_rbuf_img[idx]; } $/;"	f	class:agg::platform_support
rbuf_type	examples/compositing.cpp	/^typedef agg::rendering_buffer rbuf_type;$/;"	t	file:
rbuf_type	include/agg_pixfmt_gray.h	/^        typedef RenBuf   rbuf_type;$/;"	t	class:agg::pixfmt_alpha_blend_gray
rbuf_type	include/agg_pixfmt_rgb.h	/^        typedef RenBuf   rbuf_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
rbuf_type	include/agg_pixfmt_rgb_packed.h	/^        typedef RenBuf   rbuf_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
rbuf_type	include/agg_pixfmt_rgba.h	/^        typedef RenBuf   rbuf_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
rbuf_type	include/agg_pixfmt_rgba.h	/^        typedef RenBuf   rbuf_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
rbuf_window	include/platform/agg_platform_support.h	/^        rendering_buffer& rbuf_window()          { return m_rbuf_window; } $/;"	f	class:agg::platform_support
read	examples/mol_view.cpp	/^bool molecule::read(FILE* fd)$/;"	f	class:molecule
read_gamma	examples/gamma_ctrl.cpp	/^void read_gamma(const char* fname)$/;"	f
read_int32	include/agg_scanline_storage_aa.h	/^                int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
read_int32	include/agg_scanline_storage_aa.h	/^            int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
read_int32	include/agg_scanline_storage_aa.h	/^        int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_aa
read_int32	include/agg_scanline_storage_bin.h	/^                int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
read_int32	include/agg_scanline_storage_bin.h	/^            int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
read_int32	include/agg_scanline_storage_bin.h	/^        int read_int32()$/;"	f	class:agg::serialized_scanlines_adaptor_bin
read_int32u	include/agg_scanline_storage_aa.h	/^        unsigned read_int32u()$/;"	f	class:agg::serialized_scanlines_adaptor_aa
read_next	examples/flash_rasterizer.cpp	/^        bool read_next()$/;"	f	class:agg::compound_shape
read_next	examples/flash_rasterizer.cpp	/^    void read_next()$/;"	f	class:the_application
read_next	examples/flash_rasterizer2.cpp	/^        bool read_next()$/;"	f	class:agg::compound_shape
read_next	examples/flash_rasterizer2.cpp	/^    void read_next()$/;"	f	class:the_application
ready	include/agg_trans_double_path.h	/^            ready$/;"	e	enum:agg::trans_double_path::status_e
ready	include/agg_trans_single_path.h	/^            ready$/;"	e	enum:agg::trans_single_path::status_e
ready	include/agg_vcgen_bspline.h	/^            ready,$/;"	e	enum:agg::vcgen_bspline::status_e
ready	include/agg_vcgen_contour.h	/^            ready,$/;"	e	enum:agg::vcgen_contour::status_e
ready	include/agg_vcgen_dash.h	/^            ready,$/;"	e	enum:agg::vcgen_dash::status_e
ready	include/agg_vcgen_smooth_poly1.h	/^            ready,$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
ready	include/agg_vcgen_stroke.h	/^            ready,$/;"	e	enum:agg::vcgen_stroke::status_e
realloc_lut	src/agg_image_filters.cpp	/^    void image_filter_lut::realloc_lut(double radius)$/;"	f	class:agg::image_filter_lut
realloc_span	include/agg_pixfmt_amask_adaptor.h	/^        void realloc_span(unsigned len)$/;"	f	class:agg::pixfmt_amask_adaptor
rect	src/agg_rounded_rect.cpp	/^    void rounded_rect::rect(double x1, double y1, double x2, double y2)$/;"	f	class:agg::rounded_rect
rect_base	include/agg_basics.h	/^        rect_base() {}$/;"	f	struct:agg::rect_base
rect_base	include/agg_basics.h	/^        rect_base(T x1_, T y1_, T x2_, T y2_) :$/;"	f	struct:agg::rect_base
rect_base	include/agg_basics.h	/^    template<class T> struct rect_base$/;"	s	namespace:agg
rect_d	include/agg_basics.h	/^    typedef rect_base<double> rect_d; \/\/----rect_d$/;"	t	namespace:agg
rect_f	include/agg_basics.h	/^    typedef rect_base<float>  rect_f; \/\/----rect_f$/;"	t	namespace:agg
rect_i	include/agg_basics.h	/^    typedef rect_base<int>    rect_i; \/\/----rect_i$/;"	t	namespace:agg
rect_to_parl	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::rect_to_parl(double x1, double y1, $/;"	f	class:agg::trans_affine
rect_to_quad	include/agg_span_interpolator_persp.h	/^        void rect_to_quad(double x1, double y1, double x2, double y2, $/;"	f	class:agg::span_interpolator_persp_exact
rect_to_quad	include/agg_span_interpolator_persp.h	/^        void rect_to_quad(double x1, double y1, double x2, double y2, $/;"	f	class:agg::span_interpolator_persp_lerp
rect_to_quad	include/agg_trans_bilinear.h	/^        void rect_to_quad(double x1, double y1, double x2, double y2, $/;"	f	class:agg::trans_bilinear
rect_to_quad	include/agg_trans_perspective.h	/^    inline bool trans_perspective::rect_to_quad(double x1, double y1, $/;"	f	class:agg::trans_perspective
rect_type	include/agg_rasterizer_sl_clip.h	/^        typedef rect_base<coord_type>     rect_type;$/;"	t	class:agg::rasterizer_sl_clip
rectangle	include/agg_renderer_primitives.h	/^        void rectangle(int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_primitives
recursive_bezier	src/agg_curves.cpp	/^    void curve3_div::recursive_bezier(double x1, double y1, $/;"	f	class:agg::curve3_div
recursive_bezier	src/agg_curves.cpp	/^    void curve4_div::recursive_bezier(double x1, double y1, $/;"	f	class:agg::curve4_div
recursive_blur	include/agg_blur.h	/^    template<class ColorT, class CalculatorT> class recursive_blur$/;"	c	namespace:agg
recursive_blur_calc_gray	include/agg_blur.h	/^    template<class T=double> struct recursive_blur_calc_gray$/;"	s	namespace:agg
recursive_blur_calc_rgb	include/agg_blur.h	/^    template<class T=double> struct recursive_blur_calc_rgb$/;"	s	namespace:agg
recursive_blur_calc_rgba	include/agg_blur.h	/^    template<class T=double> struct recursive_blur_calc_rgba$/;"	s	namespace:agg
rel_to_abs	include/agg_path_storage.h	/^    inline void path_base<VC>::rel_to_abs(double* x, double* y) const$/;"	f	class:agg::path_base
rem	include/agg_dda_line.h	/^        int rem() const { return m_rem; }$/;"	f	class:agg::dda2_line_interpolator
remove_all	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::remove_all()$/;"	f	class:agg::svg::path_renderer
remove_all	include/agg_array.h	/^        void remove_all()            { m_size = 0; }$/;"	f	class:agg::pod_auto_vector
remove_all	include/agg_array.h	/^        void remove_all()         { m_size = 0; }$/;"	f	class:agg::pod_vector
remove_all	include/agg_array.h	/^        void remove_all() { m_size = 0; }$/;"	f	class:agg::pod_bvector
remove_all	include/agg_array.h	/^        void remove_all()$/;"	f	class:agg::block_allocator
remove_all	include/agg_conv_adaptor_vcgen.h	/^        void remove_all() {}$/;"	f	struct:agg::null_markers
remove_all	include/agg_gradient_lut.h	/^    void gradient_lut<T,S>::remove_all()$/;"	f	class:agg::gradient_lut
remove_all	include/agg_path_storage.h	/^        void remove_all() { m_vertices.clear(); }$/;"	f	class:agg::vertex_stl_storage
remove_all	include/agg_path_storage.h	/^        void remove_all() { m_vertices.remove_all(); m_iterator = 0; }$/;"	f	class:agg::path_base
remove_all	include/agg_path_storage.h	/^    inline void vertex_block_storage<T,S,P>::remove_all()$/;"	f	class:agg::vertex_block_storage
remove_all	include/agg_path_storage_integer.h	/^        void remove_all() { m_storage.remove_all(); }$/;"	f	class:agg::path_storage_integer
remove_all	include/agg_scanline_storage_aa.h	/^        void remove_all()$/;"	f	class:agg::scanline_cell_storage
remove_all	include/agg_vcgen_vertex_sequence.h	/^    inline void vcgen_vertex_sequence::remove_all()$/;"	f	class:agg::vcgen_vertex_sequence
remove_all	src/agg_vcgen_bspline.cpp	/^    void vcgen_bspline::remove_all()$/;"	f	class:agg::vcgen_bspline
remove_all	src/agg_vcgen_contour.cpp	/^    void vcgen_contour::remove_all()$/;"	f	class:agg::vcgen_contour
remove_all	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::remove_all()$/;"	f	class:agg::vcgen_dash
remove_all	src/agg_vcgen_markers_term.cpp	/^    void vcgen_markers_term::remove_all()$/;"	f	class:agg::vcgen_markers_term
remove_all	src/agg_vcgen_smooth_poly1.cpp	/^    void vcgen_smooth_poly1::remove_all()$/;"	f	class:agg::vcgen_smooth_poly1
remove_all	src/agg_vcgen_stroke.cpp	/^    void vcgen_stroke::remove_all()$/;"	f	class:agg::vcgen_stroke
remove_all_dashes	include/agg_conv_dash.h	/^        void remove_all_dashes() $/;"	f	struct:agg::conv_dash
remove_all_dashes	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::remove_all_dashes()$/;"	f	class:agg::vcgen_dash
remove_duplicates	include/agg_array.h	/^    unsigned remove_duplicates(Array& arr, Equal equal)$/;"	f	namespace:agg
remove_last	include/agg_array.h	/^    inline void pod_bvector<T, S>::remove_last()$/;"	f	class:agg::pod_bvector
ren	include/agg_renderer_base.h	/^        const pixfmt_type& ren() const { return *m_ren;  }$/;"	f	class:agg::renderer_base
ren	include/agg_renderer_base.h	/^        pixfmt_type& ren() { return *m_ren;  }$/;"	f	class:agg::renderer_base
ren	include/agg_renderer_mclip.h	/^        const pixfmt_type& ren() const { return m_ren.ren();  }$/;"	f	class:agg::renderer_mclip
ren	include/agg_renderer_mclip.h	/^        pixfmt_type& ren() { return m_ren.ren();  }$/;"	f	class:agg::renderer_mclip
ren	include/agg_renderer_primitives.h	/^        base_ren_type& ren() { return *m_ren; }        $/;"	f	class:agg::renderer_primitives
ren	include/agg_renderer_primitives.h	/^        const base_ren_type& ren() const { return *m_ren; }        $/;"	f	class:agg::renderer_primitives
ren_base	examples/raster_text.cpp	/^    typedef agg::renderer_base<pixfmt> ren_base;$/;"	t	class:the_application	file:
ren_type	include/agg_renderer_raster_text.h	/^        typedef BaseRenderer ren_type;$/;"	t	class:agg::renderer_raster_htext_solid
ren_type	include/agg_renderer_raster_text.h	/^        typedef BaseRenderer ren_type;$/;"	t	class:agg::renderer_raster_vtext_solid
ren_type	include/agg_renderer_raster_text.h	/^        typedef ScanlineRenderer ren_type;$/;"	t	class:agg::renderer_raster_htext
render	examples/aa_demo.cpp	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::renderer_enlarged
render	examples/alpha_mask3.cpp	/^    unsigned render()$/;"	f	class:the_application
render	examples/polymorphic_renderer.cpp	/^        virtual void render(const scanline_type& sl)$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_adaptor
render	examples/svg_viewer/agg_svg_path_renderer.h	/^        void render(Rasterizer& ras, $/;"	f	class:agg::svg::path_renderer
render	include/agg_rasterizer_outline_aa.h	/^    void rasterizer_outline_aa<Renderer, Coord>::render(bool close_polygon)$/;"	f	class:agg::rasterizer_outline_aa
render	include/agg_renderer_scanline.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::renderer_scanline_aa
render	include/agg_renderer_scanline.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::renderer_scanline_aa_solid
render	include/agg_renderer_scanline.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::renderer_scanline_bin
render	include/agg_renderer_scanline.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::renderer_scanline_bin_solid
render	include/agg_scanline_storage_aa.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::scanline_storage_aa
render	include/agg_scanline_storage_bin.h	/^        template<class Scanline> void render(const Scanline& sl)$/;"	f	class:agg::scanline_storage_bin
render_all_paths	include/agg_rasterizer_outline.h	/^        void render_all_paths(VertexSource& vs, $/;"	f	class:agg::rasterizer_outline
render_all_paths	include/agg_rasterizer_outline_aa.h	/^        void render_all_paths(VertexSource& vs, $/;"	f	class:agg::rasterizer_outline_aa
render_all_paths	include/agg_renderer_scanline.h	/^    void render_all_paths(Rasterizer& ras, $/;"	f	namespace:agg
render_ctrl	include/agg_rasterizer_outline.h	/^        template<class Ctrl> void render_ctrl(Ctrl& c)$/;"	f	class:agg::rasterizer_outline
render_ctrl	include/agg_rasterizer_outline_aa.h	/^        template<class Ctrl> void render_ctrl(Ctrl& c)$/;"	f	class:agg::rasterizer_outline_aa
render_ctrl	include/ctrl/agg_ctrl.h	/^    void render_ctrl(Rasterizer& ras, Scanline& sl, Renderer& r, Ctrl& c)$/;"	f	namespace:agg
render_ctrl_rs	include/ctrl/agg_ctrl.h	/^    void render_ctrl_rs(Rasterizer& ras, Scanline& sl, Renderer& r, Ctrl& c)$/;"	f	namespace:agg
render_edge_fine	examples/graph_test.cpp	/^    void render_edge_fine(scanline_rasterizer& ras, $/;"	f	class:the_application
render_gouraud	examples/gouraud.cpp	/^    void render_gouraud(Scanline& sl, Ras& ras)$/;"	f	class:the_application
render_gpc	examples/gpc_test.cpp	/^    unsigned render_gpc(Scanline& sl, Ras& ras)$/;"	f	class:the_application
render_hline	include/agg_rasterizer_cells_aa.h	/^    AGG_INLINE void rasterizer_cells_aa<Cell>::render_hline(int ey, $/;"	f	class:agg::rasterizer_cells_aa
render_sbool	examples/scanline_boolean2.cpp	/^    unsigned render_sbool(Rasterizer& ras1, Rasterizer& ras2)$/;"	f	class:the_application
render_scanline_aa	include/agg_renderer_scanline.h	/^    void render_scanline_aa(const Scanline& sl, BaseRenderer& ren, $/;"	f	namespace:agg
render_scanline_aa_solid	include/agg_renderer_scanline.h	/^    void render_scanline_aa_solid(const Scanline& sl, $/;"	f	namespace:agg
render_scanline_bin	include/agg_renderer_scanline.h	/^    void render_scanline_bin(const Scanline& sl, BaseRenderer& ren, $/;"	f	namespace:agg
render_scanline_bin_solid	include/agg_renderer_scanline.h	/^    void render_scanline_bin_solid(const Scanline& sl, $/;"	f	namespace:agg
render_scanline_boolean	examples/scanline_boolean2.cpp	/^    void render_scanline_boolean(Rasterizer& ras1, Rasterizer& ras2)$/;"	f	class:the_application
render_scanlines	include/agg_renderer_scanline.h	/^    void render_scanlines(Rasterizer& ras, Scanline& sl, Renderer& ren)$/;"	f	namespace:agg
render_scanlines_aa	include/agg_renderer_scanline.h	/^    void render_scanlines_aa(Rasterizer& ras, Scanline& sl, BaseRenderer& ren, $/;"	f	namespace:agg
render_scanlines_aa_solid	include/agg_renderer_scanline.h	/^    void render_scanlines_aa_solid(Rasterizer& ras, Scanline& sl, $/;"	f	namespace:agg
render_scanlines_bin	include/agg_renderer_scanline.h	/^    void render_scanlines_bin(Rasterizer& ras, Scanline& sl, BaseRenderer& ren, $/;"	f	namespace:agg
render_scanlines_bin_solid	include/agg_renderer_scanline.h	/^    void render_scanlines_bin_solid(Rasterizer& ras, Scanline& sl, $/;"	f	namespace:agg
render_scanlines_compound	include/agg_renderer_scanline.h	/^    void render_scanlines_compound(Rasterizer& ras, $/;"	f	namespace:agg
render_scanlines_compound_layered	include/agg_renderer_scanline.h	/^    void render_scanlines_compound_layered(Rasterizer& ras, $/;"	f	namespace:agg
render_scene	examples/compositing.cpp	/^    void render_scene(rbuf_type& rbuf, prim_pixfmt_type& pixf)$/;"	f	class:the_application
render_scene	examples/compositing2.cpp	/^    template<class RenBase> void render_scene(RenBase& rb)$/;"	f	class:the_application
render_text	include/agg_renderer_raster_text.h	/^        void render_text(double x, double y, const CharT* str, bool flip=false)$/;"	f	class:agg::renderer_raster_htext
render_text	include/agg_renderer_raster_text.h	/^        void render_text(double x, double y, const CharT* str, bool flip=false)$/;"	f	class:agg::renderer_raster_htext_solid
render_text	include/agg_renderer_raster_text.h	/^        void render_text(double x, double y, const CharT* str, bool flip=false)$/;"	f	class:agg::renderer_raster_vtext_solid
renderer_aa	examples/rasterizers.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_aa;$/;"	t	class:the_application	file:
renderer_aa	examples/rasterizers2.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_aa;$/;"	t	class:the_application	file:
renderer_base	examples/bezier_div.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/bspline.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/gouraud_mesh.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/gradient_focal.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/image_filters.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/image_filters2.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/image_perspective.cpp	/^    typedef agg::renderer_base<pixfmt>                     renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/image_resample.cpp	/^typedef agg::renderer_base<pixfmt>                     renderer_base;$/;"	t	file:
renderer_base	examples/line_patterns.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/line_patterns_clip.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/lion.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/lion_lens.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/pattern_perspective.cpp	/^    typedef agg::renderer_base<pixfmt>                     renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/pattern_resample.cpp	/^typedef agg::renderer_base<pixfmt>                     renderer_base;$/;"	t	file:
renderer_base	examples/perspective.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/rasterizers.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/rasterizers2.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/scanline_boolean.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/trans_curve1.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/trans_curve1_ft.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/trans_curve2.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	examples/trans_curve2_ft.cpp	/^    typedef agg::renderer_base<pixfmt> renderer_base;$/;"	t	class:the_application	file:
renderer_base	include/agg_renderer_base.h	/^        explicit renderer_base(pixfmt_type& ren) :$/;"	f	class:agg::renderer_base
renderer_base	include/agg_renderer_base.h	/^        renderer_base() : m_ren(0), m_clip_box(1, 1, 0, 0) {}$/;"	f	class:agg::renderer_base
renderer_base	include/agg_renderer_base.h	/^    template<class PixelFormat> class renderer_base$/;"	c	namespace:agg
renderer_base_pre	examples/image_filters.cpp	/^    typedef agg::renderer_base<pixfmt_pre> renderer_base_pre;$/;"	t	class:the_application	file:
renderer_base_pre	examples/image_filters2.cpp	/^    typedef agg::renderer_base<pixfmt_pre> renderer_base_pre;$/;"	t	class:the_application	file:
renderer_base_pre	examples/image_perspective.cpp	/^    typedef agg::renderer_base<pixfmt_pre> renderer_base_pre;$/;"	t	class:the_application	file:
renderer_base_pre	examples/image_resample.cpp	/^typedef agg::renderer_base<pixfmt_pre>                 renderer_base_pre;$/;"	t	file:
renderer_base_pre	examples/pattern_perspective.cpp	/^    typedef agg::renderer_base<pixfmt_pre> renderer_base_pre;$/;"	t	class:the_application	file:
renderer_base_pre	examples/pattern_resample.cpp	/^typedef agg::renderer_base<pixfmt_pre>                 renderer_base_pre;$/;"	t	file:
renderer_base_type	examples/aa_test.cpp	/^typedef agg::renderer_base<pixfmt_type>                     renderer_base_type;$/;"	t	file:
renderer_bin	examples/freetype_test.cpp	/^    typedef agg::renderer_scanline_bin_solid<base_ren_type> renderer_bin;$/;"	t	class:the_application	file:
renderer_bin	examples/rasterizers.cpp	/^    typedef agg::renderer_scanline_bin_solid<renderer_base> renderer_bin;$/;"	t	class:the_application	file:
renderer_bin	examples/truetype_test.cpp	/^    typedef agg::renderer_scanline_bin_solid<base_ren_type> renderer_bin;$/;"	t	class:the_application	file:
renderer_enlarged	examples/aa_demo.cpp	/^        renderer_enlarged(Renderer& ren, double size) : $/;"	f	class:agg::renderer_enlarged
renderer_enlarged	examples/aa_demo.cpp	/^    template<class Renderer> class renderer_enlarged$/;"	c	namespace:agg	file:
renderer_img	examples/rasterizers2.cpp	/^    typedef agg::renderer_outline_image<renderer_base, image_pattern> renderer_img;$/;"	t	class:the_application	file:
renderer_markers	include/agg_renderer_markers.h	/^        renderer_markers(base_ren_type& rbuf) :$/;"	f	class:agg::renderer_markers
renderer_markers	include/agg_renderer_markers.h	/^    template<class BaseRenderer> class renderer_markers :$/;"	c	namespace:agg
renderer_mclip	include/agg_renderer_mclip.h	/^        explicit renderer_mclip(pixfmt_type& pixf) :$/;"	f	class:agg::renderer_mclip
renderer_mclip	include/agg_renderer_mclip.h	/^    template<class PixelFormat> class renderer_mclip$/;"	c	namespace:agg
renderer_oaa	examples/rasterizers2.cpp	/^    typedef agg::renderer_outline_aa<renderer_base> renderer_oaa;$/;"	t	class:the_application	file:
renderer_outline_aa	include/agg_renderer_outline_aa.h	/^        renderer_outline_aa(base_ren_type& ren, const line_profile_aa& prof) :$/;"	f	class:agg::renderer_outline_aa
renderer_outline_aa	include/agg_renderer_outline_aa.h	/^    template<class BaseRenderer> class renderer_outline_aa$/;"	c	namespace:agg
renderer_outline_image	include/agg_renderer_outline_image.h	/^        renderer_outline_image(base_ren_type& ren, const pattern_type& patt) :$/;"	f	class:agg::renderer_outline_image
renderer_outline_image	include/agg_renderer_outline_image.h	/^    class renderer_outline_image$/;"	c	namespace:agg
renderer_prim	examples/rasterizers2.cpp	/^    typedef agg::renderer_primitives<renderer_base> renderer_prim;$/;"	t	class:the_application	file:
renderer_primitives	include/agg_renderer_primitives.h	/^        explicit renderer_primitives(base_ren_type& ren) :$/;"	f	class:agg::renderer_primitives
renderer_primitives	include/agg_renderer_primitives.h	/^    template<class BaseRenderer> class renderer_primitives$/;"	c	namespace:agg
renderer_raster_htext	include/agg_renderer_raster_text.h	/^        renderer_raster_htext(ren_type& ren, glyph_gen_type& glyph) :$/;"	f	class:agg::renderer_raster_htext
renderer_raster_htext	include/agg_renderer_raster_text.h	/^    class renderer_raster_htext$/;"	c	namespace:agg
renderer_raster_htext_solid	include/agg_renderer_raster_text.h	/^        renderer_raster_htext_solid(ren_type& ren, glyph_gen_type& glyph) :$/;"	f	class:agg::renderer_raster_htext_solid
renderer_raster_htext_solid	include/agg_renderer_raster_text.h	/^    class renderer_raster_htext_solid$/;"	c	namespace:agg
renderer_raster_vtext_solid	include/agg_renderer_raster_text.h	/^        renderer_raster_vtext_solid(ren_type& ren, glyph_gen_type& glyph) :$/;"	f	class:agg::renderer_raster_vtext_solid
renderer_raster_vtext_solid	include/agg_renderer_raster_text.h	/^    class renderer_raster_vtext_solid$/;"	c	namespace:agg
renderer_scanline	examples/bezier_div.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_scanline;$/;"	t	class:the_application	file:
renderer_scanline	examples/gouraud_mesh.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_scanline;$/;"	t	class:the_application	file:
renderer_scanline	examples/line_patterns.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_scanline;$/;"	t	class:the_application	file:
renderer_scanline	examples/line_patterns_clip.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_scanline;$/;"	t	class:the_application	file:
renderer_scanline_aa	include/agg_renderer_scanline.h	/^        renderer_scanline_aa() : m_ren(0), m_alloc(0), m_span_gen(0) {}$/;"	f	class:agg::renderer_scanline_aa
renderer_scanline_aa	include/agg_renderer_scanline.h	/^        renderer_scanline_aa(base_ren_type& ren, $/;"	f	class:agg::renderer_scanline_aa
renderer_scanline_aa	include/agg_renderer_scanline.h	/^    class renderer_scanline_aa$/;"	c	namespace:agg
renderer_scanline_aa_solid	include/agg_renderer_scanline.h	/^        explicit renderer_scanline_aa_solid(base_ren_type& ren) : m_ren(&ren) {}$/;"	f	class:agg::renderer_scanline_aa_solid
renderer_scanline_aa_solid	include/agg_renderer_scanline.h	/^        renderer_scanline_aa_solid() : m_ren(0) {}$/;"	f	class:agg::renderer_scanline_aa_solid
renderer_scanline_aa_solid	include/agg_renderer_scanline.h	/^    template<class BaseRenderer> class renderer_scanline_aa_solid$/;"	c	namespace:agg
renderer_scanline_bin	include/agg_renderer_scanline.h	/^        renderer_scanline_bin() : m_ren(0), m_alloc(0), m_span_gen(0) {}$/;"	f	class:agg::renderer_scanline_bin
renderer_scanline_bin	include/agg_renderer_scanline.h	/^        renderer_scanline_bin(base_ren_type& ren, $/;"	f	class:agg::renderer_scanline_bin
renderer_scanline_bin	include/agg_renderer_scanline.h	/^    class renderer_scanline_bin$/;"	c	namespace:agg
renderer_scanline_bin_solid	include/agg_renderer_scanline.h	/^        explicit renderer_scanline_bin_solid(base_ren_type& ren) : m_ren(&ren) {}$/;"	f	class:agg::renderer_scanline_bin_solid
renderer_scanline_bin_solid	include/agg_renderer_scanline.h	/^        renderer_scanline_bin_solid() : m_ren(0) {}$/;"	f	class:agg::renderer_scanline_bin_solid
renderer_scanline_bin_solid	include/agg_renderer_scanline.h	/^    template<class BaseRenderer> class renderer_scanline_bin_solid$/;"	c	namespace:agg
renderer_scanline_type	examples/aa_test.cpp	/^typedef agg::renderer_scanline_aa_solid<renderer_base_type> renderer_scanline_type;$/;"	t	file:
renderer_solid	examples/freetype_test.cpp	/^    typedef agg::renderer_scanline_aa_solid<base_ren_type> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/gradient_focal.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/image_perspective.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/image_resample.cpp	/^typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	file:
renderer_solid	examples/lion.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/lion_lens.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/pattern_perspective.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/pattern_resample.cpp	/^typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	file:
renderer_solid	examples/perspective.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/scanline_boolean.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/trans_curve1.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/trans_curve1_ft.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/trans_curve2.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/trans_curve2_ft.cpp	/^    typedef agg::renderer_scanline_aa_solid<renderer_base> renderer_solid;$/;"	t	class:the_application	file:
renderer_solid	examples/truetype_test.cpp	/^    typedef agg::renderer_scanline_aa_solid<base_ren_type> renderer_solid;$/;"	t	class:the_application	file:
renderer_type	include/agg_renderer_outline_aa.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_aa0
renderer_type	include/agg_renderer_outline_aa.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_aa1
renderer_type	include/agg_renderer_outline_aa.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_aa2
renderer_type	include/agg_renderer_outline_aa.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_aa3
renderer_type	include/agg_renderer_outline_aa.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_aa_base
renderer_type	include/agg_renderer_outline_image.h	/^        typedef Renderer renderer_type;$/;"	t	class:agg::line_interpolator_image
rendering_buffer	include/agg_rendering_buffer.h	/^    typedef AGG_RENDERING_BUFFER rendering_buffer;$/;"	t	namespace:agg
rendering_buffer	include/agg_rendering_buffer.h	/^    typedef row_accessor<int8u> rendering_buffer;$/;"	t	namespace:agg
rendering_buffer_dynarow	include/agg_rendering_buffer_dynarow.h	/^        rendering_buffer_dynarow() :$/;"	f	class:agg::rendering_buffer_dynarow
rendering_buffer_dynarow	include/agg_rendering_buffer_dynarow.h	/^        rendering_buffer_dynarow(unsigned width, unsigned height, $/;"	f	class:agg::rendering_buffer_dynarow
rendering_buffer_dynarow	include/agg_rendering_buffer_dynarow.h	/^    class rendering_buffer_dynarow$/;"	c	namespace:agg
reset	include/agg_curves.h	/^        void reset() $/;"	f	class:agg::curve3
reset	include/agg_curves.h	/^        void reset() $/;"	f	class:agg::curve4
reset	include/agg_curves.h	/^        void reset() { m_num_steps = 0; m_step = -1; }$/;"	f	class:agg::curve3_inc
reset	include/agg_curves.h	/^        void reset() { m_num_steps = 0; m_step = -1; }$/;"	f	class:agg::curve4_inc
reset	include/agg_curves.h	/^        void reset() { m_points.remove_all(); m_count = 0; }$/;"	f	class:agg::curve3_div
reset	include/agg_curves.h	/^        void reset() { m_points.remove_all(); m_count = 0; }$/;"	f	class:agg::curve4_div
reset	include/agg_rasterizer_cells_aa.h	/^    void rasterizer_cells_aa<Cell>::reset()$/;"	f	class:agg::rasterizer_cells_aa
reset	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::reset() $/;"	f	class:agg::rasterizer_compound_aa
reset	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::reset() $/;"	f	class:agg::rasterizer_scanline_aa
reset	include/agg_scanline_bin.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline32_bin
reset	include/agg_scanline_bin.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline_bin
reset	include/agg_scanline_p.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline32_p8
reset	include/agg_scanline_p.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline_p8
reset	include/agg_scanline_storage_aa.h	/^            void     reset(int, int)     {}$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
reset	include/agg_scanline_storage_aa.h	/^            void     reset(int, int)     {}$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
reset	include/agg_scanline_storage_bin.h	/^            void     reset(int, int)     {}$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
reset	include/agg_scanline_storage_bin.h	/^            void     reset(int, int)     {}$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
reset	include/agg_scanline_u.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline32_u8
reset	include/agg_scanline_u.h	/^        void reset(int min_x, int max_x)$/;"	f	class:agg::scanline_u8
reset	include/agg_trans_perspective.h	/^    inline const trans_perspective& trans_perspective::reset()$/;"	f	class:agg::trans_perspective
reset	include/agg_vpgen_segmentator.h	/^        void reset() { m_cmd = path_cmd_stop; }$/;"	f	class:agg::vpgen_segmentator
reset	src/agg_trans_affine.cpp	/^    const trans_affine& trans_affine::reset()$/;"	f	class:agg::trans_affine
reset	src/agg_trans_double_path.cpp	/^    void trans_double_path::reset()$/;"	f	class:agg::trans_double_path
reset	src/agg_trans_single_path.cpp	/^    void trans_single_path::reset()$/;"	f	class:agg::trans_single_path
reset	src/agg_vpgen_clip_polygon.cpp	/^    void vpgen_clip_polygon::reset()$/;"	f	class:agg::vpgen_clip_polygon
reset	src/agg_vpgen_clip_polyline.cpp	/^    void vpgen_clip_polyline::reset()$/;"	f	class:agg::vpgen_clip_polyline
reset_cache	include/agg_font_cache_manager.h	/^        void reset_cache()$/;"	f	class:agg::font_cache_manager
reset_clipping	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::reset_clipping()$/;"	f	class:agg::rasterizer_compound_aa
reset_clipping	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::reset_clipping()$/;"	f	class:agg::rasterizer_scanline_aa
reset_clipping	include/agg_rasterizer_sl_clip.h	/^        void reset_clipping() {}$/;"	f	class:agg::rasterizer_sl_no_clip
reset_clipping	include/agg_rasterizer_sl_clip.h	/^        void reset_clipping()$/;"	f	class:agg::rasterizer_sl_clip
reset_clipping	include/agg_renderer_base.h	/^        void reset_clipping(bool visibility)$/;"	f	class:agg::renderer_base
reset_clipping	include/agg_renderer_mclip.h	/^        void reset_clipping(bool visibility)$/;"	f	class:agg::renderer_mclip
reset_clipping	include/agg_renderer_outline_aa.h	/^        void reset_clipping() { m_clipping = false; }$/;"	f	class:agg::renderer_outline_aa
reset_clipping	include/agg_renderer_outline_image.h	/^        void reset_clipping() { m_clipping = false; }$/;"	f	class:agg::renderer_outline_image
reset_it	gpc/gpc.c	/^static void reset_it(it_node **it)$/;"	f	file:
reset_last_glyph	include/agg_font_cache_manager.h	/^        void reset_last_glyph()$/;"	f	class:agg::font_cache_manager
reset_lmt	gpc/gpc.c	/^static void reset_lmt(lmt_node **lmt)$/;"	f	file:
reset_spans	include/agg_rasterizer_cells_aa.h	/^        void reset_spans() {}$/;"	f	class:agg::scanline_hit_test
reset_spans	include/agg_scanline_bin.h	/^        void reset_spans()$/;"	f	class:agg::scanline32_bin
reset_spans	include/agg_scanline_bin.h	/^        void reset_spans()$/;"	f	class:agg::scanline_bin
reset_spans	include/agg_scanline_p.h	/^        void reset_spans()$/;"	f	class:agg::scanline32_p8
reset_spans	include/agg_scanline_p.h	/^        void reset_spans()$/;"	f	class:agg::scanline_p8
reset_spans	include/agg_scanline_u.h	/^        void reset_spans()$/;"	f	class:agg::scanline32_u8
reset_spans	include/agg_scanline_u.h	/^        void reset_spans()$/;"	f	class:agg::scanline_u8
resize	include/agg_array.h	/^        void resize(unsigned size)$/;"	f	class:agg::pod_array
resize	include/agg_array.h	/^    void pod_vector<T>::resize(unsigned new_size)$/;"	f	class:agg::pod_vector
resize	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::resize(double x1, double y1, double x2, double y2)$/;"	f	class:agg::scale_ctrl_impl
resolution	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::resolution(unsigned dpi) $/;"	f	class:agg::font_engine_freetype_base
resolution	font_freetype/agg_font_freetype.h	/^        unsigned    resolution()   const { return m_resolution; }$/;"	f	class:agg::font_engine_freetype_base
resolution	font_win32_tt/agg_font_win32_tt.h	/^        unsigned    resolution()   const { return m_resolution; }$/;"	f	class:agg::font_engine_win32_tt_base
resolution	font_win32_tt/agg_font_win32_tt.h	/^        void resolution(unsigned dpi) { m_resolution = unsigned(dpi); }$/;"	f	class:agg::font_engine_win32_tt_base
resynchronize	include/agg_span_interpolator_linear.h	/^        void resynchronize(double xe, double ye, unsigned len)$/;"	f	class:agg::span_interpolator_linear
resynchronize	include/agg_span_interpolator_persp.h	/^        void resynchronize(double xe, double ye, unsigned len)$/;"	f	class:agg::span_interpolator_persp_exact
resynchronize	include/agg_span_interpolator_persp.h	/^        void resynchronize(double xe, double ye, unsigned len)$/;"	f	class:agg::span_interpolator_persp_lerp
rewind	examples/aa_test.cpp	/^    void rewind(unsigned)$/;"	f	class:simple_vertex_source
rewind	examples/alpha_mask3.cpp	/^    void rewind(unsigned) $/;"	f	class:spiral
rewind	examples/flash_rasterizer.cpp	/^        void rewind(unsigned path_id)$/;"	f	class:agg::compound_shape
rewind	examples/flash_rasterizer2.cpp	/^        void rewind(unsigned path_id)$/;"	f	class:agg::compound_shape
rewind	examples/gpc_test.cpp	/^        void rewind(unsigned path_id)$/;"	f	struct:agg::conv_poly_counter
rewind	examples/gpc_test.cpp	/^    void rewind(unsigned) $/;"	f	class:spiral
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { c.rewind(path_id); }$/;"	f	struct:curve
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { c.rewind(path_id); }$/;"	f	struct:dash_stroke_draft_arrow
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { c.rewind(path_id); }$/;"	f	struct:dash_stroke_fine_arrow
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { c.rewind(path_id); }$/;"	f	struct:stroke_draft_arrow
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { c.rewind(path_id); }$/;"	f	struct:stroke_fine_arrow
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { d.rewind(path_id); }$/;"	f	struct:dash_stroke_draft_simple
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { s.rewind(path_id); }$/;"	f	struct:dash_stroke_fine_simple
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { s.rewind(path_id); }$/;"	f	struct:stroke_draft_simple
rewind	examples/graph_test.cpp	/^    void rewind(unsigned path_id) { s.rewind(path_id); }$/;"	f	struct:stroke_fine_simple
rewind	examples/graph_test.cpp	/^    void rewind(unsigned) { f = 0; }$/;"	f	struct:line
rewind	examples/interactive_polygon.cpp	/^    void interactive_polygon::rewind(unsigned)$/;"	f	class:agg::interactive_polygon
rewind	examples/interactive_polygon.h	/^        void rewind(unsigned)$/;"	f	class:agg::simple_polygon_vertex_source
rewind	examples/mol_view.cpp	/^    inline void line::rewind(unsigned)$/;"	f	class:agg::line
rewind	examples/mol_view.cpp	/^    inline void solid_wedge::rewind(unsigned)$/;"	f	class:agg::solid_wedge
rewind	examples/mol_view.cpp	/^    void dashed_wedge::rewind(unsigned)$/;"	f	class:agg::dashed_wedge
rewind	examples/mol_view.cpp	/^    void rewind(unsigned)$/;"	f	class:bond_vertex_generator
rewind	examples/rasterizers2.cpp	/^    void rewind(unsigned) $/;"	f	class:spiral
rewind	examples/scanline_boolean2.cpp	/^    void rewind(unsigned) $/;"	f	class:spiral
rewind	examples/svg_viewer/agg_svg_path_renderer.h	/^        void rewind(unsigned path_id) { m_source->rewind(path_id); }$/;"	f	class:agg::svg::conv_count
rewind	examples/trans_polar.cpp	/^        void     rewind(unsigned path_id) { m_pipeline.rewind(path_id); }$/;"	f	class:agg::transformed_control
rewind	include/agg_bezier_arc.h	/^        void rewind(unsigned)$/;"	f	class:agg::bezier_arc
rewind	include/agg_bezier_arc.h	/^        void rewind(unsigned)$/;"	f	class:agg::bezier_arc_svg
rewind	include/agg_conv_adaptor_vcgen.h	/^        void rewind(unsigned path_id) $/;"	f	class:agg::conv_adaptor_vcgen
rewind	include/agg_conv_adaptor_vcgen.h	/^        void rewind(unsigned) {}$/;"	f	struct:agg::null_markers
rewind	include/agg_conv_adaptor_vpgen.h	/^    void conv_adaptor_vpgen<VertexSource, VPGen>::rewind(unsigned path_id) $/;"	f	class:agg::conv_adaptor_vpgen
rewind	include/agg_conv_close_polygon.h	/^    void conv_close_polygon<VertexSource>::rewind(unsigned path_id)$/;"	f	class:agg::conv_close_polygon
rewind	include/agg_conv_concat.h	/^        void rewind(unsigned path_id)$/;"	f	class:agg::conv_concat
rewind	include/agg_conv_curve.h	/^    void conv_curve<VertexSource, Curve3, Curve4>::rewind(unsigned path_id)$/;"	f	class:agg::conv_curve
rewind	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::rewind(unsigned path_id)$/;"	f	class:agg::conv_gpc
rewind	include/agg_conv_marker.h	/^    void conv_marker<MarkerLocator, MarkerShapes>::rewind(unsigned)$/;"	f	class:agg::conv_marker
rewind	include/agg_conv_transform.h	/^        void rewind(unsigned path_id) $/;"	f	class:agg::conv_transform
rewind	include/agg_conv_unclose_polygon.h	/^        void rewind(unsigned path_id)$/;"	f	class:agg::conv_unclose_polygon
rewind	include/agg_curves.h	/^        void rewind(unsigned path_id)$/;"	f	class:agg::curve3
rewind	include/agg_curves.h	/^        void rewind(unsigned path_id)$/;"	f	class:agg::curve4
rewind	include/agg_curves.h	/^        void rewind(unsigned)$/;"	f	class:agg::curve3_div
rewind	include/agg_curves.h	/^        void rewind(unsigned)$/;"	f	class:agg::curve4_div
rewind	include/agg_ellipse.h	/^    inline void ellipse::rewind(unsigned)$/;"	f	class:agg::ellipse
rewind	include/agg_gsv_text.h	/^        void rewind(unsigned path_id) $/;"	f	class:agg::gsv_text_outline
rewind	include/agg_path_storage.h	/^        void rewind(unsigned)$/;"	f	class:agg::line_adaptor
rewind	include/agg_path_storage.h	/^        void rewind(unsigned)$/;"	f	class:agg::poly_container_adaptor
rewind	include/agg_path_storage.h	/^        void rewind(unsigned)$/;"	f	class:agg::poly_container_reverse_adaptor
rewind	include/agg_path_storage.h	/^        void rewind(unsigned)$/;"	f	class:agg::poly_plain_adaptor
rewind	include/agg_path_storage.h	/^    inline void path_base<VC>::rewind(unsigned path_id)$/;"	f	class:agg::path_base
rewind	include/agg_path_storage_integer.h	/^        void rewind(unsigned) $/;"	f	class:agg::path_storage_integer
rewind	include/agg_path_storage_integer.h	/^        void rewind(unsigned) $/;"	f	class:agg::serialized_integer_path_adaptor
rewind	include/agg_span_gouraud.h	/^        void rewind(unsigned)$/;"	f	class:agg::span_gouraud
rewind	include/agg_vcgen_vertex_sequence.h	/^    inline void vcgen_vertex_sequence::rewind(unsigned) $/;"	f	class:agg::vcgen_vertex_sequence
rewind	include/ctrl/agg_polygon_ctrl.h	/^        void rewind(unsigned)$/;"	f	class:agg::simple_polygon_vertex_source
rewind	src/agg_arc.cpp	/^    void arc::rewind(unsigned)$/;"	f	class:agg::arc
rewind	src/agg_arrowhead.cpp	/^    void arrowhead::rewind(unsigned path_id)$/;"	f	class:agg::arrowhead
rewind	src/agg_curves.cpp	/^    void curve3_inc::rewind(unsigned)$/;"	f	class:agg::curve3_inc
rewind	src/agg_curves.cpp	/^    void curve4_inc::rewind(unsigned)$/;"	f	class:agg::curve4_inc
rewind	src/agg_gsv_text.cpp	/^    void gsv_text::rewind(unsigned)$/;"	f	class:agg::gsv_text
rewind	src/agg_rounded_rect.cpp	/^    void rounded_rect::rewind(unsigned)$/;"	f	class:agg::rounded_rect
rewind	src/agg_vcgen_bspline.cpp	/^    void vcgen_bspline::rewind(unsigned)$/;"	f	class:agg::vcgen_bspline
rewind	src/agg_vcgen_contour.cpp	/^    void vcgen_contour::rewind(unsigned)$/;"	f	class:agg::vcgen_contour
rewind	src/agg_vcgen_dash.cpp	/^    void vcgen_dash::rewind(unsigned)$/;"	f	class:agg::vcgen_dash
rewind	src/agg_vcgen_markers_term.cpp	/^    void vcgen_markers_term::rewind(unsigned path_id)$/;"	f	class:agg::vcgen_markers_term
rewind	src/agg_vcgen_smooth_poly1.cpp	/^    void vcgen_smooth_poly1::rewind(unsigned)$/;"	f	class:agg::vcgen_smooth_poly1
rewind	src/agg_vcgen_stroke.cpp	/^    void vcgen_stroke::rewind(unsigned)$/;"	f	class:agg::vcgen_stroke
rewind	src/ctrl/agg_bezier_ctrl.cpp	/^    void bezier_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::bezier_ctrl_impl
rewind	src/ctrl/agg_bezier_ctrl.cpp	/^    void curve3_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::curve3_ctrl_impl
rewind	src/ctrl/agg_cbox_ctrl.cpp	/^    void cbox_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::cbox_ctrl_impl
rewind	src/ctrl/agg_gamma_ctrl.cpp	/^    void  gamma_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::gamma_ctrl_impl
rewind	src/ctrl/agg_gamma_spline.cpp	/^    void gamma_spline::rewind(unsigned)$/;"	f	class:agg::gamma_spline
rewind	src/ctrl/agg_polygon_ctrl.cpp	/^    void polygon_ctrl_impl::rewind(unsigned)$/;"	f	class:agg::polygon_ctrl_impl
rewind	src/ctrl/agg_rbox_ctrl.cpp	/^    void rbox_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::rbox_ctrl_impl
rewind	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::scale_ctrl_impl
rewind	src/ctrl/agg_slider_ctrl.cpp	/^    void slider_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::slider_ctrl_impl
rewind	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::rewind(unsigned idx)$/;"	f	class:agg::spline_ctrl_impl
rewind_scanlines	include/agg_rasterizer_compound_aa.h	/^    AGG_INLINE bool rasterizer_compound_aa<Clip>::rewind_scanlines()$/;"	f	class:agg::rasterizer_compound_aa
rewind_scanlines	include/agg_rasterizer_scanline_aa.h	/^    AGG_INLINE bool rasterizer_scanline_aa<Clip>::rewind_scanlines()$/;"	f	class:agg::rasterizer_scanline_aa
rewind_scanlines	include/agg_scanline_storage_aa.h	/^        bool rewind_scanlines()$/;"	f	class:agg::scanline_storage_aa
rewind_scanlines	include/agg_scanline_storage_aa.h	/^        bool rewind_scanlines()$/;"	f	class:agg::serialized_scanlines_adaptor_aa
rewind_scanlines	include/agg_scanline_storage_bin.h	/^        bool rewind_scanlines()$/;"	f	class:agg::scanline_storage_bin
rewind_scanlines	include/agg_scanline_storage_bin.h	/^        bool rewind_scanlines()$/;"	f	class:agg::serialized_scanlines_adaptor_bin
rgb8_packed	include/agg_color_rgba.h	/^    inline rgba8 rgb8_packed(unsigned v)$/;"	f	namespace:agg
rgb_e	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	g	struct:agg::order_rgb
rgb_tag	include/agg_color_rgba.h	/^    struct order_bgr  { enum bgr_e  { B=0, G=1, R=2, rgb_tag }; };       \/\/----order_bgr$/;"	e	enum:agg::order_bgr::bgr_e
rgb_tag	include/agg_color_rgba.h	/^    struct order_rgb  { enum rgb_e  { R=0, G=1, B=2, rgb_tag }; };       \/\/----order_rgb$/;"	e	enum:agg::order_rgb::rgb_e
rgb_to_gray_mask_u8	include/agg_alpha_mask_u8.h	/^    struct rgb_to_gray_mask_u8$/;"	s	namespace:agg
rgba	include/agg_color_rgba.h	/^        explicit rgba(double wavelen, double gamma=1.0)$/;"	f	struct:agg::rgba
rgba	include/agg_color_rgba.h	/^        rgba() {}$/;"	f	struct:agg::rgba
rgba	include/agg_color_rgba.h	/^        rgba(const rgba& c, double a_) : r(c.r), g(c.g), b(c.b), a(a_) {}$/;"	f	struct:agg::rgba
rgba	include/agg_color_rgba.h	/^        rgba(double r_, double g_, double b_, double a_=1.0) :$/;"	f	struct:agg::rgba
rgba	include/agg_color_rgba.h	/^    struct rgba$/;"	s	namespace:agg
rgba16	include/agg_color_rgba.h	/^        rgba16() {}$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(const rgba& c) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(const rgba& c, double a_) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(const rgba8& c) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(const rgba8& c, unsigned a_) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(const self_type& c, unsigned a_) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^        rgba16(unsigned r_, unsigned g_, unsigned b_, unsigned a_=base_mask) :$/;"	f	struct:agg::rgba16
rgba16	include/agg_color_rgba.h	/^    struct rgba16$/;"	s	namespace:agg
rgba16_gamma_dir	include/agg_color_rgba.h	/^    rgba16 rgba16_gamma_dir(rgba16 c, const GammaLUT& gamma)$/;"	f	namespace:agg
rgba16_gamma_inv	include/agg_color_rgba.h	/^    rgba16 rgba16_gamma_inv(rgba16 c, const GammaLUT& gamma)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(const rgba& c)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(const rgba& c, double a)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(const rgba16& c, unsigned a)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(const rgba8& c)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(const rgba8& c, unsigned a)$/;"	f	namespace:agg
rgba16_pre	include/agg_color_rgba.h	/^    inline rgba16 rgba16_pre(unsigned r, unsigned g, unsigned b, $/;"	f	namespace:agg
rgba8	include/agg_color_rgba.h	/^        rgba8() {}$/;"	f	struct:agg::rgba8
rgba8	include/agg_color_rgba.h	/^        rgba8(const rgba& c) :$/;"	f	struct:agg::rgba8
rgba8	include/agg_color_rgba.h	/^        rgba8(const rgba& c, double a_) :$/;"	f	struct:agg::rgba8
rgba8	include/agg_color_rgba.h	/^        rgba8(const self_type& c, unsigned a_) :$/;"	f	struct:agg::rgba8
rgba8	include/agg_color_rgba.h	/^        rgba8(unsigned r_, unsigned g_, unsigned b_, unsigned a_=base_mask) :$/;"	f	struct:agg::rgba8
rgba8	include/agg_color_rgba.h	/^    struct rgba8$/;"	s	namespace:agg
rgba8_gamma_dir	include/agg_color_rgba.h	/^    rgba8 rgba8_gamma_dir(rgba8 c, const GammaLUT& gamma)$/;"	f	namespace:agg
rgba8_gamma_inv	include/agg_color_rgba.h	/^    rgba8 rgba8_gamma_inv(rgba8 c, const GammaLUT& gamma)$/;"	f	namespace:agg
rgba8_pre	include/agg_color_rgba.h	/^    inline rgba8 rgba8_pre(const rgba& c)$/;"	f	namespace:agg
rgba8_pre	include/agg_color_rgba.h	/^    inline rgba8 rgba8_pre(const rgba& c, double a)$/;"	f	namespace:agg
rgba8_pre	include/agg_color_rgba.h	/^    inline rgba8 rgba8_pre(const rgba8& c)$/;"	f	namespace:agg
rgba8_pre	include/agg_color_rgba.h	/^    inline rgba8 rgba8_pre(const rgba8& c, unsigned a)$/;"	f	namespace:agg
rgba8_pre	include/agg_color_rgba.h	/^    inline rgba8 rgba8_pre(unsigned r, unsigned g, unsigned b, $/;"	f	namespace:agg
rgba_calc	include/agg_span_gouraud_rgba.h	/^        struct rgba_calc$/;"	s	class:agg::span_gouraud_rgba
rgba_e	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	g	struct:agg::order_rgba
rgba_pre	include/agg_color_rgba.h	/^    inline rgba rgba_pre(const rgba& c)$/;"	f	namespace:agg
rgba_pre	include/agg_color_rgba.h	/^    inline rgba rgba_pre(const rgba& c, double a)$/;"	f	namespace:agg
rgba_pre	include/agg_color_rgba.h	/^    inline rgba rgba_pre(double r, double g, double b, double a=1.0)$/;"	f	namespace:agg
rgba_tag	include/agg_color_rgba.h	/^    struct order_abgr { enum abgr_e { A=0, B=1, G=2, R=3, rgba_tag }; }; \/\/----order_abgr$/;"	e	enum:agg::order_abgr::abgr_e
rgba_tag	include/agg_color_rgba.h	/^    struct order_argb { enum argb_e { A=0, R=1, G=2, B=3, rgba_tag }; }; \/\/----order_argb$/;"	e	enum:agg::order_argb::argb_e
rgba_tag	include/agg_color_rgba.h	/^    struct order_bgra { enum bgra_e { B=0, G=1, R=2, A=3, rgba_tag }; }; \/\/----order_bgra$/;"	e	enum:agg::order_bgra::bgra_e
rgba_tag	include/agg_color_rgba.h	/^    struct order_rgba { enum rgba_e { R=0, G=1, B=2, A=3, rgba_tag }; }; \/\/----order_rgba$/;"	e	enum:agg::order_rgba::rgba_e
right	include/agg_rasterizer_compound_aa.h	/^        int16 left, right;$/;"	m	struct:agg::cell_style_aa
right_fill	examples/flash_rasterizer.cpp	/^        int right_fill;$/;"	m	struct:agg::path_style	file:
right_fill	examples/flash_rasterizer2.cpp	/^        int right_fill;$/;"	m	struct:agg::path_style	file:
rotate	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::rotate(double a) $/;"	f	class:agg::trans_affine
rotate	include/agg_trans_perspective.h	/^    inline const trans_perspective& trans_perspective::rotate(double a)$/;"	f	class:agg::trans_perspective
rotate_colors	examples/gouraud_mesh.cpp	/^    void mesh_ctrl::rotate_colors()$/;"	f	class:agg::mesh_ctrl
rotation	include/agg_trans_perspective.h	/^    inline double trans_perspective::rotation() const$/;"	f	class:agg::trans_perspective
rotation	src/agg_trans_affine.cpp	/^    double trans_affine::rotation() const$/;"	f	class:agg::trans_affine
round_cap	include/agg_math_stroke.h	/^        round_cap$/;"	e	enum:agg::line_cap_e
round_cap	include/agg_rasterizer_outline_aa.h	/^        bool round_cap() const { return m_round_cap; }$/;"	f	class:agg::rasterizer_outline_aa
round_cap	include/agg_rasterizer_outline_aa.h	/^        void round_cap(bool v) { m_round_cap = v; }$/;"	f	class:agg::rasterizer_outline_aa
round_join	include/agg_math_stroke.h	/^        round_join         = 2,$/;"	e	enum:agg::line_join_e
rounded_rect	include/agg_rounded_rect.h	/^        rounded_rect() {}$/;"	f	class:agg::rounded_rect
rounded_rect	include/agg_rounded_rect.h	/^    class rounded_rect$/;"	c	namespace:agg
rounded_rect	src/agg_rounded_rect.cpp	/^    rounded_rect::rounded_rect(double x1, double y1, double x2, double y2, double r) :$/;"	f	class:agg::rounded_rect
roundoff	examples/rasterizers2.cpp	/^struct roundoff$/;"	s	file:
row	include/agg_pixfmt_gray.h	/^        row_data     row(int y)     const { return m_rbuf->row(y); }$/;"	f	class:agg::pixfmt_alpha_blend_gray
row	include/agg_pixfmt_rgb.h	/^        AGG_INLINE row_data     row(int y)     const { return m_rbuf->row(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
row	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE row_data     row(int y)     const { return m_rbuf->row(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
row	include/agg_pixfmt_rgba.h	/^        AGG_INLINE row_data     row(int y)     const { return m_rbuf->row(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
row	include/agg_pixfmt_rgba.h	/^        AGG_INLINE row_data     row(int y)     const { return m_rbuf->row(y); }$/;"	f	class:agg::pixfmt_custom_blend_rgba
row	include/agg_rendering_buffer.h	/^		AGG_INLINE row_data row    (int y) const $/;"	f	class:agg::row_accessor
row	include/agg_rendering_buffer.h	/^        AGG_INLINE row_data row    (int y) const $/;"	f	class:agg::row_ptr_cache
row	include/agg_rendering_buffer_dynarow.h	/^        row_data     row    (int y) const { return m_rows[y]; }$/;"	f	class:agg::rendering_buffer_dynarow
row_accessor	include/agg_rendering_buffer.h	/^        row_accessor() :$/;"	f	class:agg::row_accessor
row_accessor	include/agg_rendering_buffer.h	/^        row_accessor(T* buf, unsigned width, unsigned height, int stride) :$/;"	f	class:agg::row_accessor
row_accessor	include/agg_rendering_buffer.h	/^    template<class T> class row_accessor$/;"	c	namespace:agg
row_bytes	src/platform/mac/agg_mac_pmap.cpp	/^    int pixel_map::row_bytes() const$/;"	f	class:agg::pixel_map
row_data	include/agg_pixfmt_amask_adaptor.h	/^        typedef typename pixfmt_type::row_data row_data;$/;"	t	class:agg::pixfmt_amask_adaptor
row_data	include/agg_pixfmt_gray.h	/^        typedef typename rbuf_type::row_data row_data;$/;"	t	class:agg::pixfmt_alpha_blend_gray
row_data	include/agg_pixfmt_rgb.h	/^        typedef typename rbuf_type::row_data row_data;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
row_data	include/agg_pixfmt_rgb_packed.h	/^        typedef typename rbuf_type::row_data row_data;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
row_data	include/agg_pixfmt_rgba.h	/^        typedef typename rbuf_type::row_data row_data;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
row_data	include/agg_pixfmt_rgba.h	/^        typedef typename rbuf_type::row_data row_data;$/;"	t	class:agg::pixfmt_custom_blend_rgba
row_data	include/agg_pixfmt_transposer.h	/^        typedef typename pixfmt_type::row_data row_data;$/;"	t	class:agg::pixfmt_transposer
row_data	include/agg_renderer_base.h	/^        typedef typename pixfmt_type::row_data row_data;$/;"	t	class:agg::renderer_base
row_data	include/agg_renderer_mclip.h	/^        typedef typename pixfmt_type::row_data row_data;$/;"	t	class:agg::renderer_mclip
row_data	include/agg_rendering_buffer.h	/^        typedef const_row_info<T> row_data;$/;"	t	class:agg::row_accessor
row_data	include/agg_rendering_buffer.h	/^        typedef const_row_info<T> row_data;$/;"	t	class:agg::row_ptr_cache
row_data	include/agg_rendering_buffer_dynarow.h	/^        typedef row_info<int8u> row_data;$/;"	t	class:agg::rendering_buffer_dynarow
row_info	include/agg_basics.h	/^        row_info() {}$/;"	f	struct:agg::row_info
row_info	include/agg_basics.h	/^        row_info(int x1_, int x2_, T* ptr_) : x1(x1_), x2(x2_), ptr(ptr_) {}$/;"	f	struct:agg::row_info
row_info	include/agg_basics.h	/^    template<class T> struct row_info$/;"	s	namespace:agg
row_ptr	include/agg_pixfmt_gray.h	/^              int8u* row_ptr(int y)       { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_gray
row_ptr	include/agg_pixfmt_gray.h	/^        const int8u* row_ptr(int y) const { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_gray
row_ptr	include/agg_pixfmt_rgb.h	/^        AGG_INLINE       int8u* row_ptr(int y)       { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
row_ptr	include/agg_pixfmt_rgb.h	/^        AGG_INLINE const int8u* row_ptr(int y) const { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
row_ptr	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE       int8u* row_ptr(int y)       { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
row_ptr	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE const int8u* row_ptr(int y) const { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
row_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE       int8u* row_ptr(int y)       { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
row_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE       int8u* row_ptr(int y)       { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_custom_blend_rgba
row_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE const int8u* row_ptr(int y) const { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
row_ptr	include/agg_pixfmt_rgba.h	/^        AGG_INLINE const int8u* row_ptr(int y) const { return m_rbuf->row_ptr(y); }$/;"	f	class:agg::pixfmt_custom_blend_rgba
row_ptr	include/agg_rendering_buffer.h	/^		AGG_INLINE       T* row_ptr(int y)       { return m_start + y * m_stride; }$/;"	f	class:agg::row_accessor
row_ptr	include/agg_rendering_buffer.h	/^		AGG_INLINE       T* row_ptr(int, int y, unsigned) $/;"	f	class:agg::row_accessor
row_ptr	include/agg_rendering_buffer.h	/^		AGG_INLINE const T* row_ptr(int y) const { return m_start + y * m_stride; }$/;"	f	class:agg::row_accessor
row_ptr	include/agg_rendering_buffer.h	/^        AGG_INLINE       T* row_ptr(int y)       { return m_rows[y]; }$/;"	f	class:agg::row_ptr_cache
row_ptr	include/agg_rendering_buffer.h	/^        AGG_INLINE       T* row_ptr(int, int y, unsigned) $/;"	f	class:agg::row_ptr_cache
row_ptr	include/agg_rendering_buffer.h	/^        AGG_INLINE const T* row_ptr(int y) const { return m_rows[y]; }$/;"	f	class:agg::row_ptr_cache
row_ptr	include/agg_rendering_buffer_dynarow.h	/^              int8u* row_ptr(int y)       { return row_ptr(0, y, m_width); }$/;"	f	class:agg::rendering_buffer_dynarow
row_ptr	include/agg_rendering_buffer_dynarow.h	/^        const int8u* row_ptr(int y) const { return m_rows[y].ptr; }$/;"	f	class:agg::rendering_buffer_dynarow
row_ptr	include/agg_rendering_buffer_dynarow.h	/^        int8u* row_ptr(int x, int y, unsigned len)$/;"	f	class:agg::rendering_buffer_dynarow
row_ptr_cache	include/agg_rendering_buffer.h	/^        row_ptr_cache() :$/;"	f	class:agg::row_ptr_cache
row_ptr_cache	include/agg_rendering_buffer.h	/^        row_ptr_cache(T* buf, unsigned width, unsigned height, int stride) :$/;"	f	class:agg::row_ptr_cache
row_ptr_cache	include/agg_rendering_buffer.h	/^    template<class T> class row_ptr_cache$/;"	c	namespace:agg
rows	include/agg_rendering_buffer.h	/^        T const* const* rows() const { return &m_rows[0]; }$/;"	f	class:agg::row_ptr_cache
run	src/platform/AmigaOS/agg_platform_support.cpp	/^	int platform_support::run()$/;"	f	class:agg::platform_support
run	src/platform/BeOS/agg_platform_support.cpp	/^    int platform_support::run()$/;"	f	class:agg::platform_support
run	src/platform/X11/agg_platform_support.cpp	/^    int platform_support::run()$/;"	f	class:agg::platform_support
run	src/platform/mac/agg_platform_support.cpp	/^    int platform_support::run()$/;"	f	class:agg::platform_support
run	src/platform/sdl/agg_platform_support.cpp	/^    int platform_support::run()$/;"	f	class:agg::platform_support
run	src/platform/win32/agg_platform_support.cpp	/^    int platform_support::run()$/;"	f	class:agg::platform_support
s	examples/graph_test.cpp	/^    Source& s;$/;"	m	struct:stroke_draft_simple	file:
s	examples/graph_test.cpp	/^    stroke_type    s;$/;"	m	struct:dash_stroke_fine_arrow	file:
s	examples/graph_test.cpp	/^    stroke_type    s;$/;"	m	struct:dash_stroke_fine_simple	file:
s	examples/graph_test.cpp	/^    stroke_type    s;$/;"	m	struct:stroke_draft_arrow	file:
s	examples/graph_test.cpp	/^    stroke_type    s;$/;"	m	struct:stroke_fine_arrow	file:
s	examples/graph_test.cpp	/^    stroke_type    s;$/;"	m	struct:stroke_fine_simple	file:
s_commands	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    const char path_tokenizer::s_commands[]   = "+-MmZzLlHhVvCcSsQqTtAaFfPp";$/;"	m	class:agg::svg::path_tokenizer	file:
s_commands	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        static const char s_commands[];$/;"	m	class:agg::svg::path_tokenizer
s_diagonal_quadrant	include/agg_line_aa_basics.h	/^        static const int8u s_diagonal_quadrant[8];$/;"	m	struct:agg::line_parameters
s_diagonal_quadrant	src/agg_line_aa_basics.cpp	/^    const int8u line_parameters::s_diagonal_quadrant[8]   = { 0,1,2,1,0,3,2,3 };$/;"	m	class:agg::line_parameters	file:
s_numeric	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    const char path_tokenizer::s_numeric[]    = ".Ee0123456789";$/;"	m	class:agg::svg::path_tokenizer	file:
s_numeric	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        static const char s_numeric[];$/;"	m	class:agg::svg::path_tokenizer
s_orthogonal_quadrant	include/agg_line_aa_basics.h	/^        static const int8u s_orthogonal_quadrant[8];$/;"	m	struct:agg::line_parameters
s_orthogonal_quadrant	src/agg_line_aa_basics.cpp	/^    const int8u line_parameters::s_orthogonal_quadrant[8] = { 0,0,1,1,3,3,2,2 };$/;"	m	class:agg::line_parameters	file:
s_separators	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    const char path_tokenizer::s_separators[] = " ,\\t\\n\\r";$/;"	m	class:agg::svg::path_tokenizer	file:
s_separators	examples/svg_viewer/agg_svg_path_tokenizer.h	/^        static const char s_separators[];$/;"	m	class:agg::svg::path_tokenizer
same_diagonal_quadrant	include/agg_line_aa_basics.h	/^        bool same_diagonal_quadrant(const line_parameters& lp) const$/;"	f	struct:agg::line_parameters
same_orthogonal_quadrant	include/agg_line_aa_basics.h	/^        bool same_orthogonal_quadrant(const line_parameters& lp) const$/;"	f	struct:agg::line_parameters
saturation	include/agg_basics.h	/^    template<int Limit> struct saturation$/;"	s	namespace:agg
save	include/agg_dda_line.h	/^        void save(save_data_type* data) const$/;"	f	class:agg::dda2_line_interpolator
save_as_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    bool pixel_map::save_as_bmp(FILE *fd) const$/;"	f	class:agg::pixel_map
save_as_bmp	src/platform/win32/agg_win32_bmp.cpp	/^    bool pixel_map::save_as_bmp(const char *filename) const$/;"	f	class:agg::pixel_map
save_as_qt	src/platform/mac/agg_mac_pmap.cpp	/^    bool pixel_map::save_as_qt(const char *filename) const$/;"	f	class:agg::pixel_map
save_data_type	include/agg_dda_line.h	/^        typedef int save_data_type;$/;"	t	class:agg::dda2_line_interpolator
save_img	src/platform/AmigaOS/agg_platform_support.cpp	/^	bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_img	src/platform/BeOS/agg_platform_support.cpp	/^    bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_img	src/platform/X11/agg_platform_support.cpp	/^    bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_img	src/platform/mac/agg_platform_support.cpp	/^    bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_img	src/platform/sdl/agg_platform_support.cpp	/^    bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_img	src/platform/win32/agg_platform_support.cpp	/^    bool platform_support::save_img(unsigned idx, const char* file)$/;"	f	class:agg::platform_support
save_pmap	src/platform/mac/agg_platform_support.cpp	/^    bool platform_specific::save_pmap(const char* fn, unsigned idx, $/;"	f	class:agg::platform_specific
save_pmap	src/platform/win32/agg_platform_support.cpp	/^    bool platform_specific::save_pmap(const char* fn, unsigned idx, $/;"	f	class:agg::platform_specific
save_size	include/agg_dda_line.h	/^        enum save_size_e { save_size = 2 };$/;"	e	enum:agg::dda2_line_interpolator::save_size_e
save_size_e	include/agg_dda_line.h	/^        enum save_size_e { save_size = 2 };$/;"	g	class:agg::dda2_line_interpolator
sb_tree	gpc/gpc.c	/^} sb_tree;$/;"	t	typeref:struct:sbt_t_shape	file:
sbool_a_minus_b	include/agg_scanline_boolean_algebra.h	/^        sbool_a_minus_b,     \/\/----sbool_a_minus_b$/;"	e	enum:agg::sbool_op_e
sbool_add_span_aa	include/agg_scanline_boolean_algebra.h	/^    struct sbool_add_span_aa$/;"	s	namespace:agg
sbool_add_span_bin	include/agg_scanline_boolean_algebra.h	/^    struct sbool_add_span_bin$/;"	s	namespace:agg
sbool_add_span_empty	include/agg_scanline_boolean_algebra.h	/^    struct sbool_add_span_empty$/;"	s	namespace:agg
sbool_add_spans_and_render	include/agg_scanline_boolean_algebra.h	/^    void sbool_add_spans_and_render(const Scanline1& sl1, $/;"	f	namespace:agg
sbool_and	include/agg_scanline_boolean_algebra.h	/^        sbool_and,           \/\/----sbool_and$/;"	e	enum:agg::sbool_op_e
sbool_b_minus_a	include/agg_scanline_boolean_algebra.h	/^        sbool_b_minus_a      \/\/----sbool_b_minus_a$/;"	e	enum:agg::sbool_op_e
sbool_combine_shapes_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_combine_shapes_aa(sbool_op_e op,$/;"	f	namespace:agg
sbool_combine_shapes_bin	include/agg_scanline_boolean_algebra.h	/^    void sbool_combine_shapes_bin(sbool_op_e op,$/;"	f	namespace:agg
sbool_combine_spans_bin	include/agg_scanline_boolean_algebra.h	/^    struct sbool_combine_spans_bin$/;"	s	namespace:agg
sbool_combine_spans_empty	include/agg_scanline_boolean_algebra.h	/^    struct sbool_combine_spans_empty$/;"	s	namespace:agg
sbool_intersect_scanlines	include/agg_scanline_boolean_algebra.h	/^    void sbool_intersect_scanlines(const Scanline1& sl1, $/;"	f	namespace:agg
sbool_intersect_shapes	include/agg_scanline_boolean_algebra.h	/^    void sbool_intersect_shapes(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_intersect_shapes_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_intersect_shapes_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_intersect_shapes_bin	include/agg_scanline_boolean_algebra.h	/^    void sbool_intersect_shapes_bin(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_intersect_spans_aa	include/agg_scanline_boolean_algebra.h	/^    struct sbool_intersect_spans_aa$/;"	s	namespace:agg
sbool_op_e	include/agg_scanline_boolean_algebra.h	/^    enum sbool_op_e$/;"	g	namespace:agg
sbool_or	include/agg_scanline_boolean_algebra.h	/^        sbool_or,            \/\/----sbool_or$/;"	e	enum:agg::sbool_op_e
sbool_subtract_shapes	include/agg_scanline_boolean_algebra.h	/^    void sbool_subtract_shapes(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_subtract_shapes_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_subtract_shapes_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_subtract_shapes_bin	include/agg_scanline_boolean_algebra.h	/^    void sbool_subtract_shapes_bin(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_subtract_spans_aa	include/agg_scanline_boolean_algebra.h	/^    struct sbool_subtract_spans_aa$/;"	s	namespace:agg
sbool_unite_scanlines	include/agg_scanline_boolean_algebra.h	/^    void sbool_unite_scanlines(const Scanline1& sl1, $/;"	f	namespace:agg
sbool_unite_shapes	include/agg_scanline_boolean_algebra.h	/^    void sbool_unite_shapes(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_unite_shapes_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_unite_shapes_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_unite_shapes_bin	include/agg_scanline_boolean_algebra.h	/^    void sbool_unite_shapes_bin(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_unite_spans_aa	include/agg_scanline_boolean_algebra.h	/^    struct sbool_unite_spans_aa$/;"	s	namespace:agg
sbool_xor	include/agg_scanline_boolean_algebra.h	/^        sbool_xor,           \/\/----sbool_xor$/;"	e	enum:agg::sbool_op_e
sbool_xor_abs_diff	include/agg_scanline_boolean_algebra.h	/^        sbool_xor_abs_diff,  \/\/----sbool_xor_abs_diff$/;"	e	enum:agg::sbool_op_e
sbool_xor_formula_abs_diff	include/agg_scanline_boolean_algebra.h	/^    struct sbool_xor_formula_abs_diff$/;"	s	namespace:agg
sbool_xor_formula_linear	include/agg_scanline_boolean_algebra.h	/^    struct sbool_xor_formula_linear$/;"	s	namespace:agg
sbool_xor_formula_saddle	include/agg_scanline_boolean_algebra.h	/^    struct sbool_xor_formula_saddle$/;"	s	namespace:agg
sbool_xor_saddle	include/agg_scanline_boolean_algebra.h	/^        sbool_xor_saddle,    \/\/----sbool_xor_saddle$/;"	e	enum:agg::sbool_op_e
sbool_xor_shapes_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_xor_shapes_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_xor_shapes_abs_diff_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_xor_shapes_abs_diff_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_xor_shapes_bin	include/agg_scanline_boolean_algebra.h	/^    void sbool_xor_shapes_bin(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_xor_shapes_saddle_aa	include/agg_scanline_boolean_algebra.h	/^    void sbool_xor_shapes_saddle_aa(ScanlineGen1& sg1, ScanlineGen2& sg2,$/;"	f	namespace:agg
sbool_xor_spans_aa	include/agg_scanline_boolean_algebra.h	/^    struct sbool_xor_spans_aa$/;"	s	namespace:agg
sbt_t_shape	gpc/gpc.c	/^typedef struct sbt_t_shape          \/* Scanbeam tree                     *\/$/;"	s	file:
scale	examples/flash_rasterizer.cpp	/^        double scale() const$/;"	f	class:agg::compound_shape
scale	examples/flash_rasterizer.cpp	/^        void scale(double w, double h)$/;"	f	class:agg::compound_shape
scale	examples/flash_rasterizer2.cpp	/^        double scale() const$/;"	f	class:agg::compound_shape
scale	examples/flash_rasterizer2.cpp	/^        void scale(double w, double h)$/;"	f	class:agg::compound_shape
scale	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::scale(double s) $/;"	f	class:agg::trans_affine
scale	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::scale(double x, double y) $/;"	f	class:agg::trans_affine
scale	include/agg_trans_affine.h	/^    inline double trans_affine::scale() const$/;"	f	class:agg::trans_affine
scale	include/agg_trans_perspective.h	/^    inline const trans_perspective& trans_perspective::scale(double s)$/;"	f	class:agg::trans_perspective
scale	include/agg_trans_perspective.h	/^    inline const trans_perspective& trans_perspective::scale(double x, double y)$/;"	f	class:agg::trans_perspective
scale	include/agg_trans_perspective.h	/^    inline double trans_perspective::scale() const$/;"	f	class:agg::trans_perspective
scale	include/agg_trans_viewport.h	/^        double scale() const$/;"	f	class:agg::trans_viewport
scale	include/ctrl/agg_ctrl.h	/^        double scale() const { return m_mtx ? m_mtx->scale() : 1.0; }$/;"	f	class:agg::ctrl
scale_ctrl	include/ctrl/agg_scale_ctrl.h	/^        scale_ctrl(double x1, double y1, double x2, double y2, bool flip_y=false) :$/;"	f	class:agg::scale_ctrl
scale_ctrl	include/ctrl/agg_scale_ctrl.h	/^    template<class ColorT> class scale_ctrl : public scale_ctrl_impl$/;"	c	namespace:agg
scale_ctrl_impl	include/ctrl/agg_scale_ctrl.h	/^    class scale_ctrl_impl : public ctrl$/;"	c	namespace:agg
scale_ctrl_impl	src/ctrl/agg_scale_ctrl.cpp	/^    scale_ctrl_impl::scale_ctrl_impl(double x1, double y1, $/;"	f	class:agg::scale_ctrl_impl
scale_limit	include/agg_span_image_filter.h	/^        int  scale_limit() const { return m_scale_limit; }$/;"	f	class:agg::span_image_resample
scale_limit	include/agg_span_image_filter.h	/^        int  scale_limit() const { return uround(m_scale_limit); }$/;"	f	class:agg::span_image_resample_affine
scale_limit	include/agg_span_image_filter.h	/^        void scale_limit(int v)  { m_scale_limit = v; }$/;"	f	class:agg::span_image_resample
scale_limit	include/agg_span_image_filter.h	/^        void scale_limit(int v)  { m_scale_limit = v; }$/;"	f	class:agg::span_image_resample_affine
scale_x	include/agg_renderer_outline_image.h	/^        double scale_x() const   { return m_scale_x; }$/;"	f	class:agg::renderer_outline_image
scale_x	include/agg_renderer_outline_image.h	/^        void   scale_x(double s) { m_scale_x = s; }$/;"	f	class:agg::renderer_outline_image
scale_x	include/agg_trans_viewport.h	/^        double scale_x() const$/;"	f	class:agg::trans_viewport
scale_y	include/agg_trans_viewport.h	/^        double scale_y() const$/;"	f	class:agg::trans_viewport
scaling	include/agg_trans_perspective.h	/^    void trans_perspective::scaling(double* x, double* y) const$/;"	f	class:agg::trans_perspective
scaling	src/agg_trans_affine.cpp	/^    void trans_affine::scaling(double* x, double* y) const$/;"	f	class:agg::trans_affine
scaling_abs	include/agg_trans_affine.h	/^    inline void trans_affine::scaling_abs(double* x, double* y) const$/;"	f	class:agg::trans_affine
scaling_abs	include/agg_trans_perspective.h	/^    void trans_perspective::scaling_abs(double* x, double* y) const$/;"	f	class:agg::trans_perspective
scanline	examples/bezier_div.cpp	/^    typedef agg::scanline_u8 scanline;$/;"	t	class:the_application	file:
scanline	examples/gouraud_mesh.cpp	/^    typedef agg::scanline_u8 scanline;$/;"	t	class:the_application	file:
scanline	examples/line_patterns.cpp	/^    typedef agg::scanline_p8 scanline;$/;"	t	class:the_application	file:
scanline	examples/line_patterns_clip.cpp	/^    typedef agg::scanline_p8 scanline;$/;"	t	class:the_application	file:
scanline	examples/rasterizers2.cpp	/^    typedef agg::scanline_p8 scanline;$/;"	t	class:the_application	file:
scanline32_bin	include/agg_scanline_bin.h	/^        scanline32_bin() : m_max_len(0), m_last_x(0x7FFFFFF0) {}$/;"	f	class:agg::scanline32_bin
scanline32_bin	include/agg_scanline_bin.h	/^    class scanline32_bin$/;"	c	namespace:agg
scanline32_p8	include/agg_scanline_p.h	/^        scanline32_p8() :$/;"	f	class:agg::scanline32_p8
scanline32_p8	include/agg_scanline_p.h	/^    class scanline32_p8$/;"	c	namespace:agg
scanline32_u8	include/agg_scanline_u.h	/^        scanline32_u8() :$/;"	f	class:agg::scanline32_u8
scanline32_u8	include/agg_scanline_u.h	/^    class scanline32_u8$/;"	c	namespace:agg
scanline32_u8_am	include/agg_scanline_u.h	/^        scanline32_u8_am() : base_type(), m_alpha_mask(0) {}$/;"	f	class:agg::scanline32_u8_am
scanline32_u8_am	include/agg_scanline_u.h	/^        scanline32_u8_am(const AlphaMask& am) : base_type(), m_alpha_mask(&am) {}$/;"	f	class:agg::scanline32_u8_am
scanline32_u8_am	include/agg_scanline_u.h	/^    class scanline32_u8_am : public scanline32_u8$/;"	c	namespace:agg
scanline_bin	include/agg_scanline_bin.h	/^        scanline_bin() :$/;"	f	class:agg::scanline_bin
scanline_bin	include/agg_scanline_bin.h	/^    class scanline_bin$/;"	c	namespace:agg
scanline_by_index	include/agg_scanline_storage_aa.h	/^        const scanline_data& scanline_by_index(unsigned i) const$/;"	f	class:agg::scanline_storage_aa
scanline_by_index	include/agg_scanline_storage_bin.h	/^        const scanline_data& scanline_by_index(unsigned i) const$/;"	f	class:agg::scanline_storage_bin
scanline_cell_storage	include/agg_scanline_storage_aa.h	/^        scanline_cell_storage() :$/;"	f	class:agg::scanline_cell_storage
scanline_cell_storage	include/agg_scanline_storage_aa.h	/^        scanline_cell_storage(const scanline_cell_storage<T>& v) :$/;"	f	class:agg::scanline_cell_storage
scanline_cell_storage	include/agg_scanline_storage_aa.h	/^    template<class T> class scanline_cell_storage$/;"	c	namespace:agg
scanline_cells	include/agg_rasterizer_cells_aa.h	/^        const cell_type* const* scanline_cells(unsigned y) const$/;"	f	class:agg::rasterizer_cells_aa
scanline_data	include/agg_scanline_storage_aa.h	/^        struct scanline_data$/;"	s	class:agg::scanline_storage_aa
scanline_data	include/agg_scanline_storage_bin.h	/^        struct scanline_data$/;"	s	class:agg::scanline_storage_bin
scanline_hit_test	include/agg_rasterizer_cells_aa.h	/^        scanline_hit_test(int x) : m_x(x), m_hit(false) {}$/;"	f	class:agg::scanline_hit_test
scanline_hit_test	include/agg_rasterizer_cells_aa.h	/^    class scanline_hit_test$/;"	c	namespace:agg
scanline_length	include/agg_rasterizer_compound_aa.h	/^        unsigned scanline_length() const { return m_sl_len;   }$/;"	f	class:agg::rasterizer_compound_aa
scanline_num_cells	include/agg_rasterizer_cells_aa.h	/^        unsigned scanline_num_cells(unsigned y) const $/;"	f	class:agg::rasterizer_cells_aa
scanline_p8	include/agg_scanline_p.h	/^        scanline_p8() :$/;"	f	class:agg::scanline_p8
scanline_p8	include/agg_scanline_p.h	/^    class scanline_p8$/;"	c	namespace:agg
scanline_rasterizer	examples/graph_test.cpp	/^typedef agg::rasterizer_scanline_aa<> scanline_rasterizer;$/;"	t	file:
scanline_single_span	include/agg_renderer_raster_text.h	/^            scanline_single_span(int x, int y, unsigned len, $/;"	f	class:agg::renderer_raster_htext::scanline_single_span
scanline_single_span	include/agg_renderer_raster_text.h	/^        class scanline_single_span$/;"	c	class:agg::renderer_raster_htext
scanline_start	include/agg_rasterizer_compound_aa.h	/^        int      scanline_start()  const { return m_sl_start; }$/;"	f	class:agg::rasterizer_compound_aa
scanline_storage_aa	include/agg_scanline_storage_aa.h	/^        scanline_storage_aa() :$/;"	f	class:agg::scanline_storage_aa
scanline_storage_aa	include/agg_scanline_storage_aa.h	/^    template<class T> class scanline_storage_aa$/;"	c	namespace:agg
scanline_storage_aa16	include/agg_scanline_storage_aa.h	/^    typedef scanline_storage_aa<int16u> scanline_storage_aa16; \/\/--------scanline_storage_aa16$/;"	t	namespace:agg
scanline_storage_aa32	include/agg_scanline_storage_aa.h	/^    typedef scanline_storage_aa<int32u> scanline_storage_aa32; \/\/--------scanline_storage_aa32$/;"	t	namespace:agg
scanline_storage_aa8	include/agg_scanline_storage_aa.h	/^    typedef scanline_storage_aa<int8u>  scanline_storage_aa8;  \/\/--------scanline_storage_aa8$/;"	t	namespace:agg
scanline_storage_bin	include/agg_scanline_storage_bin.h	/^        scanline_storage_bin() :$/;"	f	class:agg::scanline_storage_bin
scanline_storage_bin	include/agg_scanline_storage_bin.h	/^    class scanline_storage_bin$/;"	c	namespace:agg
scanline_type	examples/aa_test.cpp	/^typedef agg::scanline_u8                                    scanline_type;$/;"	t	file:
scanline_type	examples/bspline.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_type	examples/polymorphic_renderer.cpp	/^        typedef scanline_p8 scanline_type;$/;"	t	class:agg::polymorphic_renderer_solid_rgba8_base	file:
scanline_type	examples/scanline_boolean.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_type	examples/trans_curve1.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_type	examples/trans_curve1_ft.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_type	examples/trans_curve2.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_type	examples/trans_curve2_ft.cpp	/^    typedef agg::scanline_p8 scanline_type;$/;"	t	class:the_application	file:
scanline_u8	include/agg_scanline_u.h	/^        scanline_u8() :$/;"	f	class:agg::scanline_u8
scanline_u8	include/agg_scanline_u.h	/^    class scanline_u8$/;"	c	namespace:agg
scanline_u8_am	include/agg_scanline_u.h	/^        scanline_u8_am() : base_type(), m_alpha_mask(0) {}$/;"	f	class:agg::scanline_u8_am
scanline_u8_am	include/agg_scanline_u.h	/^        scanline_u8_am(const AlphaMask& am) : base_type(), m_alpha_mask(&am) {}$/;"	f	class:agg::scanline_u8_am
scanline_u8_am	include/agg_scanline_u.h	/^    class scanline_u8_am : public scanline_u8$/;"	c	namespace:agg
scanlines_aa_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::scanlines_aa_type  scanlines_aa_type;$/;"	t	class:agg::font_engine_freetype_int16
scanlines_aa_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::scanlines_aa_type  scanlines_aa_type;$/;"	t	class:agg::font_engine_freetype_int32
scanlines_aa_type	font_freetype/agg_font_freetype.h	/^        typedef scanline_storage_aa8                      scanlines_aa_type;$/;"	t	class:agg::font_engine_freetype_base
scanlines_aa_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::scanlines_aa_type  scanlines_aa_type;$/;"	t	class:agg::font_engine_win32_tt_int16
scanlines_aa_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::scanlines_aa_type  scanlines_aa_type;$/;"	t	class:agg::font_engine_win32_tt_int32
scanlines_aa_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef scanline_storage_aa8                      scanlines_aa_type;$/;"	t	class:agg::font_engine_win32_tt_base
scanlines_bin_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::scanlines_bin_type scanlines_bin_type;$/;"	t	class:agg::font_engine_freetype_int16
scanlines_bin_type	font_freetype/agg_font_freetype.h	/^        typedef font_engine_freetype_base::scanlines_bin_type scanlines_bin_type;$/;"	t	class:agg::font_engine_freetype_int32
scanlines_bin_type	font_freetype/agg_font_freetype.h	/^        typedef scanline_storage_bin                      scanlines_bin_type;$/;"	t	class:agg::font_engine_freetype_base
scanlines_bin_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::scanlines_bin_type scanlines_bin_type;$/;"	t	class:agg::font_engine_win32_tt_int16
scanlines_bin_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef font_engine_win32_tt_base::scanlines_bin_type scanlines_bin_type;$/;"	t	class:agg::font_engine_win32_tt_int32
scanlines_bin_type	font_win32_tt/agg_font_win32_tt.h	/^        typedef scanline_storage_bin                      scanlines_bin_type;$/;"	t	class:agg::font_engine_win32_tt_base
scatter_point	examples/circles.cpp	/^struct scatter_point$/;"	s	file:
sd_max	include/agg_pixfmt_rgba.h	/^    template<class T> inline T sd_max(T a, T b) { return (a > b) ? a : b; }$/;"	f	namespace:agg
sd_min	include/agg_pixfmt_rgba.h	/^    template<class T> inline T sd_min(T a, T b) { return (a < b) ? a : b; }$/;"	f	namespace:agg
self_type	include/agg_alpha_mask_u8.h	/^        typedef alpha_mask_u8<Step, Offset, MaskF> self_type;$/;"	t	class:agg::alpha_mask_u8
self_type	include/agg_alpha_mask_u8.h	/^        typedef amask_no_clip_u8<Step, Offset, MaskF> self_type;$/;"	t	class:agg::amask_no_clip_u8
self_type	include/agg_array.h	/^        typedef pod_array<T> self_type;$/;"	t	class:agg::pod_array
self_type	include/agg_array.h	/^        typedef pod_auto_array<T, Size> self_type;$/;"	t	class:agg::pod_auto_array
self_type	include/agg_array.h	/^        typedef pod_auto_vector<T, Size> self_type;$/;"	t	class:agg::pod_auto_vector
self_type	include/agg_basics.h	/^        typedef rect_base<T> self_type;$/;"	t	struct:agg::rect_base
self_type	include/agg_blur.h	/^        typedef recursive_blur_calc_gray<T> self_type;$/;"	t	struct:agg::recursive_blur_calc_gray
self_type	include/agg_blur.h	/^        typedef recursive_blur_calc_rgb<T> self_type;$/;"	t	struct:agg::recursive_blur_calc_rgb
self_type	include/agg_blur.h	/^        typedef recursive_blur_calc_rgba<T> self_type;$/;"	t	struct:agg::recursive_blur_calc_rgba
self_type	include/agg_color_gray.h	/^        typedef gray16 self_type;$/;"	t	struct:agg::gray16
self_type	include/agg_color_gray.h	/^        typedef gray8 self_type;$/;"	t	struct:agg::gray8
self_type	include/agg_color_rgba.h	/^        typedef rgba16 self_type;$/;"	t	struct:agg::rgba16
self_type	include/agg_color_rgba.h	/^        typedef rgba8 self_type;$/;"	t	struct:agg::rgba8
self_type	include/agg_conv_curve.h	/^        typedef conv_curve<VertexSource, Curve3, Curve4> self_type;$/;"	t	class:agg::conv_curve
self_type	include/agg_conv_gpc.h	/^        typedef conv_gpc<source_a_type, source_b_type> self_type;$/;"	t	class:agg::conv_gpc
self_type	include/agg_font_cache_manager.h	/^        typedef font_cache_manager<FontEngine> self_type;$/;"	t	class:agg::font_cache_manager
self_type	include/agg_gamma_lut.h	/^        typedef gamma_lut<LoResT, HiResT, GammaShift, HiResShift> self_type;$/;"	t	class:agg::gamma_lut
self_type	include/agg_path_storage.h	/^        typedef path_base<VertexContainer> self_type;$/;"	t	class:agg::path_base
self_type	include/agg_path_storage.h	/^        typedef vertex_block_storage<T, BlockShift, BlockPool> self_type;$/;"	t	class:agg::vertex_block_storage
self_type	include/agg_rasterizer_cells_aa.h	/^        typedef rasterizer_cells_aa<Cell> self_type;$/;"	t	class:agg::rasterizer_cells_aa
self_type	include/agg_renderer_outline_aa.h	/^        typedef renderer_outline_aa<base_ren_type> self_type;$/;"	t	class:agg::renderer_outline_aa
self_type	include/agg_renderer_outline_image.h	/^        typedef renderer_outline_image<BaseRenderer, ImagePattern> self_type;$/;"	t	class:agg::renderer_outline_image
self_type	include/agg_scanline_p.h	/^        typedef scanline32_p8 self_type;$/;"	t	class:agg::scanline32_p8
self_type	include/agg_scanline_p.h	/^        typedef scanline_p8 self_type;$/;"	t	class:agg::scanline_p8
self_type	include/agg_scanline_u.h	/^        typedef scanline32_u8 self_type;$/;"	t	class:agg::scanline32_u8
self_type	include/agg_scanline_u.h	/^        typedef scanline_u8 self_type;$/;"	t	class:agg::scanline_u8
semidot	include/agg_renderer_outline_aa.h	/^        void semidot(Cmp cmp, int xc1, int yc1, int xc2, int yc2)$/;"	f	class:agg::renderer_outline_aa
semidot	include/agg_renderer_outline_image.h	/^        void semidot(Cmp, int, int, int, int)$/;"	f	class:agg::renderer_outline_image
semidot_hline	include/agg_renderer_outline_aa.h	/^        void semidot_hline(Cmp cmp,$/;"	f	class:agg::renderer_outline_aa
semiellipse_down	include/agg_renderer_markers.h	/^        void semiellipse_down(int x, int y, int r)$/;"	f	class:agg::renderer_markers
semiellipse_left	include/agg_renderer_markers.h	/^        void semiellipse_left(int x, int y, int r)$/;"	f	class:agg::renderer_markers
semiellipse_right	include/agg_renderer_markers.h	/^        void semiellipse_right(int x, int y, int r)$/;"	f	class:agg::renderer_markers
semiellipse_up	include/agg_renderer_markers.h	/^        void semiellipse_up(int x, int y, int r)$/;"	f	class:agg::renderer_markers
sep_flag	src/platform/win32/agg_platform_support.cpp	/^        enum sep_flag$/;"	g	class:agg::tokenizer	file:
serialize	include/agg_array.h	/^    template<class T> void pod_vector<T>::serialize(int8u* ptr) const$/;"	f	class:agg::pod_vector
serialize	include/agg_array.h	/^    void pod_bvector<T, S>::serialize(int8u* ptr) const$/;"	f	class:agg::pod_bvector
serialize	include/agg_path_storage_integer.h	/^        void serialize(int8u* ptr) const$/;"	f	class:agg::path_storage_integer
serialize	include/agg_scanline_storage_aa.h	/^        void serialize(int8u* data) const$/;"	f	class:agg::scanline_storage_aa
serialize	include/agg_scanline_storage_bin.h	/^        void serialize(int8u* data) const$/;"	f	class:agg::scanline_storage_bin
serialize	include/agg_trans_viewport.h	/^        void serialize(int8u* ptr) const$/;"	f	class:agg::trans_viewport
serialized_integer_path_adaptor	include/agg_path_storage_integer.h	/^        serialized_integer_path_adaptor() :$/;"	f	class:agg::serialized_integer_path_adaptor
serialized_integer_path_adaptor	include/agg_path_storage_integer.h	/^        serialized_integer_path_adaptor(const int8u* data, unsigned size,$/;"	f	class:agg::serialized_integer_path_adaptor
serialized_integer_path_adaptor	include/agg_path_storage_integer.h	/^    template<class T, unsigned CoordShift=6> class serialized_integer_path_adaptor$/;"	c	namespace:agg
serialized_scanlines_adaptor_aa	include/agg_scanline_storage_aa.h	/^        serialized_scanlines_adaptor_aa() :$/;"	f	class:agg::serialized_scanlines_adaptor_aa
serialized_scanlines_adaptor_aa	include/agg_scanline_storage_aa.h	/^        serialized_scanlines_adaptor_aa(const int8u* data, unsigned size,$/;"	f	class:agg::serialized_scanlines_adaptor_aa
serialized_scanlines_adaptor_aa	include/agg_scanline_storage_aa.h	/^    template<class T> class serialized_scanlines_adaptor_aa$/;"	c	namespace:agg
serialized_scanlines_adaptor_aa16	include/agg_scanline_storage_aa.h	/^    typedef serialized_scanlines_adaptor_aa<int16u> serialized_scanlines_adaptor_aa16; \/\/----serialized_scanlines_adaptor_aa16$/;"	t	namespace:agg
serialized_scanlines_adaptor_aa32	include/agg_scanline_storage_aa.h	/^    typedef serialized_scanlines_adaptor_aa<int32u> serialized_scanlines_adaptor_aa32; \/\/----serialized_scanlines_adaptor_aa32$/;"	t	namespace:agg
serialized_scanlines_adaptor_aa8	include/agg_scanline_storage_aa.h	/^    typedef serialized_scanlines_adaptor_aa<int8u>  serialized_scanlines_adaptor_aa8;  \/\/----serialized_scanlines_adaptor_aa8$/;"	t	namespace:agg
serialized_scanlines_adaptor_bin	include/agg_scanline_storage_bin.h	/^        serialized_scanlines_adaptor_bin() :$/;"	f	class:agg::serialized_scanlines_adaptor_bin
serialized_scanlines_adaptor_bin	include/agg_scanline_storage_bin.h	/^        serialized_scanlines_adaptor_bin(const int8u* data, unsigned size,$/;"	f	class:agg::serialized_scanlines_adaptor_bin
serialized_scanlines_adaptor_bin	include/agg_scanline_storage_bin.h	/^    class serialized_scanlines_adaptor_bin$/;"	c	namespace:agg
set	include/agg_gamma_functions.h	/^        void set(double s, double e) { m_start = s; m_end = e; }$/;"	f	class:agg::gamma_linear
set	src/agg_line_profile_aa.cpp	/^    void line_profile_aa::set(double center_width, double smoother_width)$/;"	f	class:agg::line_profile_aa
set_cur	include/platform/agg_platform_support.h	/^        bool set_cur(double x, double y)$/;"	f	class:agg::ctrl_container
set_curr_cell	include/agg_rasterizer_cells_aa.h	/^    AGG_INLINE void rasterizer_cells_aa<Cell>::set_curr_cell(int x, int y)$/;"	f	class:agg::rasterizer_cells_aa
set_orientation	include/agg_basics.h	/^    inline unsigned set_orientation(unsigned c, unsigned o)$/;"	f	namespace:agg
set_path_str	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^    void path_tokenizer::set_path_str(const char* str)$/;"	f	class:agg::svg::path_tokenizer
set_radius	examples/image_fltr_graph.cpp	/^    virtual void set_radius(double r) { m_filter = Filter(r); }$/;"	f	struct:image_filter_variable_radius_adaptor
set_radius	examples/image_fltr_graph.cpp	/^    virtual void set_radius(double r) {}$/;"	f	struct:image_filter_const_radius_adaptor
set_str	src/platform/win32/agg_platform_support.cpp	/^    inline void tokenizer::set_str(const char* str) $/;"	f	class:agg::tokenizer
set_xp	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::set_xp(unsigned idx, double val)$/;"	f	class:agg::spline_ctrl_impl
set_yp	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::set_yp(unsigned idx, double val)$/;"	f	class:agg::spline_ctrl_impl
setup	include/agg_scanline_storage_bin.h	/^            void setup(unsigned scanline_idx)$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
shape_type	examples/blend_color.cpp	/^    typedef agg::conv_curve<agg::path_storage> shape_type;$/;"	t	class:the_application	file:
shape_type	examples/blur.cpp	/^    typedef agg::conv_curve<agg::path_storage> shape_type;$/;"	t	class:the_application	file:
shorten	include/agg_conv_dash.h	/^        double shorten() const { return base_type::generator().shorten(); }$/;"	f	struct:agg::conv_dash
shorten	include/agg_conv_dash.h	/^        void shorten(double s) { base_type::generator().shorten(s); }$/;"	f	struct:agg::conv_dash
shorten	include/agg_conv_marker_adaptor.h	/^        double shorten() const { return base_type::generator().shorten(); }$/;"	f	struct:agg::conv_marker_adaptor
shorten	include/agg_conv_marker_adaptor.h	/^        void shorten(double s) { base_type::generator().shorten(s); }$/;"	f	struct:agg::conv_marker_adaptor
shorten	include/agg_conv_shorten_path.h	/^        double shorten() const { return base_type::generator().shorten(); }$/;"	f	class:agg::conv_shorten_path
shorten	include/agg_conv_shorten_path.h	/^        void shorten(double s) { base_type::generator().shorten(s); }$/;"	f	class:agg::conv_shorten_path
shorten	include/agg_conv_stroke.h	/^        double shorten() const { return base_type::generator().shorten(); }$/;"	f	struct:agg::conv_stroke
shorten	include/agg_conv_stroke.h	/^        void shorten(double s) { base_type::generator().shorten(s); }$/;"	f	struct:agg::conv_stroke
shorten	include/agg_vcgen_dash.h	/^        double shorten() const { return m_shorten; }$/;"	f	class:agg::vcgen_dash
shorten	include/agg_vcgen_dash.h	/^        void shorten(double s) { m_shorten = s; }$/;"	f	class:agg::vcgen_dash
shorten	include/agg_vcgen_stroke.h	/^        double shorten() const { return m_shorten; }$/;"	f	class:agg::vcgen_stroke
shorten	include/agg_vcgen_stroke.h	/^        void shorten(double s) { m_shorten = s; }$/;"	f	class:agg::vcgen_stroke
shorten	include/agg_vcgen_vertex_sequence.h	/^        double shorten() const { return m_shorten; }$/;"	f	class:agg::vcgen_vertex_sequence
shorten	include/agg_vcgen_vertex_sequence.h	/^        void shorten(double s) { m_shorten = s; }$/;"	f	class:agg::vcgen_vertex_sequence
shorten_path	include/agg_shorten_path.h	/^    void shorten_path(VertexSequence& vs, double s, unsigned closed = 0)$/;"	f	namespace:agg
shx	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
shx	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
shy	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
shy	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
signature	include/agg_font_cache_manager.h	/^        void signature(const char* font_signature)$/;"	f	class:agg::font_cache
simple_polygon_vertex_source	examples/interactive_polygon.h	/^        simple_polygon_vertex_source(const double* polygon, unsigned np, $/;"	f	class:agg::simple_polygon_vertex_source
simple_polygon_vertex_source	examples/interactive_polygon.h	/^    class simple_polygon_vertex_source$/;"	c	namespace:agg
simple_polygon_vertex_source	include/ctrl/agg_polygon_ctrl.h	/^        simple_polygon_vertex_source(const double* polygon, unsigned np, $/;"	f	class:agg::simple_polygon_vertex_source
simple_polygon_vertex_source	include/ctrl/agg_polygon_ctrl.h	/^    class simple_polygon_vertex_source$/;"	c	namespace:agg
simple_vertex_source	examples/aa_test.cpp	/^    simple_vertex_source() : m_num_vertices(0), m_count(0) $/;"	f	class:simple_vertex_source
simple_vertex_source	examples/aa_test.cpp	/^    simple_vertex_source(double x1, double y1, $/;"	f	class:simple_vertex_source
simple_vertex_source	examples/aa_test.cpp	/^    simple_vertex_source(double x1, double y1, double x2, double y2)$/;"	f	class:simple_vertex_source
simple_vertex_source	examples/aa_test.cpp	/^class simple_vertex_source$/;"	c	file:
simul_eq	include/agg_simul_eq.h	/^    struct simul_eq$/;"	s	namespace:agg
single	src/platform/win32/agg_platform_support.cpp	/^            single,$/;"	e	enum:agg::tokenizer::sep_flag	file:
size	examples/alpha_mask2.cpp	/^        static unsigned size() { return 256; }$/;"	f	struct:agg::gradient_linear_color
size	examples/compositing.cpp	/^        static unsigned size() { return 256; }$/;"	f	struct:agg::gradient_linear_color
size	examples/gradients.cpp	/^    static unsigned size() { return 256; }$/;"	f	struct:color_function_profile
size	examples/multi_clip.cpp	/^        static unsigned size() { return 256; }$/;"	f	struct:agg::gradient_linear_color
size	include/agg_array.h	/^            unsigned size;$/;"	m	struct:agg::block_allocator::block_type
size	include/agg_array.h	/^        static unsigned size() { return Size; }$/;"	f	class:agg::pod_auto_array
size	include/agg_array.h	/^        unsigned size()      const   { return m_size; }$/;"	f	class:agg::pod_vector
size	include/agg_array.h	/^        unsigned size() const { return m_size; }$/;"	f	class:agg::pod_array
size	include/agg_array.h	/^        unsigned size() const { return m_size; }$/;"	f	class:agg::pod_array_adaptor
size	include/agg_array.h	/^        unsigned size() const { return m_size; }$/;"	f	class:agg::pod_auto_vector
size	include/agg_array.h	/^        unsigned size() const { return m_size; }$/;"	f	class:agg::pod_bvector
size	include/agg_array.h	/^        unsigned size() const { return m_size; }$/;"	f	class:agg::range_adaptor
size	include/agg_gradient_lut.h	/^        static unsigned size() $/;"	f	class:agg::gradient_lut
size	include/agg_path_storage_integer.h	/^        unsigned size() const { return m_storage.size(); }$/;"	f	class:agg::path_storage_integer
size	include/agg_span_gradient.h	/^        unsigned size() const { return m_size; }$/;"	f	struct:agg::gradient_linear_color
size	src/agg_gsv_text.cpp	/^    void gsv_text::size(double height, double width)$/;"	f	class:agg::gsv_text
slider_color	include/ctrl/agg_scale_ctrl.h	/^        void slider_color(const ColorT& c)     { m_slider_color = c; }$/;"	f	class:agg::scale_ctrl
slider_ctrl	include/ctrl/agg_slider_ctrl.h	/^        slider_ctrl(double x1, double y1, double x2, double y2, bool flip_y=false) :$/;"	f	class:agg::slider_ctrl
slider_ctrl	include/ctrl/agg_slider_ctrl.h	/^    template<class ColorT> class slider_ctrl : public slider_ctrl_impl$/;"	c	namespace:agg
slider_ctrl_impl	include/ctrl/agg_slider_ctrl.h	/^    class slider_ctrl_impl : public ctrl$/;"	c	namespace:agg
slider_ctrl_impl	src/ctrl/agg_slider_ctrl.cpp	/^    slider_ctrl_impl::slider_ctrl_impl(double x1, double y1, $/;"	f	class:agg::slider_ctrl_impl
smooth_value	include/agg_conv_smooth_poly1.h	/^        double smooth_value() const { return base_type::generator().smooth_value(); }$/;"	f	struct:agg::conv_smooth_poly1
smooth_value	include/agg_conv_smooth_poly1.h	/^        double smooth_value() const { return m_smooth.generator().smooth_value(); }$/;"	f	struct:agg::conv_smooth_poly1_curve
smooth_value	include/agg_conv_smooth_poly1.h	/^        void   smooth_value(double v) { base_type::generator().smooth_value(v); }$/;"	f	struct:agg::conv_smooth_poly1
smooth_value	include/agg_conv_smooth_poly1.h	/^        void   smooth_value(double v) { m_smooth.generator().smooth_value(v); }$/;"	f	struct:agg::conv_smooth_poly1_curve
smooth_value	include/agg_vcgen_smooth_poly1.h	/^        double smooth_value() const { return m_smooth_value * 2.0; }$/;"	f	class:agg::vcgen_smooth_poly1
smooth_value	include/agg_vcgen_smooth_poly1.h	/^        void   smooth_value(double v) { m_smooth_value = v * 0.5; }$/;"	f	class:agg::vcgen_smooth_poly1
smoother_width	include/agg_renderer_outline_aa.h	/^        double smoother_width() const { return m_smoother_width; }$/;"	f	class:agg::line_profile_aa
smoother_width	include/agg_renderer_outline_aa.h	/^        void smoother_width(double w) { m_smoother_width = w; }$/;"	f	class:agg::line_profile_aa
solid_ellipse	include/agg_renderer_primitives.h	/^        void solid_ellipse(int x, int y, int rx, int ry)$/;"	f	class:agg::renderer_primitives
solid_rectangle	include/agg_renderer_primitives.h	/^        void solid_rectangle(int x1, int y1, int x2, int y2)$/;"	f	class:agg::renderer_primitives
solid_renderer	examples/graph_test.cpp	/^typedef agg::renderer_scanline_aa_solid<base_renderer>  solid_renderer;$/;"	t	file:
solid_wedge	examples/mol_view.cpp	/^        solid_wedge() :$/;"	f	class:agg::solid_wedge
solid_wedge	examples/mol_view.cpp	/^        solid_wedge(double x1, double y1, double x2, double y2, double thickness) :$/;"	f	class:agg::solid_wedge
solid_wedge	examples/mol_view.cpp	/^    class solid_wedge$/;"	c	namespace:agg	file:
solve	include/agg_simul_eq.h	/^        static bool solve(const double left[Size][Size], $/;"	f	struct:agg::simul_eq
sort	include/agg_rasterizer_compound_aa.h	/^    AGG_INLINE void rasterizer_compound_aa<Clip>::sort()$/;"	f	class:agg::rasterizer_compound_aa
sort	include/agg_rasterizer_scanline_aa.h	/^    void rasterizer_scanline_aa<Clip>::sort()$/;"	f	class:agg::rasterizer_scanline_aa
sort_cells	include/agg_rasterizer_cells_aa.h	/^    void rasterizer_cells_aa<Cell>::sort_cells()$/;"	f	class:agg::rasterizer_cells_aa
sort_kerning_pairs	font_win32_tt/agg_font_win32_tt.cpp	/^    void font_engine_win32_tt_base::sort_kerning_pairs()$/;"	f	class:agg::font_engine_win32_tt_base
sorted	include/agg_rasterizer_cells_aa.h	/^        bool sorted() const { return m_sorted; }$/;"	f	class:agg::rasterizer_cells_aa
sorted_y	include/agg_rasterizer_cells_aa.h	/^        struct sorted_y$/;"	s	class:agg::rasterizer_cells_aa
source	include/agg_span_image_filter.h	/^               source_type& source()            { return *m_src; }$/;"	f	class:agg::span_image_filter
source	include/agg_span_image_filter.h	/^        const  source_type& source()      const { return *m_src; }$/;"	f	class:agg::span_image_filter
source	include/agg_span_pattern_gray.h	/^               source_type& source()       { return *m_src; }$/;"	f	class:agg::span_pattern_gray
source	include/agg_span_pattern_gray.h	/^        const  source_type& source() const { return *m_src; }$/;"	f	class:agg::span_pattern_gray
source	include/agg_span_pattern_rgb.h	/^               source_type& source()       { return *m_src; }$/;"	f	class:agg::span_pattern_rgb
source	include/agg_span_pattern_rgb.h	/^        const  source_type& source() const { return *m_src; }$/;"	f	class:agg::span_pattern_rgb
source	include/agg_span_pattern_rgba.h	/^               source_type& source()       { return *m_src; }$/;"	f	class:agg::span_pattern_rgba
source	include/agg_span_pattern_rgba.h	/^        const  source_type& source() const { return *m_src; }$/;"	f	class:agg::span_pattern_rgba
source_a_type	include/agg_conv_gpc.h	/^        typedef VSA source_a_type;$/;"	t	class:agg::conv_gpc
source_b_type	include/agg_conv_gpc.h	/^        typedef VSB source_b_type;$/;"	t	class:agg::conv_gpc
source_image	examples/simple_blur.cpp	/^        const rendering_buffer& source_image() const { return *m_source_image; }$/;"	f	class:agg::span_simple_blur_rgb24
source_image	examples/simple_blur.cpp	/^        void source_image(const rendering_buffer& src) { m_source_image = &src; }$/;"	f	class:agg::span_simple_blur_rgb24
source_type	include/agg_span_image_filter.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter
source_type	include/agg_span_image_filter.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample
source_type	include/agg_span_image_filter.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_affine
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_gray
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_gray_2x2
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_gray_nn
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_gray
source_type	include/agg_span_image_filter_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_gray_affine
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgb
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgb_nn
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_rgb
source_type	include/agg_span_image_filter_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_rgb_affine
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgba
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_filter_rgba_nn
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_rgba
source_type	include/agg_span_image_filter_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_image_resample_rgba_affine
source_type	include/agg_span_pattern_gray.h	/^        typedef Source source_type;$/;"	t	class:agg::span_pattern_gray
source_type	include/agg_span_pattern_rgb.h	/^        typedef Source source_type;$/;"	t	class:agg::span_pattern_rgb
source_type	include/agg_span_pattern_rgba.h	/^        typedef Source source_type;$/;"	t	class:agg::span_pattern_rgba
space	src/agg_gsv_text.cpp	/^    void gsv_text::space(double space)$/;"	f	class:agg::gsv_text
span	include/agg_glyph_raster_bin.h	/^        const cover_type* span(unsigned i)$/;"	f	class:agg::glyph_raster_bin
span	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* span(int x, int y, unsigned len)$/;"	f	class:agg::image_accessor_clip
span	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* span(int x, int y, unsigned len)$/;"	f	class:agg::image_accessor_clone
span	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* span(int x, int y, unsigned)$/;"	f	class:agg::image_accessor_no_clip
span	include/agg_image_accessors.h	/^        AGG_INLINE const int8u* span(int x, int y, unsigned)$/;"	f	class:agg::image_accessor_wrap
span	include/agg_scanline_bin.h	/^            span() {}$/;"	f	struct:agg::scanline32_bin::span
span	include/agg_scanline_bin.h	/^            span(coord_type x_, coord_type len_) : x(x_), len(len_) {}$/;"	f	struct:agg::scanline32_bin::span
span	include/agg_scanline_bin.h	/^        struct span$/;"	s	class:agg::scanline32_bin
span	include/agg_scanline_bin.h	/^        struct span$/;"	s	class:agg::scanline_bin
span	include/agg_scanline_p.h	/^            span() {}$/;"	f	struct:agg::scanline32_p8::span
span	include/agg_scanline_p.h	/^            span(coord_type x_, coord_type len_, const cover_type* covers_) :$/;"	f	struct:agg::scanline32_p8::span
span	include/agg_scanline_p.h	/^        struct span$/;"	s	class:agg::scanline32_p8
span	include/agg_scanline_p.h	/^        struct span$/;"	s	class:agg::scanline_p8
span	include/agg_scanline_storage_aa.h	/^                struct span$/;"	s	class:agg::scanline_storage_aa::embedded_scanline::const_iterator
span	include/agg_scanline_storage_aa.h	/^                struct span$/;"	s	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator
span	include/agg_scanline_storage_bin.h	/^                struct span$/;"	s	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator
span	include/agg_scanline_u.h	/^            span() {}$/;"	f	struct:agg::scanline32_u8::span
span	include/agg_scanline_u.h	/^            span(coord_type x_, coord_type len_, cover_type* covers_) :$/;"	f	struct:agg::scanline32_u8::span
span	include/agg_scanline_u.h	/^        struct span$/;"	s	class:agg::scanline32_u8
span	include/agg_scanline_u.h	/^        struct span$/;"	s	class:agg::scanline_u8
span	include/agg_span_allocator.h	/^        AGG_INLINE color_type* span()               { return &m_span[0]; }$/;"	f	class:agg::span_allocator
span_allocator	include/agg_span_allocator.h	/^    template<class ColorT> class span_allocator$/;"	c	namespace:agg
span_allocator_type	examples/gradient_focal.cpp	/^    typedef agg::span_allocator<color_type> span_allocator_type;$/;"	t	class:the_application	file:
span_array_type	include/agg_scanline_bin.h	/^        typedef pod_bvector<span, 4> span_array_type;$/;"	t	class:agg::scanline32_bin
span_array_type	include/agg_scanline_p.h	/^        typedef pod_bvector<span, 4> span_array_type;$/;"	t	class:agg::scanline32_p8
span_array_type	include/agg_scanline_u.h	/^        typedef pod_bvector<span, 4> span_array_type;$/;"	t	class:agg::scanline32_u8
span_by_index	include/agg_scanline_storage_aa.h	/^        const span_data& span_by_index(unsigned i) const$/;"	f	class:agg::scanline_storage_aa
span_by_index	include/agg_scanline_storage_bin.h	/^        const span_data& span_by_index(unsigned i) const$/;"	f	class:agg::scanline_storage_bin
span_conv_brightness_alpha_rgb8	examples/image_alpha.cpp	/^        span_conv_brightness_alpha_rgb8(const alpha_type* alpha_array) :$/;"	f	class:agg::span_conv_brightness_alpha_rgb8
span_conv_brightness_alpha_rgb8	examples/image_alpha.cpp	/^    class span_conv_brightness_alpha_rgb8$/;"	c	namespace:agg	file:
span_converter	include/agg_span_converter.h	/^        span_converter(SpanGenerator& span_gen, SpanConverter& span_cnv) : $/;"	f	class:agg::span_converter
span_converter	include/agg_span_converter.h	/^    template<class SpanGenerator, class SpanConverter> class span_converter$/;"	c	namespace:agg
span_data	include/agg_scanline_storage_aa.h	/^        struct span_data$/;"	s	class:agg::scanline_storage_aa
span_data	include/agg_scanline_storage_bin.h	/^        struct span_data$/;"	s	class:agg::scanline_storage_bin
span_extra_tail	include/agg_pixfmt_amask_adaptor.h	/^        enum span_extra_tail_e { span_extra_tail = 256 };$/;"	e	enum:agg::pixfmt_amask_adaptor::span_extra_tail_e
span_extra_tail_e	include/agg_pixfmt_amask_adaptor.h	/^        enum span_extra_tail_e { span_extra_tail = 256 };$/;"	g	class:agg::pixfmt_amask_adaptor
span_gen_type	include/agg_renderer_scanline.h	/^        typedef SpanGenerator span_gen_type;$/;"	t	class:agg::renderer_scanline_aa
span_gen_type	include/agg_renderer_scanline.h	/^        typedef SpanGenerator span_gen_type;$/;"	t	class:agg::renderer_scanline_bin
span_gouraud	include/agg_span_gouraud.h	/^        span_gouraud() : $/;"	f	class:agg::span_gouraud
span_gouraud	include/agg_span_gouraud.h	/^        span_gouraud(const color_type& c1,$/;"	f	class:agg::span_gouraud
span_gouraud	include/agg_span_gouraud.h	/^    template<class ColorT> class span_gouraud$/;"	c	namespace:agg
span_gouraud_gray	include/agg_span_gouraud_gray.h	/^        span_gouraud_gray() {}$/;"	f	class:agg::span_gouraud_gray
span_gouraud_gray	include/agg_span_gouraud_gray.h	/^        span_gouraud_gray(const color_type& c1, $/;"	f	class:agg::span_gouraud_gray
span_gouraud_gray	include/agg_span_gouraud_gray.h	/^    template<class ColorT> class span_gouraud_gray : public span_gouraud<ColorT>$/;"	c	namespace:agg
span_gouraud_rgba	include/agg_span_gouraud_rgba.h	/^        span_gouraud_rgba() {}$/;"	f	class:agg::span_gouraud_rgba
span_gouraud_rgba	include/agg_span_gouraud_rgba.h	/^        span_gouraud_rgba(const color_type& c1, $/;"	f	class:agg::span_gouraud_rgba
span_gouraud_rgba	include/agg_span_gouraud_rgba.h	/^    template<class ColorT> class span_gouraud_rgba : public span_gouraud<ColorT>$/;"	c	namespace:agg
span_gradient	include/agg_span_gradient.h	/^        span_gradient() {}$/;"	f	class:agg::span_gradient
span_gradient	include/agg_span_gradient.h	/^        span_gradient(interpolator_type& inter,$/;"	f	class:agg::span_gradient
span_gradient	include/agg_span_gradient.h	/^    class span_gradient$/;"	c	namespace:agg
span_gradient_alpha	include/agg_span_gradient_alpha.h	/^        span_gradient_alpha() {}$/;"	f	class:agg::span_gradient_alpha
span_gradient_alpha	include/agg_span_gradient_alpha.h	/^        span_gradient_alpha(interpolator_type& inter,$/;"	f	class:agg::span_gradient_alpha
span_gradient_alpha	include/agg_span_gradient_alpha.h	/^    class span_gradient_alpha$/;"	c	namespace:agg
span_gradient_type	examples/gradient_focal.cpp	/^                               color_func_type> span_gradient_type;$/;"	t	class:the_application	file:
span_image_filter	examples/image_filters.cpp	24;"	d	file:
span_image_filter	include/agg_span_image_filter.h	/^        span_image_filter() {}$/;"	f	class:agg::span_image_filter
span_image_filter	include/agg_span_image_filter.h	/^        span_image_filter(source_type& src, $/;"	f	class:agg::span_image_filter
span_image_filter	include/agg_span_image_filter.h	/^    template<class Source, class Interpolator> class span_image_filter$/;"	c	namespace:agg
span_image_filter_2x2	examples/image_filters.cpp	27;"	d	file:
span_image_filter_2x2	examples/pattern_perspective.cpp	25;"	d	file:
span_image_filter_2x2	examples/pattern_resample.cpp	41;"	d	file:
span_image_filter_bilinear	examples/image_filters.cpp	26;"	d	file:
span_image_filter_gray	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray() {}$/;"	f	class:agg::span_image_filter_gray
span_image_filter_gray	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray(source_type& src, $/;"	f	class:agg::span_image_filter_gray
span_image_filter_gray	include/agg_span_image_filter_gray.h	/^    class span_image_filter_gray : $/;"	c	namespace:agg
span_image_filter_gray_2x2	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_2x2() {}$/;"	f	class:agg::span_image_filter_gray_2x2
span_image_filter_gray_2x2	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_2x2(source_type& src, $/;"	f	class:agg::span_image_filter_gray_2x2
span_image_filter_gray_2x2	include/agg_span_image_filter_gray.h	/^    class span_image_filter_gray_2x2 : $/;"	c	namespace:agg
span_image_filter_gray_bilinear	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_bilinear() {}$/;"	f	class:agg::span_image_filter_gray_bilinear
span_image_filter_gray_bilinear	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_bilinear(source_type& src, $/;"	f	class:agg::span_image_filter_gray_bilinear
span_image_filter_gray_bilinear	include/agg_span_image_filter_gray.h	/^    class span_image_filter_gray_bilinear : $/;"	c	namespace:agg
span_image_filter_gray_bilinear_clip	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_bilinear_clip() {}$/;"	f	class:agg::span_image_filter_gray_bilinear_clip
span_image_filter_gray_bilinear_clip	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_bilinear_clip(source_type& src, $/;"	f	class:agg::span_image_filter_gray_bilinear_clip
span_image_filter_gray_bilinear_clip	include/agg_span_image_filter_gray.h	/^    class span_image_filter_gray_bilinear_clip : $/;"	c	namespace:agg
span_image_filter_gray_nn	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_nn() {}$/;"	f	class:agg::span_image_filter_gray_nn
span_image_filter_gray_nn	include/agg_span_image_filter_gray.h	/^        span_image_filter_gray_nn(source_type& src, $/;"	f	class:agg::span_image_filter_gray_nn
span_image_filter_gray_nn	include/agg_span_image_filter_gray.h	/^    class span_image_filter_gray_nn : $/;"	c	namespace:agg
span_image_filter_nn	examples/image_filters.cpp	25;"	d	file:
span_image_filter_nn	examples/pattern_perspective.cpp	26;"	d	file:
span_image_filter_rgb	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb() {}$/;"	f	class:agg::span_image_filter_rgb
span_image_filter_rgb	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb(source_type& src, $/;"	f	class:agg::span_image_filter_rgb
span_image_filter_rgb	include/agg_span_image_filter_rgb.h	/^    class span_image_filter_rgb : $/;"	c	namespace:agg
span_image_filter_rgb_2x2	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_2x2() {}$/;"	f	class:agg::span_image_filter_rgb_2x2
span_image_filter_rgb_2x2	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_2x2(source_type& src, $/;"	f	class:agg::span_image_filter_rgb_2x2
span_image_filter_rgb_2x2	include/agg_span_image_filter_rgb.h	/^    class span_image_filter_rgb_2x2 : $/;"	c	namespace:agg
span_image_filter_rgb_bilinear	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_bilinear() {}$/;"	f	class:agg::span_image_filter_rgb_bilinear
span_image_filter_rgb_bilinear	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_bilinear(source_type& src, $/;"	f	class:agg::span_image_filter_rgb_bilinear
span_image_filter_rgb_bilinear	include/agg_span_image_filter_rgb.h	/^    class span_image_filter_rgb_bilinear : $/;"	c	namespace:agg
span_image_filter_rgb_bilinear_clip	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_bilinear_clip() {}$/;"	f	class:agg::span_image_filter_rgb_bilinear_clip
span_image_filter_rgb_bilinear_clip	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_bilinear_clip(source_type& src, $/;"	f	class:agg::span_image_filter_rgb_bilinear_clip
span_image_filter_rgb_bilinear_clip	include/agg_span_image_filter_rgb.h	/^    class span_image_filter_rgb_bilinear_clip : $/;"	c	namespace:agg
span_image_filter_rgb_nn	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_nn() {}$/;"	f	class:agg::span_image_filter_rgb_nn
span_image_filter_rgb_nn	include/agg_span_image_filter_rgb.h	/^        span_image_filter_rgb_nn(source_type& src, $/;"	f	class:agg::span_image_filter_rgb_nn
span_image_filter_rgb_nn	include/agg_span_image_filter_rgb.h	/^    class span_image_filter_rgb_nn : $/;"	c	namespace:agg
span_image_filter_rgba	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba() {}$/;"	f	class:agg::span_image_filter_rgba
span_image_filter_rgba	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba(source_type& src, $/;"	f	class:agg::span_image_filter_rgba
span_image_filter_rgba	include/agg_span_image_filter_rgba.h	/^    class span_image_filter_rgba : $/;"	c	namespace:agg
span_image_filter_rgba_2x2	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_2x2() {}$/;"	f	class:agg::span_image_filter_rgba_2x2
span_image_filter_rgba_2x2	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_2x2(source_type& src, $/;"	f	class:agg::span_image_filter_rgba_2x2
span_image_filter_rgba_2x2	include/agg_span_image_filter_rgba.h	/^    class span_image_filter_rgba_2x2 : $/;"	c	namespace:agg
span_image_filter_rgba_bilinear	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_bilinear() {}$/;"	f	class:agg::span_image_filter_rgba_bilinear
span_image_filter_rgba_bilinear	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_bilinear(source_type& src, $/;"	f	class:agg::span_image_filter_rgba_bilinear
span_image_filter_rgba_bilinear	include/agg_span_image_filter_rgba.h	/^    class span_image_filter_rgba_bilinear : $/;"	c	namespace:agg
span_image_filter_rgba_bilinear_clip	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_bilinear_clip() {}$/;"	f	class:agg::span_image_filter_rgba_bilinear_clip
span_image_filter_rgba_bilinear_clip	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_bilinear_clip(source_type& src, $/;"	f	class:agg::span_image_filter_rgba_bilinear_clip
span_image_filter_rgba_bilinear_clip	include/agg_span_image_filter_rgba.h	/^    class span_image_filter_rgba_bilinear_clip : $/;"	c	namespace:agg
span_image_filter_rgba_nn	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_nn() {}$/;"	f	class:agg::span_image_filter_rgba_nn
span_image_filter_rgba_nn	include/agg_span_image_filter_rgba.h	/^        span_image_filter_rgba_nn(source_type& src, $/;"	f	class:agg::span_image_filter_rgba_nn
span_image_filter_rgba_nn	include/agg_span_image_filter_rgba.h	/^    class span_image_filter_rgba_nn : $/;"	c	namespace:agg
span_image_resample	examples/pattern_resample.cpp	43;"	d	file:
span_image_resample	include/agg_span_image_filter.h	/^        span_image_resample() : $/;"	f	class:agg::span_image_resample
span_image_resample	include/agg_span_image_filter.h	/^        span_image_resample(source_type& src, $/;"	f	class:agg::span_image_resample
span_image_resample	include/agg_span_image_filter.h	/^    class span_image_resample : $/;"	c	namespace:agg
span_image_resample_affine	examples/pattern_resample.cpp	42;"	d	file:
span_image_resample_affine	include/agg_span_image_filter.h	/^        span_image_resample_affine() : $/;"	f	class:agg::span_image_resample_affine
span_image_resample_affine	include/agg_span_image_filter.h	/^        span_image_resample_affine(source_type& src, $/;"	f	class:agg::span_image_resample_affine
span_image_resample_affine	include/agg_span_image_filter.h	/^    class span_image_resample_affine : $/;"	c	namespace:agg
span_image_resample_gray	include/agg_span_image_filter_gray.h	/^        span_image_resample_gray() {}$/;"	f	class:agg::span_image_resample_gray
span_image_resample_gray	include/agg_span_image_filter_gray.h	/^        span_image_resample_gray(source_type& src, $/;"	f	class:agg::span_image_resample_gray
span_image_resample_gray	include/agg_span_image_filter_gray.h	/^    class span_image_resample_gray : $/;"	c	namespace:agg
span_image_resample_gray_affine	include/agg_span_image_filter_gray.h	/^        span_image_resample_gray_affine() {}$/;"	f	class:agg::span_image_resample_gray_affine
span_image_resample_gray_affine	include/agg_span_image_filter_gray.h	/^        span_image_resample_gray_affine(source_type& src, $/;"	f	class:agg::span_image_resample_gray_affine
span_image_resample_gray_affine	include/agg_span_image_filter_gray.h	/^    class span_image_resample_gray_affine : $/;"	c	namespace:agg
span_image_resample_rgb	include/agg_span_image_filter_rgb.h	/^        span_image_resample_rgb() {}$/;"	f	class:agg::span_image_resample_rgb
span_image_resample_rgb	include/agg_span_image_filter_rgb.h	/^        span_image_resample_rgb(source_type& src, $/;"	f	class:agg::span_image_resample_rgb
span_image_resample_rgb	include/agg_span_image_filter_rgb.h	/^    class span_image_resample_rgb : $/;"	c	namespace:agg
span_image_resample_rgb_affine	include/agg_span_image_filter_rgb.h	/^        span_image_resample_rgb_affine() {}$/;"	f	class:agg::span_image_resample_rgb_affine
span_image_resample_rgb_affine	include/agg_span_image_filter_rgb.h	/^        span_image_resample_rgb_affine(source_type& src, $/;"	f	class:agg::span_image_resample_rgb_affine
span_image_resample_rgb_affine	include/agg_span_image_filter_rgb.h	/^    class span_image_resample_rgb_affine : $/;"	c	namespace:agg
span_image_resample_rgba	include/agg_span_image_filter_rgba.h	/^        span_image_resample_rgba() {}$/;"	f	class:agg::span_image_resample_rgba
span_image_resample_rgba	include/agg_span_image_filter_rgba.h	/^        span_image_resample_rgba(source_type& src, $/;"	f	class:agg::span_image_resample_rgba
span_image_resample_rgba	include/agg_span_image_filter_rgba.h	/^    class span_image_resample_rgba : $/;"	c	namespace:agg
span_image_resample_rgba_affine	include/agg_span_image_filter_rgba.h	/^        span_image_resample_rgba_affine() {}$/;"	f	class:agg::span_image_resample_rgba_affine
span_image_resample_rgba_affine	include/agg_span_image_filter_rgba.h	/^        span_image_resample_rgba_affine(source_type& src, $/;"	f	class:agg::span_image_resample_rgba_affine
span_image_resample_rgba_affine	include/agg_span_image_filter_rgba.h	/^    class span_image_resample_rgba_affine : $/;"	c	namespace:agg
span_interpolator_adaptor	include/agg_span_interpolator_adaptor.h	/^        span_interpolator_adaptor() {}$/;"	f	class:agg::span_interpolator_adaptor
span_interpolator_adaptor	include/agg_span_interpolator_adaptor.h	/^        span_interpolator_adaptor(const trans_type& trans, $/;"	f	class:agg::span_interpolator_adaptor
span_interpolator_adaptor	include/agg_span_interpolator_adaptor.h	/^        span_interpolator_adaptor(const trans_type& trans,$/;"	f	class:agg::span_interpolator_adaptor
span_interpolator_adaptor	include/agg_span_interpolator_adaptor.h	/^    class span_interpolator_adaptor : public Interpolator$/;"	c	namespace:agg
span_interpolator_linear	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear() {}$/;"	f	class:agg::span_interpolator_linear
span_interpolator_linear	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear(const trans_type& trans) : m_trans(&trans) {}$/;"	f	class:agg::span_interpolator_linear
span_interpolator_linear	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear(const trans_type& trans,$/;"	f	class:agg::span_interpolator_linear
span_interpolator_linear	include/agg_span_interpolator_linear.h	/^    class span_interpolator_linear$/;"	c	namespace:agg
span_interpolator_linear_subdiv	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear_subdiv() :$/;"	f	class:agg::span_interpolator_linear_subdiv
span_interpolator_linear_subdiv	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear_subdiv(const trans_type& trans, $/;"	f	class:agg::span_interpolator_linear_subdiv
span_interpolator_linear_subdiv	include/agg_span_interpolator_linear.h	/^        span_interpolator_linear_subdiv(const trans_type& trans,$/;"	f	class:agg::span_interpolator_linear_subdiv
span_interpolator_linear_subdiv	include/agg_span_interpolator_linear.h	/^    class span_interpolator_linear_subdiv$/;"	c	namespace:agg
span_interpolator_persp_exact	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_exact() {}$/;"	f	class:agg::span_interpolator_persp_exact
span_interpolator_persp_exact	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_exact(const double* quad, $/;"	f	class:agg::span_interpolator_persp_exact
span_interpolator_persp_exact	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_exact(const double* src, const double* dst) $/;"	f	class:agg::span_interpolator_persp_exact
span_interpolator_persp_exact	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_exact(double x1, double y1, $/;"	f	class:agg::span_interpolator_persp_exact
span_interpolator_persp_exact	include/agg_span_interpolator_persp.h	/^    class span_interpolator_persp_exact$/;"	c	namespace:agg
span_interpolator_persp_lerp	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_lerp() {}$/;"	f	class:agg::span_interpolator_persp_lerp
span_interpolator_persp_lerp	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_lerp(const double* quad, $/;"	f	class:agg::span_interpolator_persp_lerp
span_interpolator_persp_lerp	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_lerp(const double* src, const double* dst) $/;"	f	class:agg::span_interpolator_persp_lerp
span_interpolator_persp_lerp	include/agg_span_interpolator_persp.h	/^        span_interpolator_persp_lerp(double x1, double y1, $/;"	f	class:agg::span_interpolator_persp_lerp
span_interpolator_persp_lerp	include/agg_span_interpolator_persp.h	/^    class span_interpolator_persp_lerp$/;"	c	namespace:agg
span_interpolator_trans	include/agg_span_interpolator_trans.h	/^        span_interpolator_trans() {}$/;"	f	class:agg::span_interpolator_trans
span_interpolator_trans	include/agg_span_interpolator_trans.h	/^        span_interpolator_trans(const trans_type& trans) : m_trans(&trans) {}$/;"	f	class:agg::span_interpolator_trans
span_interpolator_trans	include/agg_span_interpolator_trans.h	/^        span_interpolator_trans(const trans_type& trans,$/;"	f	class:agg::span_interpolator_trans
span_interpolator_trans	include/agg_span_interpolator_trans.h	/^    class span_interpolator_trans$/;"	c	namespace:agg
span_pattern_gray	include/agg_span_pattern_gray.h	/^        span_pattern_gray() {}$/;"	f	class:agg::span_pattern_gray
span_pattern_gray	include/agg_span_pattern_gray.h	/^        span_pattern_gray(source_type& src, $/;"	f	class:agg::span_pattern_gray
span_pattern_gray	include/agg_span_pattern_gray.h	/^    template<class Source> class span_pattern_gray$/;"	c	namespace:agg
span_pattern_rgb	include/agg_span_pattern_rgb.h	/^        span_pattern_rgb() {}$/;"	f	class:agg::span_pattern_rgb
span_pattern_rgb	include/agg_span_pattern_rgb.h	/^        span_pattern_rgb(source_type& src, $/;"	f	class:agg::span_pattern_rgb
span_pattern_rgb	include/agg_span_pattern_rgb.h	/^    template<class Source> class span_pattern_rgb$/;"	c	namespace:agg
span_pattern_rgba	include/agg_span_pattern_rgba.h	/^        span_pattern_rgba() {}$/;"	f	class:agg::span_pattern_rgba
span_pattern_rgba	include/agg_span_pattern_rgba.h	/^        span_pattern_rgba(source_type& src, $/;"	f	class:agg::span_pattern_rgba
span_pattern_rgba	include/agg_span_pattern_rgba.h	/^    template<class Source> class span_pattern_rgba$/;"	c	namespace:agg
span_simple_blur_rgb24	examples/simple_blur.cpp	/^        span_simple_blur_rgb24() : m_source_image(0) {}$/;"	f	class:agg::span_simple_blur_rgb24
span_simple_blur_rgb24	examples/simple_blur.cpp	/^        span_simple_blur_rgb24(const rendering_buffer& src) : $/;"	f	class:agg::span_simple_blur_rgb24
span_simple_blur_rgb24	examples/simple_blur.cpp	/^    template<class Order> class span_simple_blur_rgb24$/;"	c	namespace:agg	file:
span_solid	include/agg_span_solid.h	/^    template<class ColorT> class span_solid$/;"	c	namespace:agg
span_subdiv_adaptor	include/agg_span_subdiv_adaptor.h	/^        span_subdiv_adaptor() :$/;"	f	class:agg::span_subdiv_adaptor
span_subdiv_adaptor	include/agg_span_subdiv_adaptor.h	/^        span_subdiv_adaptor(interpolator_type& interpolator, $/;"	f	class:agg::span_subdiv_adaptor
span_subdiv_adaptor	include/agg_span_subdiv_adaptor.h	/^    class span_subdiv_adaptor$/;"	c	namespace:agg
spiral	examples/alpha_mask3.cpp	/^    spiral(double x, double y, double r1, double r2, double step, double start_angle=0) :$/;"	f	class:spiral
spiral	examples/alpha_mask3.cpp	/^class spiral$/;"	c	file:
spiral	examples/gpc_test.cpp	/^    spiral(double x, double y, double r1, double r2, double step, double start_angle=0) :$/;"	f	class:spiral
spiral	examples/gpc_test.cpp	/^class spiral$/;"	c	file:
spiral	examples/rasterizers2.cpp	/^    spiral(double x, double y, double r1, double r2, double step, double start_angle=0) :$/;"	f	class:spiral
spiral	examples/rasterizers2.cpp	/^class spiral$/;"	c	file:
spiral	examples/scanline_boolean2.cpp	/^    spiral(double x, double y, double r1, double r2, double step, double start_angle=0) :$/;"	f	class:spiral
spiral	examples/scanline_boolean2.cpp	/^class spiral$/;"	c	file:
spiral	examples/trans_polar.cpp	/^        void spiral(double v) { m_spiral = v; }$/;"	f	class:agg::trans_polar
spline	include/ctrl/agg_spline_ctrl.h	/^        const double* spline()  const { return m_spline_values;  }$/;"	f	class:agg::spline_ctrl_impl
spline8	include/ctrl/agg_spline_ctrl.h	/^        const int8u*  spline8() const { return m_spline_values8; }$/;"	f	class:agg::spline_ctrl_impl
spline_b_x	examples/circles.cpp	/^static double spline_b_x[] = { 0.000000, 0.055045, 0.143034, 0.433082, 0.764859, 1.000000 };$/;"	v	file:
spline_b_y	examples/circles.cpp	/^static double spline_b_y[] = { 0.385480, 0.128493, 0.021416, 0.271507, 0.713974, 1.000000 };$/;"	v	file:
spline_ctrl	include/ctrl/agg_spline_ctrl.h	/^        spline_ctrl(double x1, double y1, double x2, double y2, $/;"	f	class:agg::spline_ctrl
spline_ctrl	include/ctrl/agg_spline_ctrl.h	/^    template<class ColorT> class spline_ctrl : public spline_ctrl_impl$/;"	c	namespace:agg
spline_ctrl_impl	include/ctrl/agg_spline_ctrl.h	/^    class spline_ctrl_impl : public ctrl$/;"	c	namespace:agg
spline_ctrl_impl	src/ctrl/agg_spline_ctrl.cpp	/^    spline_ctrl_impl::spline_ctrl_impl(double x1, double y1, double x2, double y2, $/;"	f	class:agg::spline_ctrl_impl
spline_g_x	examples/circles.cpp	/^static double spline_g_x[] = { 0.000000, 0.292244, 0.485655, 0.564859, 0.795607, 1.000000 };$/;"	v	file:
spline_g_y	examples/circles.cpp	/^static double spline_g_y[] = { 0.000000, 0.607260, 0.964065, 0.892558, 0.435571, 0.000000 };$/;"	v	file:
spline_r_x	examples/circles.cpp	/^static double spline_r_x[] = { 0.000000, 0.200000, 0.400000, 0.910484, 0.957258, 1.000000 };$/;"	v	file:
spline_r_y	examples/circles.cpp	/^static double spline_r_y[] = { 1.000000, 0.800000, 0.600000, 0.066667, 0.169697, 0.600000 };$/;"	v	file:
square	examples/aa_demo.cpp	/^        square(double size) : m_size(size) {}$/;"	f	class:agg::square
square	examples/aa_demo.cpp	/^    class square$/;"	c	namespace:agg	file:
square	include/agg_renderer_markers.h	/^        void square(int x, int y, int r)$/;"	f	class:agg::renderer_markers
square_cap	include/agg_math_stroke.h	/^        square_cap,$/;"	e	enum:agg::line_cap_e
square_to_quad	include/agg_trans_perspective.h	/^    inline bool trans_perspective::square_to_quad(const double* q)$/;"	f	class:agg::trans_perspective
src_shape	examples/compositing.cpp	/^void src_shape(RenBase& rbase, color c1, color c2, $/;"	f
st_node	gpc/gpc.c	/^} st_node;$/;"	t	typeref:struct:st_shape	file:
st_shape	gpc/gpc.c	/^typedef struct st_shape             \/* Sorted edge table                 *\/$/;"	s	file:
stack_blur	include/agg_blur.h	/^    template<class ColorT, class CalculatorT> class stack_blur$/;"	c	namespace:agg
stack_blur_calc_gray	include/agg_blur.h	/^    template<class T=unsigned> struct stack_blur_calc_gray$/;"	s	namespace:agg
stack_blur_calc_rgb	include/agg_blur.h	/^    template<class T=unsigned> struct stack_blur_calc_rgb$/;"	s	namespace:agg
stack_blur_calc_rgba	include/agg_blur.h	/^    template<class T=unsigned> struct stack_blur_calc_rgba$/;"	s	namespace:agg
stack_blur_gray8	include/agg_blur.h	/^    void stack_blur_gray8(Img& img, unsigned rx, unsigned ry)$/;"	f	namespace:agg
stack_blur_rgb24	include/agg_blur.h	/^    void stack_blur_rgb24(Img& img, unsigned rx, unsigned ry)$/;"	f	namespace:agg
stack_blur_rgba32	include/agg_blur.h	/^    void stack_blur_rgba32(Img& img, unsigned rx, unsigned ry)$/;"	f	namespace:agg
stack_blur_tables	include/agg_blur.h	/^    template<class T> struct stack_blur_tables$/;"	s	namespace:agg
start	include/agg_gamma_functions.h	/^        double start() const { return m_start; }$/;"	f	class:agg::gamma_linear
start	include/agg_gamma_functions.h	/^        void start(double s) { m_start = s; }$/;"	f	class:agg::gamma_linear
start	include/agg_image_filters.h	/^        int          start()        const { return m_start;    }$/;"	f	class:agg::image_filter_lut
start	include/agg_rasterizer_cells_aa.h	/^            unsigned start;$/;"	m	struct:agg::rasterizer_cells_aa::sorted_y
start_cell	include/agg_rasterizer_compound_aa.h	/^            unsigned start_cell;$/;"	m	struct:agg::rasterizer_compound_aa::style_info
start_contour	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::start_contour()$/;"	f	class:agg::conv_gpc
start_element	examples/svg_viewer/agg_svg_parser.cpp	/^    void parser::start_element(void* data, const char* el, const char** attr)$/;"	f	class:agg::svg::parser
start_extracting	include/agg_conv_gpc.h	/^    void conv_gpc<VSA, VSB>::start_extracting()$/;"	f	class:agg::conv_gpc
start_glyph	include/agg_gsv_text.h	/^            start_glyph,$/;"	e	enum:agg::gsv_text::status
start_height	examples/circles.cpp	/^    start_height = 400$/;"	e	enum:start_size_e	file:
start_height	examples/mol_view.cpp	/^    start_height = 400$/;"	e	enum:start_size_e	file:
start_new_path	include/agg_path_storage.h	/^    unsigned path_base<VC>::start_new_path()$/;"	f	class:agg::path_base
start_point	src/agg_gsv_text.cpp	/^    void gsv_text::start_point(double x, double y)$/;"	f	class:agg::gsv_text
start_size_e	examples/circles.cpp	/^enum start_size_e$/;"	g	file:
start_size_e	examples/mol_view.cpp	/^enum start_size_e$/;"	g	file:
start_span	include/agg_scanline_storage_aa.h	/^            unsigned start_span;$/;"	m	struct:agg::scanline_storage_aa::scanline_data
start_span	include/agg_scanline_storage_bin.h	/^            unsigned start_span;$/;"	m	struct:agg::scanline_storage_bin::scanline_data
start_timer	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_timer	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_timer	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_timer	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_timer	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_timer	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::start_timer()$/;"	f	class:agg::platform_support
start_width	examples/circles.cpp	/^    start_width  = 400,$/;"	e	enum:start_size_e	file:
start_width	examples/mol_view.cpp	/^    start_width  = 400,$/;"	e	enum:start_size_e	file:
start_x	include/agg_renderer_outline_image.h	/^        double start_x() const   { return double(m_start) \/ line_subpixel_scale; }$/;"	f	class:agg::renderer_outline_image
start_x	include/agg_renderer_outline_image.h	/^        void   start_x(double s) { m_start = iround(s * line_subpixel_scale); }$/;"	f	class:agg::renderer_outline_image
status	include/agg_conv_adaptor_vcgen.h	/^        enum status$/;"	g	class:agg::conv_adaptor_vcgen
status	include/agg_conv_gpc.h	/^        enum status$/;"	g	class:agg::conv_gpc
status	include/agg_gsv_text.h	/^        enum status$/;"	g	class:agg::gsv_text
status	include/agg_rasterizer_scanline_aa.h	/^        enum status$/;"	g	class:agg::rasterizer_scanline_aa
status	include/ctrl/agg_cbox_ctrl.h	/^        bool status() const { return m_status; }$/;"	f	class:agg::cbox_ctrl_impl
status	include/ctrl/agg_cbox_ctrl.h	/^        void status(bool st) { m_status = st; }$/;"	f	class:agg::cbox_ctrl_impl
status_closed	include/agg_rasterizer_scanline_aa.h	/^            status_closed$/;"	e	enum:agg::rasterizer_scanline_aa::status
status_e	include/agg_conv_marker.h	/^        enum status_e $/;"	g	class:agg::conv_marker
status_e	include/agg_trans_double_path.h	/^        enum status_e$/;"	g	class:agg::trans_double_path
status_e	include/agg_trans_single_path.h	/^        enum status_e$/;"	g	class:agg::trans_single_path
status_e	include/agg_vcgen_bspline.h	/^        enum status_e$/;"	g	class:agg::vcgen_bspline
status_e	include/agg_vcgen_contour.h	/^        enum status_e$/;"	g	class:agg::vcgen_contour
status_e	include/agg_vcgen_dash.h	/^        enum status_e$/;"	g	class:agg::vcgen_dash
status_e	include/agg_vcgen_smooth_poly1.h	/^        enum status_e$/;"	g	class:agg::vcgen_smooth_poly1
status_e	include/agg_vcgen_stroke.h	/^        enum status_e$/;"	g	class:agg::vcgen_stroke
status_initial	include/agg_rasterizer_scanline_aa.h	/^            status_initial,$/;"	e	enum:agg::rasterizer_scanline_aa::status
status_line_to	include/agg_conv_gpc.h	/^            status_line_to,$/;"	e	enum:agg::conv_gpc::status
status_line_to	include/agg_rasterizer_scanline_aa.h	/^            status_line_to,$/;"	e	enum:agg::rasterizer_scanline_aa::status
status_move_to	include/agg_conv_gpc.h	/^            status_move_to,$/;"	e	enum:agg::conv_gpc::status
status_move_to	include/agg_rasterizer_scanline_aa.h	/^            status_move_to,$/;"	e	enum:agg::rasterizer_scanline_aa::status
status_stop	include/agg_conv_gpc.h	/^            status_stop$/;"	e	enum:agg::conv_gpc::status
step_hor	include/agg_renderer_outline_aa.h	/^        bool step_hor()$/;"	f	class:agg::line_interpolator_aa0
step_hor	include/agg_renderer_outline_aa.h	/^        bool step_hor()$/;"	f	class:agg::line_interpolator_aa1
step_hor	include/agg_renderer_outline_aa.h	/^        bool step_hor()$/;"	f	class:agg::line_interpolator_aa2
step_hor	include/agg_renderer_outline_aa.h	/^        bool step_hor()$/;"	f	class:agg::line_interpolator_aa3
step_hor	include/agg_renderer_outline_image.h	/^        bool step_hor()$/;"	f	class:agg::line_interpolator_image
step_hor_base	include/agg_renderer_outline_aa.h	/^        template<class DI> int step_hor_base(DI& di)$/;"	f	class:agg::line_interpolator_aa_base
step_ver	include/agg_renderer_outline_aa.h	/^        bool step_ver()$/;"	f	class:agg::line_interpolator_aa0
step_ver	include/agg_renderer_outline_aa.h	/^        bool step_ver()$/;"	f	class:agg::line_interpolator_aa1
step_ver	include/agg_renderer_outline_aa.h	/^        bool step_ver()$/;"	f	class:agg::line_interpolator_aa2
step_ver	include/agg_renderer_outline_aa.h	/^        bool step_ver()$/;"	f	class:agg::line_interpolator_aa3
step_ver	include/agg_renderer_outline_image.h	/^        bool step_ver()$/;"	f	class:agg::line_interpolator_image
step_ver_base	include/agg_renderer_outline_aa.h	/^        template<class DI> int step_ver_base(DI& di)$/;"	f	class:agg::line_interpolator_aa_base
stereo	examples/mol_view.cpp	/^    int      stereo;$/;"	m	struct:bond_type	file:
stop	include/agg_conv_marker.h	/^            stop$/;"	e	enum:agg::conv_marker::status_e
stop	include/agg_vcgen_bspline.h	/^            stop$/;"	e	enum:agg::vcgen_bspline::status_e
stop	include/agg_vcgen_contour.h	/^            stop$/;"	e	enum:agg::vcgen_contour::status_e
stop	include/agg_vcgen_dash.h	/^            stop$/;"	e	enum:agg::vcgen_dash::status_e
stop	include/agg_vcgen_smooth_poly1.h	/^            stop$/;"	e	enum:agg::vcgen_smooth_poly1::status_e
stop	include/agg_vcgen_stroke.h	/^            stop$/;"	e	enum:agg::vcgen_stroke::status_e
storage_ptrs	include/agg_path_storage.h	/^    int8u* vertex_block_storage<T,S,P>::storage_ptrs(T** xy_ptr)$/;"	f	class:agg::vertex_block_storage
store_to	include/agg_trans_affine.h	/^        void store_to(double* m) const$/;"	f	struct:agg::trans_affine
store_to	include/agg_trans_perspective.h	/^    inline void trans_perspective::store_to(double* m) const$/;"	f	class:agg::trans_perspective
stride	include/agg_pixfmt_gray.h	/^        AGG_INLINE int      stride() const { return m_rbuf->stride(); }$/;"	f	class:agg::pixfmt_alpha_blend_gray
stride	include/agg_pixfmt_rgb.h	/^        AGG_INLINE int      stride() const { return m_rbuf->stride(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
stride	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE int      stride() const { return m_rbuf->stride(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
stride	include/agg_pixfmt_rgba.h	/^        AGG_INLINE int      stride() const { return m_rbuf->stride(); }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
stride	include/agg_pixfmt_rgba.h	/^        AGG_INLINE int      stride() const { return m_rbuf->stride(); }$/;"	f	class:agg::pixfmt_custom_blend_rgba
stride	include/agg_rendering_buffer.h	/^        AGG_INLINE int      stride() const { return m_stride; }$/;"	f	class:agg::row_accessor
stride	include/agg_rendering_buffer.h	/^        AGG_INLINE int      stride() const { return m_stride; }$/;"	f	class:agg::row_ptr_cache
stride	src/platform/win32/agg_win32_bmp.cpp	/^    int pixel_map::stride() const$/;"	f	class:agg::pixel_map
stride_abs	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned stride_abs() const $/;"	f	class:agg::row_accessor
stride_abs	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned stride_abs() const $/;"	f	class:agg::row_ptr_cache
strip	gpc/gpc.h	/^  gpc_vertex_list    *strip;        \/* Tristrip array pointer            *\/$/;"	m	struct:__anon8
stroke	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::stroke(const rgba8& s)$/;"	f	class:agg::svg::path_renderer
stroke_color	examples/idea.cpp	/^    agg::rgba8 stroke_color;$/;"	m	struct:path_attributes	file:
stroke_color	examples/svg_viewer/agg_svg_path_renderer.h	/^        rgba8        stroke_color;$/;"	m	struct:agg::svg::path_attributes
stroke_draft	examples/graph_test.cpp	400;"	d	file:
stroke_draft_arrow	examples/graph_test.cpp	/^    stroke_draft_arrow(Source& src, double w) : $/;"	f	struct:stroke_draft_arrow
stroke_draft_arrow	examples/graph_test.cpp	/^template<class Source> struct stroke_draft_arrow$/;"	s	file:
stroke_draft_simple	examples/graph_test.cpp	/^    stroke_draft_simple(Source& src, double w) : $/;"	f	struct:stroke_draft_simple
stroke_draft_simple	examples/graph_test.cpp	/^template<class Source> struct stroke_draft_simple$/;"	s	file:
stroke_fine	examples/graph_test.cpp	402;"	d	file:
stroke_fine_arrow	examples/graph_test.cpp	/^    stroke_fine_arrow(Source& src, double w) : $/;"	f	struct:stroke_fine_arrow
stroke_fine_arrow	examples/graph_test.cpp	/^template<class Source> struct stroke_fine_arrow$/;"	s	file:
stroke_fine_simple	examples/graph_test.cpp	/^    stroke_fine_simple(Source& src, double w) : $/;"	f	struct:stroke_fine_simple
stroke_fine_simple	examples/graph_test.cpp	/^template<class Source> struct stroke_fine_simple$/;"	s	file:
stroke_flag	examples/svg_viewer/agg_svg_path_renderer.h	/^        bool         stroke_flag;$/;"	m	struct:agg::svg::path_attributes
stroke_none	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::stroke_none()$/;"	f	class:agg::svg::path_renderer
stroke_opacity	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::stroke_opacity(double op)$/;"	f	class:agg::svg::path_renderer
stroke_type	examples/graph_test.cpp	/^    typedef agg::conv_marker_adaptor<Source, agg::vcgen_markers_term>           stroke_type;$/;"	t	struct:stroke_draft_arrow	file:
stroke_type	examples/graph_test.cpp	/^    typedef agg::conv_stroke<Source, agg::vcgen_markers_term>                   stroke_type;$/;"	t	struct:stroke_fine_arrow	file:
stroke_type	examples/graph_test.cpp	/^    typedef agg::conv_stroke<Source> stroke_type;$/;"	t	struct:stroke_fine_simple	file:
stroke_type	examples/graph_test.cpp	/^    typedef agg::conv_stroke<dash_type>                                       stroke_type;$/;"	t	struct:dash_stroke_fine_arrow	file:
stroke_type	examples/graph_test.cpp	/^    typedef agg::conv_stroke<dash_type>  stroke_type;$/;"	t	struct:dash_stroke_fine_simple	file:
stroke_width	examples/idea.cpp	/^    double     stroke_width;$/;"	m	struct:path_attributes	file:
stroke_width	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::stroke_width(double w)$/;"	f	class:agg::svg::path_renderer
stroke_width	examples/svg_viewer/agg_svg_path_renderer.h	/^        double       stroke_width;$/;"	m	struct:agg::svg::path_attributes
style	examples/flash_rasterizer.cpp	/^        const path_style& style(unsigned i) const$/;"	f	class:agg::compound_shape
style	examples/flash_rasterizer2.cpp	/^        const path_style& style(unsigned i) const$/;"	f	class:agg::compound_shape
style	include/agg_rasterizer_cells_aa.h	/^    AGG_INLINE void rasterizer_cells_aa<Cell>::style(const cell_type& style_cell)$/;"	f	class:agg::rasterizer_cells_aa
style	include/agg_rasterizer_compound_aa.h	/^        void style(const cell_style_aa& c)$/;"	f	struct:agg::cell_style_aa
style	include/agg_rasterizer_compound_aa.h	/^    unsigned rasterizer_compound_aa<Clip>::style(unsigned style_idx) const$/;"	f	class:agg::rasterizer_compound_aa
style	include/agg_rasterizer_scanline_aa.h	/^        void style(const cell_aa&) {}$/;"	f	struct:agg::cell_aa
style_handler	examples/rasterizer_compound.cpp	/^    style_handler(const agg::rgba8* styles, unsigned count) : $/;"	f	class:style_handler
style_handler	examples/rasterizer_compound.cpp	/^class style_handler$/;"	c	file:
style_info	include/agg_rasterizer_compound_aa.h	/^        struct style_info $/;"	s	class:agg::rasterizer_compound_aa
styles	include/agg_rasterizer_compound_aa.h	/^    void rasterizer_compound_aa<Clip>::styles(int left, int right)$/;"	f	class:agg::rasterizer_compound_aa
styles_gouraud	examples/gouraud_mesh.cpp	/^        styles_gouraud(const mesh_ctrl& mesh, const Gamma& gamma)$/;"	f	class:agg::styles_gouraud
styles_gouraud	examples/gouraud_mesh.cpp	/^    class styles_gouraud$/;"	c	namespace:agg	file:
sub	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void sub(const ArgT& a)$/;"	f	struct:agg::stack_blur_calc_gray
sub	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void sub(const ArgT& v)$/;"	f	struct:agg::stack_blur_calc_rgb
sub	include/agg_blur.h	/^        template<class ArgT> AGG_INLINE void sub(const ArgT& v)$/;"	f	struct:agg::stack_blur_calc_rgba
subdiv_shift	include/agg_span_interpolator_linear.h	/^        unsigned subdiv_shift() const { return m_subdiv_shift; }$/;"	f	class:agg::span_interpolator_linear_subdiv
subdiv_shift	include/agg_span_interpolator_linear.h	/^        void subdiv_shift(unsigned shift) $/;"	f	class:agg::span_interpolator_linear_subdiv
subdiv_shift	include/agg_span_subdiv_adaptor.h	/^        unsigned subdiv_shift() const { return m_subdiv_shift; }$/;"	f	class:agg::span_subdiv_adaptor
subdiv_shift	include/agg_span_subdiv_adaptor.h	/^        void subdiv_shift(unsigned shift) $/;"	f	class:agg::span_subdiv_adaptor
sublixel_scale_e	include/agg_span_subdiv_adaptor.h	/^        enum sublixel_scale_e$/;"	g	class:agg::span_subdiv_adaptor
subpixel_mask	include/agg_dda_line.h	/^            subpixel_mask  = subpixel_scale - 1$/;"	e	enum:agg::line_bresenham_interpolator::subpixel_scale_e
subpixel_mask	include/agg_renderer_outline_aa.h	/^            subpixel_mask  = subpixel_scale - 1$/;"	e	enum:agg::line_profile_aa::subpixel_scale_e
subpixel_scale	include/agg_dda_line.h	/^            subpixel_scale = 1 << subpixel_shift,$/;"	e	enum:agg::line_bresenham_interpolator::subpixel_scale_e
subpixel_scale	include/agg_renderer_outline_aa.h	/^            subpixel_scale = 1 << subpixel_shift,$/;"	e	enum:agg::line_profile_aa::subpixel_scale_e
subpixel_scale	include/agg_span_gouraud_gray.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_gouraud_gray::subpixel_scale_e
subpixel_scale	include/agg_span_gouraud_rgba.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_gouraud_rgba::subpixel_scale_e
subpixel_scale	include/agg_span_interpolator_linear.h	/^            subpixel_scale  = 1 << subpixel_shift$/;"	e	enum:agg::span_interpolator_linear::subpixel_scale_e
subpixel_scale	include/agg_span_interpolator_linear.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_interpolator_linear_subdiv::subpixel_scale_e
subpixel_scale	include/agg_span_interpolator_persp.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_interpolator_persp_exact::subpixel_scale_e
subpixel_scale	include/agg_span_interpolator_persp.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_interpolator_persp_lerp::subpixel_scale_e
subpixel_scale	include/agg_span_interpolator_trans.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_interpolator_trans::subpixel_scale_e
subpixel_scale	include/agg_span_subdiv_adaptor.h	/^            subpixel_scale = 1 << subpixel_shift$/;"	e	enum:agg::span_subdiv_adaptor::sublixel_scale_e
subpixel_scale_e	include/agg_dda_line.h	/^        enum subpixel_scale_e$/;"	g	class:agg::line_bresenham_interpolator
subpixel_scale_e	include/agg_renderer_outline_aa.h	/^        enum subpixel_scale_e$/;"	g	class:agg::line_profile_aa
subpixel_scale_e	include/agg_span_gouraud_gray.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_gouraud_gray
subpixel_scale_e	include/agg_span_gouraud_rgba.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_gouraud_rgba
subpixel_scale_e	include/agg_span_interpolator_linear.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_interpolator_linear
subpixel_scale_e	include/agg_span_interpolator_linear.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_interpolator_linear_subdiv
subpixel_scale_e	include/agg_span_interpolator_persp.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_interpolator_persp_exact
subpixel_scale_e	include/agg_span_interpolator_persp.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_interpolator_persp_lerp
subpixel_scale_e	include/agg_span_interpolator_trans.h	/^        enum subpixel_scale_e$/;"	g	class:agg::span_interpolator_trans
subpixel_shift	include/agg_dda_line.h	/^            subpixel_shift = 8,$/;"	e	enum:agg::line_bresenham_interpolator::subpixel_scale_e
subpixel_shift	include/agg_renderer_outline_aa.h	/^            subpixel_shift = line_subpixel_shift,$/;"	e	enum:agg::line_profile_aa::subpixel_scale_e
subpixel_shift	include/agg_span_gouraud_gray.h	/^            subpixel_shift = 4, $/;"	e	enum:agg::span_gouraud_gray::subpixel_scale_e
subpixel_shift	include/agg_span_gouraud_rgba.h	/^            subpixel_shift = 4, $/;"	e	enum:agg::span_gouraud_rgba::subpixel_scale_e
subpixel_shift	include/agg_span_interpolator_linear.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_interpolator_linear::subpixel_scale_e
subpixel_shift	include/agg_span_interpolator_linear.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_interpolator_linear_subdiv::subpixel_scale_e
subpixel_shift	include/agg_span_interpolator_persp.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_interpolator_persp_exact::subpixel_scale_e
subpixel_shift	include/agg_span_interpolator_persp.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_interpolator_persp_lerp::subpixel_scale_e
subpixel_shift	include/agg_span_interpolator_trans.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_interpolator_trans::subpixel_scale_e
subpixel_shift	include/agg_span_subdiv_adaptor.h	/^            subpixel_shift = SubpixelShift,$/;"	e	enum:agg::span_subdiv_adaptor::sublixel_scale_e
subpixel_width	include/agg_renderer_outline_aa.h	/^        int subpixel_width() const { return m_profile->subpixel_width(); }$/;"	f	class:agg::renderer_outline_aa
subpixel_width	include/agg_renderer_outline_aa.h	/^        int subpixel_width() const { return m_subpixel_width; }$/;"	f	class:agg::line_profile_aa
subpixel_width	include/agg_renderer_outline_image.h	/^        int subpixel_width() const { return m_pattern->line_width(); }$/;"	f	class:agg::renderer_outline_image
succ	gpc/gpc.c	/^  struct edge_shape  *succ;         \/* Edge connected at the upper end   *\/$/;"	m	struct:edge_shape	typeref:struct:edge_shape::edge_shape	file:
svg	examples/svg_viewer/agg_svg_exception.h	/^namespace svg$/;"	n	namespace:agg
svg	examples/svg_viewer/agg_svg_parser.cpp	/^namespace svg$/;"	n	namespace:agg	file:
svg	examples/svg_viewer/agg_svg_parser.h	/^namespace svg$/;"	n	namespace:agg
svg	examples/svg_viewer/agg_svg_path_renderer.cpp	/^namespace svg$/;"	n	namespace:agg	file:
svg	examples/svg_viewer/agg_svg_path_renderer.h	/^namespace svg$/;"	n	namespace:agg
svg	examples/svg_viewer/agg_svg_path_tokenizer.cpp	/^namespace svg$/;"	n	namespace:agg	file:
svg	examples/svg_viewer/agg_svg_path_tokenizer.h	/^namespace svg$/;"	n	namespace:agg
swap_arrays	include/agg_simul_eq.h	/^    template<class T> void swap_arrays(T* a1, T* a2, unsigned n)$/;"	f	namespace:agg
swap_cells	include/agg_rasterizer_cells_aa.h	/^    template <class T> static AGG_INLINE void swap_cells(T* a, T* b)$/;"	f	namespace:agg
swap_elements	include/agg_array.h	/^    template<class T> inline void swap_elements(T& a, T& b)$/;"	f	namespace:agg
swap_vertices	include/agg_path_storage.h	/^        void swap_vertices(unsigned v1, unsigned v2)$/;"	f	class:agg::vertex_stl_storage
swap_vertices	include/agg_path_storage.h	/^    inline void vertex_block_storage<T,S,P>::swap_vertices(unsigned v1, unsigned v2)$/;"	f	class:agg::vertex_block_storage
sweep_scanline	include/agg_rasterizer_compound_aa.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl, int style_idx)$/;"	f	class:agg::rasterizer_compound_aa
sweep_scanline	include/agg_rasterizer_scanline_aa.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl)$/;"	f	class:agg::rasterizer_scanline_aa
sweep_scanline	include/agg_scanline_storage_aa.h	/^        bool sweep_scanline(embedded_scanline& sl)$/;"	f	class:agg::scanline_storage_aa
sweep_scanline	include/agg_scanline_storage_aa.h	/^        bool sweep_scanline(embedded_scanline& sl)$/;"	f	class:agg::serialized_scanlines_adaptor_aa
sweep_scanline	include/agg_scanline_storage_aa.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl)$/;"	f	class:agg::scanline_storage_aa
sweep_scanline	include/agg_scanline_storage_aa.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl)$/;"	f	class:agg::serialized_scanlines_adaptor_aa
sweep_scanline	include/agg_scanline_storage_bin.h	/^        bool sweep_scanline(embedded_scanline& sl)$/;"	f	class:agg::scanline_storage_bin
sweep_scanline	include/agg_scanline_storage_bin.h	/^        bool sweep_scanline(embedded_scanline& sl)$/;"	f	class:agg::serialized_scanlines_adaptor_bin
sweep_scanline	include/agg_scanline_storage_bin.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl)$/;"	f	class:agg::scanline_storage_bin
sweep_scanline	include/agg_scanline_storage_bin.h	/^        template<class Scanline> bool sweep_scanline(Scanline& sl)$/;"	f	class:agg::serialized_scanlines_adaptor_bin
sweep_styles	include/agg_rasterizer_compound_aa.h	/^    unsigned rasterizer_compound_aa<Clip>::sweep_styles()$/;"	f	class:agg::rasterizer_compound_aa
sx	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
sx	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
sx	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
sy	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
sy	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
sy	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
synchronize	include/agg_font_cache_manager.h	/^        void synchronize()$/;"	f	class:agg::font_cache_manager
szTitle	examples/win32_api/pure_api/pure_api.cpp	/^TCHAR szTitle[MAX_LOADSTRING];                  \/\/ The title bar text$/;"	v
szWindowClass	examples/win32_api/pure_api/pure_api.cpp	/^TCHAR szWindowClass[MAX_LOADSTRING];            \/\/ The title bar text$/;"	v
tail	include/agg_arrowhead.h	/^        void tail()    { m_tail_flag = true;  }$/;"	f	class:agg::arrowhead
tail	include/agg_arrowhead.h	/^        void tail(double d1, double d2, double d3, double d4)$/;"	f	class:agg::arrowhead
test_styles	examples/flash_rasterizer.cpp	/^        test_styles(const rgba8* solid_colors, $/;"	f	class:agg::test_styles
test_styles	examples/flash_rasterizer.cpp	/^    class test_styles$/;"	c	namespace:agg	file:
text	examples/freetype_test.cpp	/^static char text[] = $/;"	v	file:
text	examples/rasterizers2.cpp	/^    void text(rasterizer_scanline& ras, $/;"	f	class:the_application
text	examples/trans_curve1.cpp	/^static char text[] = $/;"	v	file:
text	examples/trans_curve1_ft.cpp	/^static char text[] = $/;"	v	file:
text	examples/trans_curve2.cpp	/^static char text[] = $/;"	v	file:
text	examples/trans_curve2_ft.cpp	/^static char text[] = $/;"	v	file:
text	examples/truetype_test.cpp	/^static char_type text[] = $/;"	v	file:
text	src/agg_gsv_text.cpp	/^    void gsv_text::text(const char* text)$/;"	f	class:agg::gsv_text
text_color	include/ctrl/agg_cbox_ctrl.h	/^        void text_color(const ColorT& c) { m_text_color = c; }$/;"	f	class:agg::cbox_ctrl
text_color	include/ctrl/agg_gamma_ctrl.h	/^        void text_color(const ColorT& c)         { m_text_color = c; }$/;"	f	class:agg::gamma_ctrl
text_color	include/ctrl/agg_rbox_ctrl.h	/^        void text_color(const ColorT& c) { m_text_color = c; }$/;"	f	class:agg::rbox_ctrl
text_flip	examples/truetype_test.cpp	/^bool text_flip = false;$/;"	v
text_size	src/ctrl/agg_cbox_ctrl.cpp	/^    void cbox_ctrl_impl::text_size(double h, double w)$/;"	f	class:agg::cbox_ctrl_impl
text_size	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::text_size(double h, double w) $/;"	f	class:agg::gamma_ctrl_impl
text_size	src/ctrl/agg_rbox_ctrl.cpp	/^    void rbox_ctrl_impl::text_size(double h, double w) $/;"	f	class:agg::rbox_ctrl_impl
text_thickness	include/ctrl/agg_cbox_ctrl.h	/^        void text_thickness(double t)  { m_text_thickness = t; }$/;"	f	class:agg::cbox_ctrl_impl
text_thickness	include/ctrl/agg_gamma_ctrl.h	/^        void text_thickness(double t)      { m_text_thickness = t; }$/;"	f	class:agg::gamma_ctrl_impl
text_thickness	include/ctrl/agg_rbox_ctrl.h	/^        void text_thickness(double t)  { m_text_thickness = t; }$/;"	f	class:agg::rbox_ctrl_impl
text_thickness	include/ctrl/agg_slider_ctrl.h	/^        void text_thickness(double t) { m_text_thickness = t; }$/;"	f	class:agg::slider_ctrl_impl
text_width	src/agg_gsv_text.cpp	/^    double gsv_text::text_width()$/;"	f	class:agg::gsv_text
the_application	examples/aa_demo.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/aa_demo.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/aa_test.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/aa_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/alpha_gradient.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/alpha_gradient.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/alpha_mask.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/alpha_mask.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/alpha_mask2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/alpha_mask2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/alpha_mask3.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/alpha_mask3.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/bezier_div.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/bezier_div.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/blend_color.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/blend_color.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/blur.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/blur.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/bspline.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/bspline.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/circles.cpp	/^    the_application(agg::pix_format_e format, bool flip_y, unsigned num_points) :$/;"	f	class:the_application
the_application	examples/circles.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/component_rendering.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/component_rendering.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/compositing.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/compositing.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/compositing2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/compositing2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/conv_contour.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/conv_contour.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/conv_dash_marker.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/conv_dash_marker.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/conv_stroke.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/conv_stroke.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/distortions.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/distortions.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/flash_rasterizer.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/flash_rasterizer.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/flash_rasterizer2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/flash_rasterizer2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/freetype_test.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/freetype_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gamma_correction.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gamma_correction.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gamma_ctrl.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gamma_ctrl.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gamma_tuner.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gamma_tuner.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gouraud.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gouraud.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gouraud_mesh.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gouraud_mesh.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gpc_test.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gpc_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gradient_focal.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gradient_focal.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/gradients.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/gradients.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/graph_test.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/graph_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/idea.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/idea.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image1.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image1.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_alpha.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_alpha.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_filters.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_filters.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_filters2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_filters2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_fltr_graph.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_fltr_graph.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_perspective.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_perspective.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_resample.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_resample.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/image_transforms.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/image_transforms.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/line_patterns.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/line_patterns.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/line_patterns_clip.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/line_patterns_clip.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/lion.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/lion.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/lion_lens.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/lion_lens.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/lion_outline.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/lion_outline.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/mol_view.cpp	/^    the_application(agg::pix_format_e format, bool flip_y, const char* fname) :$/;"	f	class:the_application
the_application	examples/mol_view.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/multi_clip.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/multi_clip.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/pattern_fill.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/pattern_fill.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/pattern_perspective.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/pattern_perspective.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/pattern_resample.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/pattern_resample.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/perspective.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/perspective.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/polymorphic_renderer.cpp	/^    the_application(int format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/polymorphic_renderer.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/raster_text.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/raster_text.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/rasterizer_compound.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/rasterizer_compound.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/rasterizers.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/rasterizers.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/rasterizers2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/rasterizers2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/rounded_rect.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/rounded_rect.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/scanline_boolean.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/scanline_boolean.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/scanline_boolean2.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/scanline_boolean2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/simple_blur.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/simple_blur.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/svg_viewer/svg_test.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/svg_viewer/svg_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/trans_curve1.cpp	/^    the_application(HDC dc, agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/trans_curve1.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/trans_curve1_ft.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/trans_curve1_ft.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/trans_curve2.cpp	/^    the_application(HDC dc, agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/trans_curve2.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/trans_curve2_ft.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/trans_curve2_ft.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/trans_polar.cpp	/^    the_application(agg::pix_format_e format, bool flip_y) :$/;"	f	class:the_application
the_application	examples/trans_polar.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
the_application	examples/truetype_test.cpp	/^    the_application(HDC dc, agg::pix_format_e format, bool flip) :$/;"	f	class:the_application
the_application	examples/truetype_test.cpp	/^class the_application : public agg::platform_support$/;"	c	file:
thickness	examples/mol_view.cpp	/^        void thickness(double th)$/;"	f	class:agg::dashed_wedge
thickness	examples/mol_view.cpp	/^        void thickness(double th)$/;"	f	class:agg::line
thickness	examples/mol_view.cpp	/^        void thickness(double th)$/;"	f	class:agg::solid_wedge
threshold	include/agg_gamma_functions.h	/^        double threshold() const { return m_threshold; }$/;"	f	class:agg::gamma_threshold
threshold	include/agg_gamma_functions.h	/^        void threshold(double t) { m_threshold = t; }$/;"	f	class:agg::gamma_threshold
title	examples/svg_viewer/agg_svg_parser.h	/^        const char* title() const { return m_title; }$/;"	f	class:agg::svg::parser
tl	examples/gouraud_mesh.cpp	/^        int      tl, tr;$/;"	m	struct:agg::mesh_edge	file:
to_affine	include/agg_trans_viewport.h	/^        trans_affine to_affine() const$/;"	f	class:agg::trans_viewport
to_affine_scale_only	include/agg_trans_viewport.h	/^        trans_affine to_affine_scale_only() const$/;"	f	class:agg::trans_viewport
to_pix	include/agg_blur.h	/^        AGG_INLINE void to_pix(ColorT& c) const$/;"	f	struct:agg::recursive_blur_calc_gray
to_pix	include/agg_blur.h	/^        AGG_INLINE void to_pix(ColorT& c) const$/;"	f	struct:agg::recursive_blur_calc_rgb
to_pix	include/agg_blur.h	/^        AGG_INLINE void to_pix(ColorT& c) const$/;"	f	struct:agg::recursive_blur_calc_rgba
token	src/platform/win32/agg_platform_support.cpp	/^        struct token$/;"	s	class:agg::tokenizer	file:
tokenizer	src/platform/win32/agg_platform_support.cpp	/^    class tokenizer$/;"	c	namespace:agg	file:
tokenizer	src/platform/win32/agg_platform_support.cpp	/^    tokenizer::tokenizer(const char* sep, $/;"	f	class:agg::tokenizer
top	gpc/gpc.c	/^  gpc_vertex          top;          \/* Edge upper (x, y) coordinate      *\/$/;"	m	struct:edge_shape	file:
topology	examples/mol_view.cpp	/^    int      topology;$/;"	m	struct:bond_type	file:
total_cells	include/agg_rasterizer_cells_aa.h	/^        unsigned total_cells() const $/;"	f	class:agg::rasterizer_cells_aa
total_length	src/agg_trans_single_path.cpp	/^    double trans_single_path::total_length() const$/;"	f	class:agg::trans_single_path
total_length1	src/agg_trans_double_path.cpp	/^    double trans_double_path::total_length1() const$/;"	f	class:agg::trans_double_path
total_length2	src/agg_trans_double_path.cpp	/^    double trans_double_path::total_length2() const$/;"	f	class:agg::trans_double_path
total_vertices	include/agg_path_storage.h	/^        unsigned total_vertices() const$/;"	f	class:agg::vertex_stl_storage
total_vertices	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::total_vertices() const$/;"	f	class:agg::path_base
total_vertices	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::total_vertices() const$/;"	f	class:agg::vertex_block_storage
tr	examples/gouraud_mesh.cpp	/^        int      tl, tr;$/;"	m	struct:agg::mesh_edge	file:
trans_affine	include/agg_trans_affine.h	/^        explicit trans_affine(const double* m) :$/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^        trans_affine() :$/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^        trans_affine(const double* parl, $/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^        trans_affine(const double* src, const double* dst)$/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^        trans_affine(double v0, double v1, double v2, $/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^        trans_affine(double x1, double y1, double x2, double y2, $/;"	f	struct:agg::trans_affine
trans_affine	include/agg_trans_affine.h	/^    struct trans_affine$/;"	s	namespace:agg
trans_affine_line_segment	include/agg_trans_affine.h	/^        trans_affine_line_segment(double x1, double y1, double x2, double y2, $/;"	f	class:agg::trans_affine_line_segment
trans_affine_line_segment	include/agg_trans_affine.h	/^    class trans_affine_line_segment : public trans_affine$/;"	c	namespace:agg
trans_affine_reflection	include/agg_trans_affine.h	/^        trans_affine_reflection(double a) :$/;"	f	class:agg::trans_affine_reflection
trans_affine_reflection	include/agg_trans_affine.h	/^        trans_affine_reflection(double x, double y) :$/;"	f	class:agg::trans_affine_reflection
trans_affine_reflection	include/agg_trans_affine.h	/^    class trans_affine_reflection : public trans_affine_reflection_unit$/;"	c	namespace:agg
trans_affine_reflection_unit	include/agg_trans_affine.h	/^        trans_affine_reflection_unit(double ux, double uy) :$/;"	f	class:agg::trans_affine_reflection_unit
trans_affine_reflection_unit	include/agg_trans_affine.h	/^    class trans_affine_reflection_unit : public trans_affine$/;"	c	namespace:agg
trans_affine_resizing	include/platform/agg_platform_support.h	/^        const    trans_affine& trans_affine_resizing() const { return m_resize_mtx; }$/;"	f	class:agg::platform_support
trans_affine_resizing	include/platform/agg_platform_support.h	/^        void trans_affine_resizing(int width, int height)$/;"	f	class:agg::platform_support
trans_affine_rotation	include/agg_trans_affine.h	/^        trans_affine_rotation(double a) : $/;"	f	class:agg::trans_affine_rotation
trans_affine_rotation	include/agg_trans_affine.h	/^    class trans_affine_rotation : public trans_affine$/;"	c	namespace:agg
trans_affine_scaling	include/agg_trans_affine.h	/^        trans_affine_scaling(double s) : $/;"	f	class:agg::trans_affine_scaling
trans_affine_scaling	include/agg_trans_affine.h	/^        trans_affine_scaling(double x, double y) : $/;"	f	class:agg::trans_affine_scaling
trans_affine_scaling	include/agg_trans_affine.h	/^    class trans_affine_scaling : public trans_affine$/;"	c	namespace:agg
trans_affine_skewing	include/agg_trans_affine.h	/^        trans_affine_skewing(double x, double y) : $/;"	f	class:agg::trans_affine_skewing
trans_affine_skewing	include/agg_trans_affine.h	/^    class trans_affine_skewing : public trans_affine$/;"	c	namespace:agg
trans_affine_translation	include/agg_trans_affine.h	/^        trans_affine_translation(double x, double y) : $/;"	f	class:agg::trans_affine_translation
trans_affine_translation	include/agg_trans_affine.h	/^    class trans_affine_translation : public trans_affine$/;"	c	namespace:agg
trans_bilinear	include/agg_trans_bilinear.h	/^        trans_bilinear() : m_valid(false) {}$/;"	f	class:agg::trans_bilinear
trans_bilinear	include/agg_trans_bilinear.h	/^        trans_bilinear(const double* quad, $/;"	f	class:agg::trans_bilinear
trans_bilinear	include/agg_trans_bilinear.h	/^        trans_bilinear(const double* src, const double* dst) $/;"	f	class:agg::trans_bilinear
trans_bilinear	include/agg_trans_bilinear.h	/^        trans_bilinear(double x1, double y1, double x2, double y2, $/;"	f	class:agg::trans_bilinear
trans_bilinear	include/agg_trans_bilinear.h	/^    class trans_bilinear$/;"	c	namespace:agg
trans_double_path	include/agg_trans_double_path.h	/^    class trans_double_path$/;"	c	namespace:agg
trans_double_path	src/agg_trans_double_path.cpp	/^    trans_double_path::trans_double_path() :$/;"	f	class:agg::trans_double_path
trans_perspective	include/agg_trans_perspective.h	/^        explicit trans_perspective(const double* m) :$/;"	f	struct:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^        explicit trans_perspective(const trans_affine& a) : $/;"	f	struct:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^        trans_perspective() : $/;"	f	struct:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^        trans_perspective(double v0, double v1, double v2, $/;"	f	struct:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^    inline trans_perspective::trans_perspective(const double* quad, $/;"	f	class:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^    inline trans_perspective::trans_perspective(const double* src, $/;"	f	class:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^    inline trans_perspective::trans_perspective(double x1, double y1, $/;"	f	class:agg::trans_perspective
trans_perspective	include/agg_trans_perspective.h	/^    struct trans_perspective$/;"	s	namespace:agg
trans_polar	examples/trans_polar.cpp	/^        trans_polar() :$/;"	f	class:agg::trans_polar
trans_polar	examples/trans_polar.cpp	/^    class trans_polar$/;"	c	namespace:agg	file:
trans_roundoff	examples/idea.cpp	/^struct trans_roundoff$/;"	s	file:
trans_single_path	include/agg_trans_single_path.h	/^    class trans_single_path$/;"	c	namespace:agg
trans_single_path	src/agg_trans_single_path.cpp	/^    trans_single_path::trans_single_path() :$/;"	f	class:agg::trans_single_path
trans_type	include/agg_span_interpolator_adaptor.h	/^        typedef typename base_type::trans_type trans_type;$/;"	t	class:agg::span_interpolator_adaptor
trans_type	include/agg_span_interpolator_linear.h	/^        typedef Transformer trans_type;$/;"	t	class:agg::span_interpolator_linear
trans_type	include/agg_span_interpolator_linear.h	/^        typedef Transformer trans_type;$/;"	t	class:agg::span_interpolator_linear_subdiv
trans_type	include/agg_span_interpolator_persp.h	/^        typedef trans_perspective trans_type;$/;"	t	class:agg::span_interpolator_persp_exact
trans_type	include/agg_span_interpolator_persp.h	/^        typedef trans_perspective trans_type;$/;"	t	class:agg::span_interpolator_persp_lerp
trans_type	include/agg_span_interpolator_trans.h	/^        typedef Transformer trans_type;$/;"	t	class:agg::span_interpolator_trans
trans_type	include/agg_span_subdiv_adaptor.h	/^        typedef typename interpolator_type::trans_type trans_type;$/;"	t	class:agg::span_subdiv_adaptor
trans_viewport	include/agg_trans_viewport.h	/^        trans_viewport() : $/;"	f	class:agg::trans_viewport
trans_viewport	include/agg_trans_viewport.h	/^    class trans_viewport$/;"	c	namespace:agg
trans_warp_magnifier	include/agg_trans_warp_magnifier.h	/^        trans_warp_magnifier() : m_xc(0.0), m_yc(0.0), m_magn(1.0), m_radius(1.0) {}$/;"	f	class:agg::trans_warp_magnifier
trans_warp_magnifier	include/agg_trans_warp_magnifier.h	/^    class trans_warp_magnifier$/;"	c	namespace:agg
transform	examples/alpha_mask.cpp	/^    void transform(double width, double height, double x, double y)$/;"	f	class:the_application
transform	examples/alpha_mask2.cpp	/^    void transform(double width, double height, double x, double y)$/;"	f	class:the_application
transform	examples/idea.cpp	/^    static void transform(double* x, double* y)$/;"	f	struct:trans_roundoff
transform	examples/lion.cpp	/^    void transform(double width, double height, double x, double y)$/;"	f	class:the_application
transform	examples/lion_outline.cpp	/^    void transform(double width, double height, double x, double y)$/;"	f	class:the_application
transform	examples/multi_clip.cpp	/^    void transform(double width, double height, double x, double y)$/;"	f	class:the_application
transform	examples/rasterizers2.cpp	/^    void transform(double* x, double* y) const$/;"	f	struct:roundoff
transform	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    trans_affine& path_renderer::transform()$/;"	f	class:agg::svg::path_renderer
transform	examples/svg_viewer/agg_svg_path_renderer.h	/^        trans_affine transform;$/;"	m	struct:agg::svg::path_attributes
transform	examples/trans_polar.cpp	/^        void transform(double* x, double* y) const$/;"	f	class:agg::trans_polar
transform	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::transform(const trans_affine& affine)$/;"	f	class:agg::font_engine_freetype_base
transform	font_win32_tt/agg_font_win32_tt.h	/^        void transform(const agg::trans_affine& mtx)$/;"	f	class:agg::font_engine_win32_tt_base
transform	include/agg_conv_marker.h	/^        const trans_affine& transform() const { return m_transform; }$/;"	f	class:agg::conv_marker
transform	include/agg_conv_marker.h	/^        trans_affine& transform() { return m_transform; }$/;"	f	class:agg::conv_marker
transform	include/agg_path_storage.h	/^        void transform(const Trans& trans, unsigned path_id=0)$/;"	f	class:agg::path_base
transform	include/agg_span_interpolator_persp.h	/^        void transform(double* x, double* y) const$/;"	f	class:agg::span_interpolator_persp_exact
transform	include/agg_span_interpolator_persp.h	/^        void transform(double* x, double* y) const$/;"	f	class:agg::span_interpolator_persp_lerp
transform	include/agg_trans_affine.h	/^    inline void trans_affine::transform(double* x, double* y) const$/;"	f	class:agg::trans_affine
transform	include/agg_trans_bilinear.h	/^        void transform(double* x, double* y) const$/;"	f	class:agg::trans_bilinear
transform	include/agg_trans_perspective.h	/^    inline void trans_perspective::transform(double* px, double* py) const$/;"	f	class:agg::trans_perspective
transform	include/agg_trans_viewport.h	/^        void transform(double* x, double* y) const$/;"	f	class:agg::trans_viewport
transform	include/ctrl/agg_ctrl.h	/^        void transform(const trans_affine& mtx) { m_mtx = &mtx; }$/;"	f	class:agg::ctrl
transform	src/agg_trans_double_path.cpp	/^    void trans_double_path::transform(double *x, double *y) const$/;"	f	class:agg::trans_double_path
transform	src/agg_trans_single_path.cpp	/^    void trans_single_path::transform(double *x, double *y) const$/;"	f	class:agg::trans_single_path
transform	src/agg_trans_warp_magnifier.cpp	/^    void trans_warp_magnifier::transform(double* x, double* y) const$/;"	f	class:agg::trans_warp_magnifier
transform1	src/agg_trans_double_path.cpp	/^    void trans_double_path::transform1(const vertex_storage& vertices, $/;"	f	class:agg::trans_double_path
transform_2x2	include/agg_trans_affine.h	/^    inline void trans_affine::transform_2x2(double* x, double* y) const$/;"	f	class:agg::trans_affine
transform_2x2	include/agg_trans_perspective.h	/^    inline void trans_perspective::transform_2x2(double* x, double* y) const$/;"	f	class:agg::trans_perspective
transform_affine	include/agg_trans_perspective.h	/^    inline void trans_perspective::transform_affine(double* x, double* y) const$/;"	f	class:agg::trans_perspective
transform_all_paths	include/agg_path_storage.h	/^        void transform_all_paths(const Trans& trans)$/;"	f	class:agg::path_base
transform_image	examples/image_filters.cpp	/^    void transform_image(double angle)$/;"	f	class:the_application
transform_scale_only	include/agg_trans_viewport.h	/^        void transform_scale_only(double* x, double* y) const$/;"	f	class:agg::trans_viewport
transform_xy	include/ctrl/agg_ctrl.h	/^        void transform_xy(double* x, double* y) const$/;"	f	class:agg::ctrl
transformed_control	examples/trans_polar.cpp	/^        transformed_control(Ctrl& ctrl, Pipeline& pl) :$/;"	f	class:agg::transformed_control
transformed_control	examples/trans_polar.cpp	/^    template<class ColorT, class Ctrl, class Pipeline> class transformed_control$/;"	c	namespace:agg	file:
transformer	include/agg_conv_transform.h	/^        void transformer(const Transformer& tr)$/;"	f	class:agg::conv_transform
transformer	include/agg_gsv_text.h	/^        void transformer(const Transformer* trans) $/;"	f	class:agg::gsv_text_outline
transformer	include/agg_span_interpolator_linear.h	/^        const trans_type& transformer() const { return *m_trans; }$/;"	f	class:agg::span_interpolator_linear
transformer	include/agg_span_interpolator_linear.h	/^        const trans_type& transformer() const { return *m_trans; }$/;"	f	class:agg::span_interpolator_linear_subdiv
transformer	include/agg_span_interpolator_linear.h	/^        void transformer(const trans_type& trans) { m_trans = &trans; }$/;"	f	class:agg::span_interpolator_linear
transformer	include/agg_span_interpolator_linear.h	/^        void transformer(const trans_type& trans) { m_trans = &trans; }$/;"	f	class:agg::span_interpolator_linear_subdiv
transformer	include/agg_span_interpolator_trans.h	/^        const trans_type& transformer() const { return *m_trans; }$/;"	f	class:agg::span_interpolator_trans
transformer	include/agg_span_interpolator_trans.h	/^        void transformer(const trans_type& trans) { m_trans = &trans; }$/;"	f	class:agg::span_interpolator_trans
transformer	include/agg_span_subdiv_adaptor.h	/^        const trans_type& transformer() const $/;"	f	class:agg::span_subdiv_adaptor
transformer	include/agg_span_subdiv_adaptor.h	/^        void transformer(const trans_type& trans) $/;"	f	class:agg::span_subdiv_adaptor
translate	include/agg_path_storage.h	/^    void path_base<VC>::translate(double dx, double dy, unsigned path_id)$/;"	f	class:agg::path_base
translate	include/agg_trans_affine.h	/^    inline const trans_affine& trans_affine::translate(double x, double y) $/;"	f	class:agg::trans_affine
translate	include/agg_trans_perspective.h	/^    trans_perspective::translate(double x, double y)$/;"	f	class:agg::trans_perspective
translate	src/platform/mac/agg_platform_support.cpp	/^    unsigned platform_specific::translate(unsigned keycode)$/;"	f	class:agg::platform_specific
translate	src/platform/win32/agg_platform_support.cpp	/^    unsigned platform_specific::translate(unsigned keycode)$/;"	f	class:agg::platform_specific
translate_all_paths	include/agg_path_storage.h	/^    void path_base<VC>::translate_all_paths(double dx, double dy)$/;"	f	class:agg::path_base
translation	examples/trans_polar.cpp	/^        void translation(double dx, double dy) { m_translation_x = dx; m_translation_y = dy;}$/;"	f	class:agg::trans_polar
translation	include/agg_trans_perspective.h	/^    void trans_perspective::translation(double* dx, double* dy) const$/;"	f	class:agg::trans_perspective
translation	src/agg_trans_affine.cpp	/^    void trans_affine::translation(double* dx, double* dy) const$/;"	f	class:agg::trans_affine
transparent	include/agg_color_gray.h	/^        const self_type& transparent()$/;"	f	struct:agg::gray16
transparent	include/agg_color_gray.h	/^        const self_type& transparent()$/;"	f	struct:agg::gray8
transparent	include/agg_color_rgba.h	/^        const rgba& transparent()$/;"	f	struct:agg::rgba
transparent	include/agg_color_rgba.h	/^        const self_type& transparent()$/;"	f	struct:agg::rgba16
transparent	include/agg_color_rgba.h	/^        const self_type& transparent()$/;"	f	struct:agg::rgba8
triangle	examples/gouraud_mesh.cpp	/^              mesh_triangle& triangle(unsigned i)       { return m_triangles[i]; }$/;"	f	class:agg::mesh_ctrl
triangle	examples/gouraud_mesh.cpp	/^        const mesh_triangle& triangle(unsigned i) const { return m_triangles[i]; }$/;"	f	class:agg::mesh_ctrl
triangle	include/agg_span_gouraud.h	/^        void triangle(double x1, double y1, $/;"	f	class:agg::span_gouraud
triangle_down	include/agg_renderer_markers.h	/^        void triangle_down(int x, int y, int r)$/;"	f	class:agg::renderer_markers
triangle_left	include/agg_renderer_markers.h	/^        void triangle_left(int x, int y, int r)$/;"	f	class:agg::renderer_markers
triangle_right	include/agg_renderer_markers.h	/^        void triangle_right(int x, int y, int r)$/;"	f	class:agg::renderer_markers
triangle_up	include/agg_renderer_markers.h	/^        void triangle_up(int x, int y, int r)$/;"	f	class:agg::renderer_markers
trim_cr_lf	examples/mol_view.cpp	/^unsigned trim_cr_lf(char* buf)$/;"	f
tx	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
tx	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
ty	include/agg_trans_affine.h	/^        double sx, shy, shx, sy, tx, ty;$/;"	m	struct:agg::trans_affine
ty	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
type	gpc/gpc.c	/^  int                 type;         \/* Clip \/ subject edge flag          *\/$/;"	m	struct:edge_shape	file:
typeface	font_win32_tt/agg_font_win32_tt.h	/^        const char* typeface()     const { return m_typeface;   }$/;"	f	class:agg::font_engine_win32_tt_base
ubspline_to_bezier	include/agg_curves.h	/^    inline curve4_points ubspline_to_bezier(double x1, double y1, $/;"	f	namespace:agg
ubspline_to_bezier	include/agg_curves.h	/^    ubspline_to_bezier(const curve4_points& cp)$/;"	f	namespace:agg
uceil	include/agg_basics.h	/^    AGG_INLINE unsigned uceil(double v)          \/\/--------uceil$/;"	f	namespace:agg
uceil	include/agg_basics.h	/^    AGG_INLINE unsigned uceil(double v)$/;"	f	namespace:agg
ufloor	include/agg_basics.h	/^    AGG_INLINE unsigned ufloor(double v)         \/\/-------ufloor$/;"	f	namespace:agg
ufloor	include/agg_basics.h	/^    AGG_INLINE unsigned ufloor(double v)$/;"	f	namespace:agg
unite_rectangles	include/agg_basics.h	/^    inline Rect unite_rectangles(const Rect& r1, const Rect& r2)$/;"	f	namespace:agg
unsigned_greater	include/agg_array.h	/^    inline bool unsigned_greater(unsigned a, unsigned b) { return a > b; }$/;"	f	namespace:agg
unsigned_less	include/agg_array.h	/^    inline bool unsigned_less(unsigned a, unsigned b) { return a < b; }$/;"	f	namespace:agg
update	include/agg_trans_viewport.h	/^    inline void trans_viewport::update()$/;"	f	class:agg::trans_viewport
update_char_size	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::update_char_size()$/;"	f	class:agg::font_engine_freetype_base
update_signature	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::update_signature()$/;"	f	class:agg::font_engine_freetype_base
update_signature	font_win32_tt/agg_font_win32_tt.cpp	/^    void font_engine_win32_tt_base::update_signature()$/;"	f	class:agg::font_engine_win32_tt_base
update_spline	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::update_spline()$/;"	f	class:agg::spline_ctrl_impl
update_values	include/agg_span_gradient.h	/^        void update_values()$/;"	f	class:agg::gradient_radial_focus
update_window	src/platform/AmigaOS/agg_platform_support.cpp	/^	void platform_support::update_window()$/;"	f	class:agg::platform_support
update_window	src/platform/BeOS/agg_platform_support.cpp	/^    void platform_support::update_window()$/;"	f	class:agg::platform_support
update_window	src/platform/X11/agg_platform_support.cpp	/^    void platform_support::update_window()$/;"	f	class:agg::platform_support
update_window	src/platform/mac/agg_platform_support.cpp	/^    void platform_support::update_window()$/;"	f	class:agg::platform_support
update_window	src/platform/sdl/agg_platform_support.cpp	/^    void platform_support::update_window()$/;"	f	class:agg::platform_support
update_window	src/platform/win32/agg_platform_support.cpp	/^    void platform_support::update_window()$/;"	f	class:agg::platform_support
upscale	include/agg_rasterizer_sl_clip.h	/^        static double upscale(double v) { return v; }$/;"	f	struct:agg::ras_conv_dbl
upscale	include/agg_rasterizer_sl_clip.h	/^        static double upscale(double v) { return v; }$/;"	f	struct:agg::ras_conv_dbl_3x
upscale	include/agg_rasterizer_sl_clip.h	/^        static int upscale(double v) $/;"	f	struct:agg::ras_conv_int_sat
upscale	include/agg_rasterizer_sl_clip.h	/^        static int upscale(double v) { return iround(v * poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_int
upscale	include/agg_rasterizer_sl_clip.h	/^        static int upscale(double v) { return iround(v * poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_int_3x
uround	include/agg_basics.h	/^    AGG_INLINE int uround(double v)$/;"	f	namespace:agg
uround	include/agg_basics.h	/^    AGG_INLINE unsigned uround(double v)         \/\/-------uround$/;"	f	namespace:agg
v	gpc/gpc.c	/^  vertex_node        *v[2];         \/* Left and right vertex list ptrs   *\/$/;"	m	struct:p_shape	file:
v	include/agg_blur.h	/^        value_type v;$/;"	m	struct:agg::recursive_blur_calc_gray
v	include/agg_blur.h	/^        value_type v;$/;"	m	struct:agg::stack_blur_calc_gray
v	include/agg_color_gray.h	/^        value_type v;$/;"	m	struct:agg::gray16
v	include/agg_color_gray.h	/^        value_type v;$/;"	m	struct:agg::gray8
v	include/agg_gradient_lut.h	/^        agg::dda_line_interpolator<14> v,a;$/;"	m	struct:agg::color_interpolator
v_shape	gpc/gpc.c	/^typedef struct v_shape              \/* Internal vertex list datatype     *\/$/;"	s	file:
value	include/agg_gamma_functions.h	/^        double value() const { return m_mul; }$/;"	f	class:agg::gamma_multiply
value	include/agg_gamma_functions.h	/^        void value(double v) { m_mul = v; }$/;"	f	class:agg::gamma_multiply
value	include/agg_glyph_raster_bin.h	/^        int16u value(const int8u* p) const$/;"	f	class:agg::glyph_raster_bin
value	include/agg_gsv_text.h	/^        int16u value(const int8u* p) const$/;"	f	class:agg::gsv_text
value	include/agg_renderer_outline_aa.h	/^        value_type value(int dist) const$/;"	f	class:agg::line_profile_aa
value	include/ctrl/agg_slider_ctrl.h	/^        double value() const { return m_value * (m_max - m_min) + m_min; }$/;"	f	class:agg::slider_ctrl_impl
value	src/ctrl/agg_slider_ctrl.cpp	/^    void slider_ctrl_impl::value(double value) $/;"	f	class:agg::slider_ctrl_impl
value	src/ctrl/agg_spline_ctrl.cpp	/^    double spline_ctrl_impl::value(double x) const$/;"	f	class:agg::spline_ctrl_impl
value	src/ctrl/agg_spline_ctrl.cpp	/^    void spline_ctrl_impl::value(unsigned idx, double y)$/;"	f	class:agg::spline_ctrl_impl
value1	include/ctrl/agg_scale_ctrl.h	/^        double value1() const { return m_value1; }$/;"	f	class:agg::scale_ctrl_impl
value1	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::value1(double value) $/;"	f	class:agg::scale_ctrl_impl
value2	include/ctrl/agg_scale_ctrl.h	/^        double value2() const { return m_value2; }$/;"	f	class:agg::scale_ctrl_impl
value2	src/ctrl/agg_scale_ctrl.cpp	/^    void scale_ctrl_impl::value2(double value) $/;"	f	class:agg::scale_ctrl_impl
value_at	include/agg_array.h	/^        T  value_at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_array
value_at	include/agg_array.h	/^        T  value_at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_array_adaptor
value_at	include/agg_array.h	/^        T  value_at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_auto_array
value_at	include/agg_array.h	/^        T  value_at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_auto_vector
value_at	include/agg_array.h	/^        T  value_at(unsigned i) const           { return m_array[i]; }$/;"	f	class:agg::pod_vector
value_at	include/agg_array.h	/^        T value_at(unsigned i) const$/;"	f	class:agg::pod_bvector
value_at	include/agg_array.h	/^        value_type  value_at(unsigned i) const           { return m_array[m_start + i]; }$/;"	f	class:agg::range_adaptor
value_type	examples/compositing.cpp	/^typedef color::value_type value_type;$/;"	t	file:
value_type	examples/image_resample.cpp	/^typedef color_type::value_type                         value_type;$/;"	t	file:
value_type	examples/pattern_resample.cpp	/^typedef color_type::value_type                         value_type;$/;"	t	file:
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_array
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_array_adaptor
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_auto_array
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_auto_vector
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_bvector
value_type	include/agg_array.h	/^        typedef T value_type;$/;"	t	class:agg::pod_vector
value_type	include/agg_array.h	/^        typedef typename Array::value_type value_type;$/;"	t	class:agg::range_adaptor
value_type	include/agg_basics.h	/^        typedef T            value_type;$/;"	t	struct:agg::rect_base
value_type	include/agg_basics.h	/^        typedef T value_type;$/;"	t	struct:agg::point_base
value_type	include/agg_basics.h	/^        typedef T value_type;$/;"	t	struct:agg::vertex_base
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::recursive_blur_calc_gray
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::recursive_blur_calc_rgb
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::recursive_blur_calc_rgba
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::stack_blur_calc_gray
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::stack_blur_calc_rgb
value_type	include/agg_blur.h	/^        typedef T value_type;$/;"	t	struct:agg::stack_blur_calc_rgba
value_type	include/agg_blur.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::recursive_blur
value_type	include/agg_color_gray.h	/^        typedef int16u value_type;$/;"	t	struct:agg::gray16
value_type	include/agg_color_gray.h	/^        typedef int8u  value_type;$/;"	t	struct:agg::gray8
value_type	include/agg_color_rgba.h	/^        typedef double value_type;$/;"	t	struct:agg::rgba
value_type	include/agg_color_rgba.h	/^        typedef int16u value_type;$/;"	t	struct:agg::rgba16
value_type	include/agg_color_rgba.h	/^        typedef int8u  value_type;$/;"	t	struct:agg::rgba8
value_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::value_type value_type;$/;"	t	class:agg::image_accessor_clip
value_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::value_type value_type;$/;"	t	class:agg::image_accessor_clone
value_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::value_type value_type;$/;"	t	class:agg::image_accessor_no_clip
value_type	include/agg_image_accessors.h	/^        typedef typename pixfmt_type::value_type value_type;$/;"	t	class:agg::image_accessor_wrap
value_type	include/agg_path_storage.h	/^        typedef T value_type;$/;"	t	class:agg::poly_plain_adaptor
value_type	include/agg_path_storage.h	/^        typedef T value_type;$/;"	t	class:agg::vertex_block_storage
value_type	include/agg_path_storage.h	/^        typedef double value_type;$/;"	t	class:agg::line_adaptor
value_type	include/agg_path_storage.h	/^        typedef typename vertex_type::value_type value_type;$/;"	t	class:agg::vertex_stl_storage
value_type	include/agg_path_storage_integer.h	/^        typedef T value_type;$/;"	t	class:agg::path_storage_integer
value_type	include/agg_pattern_filters_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::pattern_filter_bilinear_rgba
value_type	include/agg_pixfmt_gray.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_dir_gray
value_type	include/agg_pixfmt_gray.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_inv_gray
value_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::value_type   value_type;$/;"	t	class:agg::pixfmt_alpha_blend_gray
value_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_gray
value_type	include/agg_pixfmt_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_gray_pre
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_dir_rgb
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_inv_rgb
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::blender_rgb_gamma
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb
value_type	include/agg_pixfmt_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_bgrAAA_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_bgrABB_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_rgb555_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_rgb565_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_rgbAAA_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	class:agg::blender_rgbBBA_gamma
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_bgrAAA
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_bgrAAA_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_bgrABB
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_bgrABB_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb555
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb555_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb565
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgb565_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgbAAA
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgbAAA_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgbBBA
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef color_type::value_type value_type;$/;"	t	struct:agg::blender_rgbBBA_pre
value_type	include/agg_pixfmt_rgb_packed.h	/^        typedef typename color_type::value_type   value_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgb_packed
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_dir_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::apply_gamma_inv_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	struct:agg::comp_op_table_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	struct:agg::multiplier_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::pixfmt_alpha_blend_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::pixfmt_custom_blend_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_rgba_plain
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::blender_rgba_pre
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_adaptor_clip_to_dst_rgba_pre
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_adaptor_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_adaptor_clip_to_dst_rgba_pre
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_adaptor_rgba
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_adaptor_rgba_pre
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_clear
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_color_burn
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_color_dodge
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_contrast
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_darken
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_difference
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_dst
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_dst_atop
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_dst_in
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_dst_out
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_dst_over
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_exclusion
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_hard_light
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_invert
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_invert_rgb
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_lighten
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_minus
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_multiply
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_overlay
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_plus
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_screen
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_soft_light
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_src
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_src_atop
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_src_in
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_src_out
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_src_over
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::comp_op_rgba_xor
value_type	include/agg_pixfmt_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	struct:agg::copy_or_blend_rgba_wrapper
value_type	include/agg_pixfmt_transposer.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::pixfmt_transposer
value_type	include/agg_renderer_outline_aa.h	/^        typedef int8u value_type;$/;"	t	class:agg::line_profile_aa
value_type	include/agg_scanline_storage_aa.h	/^        typedef T value_type;$/;"	t	class:agg::scanline_cell_storage
value_type	include/agg_span_gouraud_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_gouraud_gray
value_type	include/agg_span_gouraud_rgba.h	/^        typedef typename ColorT::value_type value_type;$/;"	t	class:agg::span_gouraud_rgba
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_gray
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_gray_2x2
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_gray_bilinear
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_gray_bilinear_clip
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_gray_nn
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_gray
value_type	include/agg_span_image_filter_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_gray_affine
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgb
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgb_2x2
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgb_bilinear_clip
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgb_nn
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_rgb
value_type	include/agg_span_image_filter_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_rgb_affine
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgba
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgba_2x2
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgba_bilinear_clip
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_filter_rgba_nn
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_rgba
value_type	include/agg_span_image_filter_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_image_resample_rgba_affine
value_type	include/agg_span_pattern_gray.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_pattern_gray
value_type	include/agg_span_pattern_rgb.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_pattern_rgb
value_type	include/agg_span_pattern_rgba.h	/^        typedef typename color_type::value_type value_type;$/;"	t	class:agg::span_pattern_rgba
values	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::values(double kx1, double ky1, double kx2, double ky2)$/;"	f	class:agg::gamma_ctrl_impl
values	src/ctrl/agg_gamma_ctrl.cpp	/^    void gamma_ctrl_impl::values(double* kx1, double* ky1, double* kx2, double* ky2) const$/;"	f	class:agg::gamma_ctrl_impl
values	src/ctrl/agg_gamma_spline.cpp	/^    void gamma_spline::values(double kx1, double ky1, double kx2, double ky2)$/;"	f	class:agg::gamma_spline
values	src/ctrl/agg_gamma_spline.cpp	/^    void gamma_spline::values(double* kx1, double* ky1, double* kx2, double* ky2) const$/;"	f	class:agg::gamma_spline
vcgen_bspline	include/agg_vcgen_bspline.h	/^    class vcgen_bspline$/;"	c	namespace:agg
vcgen_bspline	src/agg_vcgen_bspline.cpp	/^    vcgen_bspline::vcgen_bspline() :$/;"	f	class:agg::vcgen_bspline
vcgen_contour	include/agg_vcgen_contour.h	/^    class vcgen_contour$/;"	c	namespace:agg
vcgen_contour	src/agg_vcgen_contour.cpp	/^    vcgen_contour::vcgen_contour() :$/;"	f	class:agg::vcgen_contour
vcgen_dash	include/agg_vcgen_dash.h	/^    class vcgen_dash$/;"	c	namespace:agg
vcgen_dash	src/agg_vcgen_dash.cpp	/^    vcgen_dash::vcgen_dash() :$/;"	f	class:agg::vcgen_dash
vcgen_markers_term	include/agg_vcgen_markers_term.h	/^        vcgen_markers_term() : m_curr_id(0), m_curr_idx(0) {}$/;"	f	class:agg::vcgen_markers_term
vcgen_markers_term	include/agg_vcgen_markers_term.h	/^    class vcgen_markers_term$/;"	c	namespace:agg
vcgen_smooth_poly1	include/agg_vcgen_smooth_poly1.h	/^    class vcgen_smooth_poly1$/;"	c	namespace:agg
vcgen_smooth_poly1	src/agg_vcgen_smooth_poly1.cpp	/^    vcgen_smooth_poly1::vcgen_smooth_poly1() :$/;"	f	class:agg::vcgen_smooth_poly1
vcgen_stroke	include/agg_vcgen_stroke.h	/^    class vcgen_stroke$/;"	c	namespace:agg
vcgen_stroke	src/agg_vcgen_stroke.cpp	/^    vcgen_stroke::vcgen_stroke() :$/;"	f	class:agg::vcgen_stroke
vcgen_vertex_sequence	include/agg_vcgen_vertex_sequence.h	/^        vcgen_vertex_sequence() :$/;"	f	class:agg::vcgen_vertex_sequence
vcgen_vertex_sequence	include/agg_vcgen_vertex_sequence.h	/^    class vcgen_vertex_sequence$/;"	c	namespace:agg
verdana12	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana12[] = $/;"	m	namespace:agg	file:
verdana12_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana12_bold[] = $/;"	m	namespace:agg	file:
verdana13	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana13[] = $/;"	m	namespace:agg	file:
verdana13_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana13_bold[] = $/;"	m	namespace:agg	file:
verdana14	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana14[] = $/;"	m	namespace:agg	file:
verdana14_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana14_bold[] = $/;"	m	namespace:agg	file:
verdana16	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana16[] = $/;"	m	namespace:agg	file:
verdana16_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana16_bold[] = $/;"	m	namespace:agg	file:
verdana17	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana17[] = $/;"	m	namespace:agg	file:
verdana17_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana17_bold[] = $/;"	m	namespace:agg	file:
verdana18	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana18[] = $/;"	m	namespace:agg	file:
verdana18_bold	src/agg_embedded_raster_fonts.cpp	/^    const int8u verdana18_bold[] = $/;"	m	namespace:agg	file:
vertex	examples/aa_test.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:simple_vertex_source
vertex	examples/alpha_mask3.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:spiral
vertex	examples/flash_rasterizer.cpp	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::compound_shape
vertex	examples/flash_rasterizer2.cpp	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::compound_shape
vertex	examples/gouraud_mesh.cpp	/^              mesh_point& vertex(unsigned i)       { return m_vertices[i]; }$/;"	f	class:agg::mesh_ctrl
vertex	examples/gouraud_mesh.cpp	/^              mesh_point& vertex(unsigned x, unsigned y)       { return m_vertices[y * m_rows + x]; }$/;"	f	class:agg::mesh_ctrl
vertex	examples/gouraud_mesh.cpp	/^        const mesh_point& vertex(unsigned i) const { return m_vertices[i]; }$/;"	f	class:agg::mesh_ctrl
vertex	examples/gouraud_mesh.cpp	/^        const mesh_point& vertex(unsigned x, unsigned y) const { return m_vertices[y * m_rows + x]; }$/;"	f	class:agg::mesh_ctrl
vertex	examples/gpc_test.cpp	/^        unsigned vertex(double* x, double* y)$/;"	f	struct:agg::conv_poly_counter
vertex	examples/gpc_test.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:spiral
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return c.vertex(x, y); }$/;"	f	struct:curve
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return c.vertex(x, y); }$/;"	f	struct:dash_stroke_draft_arrow
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return c.vertex(x, y); }$/;"	f	struct:dash_stroke_fine_arrow
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return c.vertex(x, y); }$/;"	f	struct:stroke_draft_arrow
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return c.vertex(x, y); }$/;"	f	struct:stroke_fine_arrow
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return d.vertex(x, y); }$/;"	f	struct:dash_stroke_draft_simple
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return s.vertex(x, y); }$/;"	f	struct:dash_stroke_fine_simple
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return s.vertex(x, y); }$/;"	f	struct:stroke_draft_simple
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y) { return s.vertex(x, y); }$/;"	f	struct:stroke_fine_simple
vertex	examples/graph_test.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	struct:line
vertex	examples/interactive_polygon.cpp	/^    unsigned interactive_polygon::vertex(double* x, double* y)$/;"	f	class:agg::interactive_polygon
vertex	examples/interactive_polygon.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::simple_polygon_vertex_source
vertex	examples/mol_view.cpp	/^    inline unsigned line::vertex(double* x, double* y)$/;"	f	class:agg::line
vertex	examples/mol_view.cpp	/^    inline unsigned solid_wedge::vertex(double* x, double* y)$/;"	f	class:agg::solid_wedge
vertex	examples/mol_view.cpp	/^    unsigned dashed_wedge::vertex(double* x, double* y)$/;"	f	class:agg::dashed_wedge
vertex	examples/mol_view.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:bond_vertex_generator
vertex	examples/rasterizers2.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:spiral
vertex	examples/scanline_boolean2.cpp	/^    unsigned vertex(double* x, double* y)$/;"	f	class:spiral
vertex	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned vertex(double* x, double* y) $/;"	f	class:agg::svg::conv_count
vertex	examples/trans_polar.cpp	/^        unsigned vertex(double* x, double* y) { return m_pipeline.vertex(x, y); }$/;"	f	class:agg::transformed_control
vertex	gpc/gpc.c	/^  gpc_vertex          vertex;       \/* Piggy-backed contour vertex data  *\/$/;"	m	struct:edge_shape	file:
vertex	gpc/gpc.h	/^  gpc_vertex         *vertex;       \/* Vertex array pointer              *\/$/;"	m	struct:__anon6
vertex	include/agg_bezier_arc.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::bezier_arc
vertex	include/agg_bezier_arc.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::bezier_arc_svg
vertex	include/agg_conv_adaptor_vcgen.h	/^        unsigned vertex(double*, double*) { return path_cmd_stop; }$/;"	f	struct:agg::null_markers
vertex	include/agg_conv_adaptor_vcgen.h	/^    unsigned conv_adaptor_vcgen<VertexSource, Generator, Markers>::vertex(double* x, double* y)$/;"	f	class:agg::conv_adaptor_vcgen
vertex	include/agg_conv_adaptor_vpgen.h	/^    unsigned conv_adaptor_vpgen<VertexSource, VPGen>::vertex(double* x, double* y)$/;"	f	class:agg::conv_adaptor_vpgen
vertex	include/agg_conv_close_polygon.h	/^    unsigned conv_close_polygon<VertexSource>::vertex(double* x, double* y)$/;"	f	class:agg::conv_close_polygon
vertex	include/agg_conv_concat.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::conv_concat
vertex	include/agg_conv_curve.h	/^    unsigned conv_curve<VertexSource, Curve3, Curve4>::vertex(double* x, double* y)$/;"	f	class:agg::conv_curve
vertex	include/agg_conv_gpc.h	/^    unsigned conv_gpc<VSA, VSB>::vertex(double* x, double* y)$/;"	f	class:agg::conv_gpc
vertex	include/agg_conv_marker.h	/^    unsigned conv_marker<MarkerLocator, MarkerShapes>::vertex(double* x, double* y)$/;"	f	class:agg::conv_marker
vertex	include/agg_conv_transform.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::conv_transform
vertex	include/agg_conv_unclose_polygon.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::conv_unclose_polygon
vertex	include/agg_curves.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::curve3
vertex	include/agg_curves.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::curve3_div
vertex	include/agg_curves.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::curve4
vertex	include/agg_curves.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::curve4_div
vertex	include/agg_ellipse.h	/^    inline unsigned ellipse::vertex(double* x, double* y)$/;"	f	class:agg::ellipse
vertex	include/agg_gsv_text.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::gsv_text_outline
vertex	include/agg_path_storage.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::line_adaptor
vertex	include/agg_path_storage.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::poly_container_adaptor
vertex	include/agg_path_storage.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::poly_container_reverse_adaptor
vertex	include/agg_path_storage.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::poly_plain_adaptor
vertex	include/agg_path_storage.h	/^        unsigned vertex(unsigned idx, double* x, double* y) const$/;"	f	class:agg::vertex_stl_storage
vertex	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::vertex(double* x, double* y)$/;"	f	class:agg::path_base
vertex	include/agg_path_storage.h	/^    inline unsigned path_base<VC>::vertex(unsigned idx, double* x, double* y) const$/;"	f	class:agg::path_base
vertex	include/agg_path_storage.h	/^    inline unsigned vertex_block_storage<T,S,P>::vertex(unsigned idx, $/;"	f	class:agg::vertex_block_storage
vertex	include/agg_path_storage_integer.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::path_storage_integer
vertex	include/agg_path_storage_integer.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::serialized_integer_path_adaptor
vertex	include/agg_path_storage_integer.h	/^        unsigned vertex(double* x_, double* y_, $/;"	f	struct:agg::vertex_integer
vertex	include/agg_path_storage_integer.h	/^        unsigned vertex(unsigned idx, double* x, double* y) const$/;"	f	class:agg::path_storage_integer
vertex	include/agg_span_gouraud.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::span_gouraud
vertex	include/agg_vcgen_vertex_sequence.h	/^    inline unsigned vcgen_vertex_sequence::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_vertex_sequence
vertex	include/ctrl/agg_polygon_ctrl.h	/^        unsigned vertex(double* x, double* y)$/;"	f	class:agg::simple_polygon_vertex_source
vertex	src/agg_arc.cpp	/^    unsigned arc::vertex(double* x, double* y)$/;"	f	class:agg::arc
vertex	src/agg_arrowhead.cpp	/^    unsigned arrowhead::vertex(double* x, double* y)$/;"	f	class:agg::arrowhead
vertex	src/agg_curves.cpp	/^    unsigned curve3_inc::vertex(double* x, double* y)$/;"	f	class:agg::curve3_inc
vertex	src/agg_curves.cpp	/^    unsigned curve4_inc::vertex(double* x, double* y)$/;"	f	class:agg::curve4_inc
vertex	src/agg_gsv_text.cpp	/^    unsigned gsv_text::vertex(double* x, double* y)$/;"	f	class:agg::gsv_text
vertex	src/agg_rounded_rect.cpp	/^    unsigned rounded_rect::vertex(double* x, double* y)$/;"	f	class:agg::rounded_rect
vertex	src/agg_vcgen_bspline.cpp	/^    unsigned vcgen_bspline::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_bspline
vertex	src/agg_vcgen_contour.cpp	/^    unsigned vcgen_contour::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_contour
vertex	src/agg_vcgen_dash.cpp	/^    unsigned vcgen_dash::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_dash
vertex	src/agg_vcgen_markers_term.cpp	/^    unsigned vcgen_markers_term::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_markers_term
vertex	src/agg_vcgen_smooth_poly1.cpp	/^    unsigned vcgen_smooth_poly1::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_smooth_poly1
vertex	src/agg_vcgen_stroke.cpp	/^    unsigned vcgen_stroke::vertex(double* x, double* y)$/;"	f	class:agg::vcgen_stroke
vertex	src/agg_vpgen_clip_polygon.cpp	/^    unsigned vpgen_clip_polygon::vertex(double* x, double* y)$/;"	f	class:agg::vpgen_clip_polygon
vertex	src/agg_vpgen_clip_polyline.cpp	/^    unsigned vpgen_clip_polyline::vertex(double* x, double* y)$/;"	f	class:agg::vpgen_clip_polyline
vertex	src/agg_vpgen_segmentator.cpp	/^    unsigned vpgen_segmentator::vertex(double* x, double* y)$/;"	f	class:agg::vpgen_segmentator
vertex	src/ctrl/agg_bezier_ctrl.cpp	/^    unsigned bezier_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::bezier_ctrl_impl
vertex	src/ctrl/agg_bezier_ctrl.cpp	/^    unsigned curve3_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::curve3_ctrl_impl
vertex	src/ctrl/agg_cbox_ctrl.cpp	/^    unsigned cbox_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::cbox_ctrl_impl
vertex	src/ctrl/agg_gamma_ctrl.cpp	/^    unsigned gamma_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::gamma_ctrl_impl
vertex	src/ctrl/agg_gamma_spline.cpp	/^    unsigned gamma_spline::vertex(double* vx, double* vy)$/;"	f	class:agg::gamma_spline
vertex	src/ctrl/agg_polygon_ctrl.cpp	/^    unsigned polygon_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::polygon_ctrl_impl
vertex	src/ctrl/agg_rbox_ctrl.cpp	/^    unsigned rbox_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::rbox_ctrl_impl
vertex	src/ctrl/agg_scale_ctrl.cpp	/^    unsigned scale_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::scale_ctrl_impl
vertex	src/ctrl/agg_slider_ctrl.cpp	/^    unsigned slider_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::slider_ctrl_impl
vertex	src/ctrl/agg_spline_ctrl.cpp	/^    unsigned spline_ctrl_impl::vertex(double* x, double* y)$/;"	f	class:agg::spline_ctrl_impl
vertex_array_type	include/agg_conv_gpc.h	/^        typedef pod_bvector<gpc_vertex, 8>          vertex_array_type;$/;"	t	class:agg::conv_gpc
vertex_base	include/agg_basics.h	/^        vertex_base() {}$/;"	f	struct:agg::vertex_base
vertex_base	include/agg_basics.h	/^        vertex_base(T x_, T y_, unsigned cmd_) : x(x_), y(y_), cmd(cmd_) {}$/;"	f	struct:agg::vertex_base
vertex_base	include/agg_basics.h	/^    template<class T> struct vertex_base$/;"	s	namespace:agg
vertex_block_storage	include/agg_path_storage.h	/^    class vertex_block_storage$/;"	c	namespace:agg
vertex_block_storage	include/agg_path_storage.h	/^    vertex_block_storage<T,S,P>::vertex_block_storage() :$/;"	f	class:agg::vertex_block_storage
vertex_block_storage	include/agg_path_storage.h	/^    vertex_block_storage<T,S,P>::vertex_block_storage(const vertex_block_storage<T,S,P>& v) :$/;"	f	class:agg::vertex_block_storage
vertex_count	examples/svg_viewer/agg_svg_path_renderer.h	/^        unsigned vertex_count() const { return m_curved_count.count(); }$/;"	f	class:agg::svg::path_renderer
vertex_d	include/agg_basics.h	/^    typedef vertex_base<double> vertex_d; \/\/-----vertex_d$/;"	t	namespace:agg
vertex_dist	include/agg_vertex_sequence.h	/^        vertex_dist() {}$/;"	f	struct:agg::vertex_dist
vertex_dist	include/agg_vertex_sequence.h	/^        vertex_dist(double x_, double y_) :$/;"	f	struct:agg::vertex_dist
vertex_dist	include/agg_vertex_sequence.h	/^    struct vertex_dist$/;"	s	namespace:agg
vertex_dist_cmd	include/agg_vertex_sequence.h	/^        vertex_dist_cmd() {}$/;"	f	struct:agg::vertex_dist_cmd
vertex_dist_cmd	include/agg_vertex_sequence.h	/^        vertex_dist_cmd(double x_, double y_, unsigned cmd_) :$/;"	f	struct:agg::vertex_dist_cmd
vertex_dist_cmd	include/agg_vertex_sequence.h	/^    struct vertex_dist_cmd : public vertex_dist$/;"	s	namespace:agg
vertex_dist_epsilon	include/agg_math.h	/^    const double vertex_dist_epsilon = 1e-14;$/;"	m	namespace:agg
vertex_f	include/agg_basics.h	/^    typedef vertex_base<float>  vertex_f; \/\/-----vertex_f$/;"	t	namespace:agg
vertex_i	include/agg_basics.h	/^    typedef vertex_base<int>    vertex_i; \/\/-----vertex_i$/;"	t	namespace:agg
vertex_integer	include/agg_path_storage_integer.h	/^        vertex_integer() {}$/;"	f	struct:agg::vertex_integer
vertex_integer	include/agg_path_storage_integer.h	/^        vertex_integer(T x_, T y_, unsigned flag) :$/;"	f	struct:agg::vertex_integer
vertex_integer	include/agg_path_storage_integer.h	/^    template<class T, unsigned CoordShift=6> struct vertex_integer$/;"	s	namespace:agg
vertex_integer_type	include/agg_path_storage_integer.h	/^        typedef vertex_integer<T, CoordShift> vertex_integer_type;$/;"	t	class:agg::path_storage_integer
vertex_integer_type	include/agg_path_storage_integer.h	/^        typedef vertex_integer<T, CoordShift> vertex_integer_type;$/;"	t	class:agg::serialized_integer_path_adaptor
vertex_node	gpc/gpc.c	/^} vertex_node;$/;"	t	typeref:struct:v_shape	file:
vertex_sequence	include/agg_vertex_sequence.h	/^    class vertex_sequence : public pod_bvector<T, S>$/;"	c	namespace:agg
vertex_stl_storage	include/agg_path_storage.h	/^    template<class Container> class vertex_stl_storage$/;"	c	namespace:agg
vertex_storage	include/agg_trans_double_path.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::trans_double_path
vertex_storage	include/agg_trans_single_path.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::trans_single_path
vertex_storage	include/agg_vcgen_bspline.h	/^        typedef pod_bvector<point_d, 6> vertex_storage;$/;"	t	class:agg::vcgen_bspline
vertex_storage	include/agg_vcgen_contour.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::vcgen_contour
vertex_storage	include/agg_vcgen_dash.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::vcgen_dash
vertex_storage	include/agg_vcgen_smooth_poly1.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::vcgen_smooth_poly1
vertex_storage	include/agg_vcgen_stroke.h	/^        typedef vertex_sequence<vertex_dist, 6> vertex_storage;$/;"	t	class:agg::vcgen_stroke
vertex_storage	include/agg_vcgen_vertex_sequence.h	/^        typedef vertex_sequence<vertex_type, 6> vertex_storage;$/;"	t	class:agg::vcgen_vertex_sequence
vertex_storage_type	include/agg_rasterizer_outline_aa.h	/^        typedef vertex_sequence<vertex_type, 6> vertex_storage_type;$/;"	t	class:agg::rasterizer_outline_aa
vertex_type	gpc/gpc.c	/^} vertex_type;$/;"	t	typeref:enum:__anon9	file:
vertex_type	include/agg_path_storage.h	/^        typedef typename Container::value_type vertex_type;$/;"	t	class:agg::poly_container_adaptor
vertex_type	include/agg_path_storage.h	/^        typedef typename Container::value_type vertex_type;$/;"	t	class:agg::poly_container_reverse_adaptor
vertex_type	include/agg_path_storage.h	/^        typedef typename Container::value_type vertex_type;$/;"	t	class:agg::vertex_stl_storage
vertex_type	include/agg_rasterizer_outline_aa.h	/^        typedef line_aa_vertex                  vertex_type;$/;"	t	class:agg::rasterizer_outline_aa
vertex_type	include/agg_vcgen_vertex_sequence.h	/^        typedef vertex_dist_cmd                 vertex_type;$/;"	t	class:agg::vcgen_vertex_sequence
vertical	include/agg_line_aa_basics.h	/^        bool vertical;$/;"	m	struct:agg::line_parameters
vertical	include/agg_renderer_outline_aa.h	/^        bool vertical() const { return m_lp->vertical; }$/;"	f	class:agg::line_interpolator_aa_base
vertical	include/agg_renderer_outline_image.h	/^        bool vertical() const { return m_lp.vertical; }$/;"	f	class:agg::line_interpolator_image
vertices	include/agg_bezier_arc.h	/^        const double* vertices() const { return m_arc.vertices();     }$/;"	f	class:agg::bezier_arc_svg
vertices	include/agg_bezier_arc.h	/^        const double* vertices() const { return m_vertices;     }$/;"	f	class:agg::bezier_arc
vertices	include/agg_bezier_arc.h	/^        double*       vertices()       { return m_arc.vertices();     }$/;"	f	class:agg::bezier_arc_svg
vertices	include/agg_bezier_arc.h	/^        double*       vertices()       { return m_vertices;     }$/;"	f	class:agg::bezier_arc
vertices	include/agg_conv_gpc.h	/^            gpc_vertex* vertices;$/;"	m	struct:agg::conv_gpc::contour_header_type
vertices	include/agg_path_storage.h	/^              container_type& vertices()       { return m_vertices; } $/;"	f	class:agg::path_base
vertices	include/agg_path_storage.h	/^        const container_type& vertices() const { return m_vertices; } $/;"	f	class:agg::path_base
visible	include/agg_renderer_markers.h	/^        bool visible(int x, int y, int r) const$/;"	f	class:agg::renderer_markers
vline_rel	include/agg_path_storage.h	/^    inline void path_base<VC>::vline_rel(double dy)$/;"	f	class:agg::path_base
vline_to	examples/svg_viewer/agg_svg_path_renderer.cpp	/^    void path_renderer::vline_to(double y, bool rel)                   \/\/ V, v$/;"	f	class:agg::svg::path_renderer
vline_to	include/agg_path_storage.h	/^    inline void path_base<VC>::vline_to(double y)$/;"	f	class:agg::path_base
vpgen	include/agg_conv_adaptor_vpgen.h	/^        VPGen& vpgen() { return m_vpgen; }$/;"	f	class:agg::conv_adaptor_vpgen
vpgen	include/agg_conv_adaptor_vpgen.h	/^        const VPGen& vpgen() const { return m_vpgen; }$/;"	f	class:agg::conv_adaptor_vpgen
vpgen_clip_polygon	include/agg_vpgen_clip_polygon.h	/^        vpgen_clip_polygon() : $/;"	f	class:agg::vpgen_clip_polygon
vpgen_clip_polygon	include/agg_vpgen_clip_polygon.h	/^    class vpgen_clip_polygon$/;"	c	namespace:agg
vpgen_clip_polyline	include/agg_vpgen_clip_polyline.h	/^        vpgen_clip_polyline() : $/;"	f	class:agg::vpgen_clip_polyline
vpgen_clip_polyline	include/agg_vpgen_clip_polyline.h	/^    class vpgen_clip_polyline$/;"	c	namespace:agg
vpgen_segmentator	include/agg_vpgen_segmentator.h	/^        vpgen_segmentator() : m_approximation_scale(1.0) {}$/;"	f	class:agg::vpgen_segmentator
vpgen_segmentator	include/agg_vpgen_segmentator.h	/^    class vpgen_segmentator$/;"	c	namespace:agg
vstep	include/agg_dda_line.h	/^        void vstep()$/;"	f	class:agg::line_bresenham_interpolator
w0	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
w1	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
w2	include/agg_trans_perspective.h	/^        double sx, shy, w0, shx, sy, w1, tx, ty, w2;$/;"	m	struct:agg::trans_perspective
wait_mode	include/platform/agg_platform_support.h	/^        bool wait_mode() const { return m_wait_mode; }$/;"	f	class:agg::platform_support
wait_mode	include/platform/agg_platform_support.h	/^        void wait_mode(bool wait_mode) { m_wait_mode = wait_mode; }$/;"	f	class:agg::platform_support
weight	font_win32_tt/agg_font_win32_tt.h	/^        int         weight()       const { return m_weight;     }$/;"	f	class:agg::font_engine_win32_tt_base
weight	font_win32_tt/agg_font_win32_tt.h	/^        void weight(int w)            { m_weight = w;            }$/;"	f	class:agg::font_engine_win32_tt_base
weight_array	include/agg_image_filters.h	/^        const int16* weight_array() const { return &m_weight_array[0]; }$/;"	f	class:agg::image_filter_lut
whole_str	src/platform/win32/agg_platform_support.cpp	/^            whole_str$/;"	e	enum:agg::tokenizer::sep_flag	file:
width	examples/line_patterns.cpp	/^    unsigned width()  const { return m_pf.width();  }$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
width	examples/line_patterns_clip.cpp	/^    unsigned width()  const { return m_pf.width();  }$/;"	f	class:pattern_src_brightness_to_alpha_rgba8
width	examples/rasterizers2.cpp	/^        unsigned width()  const { return m_pixmap[0]; }$/;"	f	class:agg::pattern_pixmap_argb32
width	font_freetype/agg_font_freetype.cpp	/^    bool font_engine_freetype_base::width(double w)$/;"	f	class:agg::font_engine_freetype_base
width	font_freetype/agg_font_freetype.h	/^        double      width()        const { return double(m_width) \/ 64.0;     }$/;"	f	class:agg::font_engine_freetype_base
width	font_win32_tt/agg_font_win32_tt.h	/^        double      width()        const { return m_width;      }$/;"	f	class:agg::font_engine_win32_tt_base
width	font_win32_tt/agg_font_win32_tt.h	/^        void width(double w)          { m_width = unsigned(w);   }$/;"	f	class:agg::font_engine_win32_tt_base
width	include/agg_conv_contour.h	/^        double width() const { return base_type::generator().width(); }$/;"	f	struct:agg::conv_contour
width	include/agg_conv_contour.h	/^        void width(double w) { base_type::generator().width(w); }$/;"	f	struct:agg::conv_contour
width	include/agg_conv_stroke.h	/^        double width() const { return base_type::generator().width(); }$/;"	f	struct:agg::conv_stroke
width	include/agg_conv_stroke.h	/^        void width(double w) { base_type::generator().width(w); }$/;"	f	struct:agg::conv_stroke
width	include/agg_glyph_raster_bin.h	/^        double width(const CharT* str) const$/;"	f	class:agg::glyph_raster_bin
width	include/agg_gsv_text.h	/^        void width(double w) $/;"	f	class:agg::gsv_text_outline
width	include/agg_math_stroke.h	/^        double width() const { return m_width * 2.0; }$/;"	f	class:agg::math_stroke
width	include/agg_math_stroke.h	/^    template<class VC> void math_stroke<VC>::width(double w)$/;"	f	class:agg::math_stroke
width	include/agg_pixfmt_amask_adaptor.h	/^        unsigned width()  const { return m_pixf->width();  }$/;"	f	class:agg::pixfmt_amask_adaptor
width	include/agg_pixfmt_gray.h	/^        AGG_INLINE unsigned width()  const { return m_rbuf->width();  }$/;"	f	class:agg::pixfmt_alpha_blend_gray
width	include/agg_pixfmt_rgb.h	/^        AGG_INLINE unsigned width()  const { return m_rbuf->width();  }$/;"	f	class:agg::pixfmt_alpha_blend_rgb
width	include/agg_pixfmt_rgb_packed.h	/^        AGG_INLINE unsigned width()  const { return m_rbuf->width();  }$/;"	f	class:agg::pixfmt_alpha_blend_rgb_packed
width	include/agg_pixfmt_rgba.h	/^        AGG_INLINE unsigned width()  const { return m_rbuf->width();  }$/;"	f	class:agg::pixfmt_alpha_blend_rgba
width	include/agg_pixfmt_rgba.h	/^        AGG_INLINE unsigned width()  const { return m_rbuf->width();  }$/;"	f	class:agg::pixfmt_custom_blend_rgba
width	include/agg_pixfmt_transposer.h	/^        AGG_INLINE unsigned width()  const { return m_pixf->height();  }$/;"	f	class:agg::pixfmt_transposer
width	include/agg_renderer_base.h	/^        unsigned width()  const { return m_ren->width();  }$/;"	f	class:agg::renderer_base
width	include/agg_renderer_mclip.h	/^        unsigned width()  const { return m_ren.width();  }$/;"	f	class:agg::renderer_mclip
width	include/agg_renderer_outline_aa.h	/^        int  width() const { return m_width; }$/;"	f	class:agg::line_interpolator_aa_base
width	include/agg_renderer_outline_image.h	/^        double width()      const { return m_height; }$/;"	f	class:agg::line_image_pattern
width	include/agg_renderer_outline_image.h	/^        double width()  const { return m_source.width(); }$/;"	f	class:agg::line_image_scale
width	include/agg_renderer_outline_image.h	/^        double width() const { return double(subpixel_width()) \/ line_subpixel_scale; }$/;"	f	class:agg::renderer_outline_image
width	include/agg_renderer_outline_image.h	/^        int  width() const { return m_width; }$/;"	f	class:agg::line_interpolator_image
width	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned width()  const { return m_width;  }$/;"	f	class:agg::row_accessor
width	include/agg_rendering_buffer.h	/^        AGG_INLINE unsigned width()  const { return m_width;  }$/;"	f	class:agg::row_ptr_cache
width	include/agg_rendering_buffer_dynarow.h	/^        unsigned width()      const { return m_width;  }$/;"	f	class:agg::rendering_buffer_dynarow
width	include/agg_vcgen_contour.h	/^        double width() const { return m_width; }$/;"	f	class:agg::vcgen_contour
width	include/agg_vcgen_contour.h	/^        void width(double w) { m_stroker.width(m_width = w); }$/;"	f	class:agg::vcgen_contour
width	include/agg_vcgen_stroke.h	/^        double width() const { return m_stroker.width(); }$/;"	f	class:agg::vcgen_stroke
width	include/agg_vcgen_stroke.h	/^        void width(double w) { m_stroker.width(w); }$/;"	f	class:agg::vcgen_stroke
width	include/platform/agg_platform_support.h	/^        double   width()  const { return m_rbuf_window.width(); }$/;"	f	class:agg::platform_support
width	src/agg_line_profile_aa.cpp	/^    void line_profile_aa::width(double w)$/;"	f	class:agg::line_profile_aa
width	src/platform/mac/agg_mac_pmap.cpp	/^    unsigned pixel_map::width() const$/;"	f	class:agg::pixel_map
width	src/platform/win32/agg_win32_bmp.cpp	/^    unsigned pixel_map::width() const$/;"	f	class:agg::pixel_map
window_flag_e	include/platform/agg_platform_support.h	/^    enum window_flag_e$/;"	g	namespace:agg
window_flags	include/platform/agg_platform_support.h	/^        unsigned window_flags() const { return m_window_flags; }$/;"	f	class:agg::platform_support
window_hw_buffer	include/platform/agg_platform_support.h	/^        window_hw_buffer         = 2,$/;"	e	enum:agg::window_flag_e
window_keep_aspect_ratio	include/platform/agg_platform_support.h	/^        window_keep_aspect_ratio = 4,$/;"	e	enum:agg::window_flag_e
window_proc	src/platform/win32/agg_platform_support.cpp	/^    LRESULT CALLBACK window_proc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	namespace:agg
window_process_all_keys	include/platform/agg_platform_support.h	/^        window_process_all_keys  = 8$/;"	e	enum:agg::window_flag_e
window_resize	include/platform/agg_platform_support.h	/^        window_resize            = 1,$/;"	e	enum:agg::window_flag_e
world_viewport	include/agg_trans_viewport.h	/^        void world_viewport(double x1, double y1, double x2, double y2)$/;"	f	class:agg::trans_viewport
world_viewport	include/agg_trans_viewport.h	/^        void world_viewport(double* x1, double* y1, double* x2, double* y2) const$/;"	f	class:agg::trans_viewport
world_viewport_actual	include/agg_trans_viewport.h	/^        void world_viewport_actual(double* x1, double* y1, $/;"	f	class:agg::trans_viewport
wrap_mode_reflect	include/agg_image_accessors.h	/^        wrap_mode_reflect() {}$/;"	f	class:agg::wrap_mode_reflect
wrap_mode_reflect	include/agg_image_accessors.h	/^        wrap_mode_reflect(unsigned size) : $/;"	f	class:agg::wrap_mode_reflect
wrap_mode_reflect	include/agg_image_accessors.h	/^    class wrap_mode_reflect$/;"	c	namespace:agg
wrap_mode_reflect_auto_pow2	include/agg_image_accessors.h	/^        wrap_mode_reflect_auto_pow2() {}$/;"	f	class:agg::wrap_mode_reflect_auto_pow2
wrap_mode_reflect_auto_pow2	include/agg_image_accessors.h	/^        wrap_mode_reflect_auto_pow2(unsigned size) :$/;"	f	class:agg::wrap_mode_reflect_auto_pow2
wrap_mode_reflect_auto_pow2	include/agg_image_accessors.h	/^    class wrap_mode_reflect_auto_pow2$/;"	c	namespace:agg
wrap_mode_reflect_pow2	include/agg_image_accessors.h	/^        wrap_mode_reflect_pow2() {}$/;"	f	class:agg::wrap_mode_reflect_pow2
wrap_mode_reflect_pow2	include/agg_image_accessors.h	/^        wrap_mode_reflect_pow2(unsigned size) : m_value(0)$/;"	f	class:agg::wrap_mode_reflect_pow2
wrap_mode_reflect_pow2	include/agg_image_accessors.h	/^    class wrap_mode_reflect_pow2$/;"	c	namespace:agg
wrap_mode_repeat	include/agg_image_accessors.h	/^        wrap_mode_repeat() {}$/;"	f	class:agg::wrap_mode_repeat
wrap_mode_repeat	include/agg_image_accessors.h	/^        wrap_mode_repeat(unsigned size) : $/;"	f	class:agg::wrap_mode_repeat
wrap_mode_repeat	include/agg_image_accessors.h	/^    class wrap_mode_repeat$/;"	c	namespace:agg
wrap_mode_repeat_auto_pow2	include/agg_image_accessors.h	/^        wrap_mode_repeat_auto_pow2() {}$/;"	f	class:agg::wrap_mode_repeat_auto_pow2
wrap_mode_repeat_auto_pow2	include/agg_image_accessors.h	/^        wrap_mode_repeat_auto_pow2(unsigned size) :$/;"	f	class:agg::wrap_mode_repeat_auto_pow2
wrap_mode_repeat_auto_pow2	include/agg_image_accessors.h	/^    class wrap_mode_repeat_auto_pow2$/;"	c	namespace:agg
wrap_mode_repeat_pow2	include/agg_image_accessors.h	/^        wrap_mode_repeat_pow2() {}$/;"	f	class:agg::wrap_mode_repeat_pow2
wrap_mode_repeat_pow2	include/agg_image_accessors.h	/^        wrap_mode_repeat_pow2(unsigned size) : m_value(0)$/;"	f	class:agg::wrap_mode_repeat_pow2
wrap_mode_repeat_pow2	include/agg_image_accessors.h	/^    class wrap_mode_repeat_pow2$/;"	c	namespace:agg
write_gamma_bin	examples/gamma_ctrl.cpp	/^void write_gamma_bin(const char* fname)$/;"	f
write_gamma_txt	examples/gamma_ctrl.cpp	/^void write_gamma_txt(const char* fname)$/;"	f
write_glyph_to	font_freetype/agg_font_freetype.cpp	/^    void font_engine_freetype_base::write_glyph_to(int8u* data) const$/;"	f	class:agg::font_engine_freetype_base
write_glyph_to	font_win32_tt/agg_font_win32_tt.cpp	/^    void font_engine_win32_tt_base::write_glyph_to(int8u* data) const$/;"	f	class:agg::font_engine_win32_tt_base
write_int32	include/agg_scanline_storage_aa.h	/^        static void write_int32(int8u* dst, int32 val)$/;"	f	class:agg::scanline_storage_aa
write_int32	include/agg_scanline_storage_bin.h	/^        static void write_int32(int8u* dst, int32 val)$/;"	f	class:agg::scanline_storage_bin
x	examples/bezier_div.cpp	/^        double x, y, dist, mu;$/;"	m	struct:the_application::curve_point	file:
x	examples/circles.cpp	/^    double     x;$/;"	m	struct:scatter_point	file:
x	examples/gouraud_mesh.cpp	/^        double x,y;$/;"	m	struct:agg::mesh_point	file:
x	examples/graph_test.cpp	/^        double x, y;$/;"	m	struct:graph::node	file:
x	examples/mol_view.cpp	/^    double   x;$/;"	m	struct:atom_type	file:
x	gpc/gpc.c	/^  double              x;            \/* X coordinate component            *\/$/;"	m	struct:v_shape	file:
x	gpc/gpc.h	/^  double              x;            \/* Vertex x component                *\/$/;"	m	struct:__anon5
x	include/agg_basics.h	/^        T x,y;$/;"	m	struct:agg::point_base
x	include/agg_basics.h	/^        T x,y;$/;"	m	struct:agg::vertex_base
x	include/agg_path_storage_integer.h	/^        T x,y;$/;"	m	struct:agg::vertex_integer
x	include/agg_rasterizer_compound_aa.h	/^            int x, area, cover; $/;"	m	struct:agg::rasterizer_compound_aa::cell_info
x	include/agg_rasterizer_compound_aa.h	/^        int   x;$/;"	m	struct:agg::cell_style_aa
x	include/agg_rasterizer_outline_aa.h	/^        int x;$/;"	m	struct:agg::line_aa_vertex
x	include/agg_rasterizer_scanline_aa.h	/^        int x;$/;"	m	struct:agg::cell_aa
x	include/agg_renderer_raster_text.h	/^                int x;$/;"	m	struct:agg::renderer_raster_htext::scanline_single_span::const_span
x	include/agg_scanline_bin.h	/^            coord_type x;$/;"	m	struct:agg::scanline32_bin::span
x	include/agg_scanline_bin.h	/^            int16 x;$/;"	m	struct:agg::scanline_bin::span
x	include/agg_scanline_p.h	/^            coord_type        x;$/;"	m	struct:agg::scanline_p8::span
x	include/agg_scanline_p.h	/^            coord_type x;$/;"	m	struct:agg::scanline32_p8::span
x	include/agg_scanline_storage_aa.h	/^                    int32    x;$/;"	m	struct:agg::scanline_storage_aa::embedded_scanline::const_iterator::span
x	include/agg_scanline_storage_aa.h	/^                    int32    x;$/;"	m	struct:agg::serialized_scanlines_adaptor_aa::embedded_scanline::const_iterator::span
x	include/agg_scanline_storage_aa.h	/^            int32 x;$/;"	m	struct:agg::scanline_storage_aa::span_data
x	include/agg_scanline_storage_bin.h	/^                    int32 x;$/;"	m	struct:agg::serialized_scanlines_adaptor_bin::embedded_scanline::const_iterator::span
x	include/agg_scanline_storage_bin.h	/^            int32 x;$/;"	m	struct:agg::scanline_storage_bin::span_data
x	include/agg_scanline_u.h	/^            coord_type  x;$/;"	m	struct:agg::scanline32_u8::span
x	include/agg_scanline_u.h	/^            coord_type  x;$/;"	m	struct:agg::scanline_u8::span
x	include/agg_span_gouraud.h	/^            double x;$/;"	m	struct:agg::span_gouraud::coord_type
x	include/agg_trans_bilinear.h	/^            double x;$/;"	m	class:agg::trans_bilinear::iterator_x
x	include/agg_trans_perspective.h	/^            double x;$/;"	m	class:agg::trans_perspective::iterator_x
x	include/agg_vcgen_markers_term.h	/^            double x, y;$/;"	m	struct:agg::vcgen_markers_term::coord_type
x	include/agg_vertex_sequence.h	/^        double   x;$/;"	m	struct:agg::vertex_dist
x	include/ctrl/agg_spline_ctrl.h	/^        double x(unsigned idx) const { return m_xp[idx]; }$/;"	f	class:agg::spline_ctrl_impl
x	include/ctrl/agg_spline_ctrl.h	/^        void   x(unsigned idx, double x) { m_xp[idx] = x; }$/;"	f	class:agg::spline_ctrl_impl
x1	examples/graph_test.cpp	/^    double x1, y1, x2, y2;$/;"	m	struct:line	file:
x1	examples/mol_view.cpp	/^    double   x1;$/;"	m	struct:bond_type	file:
x1	include/agg_basics.h	/^        T x1, y1, x2, y2;$/;"	m	struct:agg::rect_base
x1	include/agg_basics.h	/^        int x1, x2;$/;"	m	struct:agg::const_row_info
x1	include/agg_basics.h	/^        int x1, x2;$/;"	m	struct:agg::row_info
x1	include/agg_conv_clip_polygon.h	/^        double x1() const { return base_type::vpgen().x1(); }$/;"	f	struct:agg::conv_clip_polygon
x1	include/agg_conv_clip_polyline.h	/^        double x1() const { return base_type::vpgen().x1(); }$/;"	f	struct:agg::conv_clip_polyline
x1	include/agg_dda_line.h	/^        int x1() const { return m_x1_lr; }$/;"	f	class:agg::line_bresenham_interpolator
x1	include/agg_glyph_raster_bin.h	/^            int x1,y1,x2,y2;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
x1	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
x1	include/agg_rasterizer_outline_aa.h	/^            int x1, y1, x2, y2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
x1	include/agg_vpgen_clip_polygon.h	/^        double x1() const { return m_clip_box.x1; }$/;"	f	class:agg::vpgen_clip_polygon
x1	include/agg_vpgen_clip_polyline.h	/^        double x1() const { return m_clip_box.x1; }$/;"	f	class:agg::vpgen_clip_polyline
x1	include/ctrl/agg_bezier_ctrl.h	/^        double x1() const { return m_poly.xn(0); }$/;"	f	class:agg::bezier_ctrl_impl
x1	include/ctrl/agg_bezier_ctrl.h	/^        double x1() const { return m_poly.xn(0); }$/;"	f	class:agg::curve3_ctrl_impl
x1	include/ctrl/agg_bezier_ctrl.h	/^        void x1(double x) { m_poly.xn(0) = x; }$/;"	f	class:agg::bezier_ctrl_impl
x1	include/ctrl/agg_bezier_ctrl.h	/^        void x1(double x) { m_poly.xn(0) = x; }$/;"	f	class:agg::curve3_ctrl_impl
x2	examples/graph_test.cpp	/^    double x1, y1, x2, y2;$/;"	m	struct:line	file:
x2	examples/mol_view.cpp	/^    double   x2;$/;"	m	struct:bond_type	file:
x2	include/agg_basics.h	/^        T x1, y1, x2, y2;$/;"	m	struct:agg::rect_base
x2	include/agg_basics.h	/^        int x1, x2;$/;"	m	struct:agg::const_row_info
x2	include/agg_basics.h	/^        int x1, x2;$/;"	m	struct:agg::row_info
x2	include/agg_conv_clip_polygon.h	/^        double x2() const { return base_type::vpgen().x2(); }$/;"	f	struct:agg::conv_clip_polygon
x2	include/agg_conv_clip_polyline.h	/^        double x2() const { return base_type::vpgen().x2(); }$/;"	f	struct:agg::conv_clip_polyline
x2	include/agg_dda_line.h	/^        int x2() const { return line_lr(m_interpolator.y()); }$/;"	f	class:agg::line_bresenham_interpolator
x2	include/agg_glyph_raster_bin.h	/^            int x1,y1,x2,y2;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
x2	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
x2	include/agg_rasterizer_outline_aa.h	/^            int x1, y1, x2, y2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
x2	include/agg_vpgen_clip_polygon.h	/^        double x2() const { return m_clip_box.x2; }$/;"	f	class:agg::vpgen_clip_polygon
x2	include/agg_vpgen_clip_polyline.h	/^        double x2() const { return m_clip_box.x2; }$/;"	f	class:agg::vpgen_clip_polyline
x2	include/ctrl/agg_bezier_ctrl.h	/^        double x2() const { return m_poly.xn(1); }$/;"	f	class:agg::bezier_ctrl_impl
x2	include/ctrl/agg_bezier_ctrl.h	/^        double x2() const { return m_poly.xn(1); }$/;"	f	class:agg::curve3_ctrl_impl
x2	include/ctrl/agg_bezier_ctrl.h	/^        void x2(double x) { m_poly.xn(1) = x; }$/;"	f	class:agg::bezier_ctrl_impl
x2	include/ctrl/agg_bezier_ctrl.h	/^        void x2(double x) { m_poly.xn(1) = x; }$/;"	f	class:agg::curve3_ctrl_impl
x2_hr	include/agg_dda_line.h	/^        int x2_hr() const { return m_interpolator.y(); }$/;"	f	class:agg::line_bresenham_interpolator
x3	include/ctrl/agg_bezier_ctrl.h	/^        double x3() const { return m_poly.xn(2); }$/;"	f	class:agg::bezier_ctrl_impl
x3	include/ctrl/agg_bezier_ctrl.h	/^        double x3() const { return m_poly.xn(2); }$/;"	f	class:agg::curve3_ctrl_impl
x3	include/ctrl/agg_bezier_ctrl.h	/^        void x3(double x) { m_poly.xn(2) = x; }$/;"	f	class:agg::bezier_ctrl_impl
x3	include/ctrl/agg_bezier_ctrl.h	/^        void x3(double x) { m_poly.xn(2) = x; }$/;"	f	class:agg::curve3_ctrl_impl
x4	include/ctrl/agg_bezier_ctrl.h	/^        double x4() const { return m_poly.xn(3); }$/;"	f	class:agg::bezier_ctrl_impl
x4	include/ctrl/agg_bezier_ctrl.h	/^        void x4(double x) { m_poly.xn(3) = x; }$/;"	f	class:agg::bezier_ctrl_impl
xb	gpc/gpc.c	/^  double              xb;           \/* Scanbeam bottom x coordinate      *\/$/;"	m	struct:edge_shape	file:
xb	gpc/gpc.c	/^  double              xb;           \/* Scanbeam bottom x coordinate      *\/$/;"	m	struct:st_shape	file:
xb1	include/agg_rasterizer_outline_aa.h	/^            int xb1, yb1, xb2, yb2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
xb2	include/agg_rasterizer_outline_aa.h	/^            int xb1, yb1, xb2, yb2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
xc	include/agg_trans_warp_magnifier.h	/^        double xc()            const { return m_xc; }$/;"	f	class:agg::trans_warp_magnifier
xevent_mask	src/platform/X11/agg_platform_support.cpp	/^        xevent_mask =$/;"	e	enum:agg::xevent_mask_e	file:
xevent_mask_e	src/platform/X11/agg_platform_support.cpp	/^    enum xevent_mask_e$/;"	g	namespace:agg	file:
xi	include/agg_rasterizer_sl_clip.h	/^        static int xi(double v) { return iround(v * poly_subpixel_scale * 3); }$/;"	f	struct:agg::ras_conv_dbl_3x
xi	include/agg_rasterizer_sl_clip.h	/^        static int xi(double v) { return iround(v * poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_dbl
xi	include/agg_rasterizer_sl_clip.h	/^        static int xi(int v) { return v * 3; }$/;"	f	struct:agg::ras_conv_int_3x
xi	include/agg_rasterizer_sl_clip.h	/^        static int xi(int v) { return v; }$/;"	f	struct:agg::ras_conv_int
xi	include/agg_rasterizer_sl_clip.h	/^        static int xi(int v) { return v; }$/;"	f	struct:agg::ras_conv_int_sat
xing	include/agg_renderer_markers.h	/^        void xing(int x, int y, int r)$/;"	f	class:agg::renderer_markers
xmax	gpc/gpc.c	/^  double             xmax;          \/* Maximum x coordinate              *\/$/;"	m	struct:bbox_shape	file:
xmax	include/agg_renderer_base.h	/^        int           xmax()     const { return m_clip_box.x2; }$/;"	f	class:agg::renderer_base
xmax	include/agg_renderer_mclip.h	/^        int           xmax()     const { return m_ren.xmax(); }$/;"	f	class:agg::renderer_mclip
xmin	gpc/gpc.c	/^  double             xmin;          \/* Minimum x coordinate              *\/$/;"	m	struct:bbox_shape	file:
xmin	include/agg_renderer_base.h	/^        int           xmin()     const { return m_clip_box.x1; }$/;"	f	class:agg::renderer_base
xmin	include/agg_renderer_mclip.h	/^        int           xmin()     const { return m_ren.xmin(); }$/;"	f	class:agg::renderer_mclip
xn	examples/interactive_polygon.h	/^        double xn(unsigned n) const { return m_polygon[n * 2];     }$/;"	f	class:agg::interactive_polygon
xn	examples/interactive_polygon.h	/^        double& xn(unsigned n) { return m_polygon[n * 2];     }$/;"	f	class:agg::interactive_polygon
xn	include/ctrl/agg_polygon_ctrl.h	/^        double xn(unsigned n) const { return m_polygon[n * 2];     }$/;"	f	class:agg::polygon_ctrl_impl
xn	include/ctrl/agg_polygon_ctrl.h	/^        double& xn(unsigned n) { return m_polygon[n * 2];     }$/;"	f	class:agg::polygon_ctrl_impl
xt	gpc/gpc.c	/^  double              xt;           \/* Scanbeam top x coordinate         *\/$/;"	m	struct:edge_shape	file:
xt	gpc/gpc.c	/^  double              xt;           \/* Scanbeam top x coordinate         *\/$/;"	m	struct:st_shape	file:
y	examples/bezier_div.cpp	/^        double x, y, dist, mu;$/;"	m	struct:the_application::curve_point	file:
y	examples/circles.cpp	/^    double     y;$/;"	m	struct:scatter_point	file:
y	examples/gouraud_mesh.cpp	/^        double x,y;$/;"	m	struct:agg::mesh_point	file:
y	examples/graph_test.cpp	/^        double x, y;$/;"	m	struct:graph::node	file:
y	examples/mol_view.cpp	/^    double   y;$/;"	m	struct:atom_type	file:
y	gpc/gpc.c	/^  double              y;            \/* Scanbeam node y value             *\/$/;"	m	struct:sbt_t_shape	file:
y	gpc/gpc.c	/^  double              y;            \/* Y coordinate at local minimum     *\/$/;"	m	struct:lmt_shape	file:
y	gpc/gpc.c	/^  double              y;            \/* Y coordinate component            *\/$/;"	m	struct:v_shape	file:
y	gpc/gpc.h	/^  double              y;            \/* vertex y component                *\/$/;"	m	struct:__anon5
y	include/agg_basics.h	/^        T x,y;$/;"	m	struct:agg::point_base
y	include/agg_basics.h	/^        T x,y;$/;"	m	struct:agg::vertex_base
y	include/agg_dda_line.h	/^        int y()  const { return m_y + (m_dy >> (FractionShift-YShift)); }$/;"	f	class:agg::dda_line_interpolator
y	include/agg_dda_line.h	/^        int y() const { return m_y; }$/;"	f	class:agg::dda2_line_interpolator
y	include/agg_path_storage_integer.h	/^        T x,y;$/;"	m	struct:agg::vertex_integer
y	include/agg_rasterizer_compound_aa.h	/^        int   y;$/;"	m	struct:agg::cell_style_aa
y	include/agg_rasterizer_outline_aa.h	/^        int y;$/;"	m	struct:agg::line_aa_vertex
y	include/agg_rasterizer_scanline_aa.h	/^        int y;$/;"	m	struct:agg::cell_aa
y	include/agg_renderer_raster_text.h	/^            int      y()           const { return m_y; }$/;"	f	class:agg::renderer_raster_htext::scanline_single_span
y	include/agg_scanline_bin.h	/^        int            y()         const { return m_y; }$/;"	f	class:agg::scanline32_bin
y	include/agg_scanline_bin.h	/^        int            y()         const { return m_y; }$/;"	f	class:agg::scanline_bin
y	include/agg_scanline_p.h	/^        int            y()         const { return m_y; }$/;"	f	class:agg::scanline32_p8
y	include/agg_scanline_p.h	/^        int            y()         const { return m_y; }$/;"	f	class:agg::scanline_p8
y	include/agg_scanline_storage_aa.h	/^            int      y()           const { return m_scanline.y;          }$/;"	f	class:agg::scanline_storage_aa::embedded_scanline
y	include/agg_scanline_storage_aa.h	/^            int      y()           const { return m_y;          }$/;"	f	class:agg::serialized_scanlines_adaptor_aa::embedded_scanline
y	include/agg_scanline_storage_aa.h	/^            int      y;$/;"	m	struct:agg::scanline_storage_aa::scanline_data
y	include/agg_scanline_storage_bin.h	/^            int      y()           const { return m_scanline.y;          }$/;"	f	class:agg::scanline_storage_bin::embedded_scanline
y	include/agg_scanline_storage_bin.h	/^            int      y()           const { return m_y;          }$/;"	f	class:agg::serialized_scanlines_adaptor_bin::embedded_scanline
y	include/agg_scanline_storage_bin.h	/^            int      y;$/;"	m	struct:agg::scanline_storage_bin::scanline_data
y	include/agg_scanline_u.h	/^        int      y()           const { return m_y; }$/;"	f	class:agg::scanline32_u8
y	include/agg_scanline_u.h	/^        int      y()           const { return m_y; }$/;"	f	class:agg::scanline_u8
y	include/agg_span_gouraud.h	/^            double y;$/;"	m	struct:agg::span_gouraud::coord_type
y	include/agg_trans_bilinear.h	/^            double y;$/;"	m	class:agg::trans_bilinear::iterator_x
y	include/agg_trans_perspective.h	/^            double y;$/;"	m	class:agg::trans_perspective::iterator_x
y	include/agg_vcgen_markers_term.h	/^            double x, y;$/;"	m	struct:agg::vcgen_markers_term::coord_type
y	include/agg_vertex_sequence.h	/^        double   y;$/;"	m	struct:agg::vertex_dist
y	include/ctrl/agg_gamma_ctrl.h	/^        double y(double x) const { return m_gamma_spline.y(x); }$/;"	f	class:agg::gamma_ctrl_impl
y	include/ctrl/agg_spline_ctrl.h	/^        double y(unsigned idx) const { return m_yp[idx]; }$/;"	f	class:agg::spline_ctrl_impl
y	include/ctrl/agg_spline_ctrl.h	/^        void   y(unsigned idx, double y) { m_yp[idx] = y; }$/;"	f	class:agg::spline_ctrl_impl
y	src/ctrl/agg_gamma_spline.cpp	/^    double gamma_spline::y(double x) const $/;"	f	class:agg::gamma_spline
y1	examples/graph_test.cpp	/^    double x1, y1, x2, y2;$/;"	m	struct:line	file:
y1	examples/mol_view.cpp	/^    double   y1;$/;"	m	struct:bond_type	file:
y1	include/agg_basics.h	/^        T x1, y1, x2, y2;$/;"	m	struct:agg::rect_base
y1	include/agg_conv_clip_polygon.h	/^        double y1() const { return base_type::vpgen().y1(); }$/;"	f	struct:agg::conv_clip_polygon
y1	include/agg_conv_clip_polyline.h	/^        double y1() const { return base_type::vpgen().y1(); }$/;"	f	struct:agg::conv_clip_polyline
y1	include/agg_dda_line.h	/^        int y1() const { return m_y1_lr; }$/;"	f	class:agg::line_bresenham_interpolator
y1	include/agg_glyph_raster_bin.h	/^            int x1,y1,x2,y2;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
y1	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
y1	include/agg_rasterizer_outline_aa.h	/^            int x1, y1, x2, y2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
y1	include/agg_vpgen_clip_polygon.h	/^        double y1() const { return m_clip_box.y1; }$/;"	f	class:agg::vpgen_clip_polygon
y1	include/agg_vpgen_clip_polyline.h	/^        double y1() const { return m_clip_box.y1; }$/;"	f	class:agg::vpgen_clip_polyline
y1	include/ctrl/agg_bezier_ctrl.h	/^        double y1() const { return m_poly.yn(0); }$/;"	f	class:agg::bezier_ctrl_impl
y1	include/ctrl/agg_bezier_ctrl.h	/^        double y1() const { return m_poly.yn(0); }$/;"	f	class:agg::curve3_ctrl_impl
y1	include/ctrl/agg_bezier_ctrl.h	/^        void y1(double y) { m_poly.yn(0) = y; }$/;"	f	class:agg::bezier_ctrl_impl
y1	include/ctrl/agg_bezier_ctrl.h	/^        void y1(double y) { m_poly.yn(0) = y; }$/;"	f	class:agg::curve3_ctrl_impl
y2	examples/graph_test.cpp	/^    double x1, y1, x2, y2;$/;"	m	struct:line	file:
y2	examples/mol_view.cpp	/^    double   y2;$/;"	m	struct:bond_type	file:
y2	include/agg_basics.h	/^        T x1, y1, x2, y2;$/;"	m	struct:agg::rect_base
y2	include/agg_conv_clip_polygon.h	/^        double y2() const { return base_type::vpgen().y2(); }$/;"	f	struct:agg::conv_clip_polygon
y2	include/agg_conv_clip_polyline.h	/^        double y2() const { return base_type::vpgen().y2(); }$/;"	f	struct:agg::conv_clip_polyline
y2	include/agg_dda_line.h	/^        int y2() const { return line_lr(m_interpolator.y()); }$/;"	f	class:agg::line_bresenham_interpolator
y2	include/agg_glyph_raster_bin.h	/^            int x1,y1,x2,y2;$/;"	m	struct:agg::glyph_raster_bin::glyph_rect
y2	include/agg_line_aa_basics.h	/^        int x1, y1, x2, y2, dx, dy, sx, sy;$/;"	m	struct:agg::line_parameters
y2	include/agg_rasterizer_outline_aa.h	/^            int x1, y1, x2, y2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
y2	include/agg_vpgen_clip_polygon.h	/^        double y2() const { return m_clip_box.y2; }$/;"	f	class:agg::vpgen_clip_polygon
y2	include/agg_vpgen_clip_polyline.h	/^        double y2() const { return m_clip_box.y2; }$/;"	f	class:agg::vpgen_clip_polyline
y2	include/ctrl/agg_bezier_ctrl.h	/^        double y2() const { return m_poly.yn(1); }$/;"	f	class:agg::bezier_ctrl_impl
y2	include/ctrl/agg_bezier_ctrl.h	/^        double y2() const { return m_poly.yn(1); }$/;"	f	class:agg::curve3_ctrl_impl
y2	include/ctrl/agg_bezier_ctrl.h	/^        void y2(double y) { m_poly.yn(1) = y; }$/;"	f	class:agg::bezier_ctrl_impl
y2	include/ctrl/agg_bezier_ctrl.h	/^        void y2(double y) { m_poly.yn(1) = y; }$/;"	f	class:agg::curve3_ctrl_impl
y2_hr	include/agg_dda_line.h	/^        int y2_hr() const { return m_interpolator.y(); }$/;"	f	class:agg::line_bresenham_interpolator
y3	include/ctrl/agg_bezier_ctrl.h	/^        double y3() const { return m_poly.yn(2); }$/;"	f	class:agg::bezier_ctrl_impl
y3	include/ctrl/agg_bezier_ctrl.h	/^        double y3() const { return m_poly.yn(2); }$/;"	f	class:agg::curve3_ctrl_impl
y3	include/ctrl/agg_bezier_ctrl.h	/^        void y3(double y) { m_poly.yn(2) = y; }$/;"	f	class:agg::bezier_ctrl_impl
y3	include/ctrl/agg_bezier_ctrl.h	/^        void y3(double y) { m_poly.yn(2) = y; }$/;"	f	class:agg::curve3_ctrl_impl
y4	include/ctrl/agg_bezier_ctrl.h	/^        double y4() const { return m_poly.yn(3); }$/;"	f	class:agg::bezier_ctrl_impl
y4	include/ctrl/agg_bezier_ctrl.h	/^        void y4(double y) { m_poly.yn(3) = y; }$/;"	f	class:agg::bezier_ctrl_impl
yb1	include/agg_rasterizer_outline_aa.h	/^            int xb1, yb1, xb2, yb2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
yb2	include/agg_rasterizer_outline_aa.h	/^            int xb1, yb1, xb2, yb2;$/;"	m	struct:agg::rasterizer_outline_aa::draw_vars
yc	include/agg_trans_warp_magnifier.h	/^        double yc()            const { return m_yc; }$/;"	f	class:agg::trans_warp_magnifier
yi	include/agg_rasterizer_sl_clip.h	/^        static int yi(double v) { return iround(v * poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_dbl
yi	include/agg_rasterizer_sl_clip.h	/^        static int yi(double v) { return iround(v * poly_subpixel_scale); }$/;"	f	struct:agg::ras_conv_dbl_3x
yi	include/agg_rasterizer_sl_clip.h	/^        static int yi(int v) { return v; }$/;"	f	struct:agg::ras_conv_int
yi	include/agg_rasterizer_sl_clip.h	/^        static int yi(int v) { return v; }$/;"	f	struct:agg::ras_conv_int_3x
yi	include/agg_rasterizer_sl_clip.h	/^        static int yi(int v) { return v; }$/;"	f	struct:agg::ras_conv_int_sat
ymax	gpc/gpc.c	/^  double             ymax;          \/* Maximum y coordinate              *\/$/;"	m	struct:bbox_shape	file:
ymax	include/agg_renderer_base.h	/^        int           ymax()     const { return m_clip_box.y2; }$/;"	f	class:agg::renderer_base
ymax	include/agg_renderer_mclip.h	/^        int           ymax()     const { return m_ren.ymax(); }$/;"	f	class:agg::renderer_mclip
ymin	gpc/gpc.c	/^  double             ymin;          \/* Minimum y coordinate              *\/$/;"	m	struct:bbox_shape	file:
ymin	include/agg_renderer_base.h	/^        int           ymin()     const { return m_clip_box.y1; }$/;"	f	class:agg::renderer_base
ymin	include/agg_renderer_mclip.h	/^        int           ymin()     const { return m_ren.ymin(); }$/;"	f	class:agg::renderer_mclip
yn	examples/interactive_polygon.h	/^        double yn(unsigned n) const { return m_polygon[n * 2 + 1]; }$/;"	f	class:agg::interactive_polygon
yn	examples/interactive_polygon.h	/^        double& yn(unsigned n) { return m_polygon[n * 2 + 1]; }$/;"	f	class:agg::interactive_polygon
yn	include/ctrl/agg_polygon_ctrl.h	/^        double yn(unsigned n) const { return m_polygon[n * 2 + 1]; }$/;"	f	class:agg::polygon_ctrl_impl
yn	include/ctrl/agg_polygon_ctrl.h	/^        double& yn(unsigned n) { return m_polygon[n * 2 + 1]; }$/;"	f	class:agg::polygon_ctrl_impl
z	examples/circles.cpp	/^    double     z;$/;"	m	struct:scatter_point	file:
zero	include/agg_array.h	/^        void zero()$/;"	f	class:agg::pod_vector
~AGGView	src/platform/BeOS/agg_platform_support.cpp	/^AGGView::~AGGView()$/;"	f	class:AGGView
~block_allocator	include/agg_array.h	/^        ~block_allocator()$/;"	f	class:agg::block_allocator
~compound_shape	examples/flash_rasterizer.cpp	/^        ~compound_shape() $/;"	f	class:agg::compound_shape
~compound_shape	examples/flash_rasterizer2.cpp	/^        ~compound_shape() $/;"	f	class:agg::compound_shape
~conv_gpc	include/agg_conv_gpc.h	/^        ~conv_gpc()$/;"	f	class:agg::conv_gpc
~ctrl	include/ctrl/agg_ctrl.h	/^        virtual ~ctrl() {}$/;"	f	class:agg::ctrl
~exception	examples/svg_viewer/agg_svg_exception.h	/^        ~exception()$/;"	f	class:agg::svg::exception
~font_cache_pool	include/agg_font_cache_manager.h	/^        ~font_cache_pool()$/;"	f	class:agg::font_cache_pool
~font_engine_freetype_base	font_freetype/agg_font_freetype.cpp	/^    font_engine_freetype_base::~font_engine_freetype_base()$/;"	f	class:agg::font_engine_freetype_base
~font_engine_win32_tt_base	font_win32_tt/agg_font_win32_tt.cpp	/^    font_engine_win32_tt_base::~font_engine_win32_tt_base()$/;"	f	class:agg::font_engine_win32_tt_base
~gamma_lut	include/agg_gamma_lut.h	/^        ~gamma_lut()$/;"	f	class:agg::gamma_lut
~graph	examples/graph_test.cpp	/^	~graph()$/;"	f	class:graph
~molecule	examples/mol_view.cpp	/^molecule::~molecule()$/;"	f	class:molecule
~parser	examples/svg_viewer/agg_svg_parser.cpp	/^    parser::~parser()$/;"	f	class:agg::svg::parser
~pixel_map	src/platform/mac/agg_mac_pmap.cpp	/^    pixel_map::~pixel_map()$/;"	f	class:agg::pixel_map
~pixel_map	src/platform/win32/agg_win32_bmp.cpp	/^    pixel_map::~pixel_map()$/;"	f	class:agg::pixel_map
~platform_specific	src/platform/AmigaOS/agg_platform_support.cpp	/^	platform_specific::~platform_specific()$/;"	f	class:agg::platform_specific
~platform_specific	src/platform/BeOS/agg_platform_support.cpp	/^                    ~platform_specific()$/;"	f	class:agg::platform_specific
~platform_specific	src/platform/X11/agg_platform_support.cpp	/^    platform_specific::~platform_specific()$/;"	f	class:agg::platform_specific
~platform_specific	src/platform/sdl/agg_platform_support.cpp	/^    platform_specific::~platform_specific()$/;"	f	class:agg::platform_specific
~platform_support	src/platform/AmigaOS/agg_platform_support.cpp	/^	platform_support::~platform_support()$/;"	f	class:agg::platform_support
~platform_support	src/platform/BeOS/agg_platform_support.cpp	/^    platform_support::~platform_support()$/;"	f	class:agg::platform_support
~platform_support	src/platform/X11/agg_platform_support.cpp	/^    platform_support::~platform_support()$/;"	f	class:agg::platform_support
~platform_support	src/platform/mac/agg_platform_support.cpp	/^    platform_support::~platform_support()$/;"	f	class:agg::platform_support
~platform_support	src/platform/sdl/agg_platform_support.cpp	/^    platform_support::~platform_support()$/;"	f	class:agg::platform_support
~platform_support	src/platform/win32/agg_platform_support.cpp	/^    platform_support::~platform_support()$/;"	f	class:agg::platform_support
~pod_array	include/agg_array.h	/^        ~pod_array() { pod_allocator<T>::deallocate(m_array, m_size); }$/;"	f	class:agg::pod_array
~pod_bvector	include/agg_array.h	/^    template<class T, unsigned S> pod_bvector<T, S>::~pod_bvector()$/;"	f	class:agg::pod_bvector
~pod_vector	include/agg_array.h	/^        ~pod_vector() { pod_allocator<T>::deallocate(m_array, m_capacity); }$/;"	f	class:agg::pod_vector
~polymorphic_renderer_solid_rgba8_base	examples/polymorphic_renderer.cpp	/^        virtual ~polymorphic_renderer_solid_rgba8_base() {}$/;"	f	class:agg::polymorphic_renderer_solid_rgba8_base
~rasterizer_cells_aa	include/agg_rasterizer_cells_aa.h	/^    rasterizer_cells_aa<Cell>::~rasterizer_cells_aa()$/;"	f	class:agg::rasterizer_cells_aa
~rendering_buffer_dynarow	include/agg_rendering_buffer_dynarow.h	/^        ~rendering_buffer_dynarow()$/;"	f	class:agg::rendering_buffer_dynarow
~scanline_cell_storage	include/agg_scanline_storage_aa.h	/^        ~scanline_cell_storage()$/;"	f	class:agg::scanline_cell_storage
~the_application	examples/aa_demo.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/aa_test.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/alpha_mask.cpp	/^    virtual ~the_application() $/;"	f	class:the_application
~the_application	examples/alpha_mask2.cpp	/^    ~the_application()$/;"	f	class:the_application
~the_application	examples/alpha_mask3.cpp	/^    ~the_application()$/;"	f	class:the_application
~the_application	examples/circles.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/compositing.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/distortions.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/gamma_ctrl.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/gradients.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image1.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image_alpha.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image_filters.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image_filters2.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image_fltr_graph.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/image_transforms.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/mol_view.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/pattern_fill.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~the_application	examples/simple_blur.cpp	/^    virtual ~the_application() $/;"	f	class:the_application
~the_application	examples/trans_polar.cpp	/^    virtual ~the_application()$/;"	f	class:the_application
~vertex_block_storage	include/agg_path_storage.h	/^    vertex_block_storage<T,S,P>::~vertex_block_storage()$/;"	f	class:agg::vertex_block_storage
